import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as o,a as n,b as s,e as c,d as i}from"./app-cdabc73c.js";const l="/assets/a51af8ada1135101e252271626669337-64bd3f4c.png",u={},r=i(`<h1 id="_47-接收网络包-上-如何搞明白合作伙伴让我们做什么" tabindex="-1"><a class="header-anchor" href="#_47-接收网络包-上-如何搞明白合作伙伴让我们做什么" aria-hidden="true">#</a> 47 | 接收网络包（上）：如何搞明白合作伙伴让我们做什么？</h1><p>前面两节，我们分析了发送网络包的整个过程。这一节，我们来解析接收网络包的过程。</p><p>如果说网络包的发送是从应用层开始，层层调用，一直到网卡驱动程序的话，网络包的结束过程，就是一个反过来的过程，我们不能从应用层的读取开始，而应该从网卡接收到一个网络包开始。我们用两节来解析这个过程，这一节我们从硬件网卡解析到 IP 层，下一节，我们从 IP 层解析到 Socket 层。</p><h2 id="设备驱动层" tabindex="-1"><a class="header-anchor" href="#设备驱动层" aria-hidden="true">#</a> 设备驱动层</h2><p>网卡作为一个硬件，接收到网络包，应该怎么通知操作系统，这个网络包到达了呢？咱们学习过输入输出设备和中断。没错，我们可以触发一个中断。但是这里有个问题，就是网络包的到来，往往是很难预期的。网络吞吐量比较大的时候，网络包的到达会十分频繁。这个时候，如果非常频繁地去触发中断，想想就觉得是个灾难。</p><p>比如说，CPU 正在做某个事情，一些网络包来了，触发了中断，CPU 停下手里的事情，去处理这些网络包，处理完毕按照中断处理的逻辑，应该回去继续处理其他事情。这个时候，另一些网络包又来了，又触发了中断，CPU 手里的事情还没捂热，又要停下来去处理网络包。能不能大家要来的一起来，把网络包好好处理一把，然后再回去集中处理其他事情呢？</p><p>网络包能不能一起来，这个我们没法儿控制，但是我们可以有一种机制，就是当一些网络包到来触发了中断，内核处理完这些网络包之后，我们可以先进入主动轮询 poll 网卡的方式，主动去接收到来的网络包。如果一直有，就一直处理，等处理告一段落，就返回干其他的事情。当再有下一批网络包到来的时候，再中断，再轮询 poll。这样就会大大减少中断的数量，提升网络处理的效率，这种处理方式我们称为 <strong>NAPI</strong>。</p><p>为了帮你了解设备驱动层的工作机制，我们还是以上一节发送网络包时的网卡 drivers/net/ethernet/intel/ixgb/<code>ixgb_main.c</code> 为例子，来进行解析。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">pci_driver</span> ixgb_driver <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>name     <span class="token operator">=</span> ixgb_driver_name<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>id_table <span class="token operator">=</span> ixgb_pci_tbl<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>probe    <span class="token operator">=</span> ixgb_probe<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>remove   <span class="token operator">=</span> ixgb_remove<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>err_handler <span class="token operator">=</span> <span class="token operator">&amp;</span>ixgb_err_handler
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span><span class="token string">&quot;Intel Corporation, &lt;linux.nics@intel.com&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span><span class="token string">&quot;Intel(R) PRO/10GbE Network Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">&quot;GPL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_VERSION</span><span class="token punctuation">(</span>DRV_VERSION<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * ixgb_init_module - Driver Registration Routine
 *
 * ixgb_init_module is the first routine called when the driver is
 * loaded. All it does is register with the PCI subsystem.
 **/</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> __init
<span class="token function">ixgb_init_module</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">&quot;%s - version %s\\n&quot;</span><span class="token punctuation">,</span> ixgb_driver_string<span class="token punctuation">,</span> ixgb_driver_version<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pr_info</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> ixgb_copyright<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">pci_register_driver</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ixgb_driver<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">module_init</span><span class="token punctuation">(</span>ixgb_init_module<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在网卡驱动程序初始化的时候，我们会调用 ixgb_init_module，注册一个驱动 ixgb_driver，并且调用它的 probe 函数 ixgb_probe。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">ixgb_probe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pci_dev</span> <span class="token operator">*</span>pdev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pci_device_id</span> <span class="token operator">*</span>ent<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>netdev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ixgb_adapter</span> <span class="token operator">*</span>adapter<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  netdev <span class="token operator">=</span> <span class="token function">alloc_etherdev</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ixgb_adapter</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SET_NETDEV_DEV</span><span class="token punctuation">(</span>netdev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pdev<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">pci_set_drvdata</span><span class="token punctuation">(</span>pdev<span class="token punctuation">,</span> netdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  adapter <span class="token operator">=</span> <span class="token function">netdev_priv</span><span class="token punctuation">(</span>netdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  adapter<span class="token operator">-&gt;</span>netdev <span class="token operator">=</span> netdev<span class="token punctuation">;</span>
  adapter<span class="token operator">-&gt;</span>pdev <span class="token operator">=</span> pdev<span class="token punctuation">;</span>
  adapter<span class="token operator">-&gt;</span>hw<span class="token punctuation">.</span>back <span class="token operator">=</span> adapter<span class="token punctuation">;</span>
  adapter<span class="token operator">-&gt;</span>msg_enable <span class="token operator">=</span> <span class="token function">netif_msg_init</span><span class="token punctuation">(</span>debug<span class="token punctuation">,</span> DEFAULT_MSG_ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>

  adapter<span class="token operator">-&gt;</span>hw<span class="token punctuation">.</span>hw_addr <span class="token operator">=</span> <span class="token function">pci_ioremap_bar</span><span class="token punctuation">(</span>pdev<span class="token punctuation">,</span> BAR_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  netdev<span class="token operator">-&gt;</span>netdev_ops <span class="token operator">=</span> <span class="token operator">&amp;</span>ixgb_netdev_ops<span class="token punctuation">;</span>
  <span class="token function">ixgb_set_ethtool_ops</span><span class="token punctuation">(</span>netdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  netdev<span class="token operator">-&gt;</span>watchdog_timeo <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> HZ<span class="token punctuation">;</span>
  <span class="token function">netif_napi_add</span><span class="token punctuation">(</span>netdev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>adapter<span class="token operator">-&gt;</span>napi<span class="token punctuation">,</span> ixgb_clean<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">strncpy</span><span class="token punctuation">(</span>netdev<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token function">pci_name</span><span class="token punctuation">(</span>pdev<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>netdev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  adapter<span class="token operator">-&gt;</span>bd_number <span class="token operator">=</span> cards_found<span class="token punctuation">;</span>
  adapter<span class="token operator">-&gt;</span>link_speed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  adapter<span class="token operator">-&gt;</span>link_duplex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ixgb_probe 中，我们会创建一个 struct net_device 表示这个网络设备，并且 netif_napi_add 函数为这个网络设备注册一个轮询 poll 函数 ixgb_clean，将来一旦出现网络包的时候，就是要通过它来轮询了。</p><p>当一个网卡被激活的时候，我们会调用函数 ixgb_open-&gt;ixgb_up，在这里面注册一个硬件的中断处理函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span>
<span class="token function">ixgb_up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ixgb_adapter</span> <span class="token operator">*</span>adapter<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>netdev <span class="token operator">=</span> adapter<span class="token operator">-&gt;</span>netdev<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    err <span class="token operator">=</span> <span class="token function">request_irq</span><span class="token punctuation">(</span>adapter<span class="token operator">-&gt;</span>pdev<span class="token operator">-&gt;</span>irq<span class="token punctuation">,</span> ixgb_intr<span class="token punctuation">,</span> irq_flags<span class="token punctuation">,</span>
                    netdev<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> netdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">/**
 * ixgb_intr - Interrupt Handler
 * @irq: interrupt number
 * @data: pointer to a network interface device structure
 **/</span>

<span class="token keyword">static</span> <span class="token class-name">irqreturn_t</span>
<span class="token function">ixgb_intr</span><span class="token punctuation">(</span><span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>netdev <span class="token operator">=</span> data<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ixgb_adapter</span> <span class="token operator">*</span>adapter <span class="token operator">=</span> <span class="token function">netdev_priv</span><span class="token punctuation">(</span>netdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ixgb_hw</span> <span class="token operator">*</span>hw <span class="token operator">=</span> <span class="token operator">&amp;</span>adapter<span class="token operator">-&gt;</span>hw<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">napi_schedule_prep</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>adapter<span class="token operator">-&gt;</span>napi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">IXGB_WRITE_REG</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>adapter<span class="token operator">-&gt;</span>hw<span class="token punctuation">,</span> IMC<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">__napi_schedule</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>adapter<span class="token operator">-&gt;</span>napi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> IRQ_HANDLED<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个网络包到来，触发了硬件中断，就会调用 ixgb_intr，这里面会调用 __napi_schedule。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * __napi_schedule - schedule for receive
 * @n: entry to schedule
 *
 * The entry&#39;s receive function will be scheduled to run.
 * Consider using __napi_schedule_irqoff() if hard irqs are masked.
 */</span>
<span class="token keyword">void</span> <span class="token function">__napi_schedule</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">napi_struct</span> <span class="token operator">*</span>n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span>

  <span class="token function">local_irq_save</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">____napi_schedule</span><span class="token punctuation">(</span><span class="token function">this_cpu_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>softnet_data<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">local_irq_restore</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">____napi_schedule</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">softnet_data</span> <span class="token operator">*</span>sd<span class="token punctuation">,</span>
             <span class="token keyword">struct</span> <span class="token class-name">napi_struct</span> <span class="token operator">*</span>napi<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>napi<span class="token operator">-&gt;</span>poll_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sd<span class="token operator">-&gt;</span>poll_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__raise_softirq_irqoff</span><span class="token punctuation">(</span>NET_RX_SOFTIRQ<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__napi_schedule</code> 是处于中断处理的关键部分，在他被调用的时候，中断是暂时关闭的，但是处理网络包是个复杂的过程，需要到延迟处理部分，所以 <code>____napi_schedule</code> 将当前设备放到 struct softnet_data 结构的 poll_list 里面，说明在延迟处理部分可以接着处理这个 poll_list 里面的网络设备。</p><p>然后 <code>____napi_schedule</code> 触发一个软中断 NET_RX_SOFTIRQ，通过软中断触发中断处理的延迟处理部分，也是常用的手段。</p><p>上一节，我们知道，软中断 NET_RX_SOFTIRQ 对应的中断处理函数是 net_rx_action。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __latent_entropy <span class="token keyword">void</span> <span class="token function">net_rx_action</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">softirq_action</span> <span class="token operator">*</span>h<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">softnet_data</span> <span class="token operator">*</span>sd <span class="token operator">=</span> <span class="token function">this_cpu_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>softnet_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">LIST_HEAD</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_splice_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sd<span class="token operator">-&gt;</span>poll_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">napi_struct</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    n <span class="token operator">=</span> <span class="token function">list_first_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">napi_struct</span><span class="token punctuation">,</span> poll_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    budget <span class="token operator">-=</span> <span class="token function">napi_poll</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>repoll<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 net_rx_action 中，会得到 struct softnet_data 结构，这个结构在发送的时候我们也遇到过。当时它的 output_queue 用于网络包的发送，这里的 poll_list 用于网络包的接收。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">softnet_data</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  poll_list<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">Qdisc</span>    <span class="token operator">*</span>output_queue<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">Qdisc</span>    <span class="token operator">*</span><span class="token operator">*</span>output_queue_tailp<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 net_rx_action 中，接下来是一个循环，在 poll_list 里面取出网络包到达的设备，然后调用 napi_poll 来轮询这些设备，napi_poll 会调用最初设备初始化的时候，注册的 poll 函数，对于 ixgb_driver，对应的函数是 ixgb_clean。</p><p>ixgb_clean 会调用 ixgb_clean_rx_irq。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> bool
<span class="token function">ixgb_clean_rx_irq</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ixgb_adapter</span> <span class="token operator">*</span>adapter<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>work_done<span class="token punctuation">,</span> <span class="token keyword">int</span> work_to_do<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">ixgb_desc_ring</span> <span class="token operator">*</span>rx_ring <span class="token operator">=</span> <span class="token operator">&amp;</span>adapter<span class="token operator">-&gt;</span>rx_ring<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>netdev <span class="token operator">=</span> adapter<span class="token operator">-&gt;</span>netdev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">pci_dev</span> <span class="token operator">*</span>pdev <span class="token operator">=</span> adapter<span class="token operator">-&gt;</span>pdev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ixgb_rx_desc</span> <span class="token operator">*</span>rx_desc<span class="token punctuation">,</span> <span class="token operator">*</span>next_rxd<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ixgb_buffer</span> <span class="token operator">*</span>buffer_info<span class="token punctuation">,</span> <span class="token operator">*</span>next_buffer<span class="token punctuation">,</span> <span class="token operator">*</span>next2_buffer<span class="token punctuation">;</span>
  u32 length<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
  <span class="token keyword">int</span> cleaned_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  bool cleaned <span class="token operator">=</span> false<span class="token punctuation">;</span>

  i <span class="token operator">=</span> rx_ring<span class="token operator">-&gt;</span>next_to_clean<span class="token punctuation">;</span>
  rx_desc <span class="token operator">=</span> <span class="token function">IXGB_RX_DESC</span><span class="token punctuation">(</span><span class="token operator">*</span>rx_ring<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  buffer_info <span class="token operator">=</span> <span class="token operator">&amp;</span>rx_ring<span class="token operator">-&gt;</span>buffer_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>rx_desc<span class="token operator">-&gt;</span>status <span class="token operator">&amp;</span> IXGB_RX_DESC_STATUS_DD<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">;</span>
    u8 status<span class="token punctuation">;</span>

    status <span class="token operator">=</span> rx_desc<span class="token operator">-&gt;</span>status<span class="token punctuation">;</span>
    skb <span class="token operator">=</span> buffer_info<span class="token operator">-&gt;</span>skb<span class="token punctuation">;</span>
    buffer_info<span class="token operator">-&gt;</span>skb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">prefetch</span><span class="token punctuation">(</span>skb<span class="token operator">-&gt;</span>data <span class="token operator">-</span> NET_IP_ALIGN<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">==</span> rx_ring<span class="token operator">-&gt;</span>count<span class="token punctuation">)</span>
      i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    next_rxd <span class="token operator">=</span> <span class="token function">IXGB_RX_DESC</span><span class="token punctuation">(</span><span class="token operator">*</span>rx_ring<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">prefetch</span><span class="token punctuation">(</span>next_rxd<span class="token punctuation">)</span><span class="token punctuation">;</span>

    j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> rx_ring<span class="token operator">-&gt;</span>count<span class="token punctuation">)</span>
      j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    next2_buffer <span class="token operator">=</span> <span class="token operator">&amp;</span>rx_ring<span class="token operator">-&gt;</span>buffer_info<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">prefetch</span><span class="token punctuation">(</span>next2_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

    next_buffer <span class="token operator">=</span> <span class="token operator">&amp;</span>rx_ring<span class="token operator">-&gt;</span>buffer_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    length <span class="token operator">=</span> <span class="token function">le16_to_cpu</span><span class="token punctuation">(</span>rx_desc<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rx_desc<span class="token operator">-&gt;</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">ixgb_check_copybreak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>adapter<span class="token operator">-&gt;</span>napi<span class="token punctuation">,</span> buffer_info<span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token operator">&amp;</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Good Receive */</span>
    <span class="token function">skb_put</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Receive Checksum Offload */</span>
    <span class="token function">ixgb_rx_checksum</span><span class="token punctuation">(</span>adapter<span class="token punctuation">,</span> rx_desc<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>

    skb<span class="token operator">-&gt;</span>protocol <span class="token operator">=</span> <span class="token function">eth_type_trans</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> netdev<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">netif_receive_skb</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* use prefetched values */</span>
    rx_desc <span class="token operator">=</span> next_rxd<span class="token punctuation">;</span>
    buffer_info <span class="token operator">=</span> next_buffer<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  rx_ring<span class="token operator">-&gt;</span>next_to_clean <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在网络设备的驱动层，有一个用于接收网络包的 rx_ring。它是一个环，从网卡硬件接收的包会放在这个环里面。这个环里面的 buffer_info[]是一个数组，存放的是网络包的内容。i 和 j 是这个数组的下标，在 ixgb_clean_rx_irq 里面的 while 循环中，依次处理环里面的数据。在这里面，我们看到了 i 和 j 加一之后，如果超过了数组的大小，就跳回下标 0，就说明这是一个环。</p><p>ixgb_check_copybreak 函数将 buffer_info 里面的内容，拷贝到 struct sk_buff *skb，从而可以作为一个网络包进行后续的处理，然后调用 netif_receive_skb。</p><h2 id="网络协议栈的二层逻辑" tabindex="-1"><a class="header-anchor" href="#网络协议栈的二层逻辑" aria-hidden="true">#</a> 网络协议栈的二层逻辑</h2><p>从 netif_receive_skb 函数开始，我们就进入了内核的网络协议栈。</p><p>接下来的调用链为：netif_receive_skb-&gt;netif_receive_skb_internal-&gt;<code>__netif_receive_skb</code>-&gt;<code>__netif_receive_skb_core</code>。</p><p>在 __netif_receive_skb_core 中，我们先是处理了二层的一些逻辑。例如，对于 VLAN 的处理，接下来要想办法交给第三层。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__netif_receive_skb_core</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> bool pfmemalloc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">packet_type</span> <span class="token operator">*</span>ptype<span class="token punctuation">,</span> <span class="token operator">*</span>pt_prev<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  type <span class="token operator">=</span> skb<span class="token operator">-&gt;</span>protocol<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">deliver_ptype_list_skb</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pt_prev<span class="token punctuation">,</span> orig_dev<span class="token punctuation">,</span> type<span class="token punctuation">,</span>
             <span class="token operator">&amp;</span>orig_dev<span class="token operator">-&gt;</span>ptype_specific<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pt_prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">=</span> pt_prev<span class="token operator">-&gt;</span><span class="token function">func</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> skb<span class="token operator">-&gt;</span>dev<span class="token punctuation">,</span> pt_prev<span class="token punctuation">,</span> orig_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">deliver_ptype_list_skb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">packet_type</span> <span class="token operator">*</span><span class="token operator">*</span>pt<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>orig_dev<span class="token punctuation">,</span>
            __be16 type<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>ptype_list<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">packet_type</span> <span class="token operator">*</span>ptype<span class="token punctuation">,</span> <span class="token operator">*</span>pt_prev <span class="token operator">=</span> <span class="token operator">*</span>pt<span class="token punctuation">;</span>

  <span class="token function">list_for_each_entry_rcu</span><span class="token punctuation">(</span>ptype<span class="token punctuation">,</span> ptype_list<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptype<span class="token operator">-&gt;</span>type <span class="token operator">!=</span> type<span class="token punctuation">)</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pt_prev<span class="token punctuation">)</span>
      <span class="token function">deliver_skb</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> pt_prev<span class="token punctuation">,</span> orig_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pt_prev <span class="token operator">=</span> ptype<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">*</span>pt <span class="token operator">=</span> pt_prev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在网络包 struct sk_buff 里面，二层的头里面有一个 protocol，表示里面一层，也即三层是什么协议。deliver_ptype_list_skb 在一个协议列表中逐个匹配。如果能够匹配到，就返回。</p><p>这些协议的注册在网络协议栈初始化的时候， inet_init 函数调用 dev_add_pack(&amp;ip_packet_type)，添加 IP 协议。协议被放在一个链表里面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">dev_add_pack</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">packet_type</span> <span class="token operator">*</span>pt<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token function">ptype_head</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_add_rcu</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pt<span class="token operator">-&gt;</span>list<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span><span class="token function">ptype_head</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">packet_type</span> <span class="token operator">*</span>pt<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pt<span class="token operator">-&gt;</span>type <span class="token operator">==</span> <span class="token function">htons</span><span class="token punctuation">(</span>ETH_P_ALL<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> pt<span class="token operator">-&gt;</span>dev <span class="token operator">?</span> <span class="token operator">&amp;</span>pt<span class="token operator">-&gt;</span>dev<span class="token operator">-&gt;</span>ptype_all <span class="token operator">:</span> <span class="token operator">&amp;</span>ptype_all<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> pt<span class="token operator">-&gt;</span>dev <span class="token operator">?</span> <span class="token operator">&amp;</span>pt<span class="token operator">-&gt;</span>dev<span class="token operator">-&gt;</span>ptype_specific <span class="token operator">:</span> <span class="token operator">&amp;</span>ptype_base<span class="token punctuation">[</span><span class="token function">ntohs</span><span class="token punctuation">(</span>pt<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span> PTYPE_HASH_MASK<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设这个时候的网络包是一个 IP 包，则在这个链表里面一定能够找到 ip_packet_type，在 __netif_receive_skb_core 中会调用 ip_packet_type 的 func 函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">packet_type</span> ip_packet_type __read_mostly <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token function">cpu_to_be16</span><span class="token punctuation">(</span>ETH_P_IP<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>func <span class="token operator">=</span> ip_rcv<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的定义我们可以看出，接下来，ip_rcv 会被调用。</p><h2 id="网络协议栈的-ip-层" tabindex="-1"><a class="header-anchor" href="#网络协议栈的-ip-层" aria-hidden="true">#</a> 网络协议栈的 IP 层</h2><p>从 ip_rcv 函数开始，我们的处理逻辑就从二层到了三层，IP 层。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ip_rcv</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">packet_type</span> <span class="token operator">*</span>pt<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>orig_dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iphdr</span> <span class="token operator">*</span>iph<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">;</span>
  u32 len<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  net <span class="token operator">=</span> <span class="token function">dev_net</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  iph <span class="token operator">=</span> <span class="token function">ip_hdr</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
  len <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>iph<span class="token operator">-&gt;</span>tot_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  skb<span class="token operator">-&gt;</span>transport_header <span class="token operator">=</span> skb<span class="token operator">-&gt;</span>network_header <span class="token operator">+</span> iph<span class="token operator">-&gt;</span>ihl<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token function">NF_HOOK</span><span class="token punctuation">(</span>NFPROTO_IPV4<span class="token punctuation">,</span> NF_INET_PRE_ROUTING<span class="token punctuation">,</span>
           net<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> skb<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
           ip_rcv_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ip_rcv 中，得到 IP 头，然后又遇到了我们见过多次的 NF_HOOK，这次因为是接收网络包，第一个 hook 点是 NF_INET_PRE_ROUTING，也就是 iptables 的 PREROUTING 链。如果里面有规则，则执行规则，然后调用 ip_rcv_finish。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ip_rcv_finish</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iphdr</span> <span class="token operator">*</span>iph <span class="token operator">=</span> <span class="token function">ip_hdr</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev <span class="token operator">=</span> skb<span class="token operator">-&gt;</span>dev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">rtable</span> <span class="token operator">*</span>rt<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  rt <span class="token operator">=</span> <span class="token function">skb_rtable</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token function">dst_input</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dst_input</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">skb_dst</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">input</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ip_rcv_finish 得到网络包对应的路由表，然后调用 dst_input，在 dst_input 中，调用的是 struct rtable 的成员的 dst 的 input 函数。在 rt_dst_alloc 中，我们可以看到，input 函数指向的是 ip_local_deliver。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ip_local_deliver</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/*
   *  Reassemble IP fragments.
   */</span>
  <span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net <span class="token operator">=</span> <span class="token function">dev_net</span><span class="token punctuation">(</span>skb<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ip_is_fragment</span><span class="token punctuation">(</span><span class="token function">ip_hdr</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ip_defrag</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> IP_DEFRAG_LOCAL_DELIVER<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">NF_HOOK</span><span class="token punctuation">(</span>NFPROTO_IPV4<span class="token punctuation">,</span> NF_INET_LOCAL_IN<span class="token punctuation">,</span>
           net<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> skb<span class="token punctuation">,</span> skb<span class="token operator">-&gt;</span>dev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
           ip_local_deliver_finish<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ip_local_deliver 函数中，如果 IP 层进行了分段，则进行重新的组合。接下来就是我们熟悉的 NF_HOOK。hook 点在 NF_INET_LOCAL_IN，对应 iptables 里面的 INPUT 链。在经过 iptables 规则处理完毕后，我们调用 ip_local_deliver_finish。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ip_local_deliver_finish</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">__skb_pull</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token function">skb_network_header_len</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> protocol <span class="token operator">=</span> <span class="token function">ip_hdr</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>protocol<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">net_protocol</span> <span class="token operator">*</span>ipprot<span class="token punctuation">;</span>

  ipprot <span class="token operator">=</span> <span class="token function">rcu_dereference</span><span class="token punctuation">(</span>inet_protos<span class="token punctuation">[</span>protocol<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ipprot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    ret <span class="token operator">=</span> ipprot<span class="token operator">-&gt;</span><span class="token function">handler</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 IP 头中，有一个字段 protocol 用于指定里面一层的协议，在这里应该是 TCP 协议。于是，从 inet_protos 数组中，找出 TCP 协议对应的处理函数。这个数组的定义如下，里面的内容是 struct net_protocol。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">net_protocol</span> __rcu <span class="token operator">*</span>inet_protos<span class="token punctuation">[</span>MAX_INET_PROTOS<span class="token punctuation">]</span> __read_mostly<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">inet_add_protocol</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">net_protocol</span> <span class="token operator">*</span>prot<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> protocol<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">cmpxchg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">net_protocol</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>inet_protos<span class="token punctuation">[</span>protocol<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token constant">NULL</span><span class="token punctuation">,</span> prot<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">inet_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inet_add_protocol</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>udp_protocol<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">pr_crit</span><span class="token punctuation">(</span><span class="token string">&quot;%s: Cannot add UDP protocol\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">inet_add_protocol</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tcp_protocol<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">pr_crit</span><span class="token punctuation">(</span><span class="token string">&quot;%s: Cannot add TCP protocol\\n&quot;</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">net_protocol</span> tcp_protocol <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>early_demux  <span class="token operator">=</span>  tcp_v4_early_demux<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>early_demux_handler <span class="token operator">=</span>  tcp_v4_early_demux<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>handler  <span class="token operator">=</span>  tcp_v4_rcv<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>err_handler  <span class="token operator">=</span>  tcp_v4_err<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>no_policy  <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>netns_ok  <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>icmp_strict_tag_validation <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">net_protocol</span> udp_protocol <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>early_demux <span class="token operator">=</span>  udp_v4_early_demux<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>early_demux_handler <span class="token operator">=</span>  udp_v4_early_demux<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>handler <span class="token operator">=</span>  udp_rcv<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>err_handler <span class="token operator">=</span>  udp_err<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>no_policy <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>netns_ok <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在系统初始化的时候，网络协议栈的初始化调用的是 inet_init，它会调用 inet_add_protocol，将 TCP 协议对应的处理函数 tcp_protocol、UDP 协议对应的处理函数 udp_protocol，放到 inet_protos 数组中。</p><p>在上面的网络包的接收过程中，会取出 TCP 协议对应的处理函数 tcp_protocol，然后调用 handler 函数，也即 tcp_v4_rcv 函数。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>这一节我们讲了接收网络包的上半部分，分以下几个层次。</p><ul><li>硬件网卡接收到网络包之后，通过 DMA 技术，将网络包放入 Ring Buffer。</li><li>硬件网卡通过中断通知 CPU 新的网络包的到来。</li><li>网卡驱动程序会注册中断处理函数 ixgb_intr。</li><li>中断处理函数处理完需要暂时屏蔽中断的核心流程之后，通过软中断 NET_RX_SOFTIRQ 触发接下来的处理过程。</li><li>NET_RX_SOFTIRQ 软中断处理函数 net_rx_action，net_rx_action 会调用 napi_poll，进而调用 ixgb_clean_rx_irq，从 Ring Buffer 中读取数据到内核 struct sk_buff。</li><li>调用 netif_receive_skb 进入内核网络协议栈，进行一些关于 VLAN 的二层逻辑处理后，调用 ip_rcv 进入三层 IP 层。</li><li>在 IP 层，会处理 iptables 规则，然后调用 ip_local_deliver，交给更上层 TCP 层。</li><li>在 TCP 层调用 tcp_v4_rcv。</li></ul><img src="`+l+'" alt="img" style="zoom:25%;"><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>我们没有仔细分析对于二层 VLAN 的处理，请你研究一下 VLAN 的原理，然后在代码中看一下对于 VLAN 的处理过程，这是一项重要的网络基础知识。</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>1\\老师能否详细写一点关于 smp 相关的知识，比如多 cpu 如何处理网卡过来的中断，多 cpu 如何进程调度，多 cpu 又是如何解决共享变量访问冲突的问题，对这一部分知识点一直比较模糊。2\\和Cyril提到的问题一样，老师能否介绍下smp，网卡多队列的收包后，进入内核的处理流程。</p><p>老师 一直有个疑问 网络报数据从进入内存后在cpu的参与下进行了几次内存拷贝呢？<br> 目前我的理解是两次：<br> 1\\DMA将数据从网卡接收到内存的网卡环形缓冲区后，cpu进行第一次的内存数据拷贝，生成sk_buff,<br> 2\\内核处理完成后交给应用层，cpu又会经过一次拷贝，获取到用户空间表示的数据。<br> 1\\同理，发送的时候，cpu将用户空间数据拷贝到内核空间分配sk_buff,<br> 2\\后续设备驱动层cpu将sk_buff的数据拷贝到网卡的环形发送缓冲区，然后发起dma传输指令，dma将数据从内存发送到网卡。<br> 不知道这个过程我理解的对不对，请老师指正。以前总是理解为一次的用户空间和内核空间的数据拷贝，后续cpu发起dma传输指令，dma直接将sk_buff的数据发送到网卡，现在根据老师讲解，这样似乎有问题。<br> 作者回复: 对的</p><p>老师我想问一下，因为我看网络发送和接收两章iptables规则都是在内核中IP层生效的，像配置和端口相关的iptables规则是在哪里生效的？<br> 作者回复: 也是在内核代码这里的。</p><p>VLAN 的原理有些忘了，希望老师可以在答疑中给我们答疑一下。<br> 作者回复: VLAN网络协议里面有讲</p>',63),k={href:"https://baijiahao.baidu.com/s?id=1628398215665219628&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1);function v(_,b){const a=t("ExternalLinkIcon");return e(),o("div",null,[r,n("p",null,[n("a",k,[s("https://baijiahao.baidu.com/s?id=1628398215665219628&wfr=spider&for=pc"),c(a)]),d,s(" 该文章很好的讲解了VLAN的基本原理和各种使用方式，推荐给大家。")])])}const g=p(u,[["render",v],["__file","M47-接收网络包（上）.html.vue"]]);export{g as default};
