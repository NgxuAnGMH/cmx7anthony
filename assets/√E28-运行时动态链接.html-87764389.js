import{_ as t}from"./image-20220708140544748-ee185694.js";import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as r,a as n,b as s,d as o,e}from"./app-063765ff.js";const i="/assets/09e2f8a04f1d221ef5ee50c918e6b9cf-8e46d7e3.jpg",d="/assets/26a3afb43b5210f350d1c2cca24ef7c3-a2d75bb9.png",u={},k=e('<h1 id="√28-程序可以在运行时进行链接吗" tabindex="-1"><a class="header-anchor" href="#√28-程序可以在运行时进行链接吗" aria-hidden="true">#</a> √28｜程序可以在运行时进行链接吗？</h1><p>你好，我是于航。</p><p>在上一讲中，我介绍了有关 Linux 下静态链接的内容。而这一讲，我们将继续程序的“链接”之旅，来看看我之前提到的另外两种链接类型，加载时链接与运行时链接。</p><p>实际上，<em>加载时链接</em>与<em>运行时链接</em>均可归为动态链接，只是在这两种方式中，程序进行链接的具体时刻有所不同。其中，加载时链接发生在程序代码<strong>被真正执行之前</strong>；而运行时链接则可发生在程序<strong>运行过程中的任意时刻</strong>。</p><h2 id="为什么要使用动态链接" tabindex="-1"><a class="header-anchor" href="#为什么要使用动态链接" aria-hidden="true">#</a> 为什么要使用动态链接？</h2><p>在上一讲中，我已经简单介绍了静态链接与动态链接两者的区别。其实，动态链接技术出现的最重要目的，便是为了解决静态链接具有的一些明显缺点。</p><ul><li><p>**试想，假设一个应用程序依赖于<em>多个第三方模块</em>提供的函数实现，而这些模块均以<em>静态库</em>（包含有多个目标文件）的方式提供。**那么，每次想要使用它们的最新版本时，我们都需要显式地将程序与它们重新进行链接。对于大多数普通的应用使用者来说，这个过程所花费的成本当然是无法接受的。</p></li><li><p>**另外，使用完全静态链接也会导致那些本可以被多次重用的通用功能函数，无法被统一“提取出来”，这便会导致程序的二进制可执行文件体积变大。**并且，这些通用代码的副本会随着多个进程的运行，被多次加载到内存中，而这也极大地浪费了宝贵的内存资源。而动态链接技术的出现，便可以解决上述这些问题。</p></li></ul><p>能够使用动态链接加载的库被称为==“共享库（Shared Library）”==。在 Linux 中，这类库文件通常以 <mark>“.so”</mark> 后缀结尾。在深入介绍动态链接的基本原理之前，我们先来看看如何在真实项目中使用它。</p><img src="'+t+'" alt="image-20220708140544748" style="zoom:25%;"><h2 id="使用共享库-shared" tabindex="-1"><a class="header-anchor" href="#使用共享库-shared" aria-hidden="true">#</a> 使用共享库（-shared）</h2><p>回顾 25 讲 中的内容，我们能够知道，**<code>动态库</code>本身也是 <code>ELF</code> 格式的<code>一种具体文件类型</code>，它对应着 <code>elf.h</code> 中的宏常量 <code>ET_DYN</code>。**接下来，我仍以上一讲中的两段代码为例，来带你看看如何在实际项目中使用动态库。</p><p>这里，我们将把 sum.c 文件编译成动态库，并让 main.c 对应的应用程序使用。整个过程可以分为如下几步：</p><p>1.使用命令 <mark>gcc sum.c -shared -fPIC -o libsum.so</mark> 将文件 <code>sum.c</code> 编译成名为 <code>libsum.so</code> 的动态库文件。这一步中使用的</p><ul><li>参数 “<code>-shared</code>” 表明创建一个<mark>动态库</mark>；</li><li>参数 “<code>-fPIC</code>” 表明生成“<mark>位置无关代码</mark>”。</li><li>关于这个选项的详细用途，我会稍后为你介绍。</li></ul><p>2.使用命令 <mark>gcc -o main main.c -lsum -L.</mark> 编译应用程序。这里我们将 <code>main.c</code> 与第一步生成的 <code>libsum.so</code> 共享库放在一起编译。命令中，</p>',15),m=n("code",null,"-L.",-1),h=n("em",null,"为编译器指定更多的共享库查找目录",-1),g={href:"http://libsum.so",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"-l",-1),f=n("em",null,"指定需要参与编译的共享库",-1),b={href:"http://libsum.so",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[s("3.使用命令 "),n("mark",null,"export LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH"),s(" 设置"),n("em",null,"动态链接器"),s("在查找相关动态库时的位置。顾名思义，"),n("em",null,"动态链接器"),s("是一段在程序运行时，用于帮助其查找所需共享库的代码。它在查找指定共享库文件时，会按照一定顺序，从多个不同位置进行查找。而这里通过 LD_LIBRARY_PATH 环境变量指定的位置，便是其中一个。")],-1),T=n("p",null,[s("4.使用命令 "),n("mark",null,"./main"),s(" 运行程序。")],-1),L={href:"https://en.wikipedia.org/wiki/Rpath",target:"_blank",rel:"noopener noreferrer"},x={href:"https://man7.org/linux/man-pages/man8/ldconfig.8.html",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"将动态库所在路径嵌入到可执行文件",-1),P=n("strong",null,"将共享库安装到当前系统可访问的全局环境中",-1),A=e('<p>而为了让共享库真正地做到“<strong>可以被多个进程共享</strong>”，我们便需要让它的代码成为“<strong>位置无关代码</strong>”。下面我们来看看这个概念。</p><h2 id="位置无关代码-fpic" tabindex="-1"><a class="header-anchor" href="#位置无关代码-fpic" aria-hidden="true">#</a> 位置无关代码（-fPIC）</h2><p>位置无关代码（Position Independent Code，PIC）是<strong>一类特殊的机器代码</strong>，这些代码在使用时，可以被放置在<strong>每个进程 VAS 中的任意位置</strong>，而无需<mark>链接器</mark>对它内部引用的地址进行重定位。大多数现代 C 编译器在编译源代码时，均会默认产生这种 PIC 代码，而无需用户显式指定。当然，为了以防万一，你也可以通过添加 “<code>-fPIC</code>” 等参数的方式来明确指出。</p><p>通常来说，我们可以将模块（可以理解为独立的应用程序，或共享库）之间的数据引用分为四种方式：</p><ol><li><p>模块内部的函数调用；</p></li><li><p>模块内部的数据访问；</p></li><li><p>模块之间的函数调用；</p></li><li><p>模块之间的数据访问。</p></li></ol><p>其中，<mark>模块内部的函数调用</mark>在大多数情况下可以直接以 <code>PC-relative</code> 的寻址方式进行，<strong>因此它并不依赖于目标函数在整个进程 VAS 内的绝对地址。</strong></p><p>而对于<mark>模块内部的数据访问</mark>，由于编译器在生成模块代码时，其 <code>.data</code> 与 <code>.text</code> 两个 Section 之间的<strong>相对位置是固定的</strong>，数据的访问也可以使用稳定的相对地址进行。</p><blockquote><p>总的来看，<em>发生在模块内部的</em>数据或函数资源引用，都不会因为模块代码被加载到进程 VAS 的不同地址而受到影响。</p></blockquote><p><em>但对于不同模块之间来说</em>，事情就变得复杂了起来。</p><p>来看一个简单的例子。假设有一个共享库 M，它在内部的某个函数需要引用由应用程序定义的某个全局变量。而此时，程序 A 与 B 都想使用 M 中的这个函数。但相关的<mark>共享库代码（引用处）<mark>以及</mark>程序代码（被引用处）</mark>，<strong>两者在进程 VAS 中的具体加载位置都并不确定</strong>。因此，在大多数情况下，<strong><code>（A与B）两个程序</code>对 M 中<code>该变量引用地址</code>的重定位修改值<code>也并不相同</code></strong>。而这便会导致它们无法真正地共享同一份物理内存中模块 M 的代码。</p><p><mark>PIC（位置无关代码）</mark> 的出现使得共享库代码可以做到<strong>真正地被多个进程复用</strong>，它利用了一个很简单的思想，即**“将易变的部分抽离到进程独享的可修改内存中”**。而为了做到这一点，<mark>编译器</mark>需要为<mark>各个模块</mark>添加<mark>额外的 Section 结构</mark>，这就是我接下来要讲的“<mark>全局偏移表</mark>”。</p><h2 id="全局偏移表got" tabindex="-1"><a class="header-anchor" href="#全局偏移表got" aria-hidden="true">#</a> 全局偏移表GOT</h2><p><mark>全局偏移表（Global Offset Table，GOT）<mark>是位于</mark><strong>每个模块的 Data Segment</strong> 起始位置处</mark>的一个特殊表结构，其内部的每个表项中都存放有一个<mark>地址信息</mark>。而这些地址便分别对应于<mark>被当前模块引用的外部函数</mark>或<mark>变量在进程 VAS 中的实际地址</mark>。</p><p><strong>模块在被编译时</strong>，其 Text Segment 与 GOT 之间的相对距离是能够计算出来的。因此，<mark>编译器</mark>可以利用这一点，<strong>来让代码直接引用 GOT 中的某个表项</strong>。同时，编译器还会<strong>为这些表项生成相应的重定位记录</strong>。这样，当程序被加载进内存时，<mark>动态链接器</mark>就可以根据实际情况，通过修正 GOT 表项中的值，来做到间接修正代码中对应符号的实际引用地址。你可以通过下图来直观地感受这个流程：</p><img src="'+i+'" alt="img" style="zoom:25%;"><p>但需要注意的是，<strong><code>并非所有</code>编译器都会通过 GOT 来间接引用模块使用到的所有全局变量</strong>。为了优化程序在某些特殊场景下的性能，编译器可能还会采用 <code>Copy Relocation</code> 等方式，来实现同样的效果。但对于外部函数的调用来说，GOT 在整个过程中仍然扮演着十分重要的角色。</p><h2 id="过程链接表plt-加速启动-延迟绑定" tabindex="-1"><a class="header-anchor" href="#过程链接表plt-加速启动-延迟绑定" aria-hidden="true">#</a> 过程链接表PLT/加速启动/延迟绑定</h2><p>虽然我们可以让<mark>动态链接器</mark>在程序加载时，将其代码中使用到的所有外部符号地址，更新在<mark>相应的 GOT 表项</mark>中，但当程序依赖的外部符号越来越多时，重定位的成本也会越来越高。而这便会导致程序初次运行时的“启动延迟”逐渐变大，甚至影响到程序正常功能的运作。为了解决这个问题，编译器为模块另外添加了名为“<mark><strong>过程链接表</strong>（Procedure Linkage Table，PLT）</mark>”的 <mark>Section 结构</mark>。<strong>该表将协同 GOT，一起进行针对函数符号地址的“延迟绑定”</strong>。</p><p>PLT 是位于 <mark>Text Segment</mark> 中的一个表结构，其内部同样由众多表项组成。每个表项中都有着<strong>一段特殊的机器代码，用于完成相应任务</strong>。</p><ul><li>其中，PLT[0]（即 PLT 中的第一个表项，其他写法依此类推）较为特殊，它内部存放的代码<strong>专门用于调用动态链接器</strong>。</li><li>而其他表项中则依次存放着，<strong>用于完成用户函数调用过程的相关代码</strong>。这些表项的地址将被程序中的 <mark>call 指令</mark>直接使用。</li></ul><p>除此之外，在 ELF 文件中，GOT 对应的整个 Section 实际上被划分为更细致的 <mark>.got</mark> 与 <mark>.got.plt</mark> 两个部分。其中，</p><ul><li><p><code>.got</code> 前者主要用于<strong>保存相关全局变量的地址信息</strong>；</p></li><li><p><code>.got.plt</code> 而后者则主要参与到<strong>函数符号的延迟绑定过程</strong>中。</p></li><li><p><code>.got.plt</code> 中的前三个表项具有特殊意义，它们保存的具体内容描述如下：</p><ol><li><p>第一个表项中保存的是 <mark>.dynamic 的地址</mark>。这个 Section 中保存了<mark>动态链接器</mark>需要使用的一些信息；</p></li><li><p>第二个表项中保存的是<mark>当前模块的描述符 ID</mark>；</p><ol start="3"><li><p>第三个表项中保存的是<mark>函数 _dl_runtime_resolve 的地址</mark>。</p><p>该函数由<strong>操作系统的运行时环境</strong>提供，它将参与到 <strong>GOT 的运行时重定位过程</strong>中。</p></li></ol></li></ol></li></ul><p>接下来，我们详细看看延迟绑定的具体执行过程。这里，我将以上面“使用共享库”小节中，共享库里 sum 函数的调用过程为例来进行介绍。你可以先看看下面的图片，对整体流程有个大致的感知，然后跟我具体来看每个步骤。</p><img src="'+d+'" alt="img" style="zoom:15%;"><p>sum 函数的初次调用过程可以分为四步：</p><ol><li><p>程序通过 call 指令，调用对应于 sum 函数的 PLT(过程链接表) 表项中的代码；</p></li><li><p>该表项中的第一行代码（位于 0x400560）会通过 .got.plt 的第四个表项中的值进行间接跳转。该表项对应于函数 sum 的真实地址，但在第一次访问时，其值为对应 PLT 表项中第二条指令的地址（即 0x400566）；</p></li><li><p>push 指令（位于 0x400566）将 sum 函数的 ID 压入栈中。通过 jmp 指令（位于 0x40056b），程序跳转到 PLT[0]；</p></li><li><p>push 指令（位于 0x400550）将 GOT[1] 中存放的模块描述符 ID 压入栈中，然后通过 jmp 指令（位于 0x400556）跳转到 GOT[2] 中存放的 _dl_runtime_resolve 函数的所在地址。该函数会使用当前存放于栈上的两个参数，来完成 sum 函数在 GOT 中的重定位。最后，它会将执行流程重新转移至 sum 函数内部。</p></li></ol><p>至此，sum 函数的第一次执行便结束了。<strong>而在经过上述这一系列步骤后，sum 函数在整个进程 VAS 中的真实地址，便已经被更新到了对应的 GOT 表项中</strong>。因此，当它被再次访问时，程序仅通过以下这两个步骤便可完成调用：</p><ol><li><p>程序通过 call 指令调用 sum 函数对应 PLT 表项中的第一行代码（位于 0x400560）；</p></li><li><p>该行 jmp 指令通过 sum 函数在 GOT 对应表项中已经修正的地址，间接跳转到该函数的第一行代码。</p></li></ol><p><strong>以上便是 sum 函数初次进行地址延迟绑定，以及再次访问时的整体流程</strong>。到这里，我已经为你介绍了动态链接的基本实现方式，下面我们来看看基于此进行的加载时链接与运行时链接这两者的主要区别。</p><h2 id="加载时链接" tabindex="-1"><a class="header-anchor" href="#加载时链接" aria-hidden="true">#</a> 加载时链接</h2><p>实际上，加载时链接作为动态链接的一种具体类型，便是基于我上面介绍的 <code>GOT</code> 与 <code>PLT</code> 两个表结构进行的。它的一个最主要特征是，<strong>动态链接器进行的符号重定位过程发生在<code>程序代码被真正执行之前</code></strong>。而为了做到这一点，操作系统执行应用程序的具体步骤也发生了改变。</p><p>操作系统内核在将应用程序装载到内存后，会根据其具体 ELF 类型的不同，来选择不同的处理方式。</p>',32),I=n("li",null,[s("对于采用"),n("em",null,"完全静态链接"),s("的可执行文件来说，内核会将控制权直接转移给应用程序，并执行其 Text Segment 中的入口代码。")],-1),S=n("li",null,[s("而对于使用了"),n("em",null,"动态链接"),s("的可执行文件来说，"),n("strong",null,"在执行程序代码前"),s("，")],-1),O=n("code",null,".interp",-1),G={href:"http://ld.so",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,[n("mark",null,"动态链接器"),s("在执行过程中，会通过其自身 "),n("code",null,".dynamic"),s(" 中记录的信息，来完成对自己的重定位工作。 "),n("ul",null,[n("li",null,"接着，通过访问应用程序的 .dynamic，动态链接器可以获得它依赖的所有外部共享库，并在此基础之上完成对整个程序的动态链接过程。")])],-1),R=e(`<h2 id="运行时链接" tabindex="-1"><a class="header-anchor" href="#运行时链接" aria-hidden="true">#</a> 运行时链接</h2><p>顾名思义，运行时链接即<strong>符号的重定位发生在程序的运行过程中</strong>。这种方式有时也被称为“<strong>动态载入</strong>”或“<strong>运行时加载</strong>”，它的基本原理与正常的动态链接完全一致，只是<strong>链接的发生过程被推迟到了程序运行时</strong>。通过这种方式，程序可以自由选择想要加载的共享库模块，并在不使用时及时卸载，程序的模块化组织变得更加灵活。</p><p>运行时链接主要通过由<mark>动态链接器</mark>提供的四个 API，即 <code>dlopen</code>、<code>dlsym</code>、<code>dlerror</code>，以及 <code>dlclose</code> 来实现。来看一个简单的例子：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dlfcn.h&gt;</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">cos_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">cos_t</span> cosine<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>error<span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> handle <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span><span class="token string">&quot;libm.so.6&quot;</span><span class="token punctuation">,</span> RTLD_LAZY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cosine <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">cos_t</span><span class="token punctuation">)</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">&quot;cos&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  error <span class="token operator">=</span> <span class="token function">dlerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>cosine<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">dlclose</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的逻辑十分简单。我们通过“运行时链接”的方式，在程序的运行过程中从共享库文件 libm.so.6 内部加载了函数 cos。而在程序最后，我们使用实参 2.0 调用了这个函数，并打印出了执行结果。</p><p>这里，函数 dlopen 用于打开一个指定的共享库。通过它的第二个参数，我们能够指定符号重定位的具体执行方式。这里的 RTLD_LAZY 表示延迟绑定，即动态链接器仅会在特定函数被调用时，才对其使用到的相关符号进行解析。</p><p>函数 dlsym 则用于从一个打开的共享库实例中获取某个具体符号的地址。而在此之后，我们便能够以函数指针的形式对它进行调用。最后，当共享库使用完毕，通过 dlclose 函数，我们可以减少共享库实例的被引用次数。而当该次数变为 0，且共享库对象中的符号没有被其他对象引用时，该共享库对应内存便会从当前进程的 VAS 中被卸载，卸载的具体时机则由操作系统决定。</p><p>在上述整个流程中，我们可以使用 dlerror 函数，随时获取 dlopen API 函数在执行过程中产生的错误诊断信息。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>这一讲，我主要为你介绍了动态链接的基本实现方式，和基于此进行的<strong>加载时链接</strong>与<strong>运行时链接</strong>这两者的主要区别。</p><ul><li><p>动态链接利用 <code>GOT</code>，将需要重定位的部分，分离到所在进程的 Data Segment，进而使得共享库文件可以被加载到进程 VAS 中的任意位置。</p><ul><li><p>在这种情况下，多个进程便能够做到真正地共享同一段物理内存中的共享库代码。</p></li><li><p>而为了降低程序初次执行时，大量符号重定位带来的性能损耗，编译器又利用名为 <code>PLT</code> 的表结构，实现了对函数符号的延迟绑定。</p></li></ul></li><li><p>加载时链接，<strong>是指在程序被真正执行前</strong>，动态链接器会首先完成对符号的重定位过程。而运行时链接则把这个过程推迟到了程序运行过程中，它的实现基于 dlopen、dlsym、dlerror，以及 dlclose <em>等几个动态链接器函数</em>。</p></li></ul><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>尝试了解一下 Linux 共享库使用的 soname 机制，并在留言区告诉我你的理解。</p>`,13),q=n("p",null,"在Linux中，共享库是一种可被多个程序共享使用的可执行代码和数据的集合。为了正确地加载和链接共享库，系统需要确定所需的共享库的版本和符号信息。这就引入了soname机制（Shared Object Name的缩写）。",-1),E=n("p",null,"soname是共享库的符号名，它是一个特定的版本命名约定，用于标识共享库的不同版本。soname实际上只是一个指向真正的动态库文件的符号链接（软链接），该链接包含了共享库的版本信息。",-1),V={href:"http://ld.so",target:"_blank",rel:"noopener noreferrer"},C=e("<p>soname的作用有以下几点：</p><ol><li><p><code>版本管理</code>：通过soname机制，系统可以同时存在多个版本的共享库，并且能够正确地选择和加载所需的版本。每个共享库都有一个唯一的soname，使得系统可以区分和处理不同版本的共享库。</p></li><li><p><code>兼容性</code>：当共享库的功能没有发生重大改变时，只需要增加版本号，而不需要修改soname。这样可以确保在新版本的共享库发布时，与旧版本兼容的程序仍然能够正常运行。</p></li><li><p><code>符号解析</code>：soname也用于符号解析。通过soname，程序可以在链接阶段确定所需共享库的版本和函数符号，并在运行时正确解析和调用函数。</p></li></ol><p>需要注意的是，soname是针对共享库而不是针对共享库中的函数或符号的。在编译共享库时，soname需要指定，并且需要保持一致，以避免链接和运行时的错误。</p>",3),D=n("p",null,"今天的课程到这里就结束了，希望可以帮助到你，也希望你在下方的留言区和我一起讨论。同时，欢迎你把这节课分享给你的朋友或同事，我们一起交流。",-1);function B(N,Y){const a=l("ExternalLinkIcon");return c(),r("div",null,[k,n("ul",null,[n("li",null,[s("参数 “"),m,s("” 可用于"),h,s("，这里我们为其添加了 "),n("a",g,[s("libsum.so"),o(a)]),s(" 的所在目录；")]),n("li",null,[s("参数 “"),_,s("” 则用于"),f,s("，通过指定名称 “sum”，编译器会自动使用搜索到的，合法的 "),n("a",b,[s("libsum.so"),o(a)]),s(" 文件。")])]),v,T,n("p",null,[s("需要注意的是，除了可以使用上述第三步介绍的“修改 LD_LIBRARY_PATH 变量”的方式来指定共享库的运行时查找目录外，我们还可以使用 "),n("a",L,[s("rpath"),o(a)]),s(" 和 "),n("a",x,[s("ldconfig"),o(a)]),s(" 这两种方式。它们分别通过“"),y,s("”，以及“"),P,s("”这两种方式，使得对应的共享库可以顺利地被动态链接器查找。这里，你可以直接点击对应的链接，来了解更多信息。")]),A,n("ul",null,[I,S,n("li",null,[s("内核会首先根据名为 "),O,s(" 的 Section 中的内容， "),n("ul",null,[n("li",null,[s("将相应的动态链接器共享库（"),n("a",G,[s("ld.so"),o(a)]),s("）映射至进程的 VAS 中，并同时将控制权转移给它。")]),w])])]),R,n("blockquote",null,[q,E,n("p",null,[s("当程序链接到共享库时，编译器会在可执行文件中包含对共享库的依赖信息，其中包括所需共享库的soname。而当程序运行时，动态链接器（"),n("a",V,[s("ld.so"),o(a)]),s("）会根据可执行文件中的依赖信息找到相应的共享库，并将其加载到内存中。")]),C]),D])}const M=p(u,[["render",B],["__file","√E28-运行时动态链接.html.vue"]]);export{M as default};
