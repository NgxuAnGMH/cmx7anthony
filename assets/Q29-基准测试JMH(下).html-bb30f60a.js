import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a as n,b as s,d as p,e as l}from"./app-063765ff.js";const r={},i=l(`<h1 id="_29-基准测试框架jmh-下" tabindex="-1"><a class="header-anchor" href="#_29-基准测试框架jmh-下" aria-hidden="true">#</a> 29 | 基准测试框架JMH（下）</h1><p>今天我们来继续学习基准测试框架 JMH。</p><p><strong>@Fork 和 @BenchmarkMode</strong></p><p>在上一篇的末尾，我们已经运行过由 JMH 项目编译生成的 jar 包了。下面是它的输出结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>$ java <span class="token operator">-</span>jar target<span class="token operator">/</span>benchmarks<span class="token punctuation">.</span>jar
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
# <span class="token constant">JMH</span> version<span class="token operator">:</span> <span class="token number">1.21</span>
# <span class="token constant">VM</span> version<span class="token operator">:</span> <span class="token constant">JDK</span> <span class="token number">10.0</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token class-name">Java</span> <span class="token class-name">HotSpot</span><span class="token punctuation">(</span><span class="token constant">TM</span><span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span><span class="token class-name">Bit</span> <span class="token class-name">Server</span> <span class="token constant">VM</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token number">.2</span><span class="token operator">+</span><span class="token number">13</span>
# <span class="token constant">VM</span> invoker<span class="token operator">:</span> <span class="token operator">/</span><span class="token class-name">Library</span><span class="token operator">/</span><span class="token class-name">Java</span><span class="token operator">/</span><span class="token class-name">JavaVirtualMachines</span><span class="token operator">/</span>jdk<span class="token operator">-</span><span class="token number">10.0</span><span class="token number">.2</span><span class="token punctuation">.</span>jdk<span class="token operator">/</span><span class="token class-name">Contents</span><span class="token operator">/</span><span class="token class-name">Home</span><span class="token operator">/</span>bin<span class="token operator">/</span>java
# <span class="token constant">VM</span> options<span class="token operator">:</span> <span class="token generics"><span class="token punctuation">&lt;</span>none<span class="token punctuation">&gt;</span></span>
# <span class="token class-name">Warmup</span><span class="token operator">:</span> <span class="token number">5</span> iterations<span class="token punctuation">,</span> <span class="token number">10</span> s each
# <span class="token class-name">Measurement</span><span class="token operator">:</span> <span class="token number">5</span> iterations<span class="token punctuation">,</span> <span class="token number">10</span> s each
# <span class="token class-name">Timeout</span><span class="token operator">:</span> <span class="token number">10</span> min per iteration
# <span class="token class-name">Threads</span><span class="token operator">:</span> <span class="token number">1</span> thread<span class="token punctuation">,</span> will synchronize iterations
# <span class="token class-name">Benchmark</span> mode<span class="token operator">:</span> <span class="token class-name">Throughput</span><span class="token punctuation">,</span> ops<span class="token operator">/</span>time
# <span class="token class-name">Benchmark</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>sample<span class="token punctuation">.</span></span>MyBenchmark</span><span class="token punctuation">.</span>testMethod

# <span class="token class-name">Run</span> progress<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token operator">%</span> complete<span class="token punctuation">,</span> <span class="token constant">ETA</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">20</span>
# <span class="token class-name">Fork</span><span class="token operator">:</span> <span class="token number">1</span> of <span class="token number">5</span>
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1023500</span><span class="token punctuation">,</span><span class="token number">647</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1030767</span><span class="token punctuation">,</span><span class="token number">909</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">1018212</span><span class="token punctuation">,</span><span class="token number">559</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">1002045</span><span class="token punctuation">,</span><span class="token number">519</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">1004210</span><span class="token punctuation">,</span><span class="token number">056</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1010251</span><span class="token punctuation">,</span><span class="token number">342</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1005717</span><span class="token punctuation">,</span><span class="token number">344</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">1004751</span><span class="token punctuation">,</span><span class="token number">523</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">1003034</span><span class="token punctuation">,</span><span class="token number">640</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">997003</span><span class="token punctuation">,</span><span class="token number">830</span> ops<span class="token operator">/</span>s

# <span class="token class-name">Run</span> progress<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token operator">%</span> complete<span class="token punctuation">,</span> <span class="token constant">ETA</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">41</span>
# <span class="token class-name">Fork</span><span class="token operator">:</span> <span class="token number">2</span> of <span class="token number">5</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

# <span class="token class-name">Run</span> progress<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token operator">%</span> complete<span class="token punctuation">,</span> <span class="token constant">ETA</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">40</span>
# <span class="token class-name">Fork</span><span class="token operator">:</span> <span class="token number">5</span> of <span class="token number">5</span>
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">988321</span><span class="token punctuation">,</span><span class="token number">959</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">999486</span><span class="token punctuation">,</span><span class="token number">531</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">1004856</span><span class="token punctuation">,</span><span class="token number">886</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">1004810</span><span class="token punctuation">,</span><span class="token number">860</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">1002332</span><span class="token punctuation">,</span><span class="token number">077</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1011871</span><span class="token punctuation">,</span><span class="token number">670</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1002653</span><span class="token punctuation">,</span><span class="token number">844</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">1003568</span><span class="token punctuation">,</span><span class="token number">030</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">1002724</span><span class="token punctuation">,</span><span class="token number">752</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">1001507</span><span class="token punctuation">,</span><span class="token number">408</span> ops<span class="token operator">/</span>s


<span class="token class-name">Result</span> <span class="token string">&quot;org.sample.MyBenchmark.testMethod&quot;</span><span class="token operator">:</span>
  <span class="token number">1004801</span><span class="token punctuation">,</span><span class="token number">393</span> ±<span class="token punctuation">(</span><span class="token number">99.9</span><span class="token operator">%</span><span class="token punctuation">)</span> <span class="token number">4055</span><span class="token punctuation">,</span><span class="token number">462</span> ops<span class="token operator">/</span>s <span class="token punctuation">[</span><span class="token class-name">Average</span><span class="token punctuation">]</span>
  <span class="token punctuation">(</span>min<span class="token punctuation">,</span> avg<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">992193</span><span class="token punctuation">,</span><span class="token number">459</span><span class="token punctuation">,</span> <span class="token number">1004801</span><span class="token punctuation">,</span><span class="token number">393</span><span class="token punctuation">,</span> <span class="token number">1014504</span><span class="token punctuation">,</span><span class="token number">226</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stdev <span class="token operator">=</span> <span class="token number">5413</span><span class="token punctuation">,</span><span class="token number">926</span>
  <span class="token constant">CI</span> <span class="token punctuation">(</span><span class="token number">99.9</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1000745</span><span class="token punctuation">,</span><span class="token number">931</span><span class="token punctuation">,</span> <span class="token number">1008856</span><span class="token punctuation">,</span><span class="token number">856</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>assumes normal distribution<span class="token punctuation">)</span>


# <span class="token class-name">Run</span> <span class="token class-name"><span class="token namespace">complete<span class="token punctuation">.</span></span> Total</span> time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">22</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token class-name">Benchmark</span>                <span class="token class-name">Mode</span>  <span class="token class-name">Cnt</span>        <span class="token class-name">Score</span>      <span class="token class-name">Error</span>  <span class="token class-name">Units</span>
<span class="token class-name">MyBenchmark</span><span class="token punctuation">.</span>testMethod  thrpt   <span class="token number">25</span>  <span class="token number">1004801</span><span class="token punctuation">,</span><span class="token number">393</span> ± <span class="token number">4055</span><span class="token punctuation">,</span><span class="token number">462</span>  ops<span class="token operator">/</span>s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这段输出中，我们暂且忽略最开始的 Warning 以及打印出来的配置信息，直接看接下来貌似重复的五段输出。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code># <span class="token class-name">Run</span> progress<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token operator">%</span> complete<span class="token punctuation">,</span> <span class="token constant">ETA</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">20</span>
# <span class="token class-name">Fork</span><span class="token operator">:</span> <span class="token number">1</span> of <span class="token number">5</span>
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1023500</span><span class="token punctuation">,</span><span class="token number">647</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1030767</span><span class="token punctuation">,</span><span class="token number">909</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">1018212</span><span class="token punctuation">,</span><span class="token number">559</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">1002045</span><span class="token punctuation">,</span><span class="token number">519</span> ops<span class="token operator">/</span>s
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">1004210</span><span class="token punctuation">,</span><span class="token number">056</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">1010251</span><span class="token punctuation">,</span><span class="token number">342</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">1005717</span><span class="token punctuation">,</span><span class="token number">344</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">1004751</span><span class="token punctuation">,</span><span class="token number">523</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">1003034</span><span class="token punctuation">,</span><span class="token number">640</span> ops<span class="token operator">/</span>s
<span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">997003</span><span class="token punctuation">,</span><span class="token number">830</span> ops<span class="token operator">/</span>s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你应该已经留意到Fork: 1 of 5的字样。这里指的是 JMH 会 Fork 出一个新的 Java 虚拟机，来运行性能基准测试。</p><p>之所以另外启动一个 Java 虚拟机进行性能基准测试，是为了获得一个相对干净的虚拟机环境。</p><p>在介绍反射的那篇文章中，我就已经演示过因为类型 profile 被污染，而导致无法内联的情况。使用新的虚拟机，将极大地降低被上述情况干扰的可能性，从而保证更加精确的性能数据。</p><p>在介绍虚方法内联的那篇文章中，我讲解过基于类层次分析的完全内联。新启动的 Java 虚拟机，其加载的与测试无关的抽象类子类或接口实现相对较少。因此，具体是否进行完全内联将交由开发人员来决定。</p><p>关于这种情况，JMH 提供了一个性能测试案例[1]。如果你感兴趣的话，可以下载下来自己跑一遍。</p><p>除了对即时编译器的影响之外，Fork 出新的 Java 虚拟机还会提升性能数据的准确度。</p><p>这主要是因为不少 Java 虚拟机的优化会带来不确定性，例如 TLAB 内存分配（TLAB 的大小会变化），偏向锁、轻量锁算法，并发数据结构等。这些不确定性都可能导致不同 Java 虚拟机中运行的性能测试的结果不同，例如 JMH 这一性能的测试案例[2]。</p><p>在这种情况下，通过运行更多的 Fork，并将每个 Java 虚拟机的性能测试结果平均起来，可以增强最终数据的可信度，使其误差更小。在 JMH 中，你可以通过@Fork注解来配置，具体如下述代码所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBenchmark</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们回到刚刚的输出结果。每个 Fork 包含了 5 个预热迭代（warmup iteration，如# Warmup Iteration 1: 1023500,647 ops/s）以及 5 个测试迭代（measurement iteration，如Iteration 1: 1010251,342 ops/s）。</p><p>每个迭代后都跟着一个数据，代表本次迭代的吞吐量，也就是每秒运行了多少次操作（operations/s，或 ops/s）。默认情况下，一次操作指的是调用一次测试方法testMethod。</p><p>除了吞吐量之外，我们还可以输出其他格式的性能数据，例如运行一次操作的平均时间。具体的配置方法以及对应参数如下述代码以及下表所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBenchmark</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，默认使用的吞吐量已足够满足大多数测试需求了。</p><p><strong>@Warmup 和 @Measurement</strong></p><p>之所以区分预热迭代和测试迭代，是为了在记录性能数据之前，将 Java 虚拟机带至一个稳定状态。</p><p>这里的稳定状态，不仅包括测试方法被即时编译成机器码，还包括 Java 虚拟机中各种自适配优化算法能够稳定下来，如前面提到的 TLAB 大小，亦或者是使用传统垃圾回收器时的 Eden 区、Survivor 区和老年代的大小。</p><p>一般来说，预热迭代的数目以及每次预热迭代的时间，需要由你根据所要测试的业务逻辑代码来调配。通常的做法便是在首次运行时配置较多次迭代，并监控性能数据达到稳定状态时的迭代数目。</p><p>不少性能评测框架都会自动检测稳定状态。它们所采用的算法是计算迭代之间的差值，如果连续几个迭代与前一迭代的差值均小于某个值，便将这几个迭代以及之后的迭代当成稳定状态。</p><p>这种做法有一个缺陷，那便是在达到最终稳定状态前，程序可能拥有多个中间稳定状态。例如通过 Java 上的 JavaScript 引擎 Nashorn 运行 JavaScript 代码，便可能出现多个中间稳定状态的情况。（具体可参考 Aleksey Shipilev 的 devoxx 2013 演讲[3]的第 21 页。）</p><p>总而言之，开发人员需要自行决定预热迭代的次数以及每次迭代的持续时间。</p><p>通常来说，我会在保持 5-10 个预热迭代的前提下（这样可以看出是否达到稳定状况），将总的预热时间优化至最少，以便节省性能测试的机器时间。（这在持续集成 / 回归测试的硬件资源跟不上代码提交速度的团队中非常重要。）</p><p>当确定了预热迭代的次数以及每次迭代的持续时间之后，我们便可以通过@Warmup注解来进行配置，如下述代码所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> time<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> timeUnit<span class="token operator">=</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> batchSize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBenchmark</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Warmup注解有四个参数，分别为预热迭代的次数iterations，每次迭代持续的时间time和timeUnit（前者是数值，后者是单位。例如上面代码代表的是每次迭代持续 100 毫秒），以及每次操作包含多少次对测试方法的调用batchSize。</p><p>测试迭代可通过@Measurement注解来进行配置。它的可配置选项和@Warmup的一致，这里就不再重复了。与预热迭代不同的是，每个 Fork 中测试迭代的数目越多，我们得到的性能数据也就越精确。</p><p><strong>@State、@Setup 和 @TearDown</strong></p><p>通常来说，我们所要测试的业务逻辑只是整个应用程序中的一小部分，例如某个具体的 web app 请求。这要求在每次调用测试方法前，程序处于准备接收请求的状态。</p><p>我们可以把上述场景抽象一下，变成程序从某种状态到另一种状态的转换，而性能测试，便是在收集该转换的性能数据。</p><p>JMH 提供了@State注解，被它标注的类便是程序的状态。由于 JMH 将负责生成这些状态类的实例，因此，它要求状态类必须拥有无参数构造器，以及当状态类为内部类时，该状态类必须是静态的。</p><p>JMH 还将程序状态细分为整个虚拟机的程序状态，线程私有的程序状态，以及线程组私有的程序状态，分别对应@State注解的参数Scope.Benchmark，Scope.Thread和Scope.Group。</p><p>需要注意的是，这里的线程组并非 JDK 中的那个概念，而是 JMH 自己定义的概念。具体可以参考@GroupThreads注解[4]，以及这个案例[5]。</p><p>@State的配置方法以及状态类的用法如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBenchmark</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyBenchmarkState</span> <span class="token punctuation">{</span>
      <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;exception&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token class-name">MyBenchmarkState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，状态类是通过方法参数的方式传入测试方法之中的。JMH 将负责把所构造的状态类实例传入该方法之中。</p><p>不过，如果MyBenchmark被标注为@State，那么我们可以不用在测试方法中定义额外的参数，而是直接访问MyBenchmark类中的实例变量。</p><p>和 JUnit 测试一样，我们可以在测试前初始化程序状态，在测试后校验程序状态。这两种操作分别对应@Setup和@TearDown注解，被它们标注的方法必须是状态类中的方法。</p><p>而且，JMH 并不限定状态类中@Setup方法以及@TearDown方法的数目。当存在多个@Setup方法或者@TearDown方法时，JMH 将按照定义的先后顺序执行。</p><p>JMH 对@Setup方法以及@TearDown方法的调用时机是可配置的。可供选择的粒度有在整个性能测试前后调用，在每个迭代前后调用，以及在每次调用测试方法前后调用。其中，最后一个粒度将影响测试数据的精度。</p><p>这三种粒度分别对应@Setup和@TearDown注解的参数Level.Trial，Level.Iteration，以及Level.Invocation。具体的用法如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBenchmark</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyBenchmarkState</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Invocation</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@TearDown</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Invocation</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Run with -ea</span>
      <span class="token keyword">assert</span> count <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token string">&quot;ERROR&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Benchmark</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token class-name">MyBenchmarkState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>即时编译相关功能</strong></p><p>JMH 还提供了不少控制即时编译的功能，例如可以控制每个方法内联与否的@CompilerControl注解[6]。</p><p>另外一个更小粒度的功能则是Blackhole类。它里边的consume方法可以防止即时编译器将所传入的值给优化掉。</p><p>具体的使用方法便是为被@Benchmark注解标注了的测试方法增添一个类型为Blackhole的参数，并且在测试方法的代码中调用其实例方法Blackhole.consume，如下述代码所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token class-name">Blackhole</span> bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prevents escape analysis</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，它并不会阻止对传入值的计算的优化。举个例子，在下面这段代码中，我将3+4的值传入Blackhole.consume方法中。即时编译器仍旧会进行常量折叠，而Blackhole将阻止即时编译器把所得到的常量值 7 给优化消除掉。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token class-name">Blackhole</span> bh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了防止死代码消除的consume之外，Blackhole类还提供了一个静态方法consumeCPU，来消耗 CPU 时间。该方法将接收一个 long 类型的参数，这个参数与所消耗的 CPU 时间呈线性相关。</p><p><strong>总结与实践</strong></p><p>今天我介绍了基准测试框架 JMH 的进阶功能。我们来回顾一下。</p><p>@Fork允许开发人员指定所要 Fork 出的 Java 虚拟机的数目。</p><p>@BenchmarkMode允许指定性能数据的格式。</p><p>@Warmup和@Measurement允许配置预热迭代或者测试迭代的数目，每个迭代的时间以及每个操作包含多少次对测试方法的调用。</p><p>@State允许配置测试程序的状态。测试前对程序状态的初始化以及测试后对程序状态的恢复或者校验可分别通过@Setup和@TearDown来实现。</p><p>今天的实践环节，请逐个运行 JMH 的官方案例[7]，具体每个案例的意义都在代码注释之中。</p><p>最后给大家推荐一下 Aleksey Shipilev 的 devoxx 2013 演讲（Slides[8]；视频[9]，请自备梯子）。如果你已经完成本专栏前面两部分，特别是第二部分的学习，那么这个演讲里的绝大部分内容你应该都能理解。</p>`,64),u={href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_12_Forking.java",target:"_blank",rel:"noopener noreferrer"},k={href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_13_RunToRun.java",target:"_blank",rel:"noopener noreferrer"},m={href:"https://shipilev.net/talks/devoxx-Nov2013-benchmarking.pdf",target:"_blank",rel:"noopener noreferrer"},d={href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-core/src/main/java/org/openjdk/jmh/annotations/GroupThreads.java",target:"_blank",rel:"noopener noreferrer"},v={href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_15_Asymmetric.java",target:"_blank",rel:"noopener noreferrer"},b={href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-core/src/main/java/org/openjdk/jmh/annotations/CompilerControl.java",target:"_blank",rel:"noopener noreferrer"},h={href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples",target:"_blank",rel:"noopener noreferrer"},j={href:"https://shipilev.net/talks/devoxx-Nov2013-benchmarking.pdf",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.youtube.com/watch?v=VaWgOCDBxYw",target:"_blank",rel:"noopener noreferrer"};function M(_,f){const a=t("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s("[1] "),n("a",u,[s("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_12_Forking.java"),p(a)])]),n("p",null,[s("[2] "),n("a",k,[s("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_13_RunToRun.java"),p(a)])]),n("p",null,[s("[3] "),n("a",m,[s("https://shipilev.net/talks/devoxx-Nov2013-benchmarking.pdf"),p(a)])]),n("p",null,[s("[4] "),n("a",d,[s("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-core/src/main/java/org/openjdk/jmh/annotations/GroupThreads.java"),p(a)])]),n("p",null,[s("[5] "),n("a",v,[s("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_15_Asymmetric.java"),p(a)])]),n("p",null,[s("[6] "),n("a",b,[s("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-core/src/main/java/org/openjdk/jmh/annotations/CompilerControl.java"),p(a)])]),n("p",null,[s("[7] "),n("a",h,[s("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples"),p(a)])]),n("p",null,[s("[8] "),n("a",j,[s("https://shipilev.net/talks/devoxx-Nov2013-benchmarking.pdf"),p(a)])]),n("p",null,[s("[9] "),n("a",g,[s("https://www.youtube.com/watch?v=VaWgOCDBxYw"),p(a)])])])}const J=e(r,[["render",M],["__file","Q29-基准测试JMH(下).html.vue"]]);export{J as default};
