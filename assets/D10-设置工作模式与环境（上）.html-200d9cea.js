import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as p,c as i,a as n,b as s,e as o,d as a}from"./app-cdabc73c.js";const c="/assets/e4000be6a176d1fd09b99bf6df02f914-36edd4e0.jpg",r="/assets/8f8f2c86722cf19e8301c6c72426f9a9-39d48b59.jpg",d="/assets/f1ed52ae172ea8bc1710a3ef9296bbe3-fa63d40b.jpg",u="/assets/b05365a0a6fb4477042a43326e43f5b1-75e97ec4.jpg",m="/assets/f7a091c67a53582255117f3790904a8d-da756902.jpg",k="/assets/809e93a2e3bdce9f5d3e0ac7d699feee-4c1130eb.jpg",b={},v=a('<h1 id="_10-设置工作模式与环境-上-建立计算机" tabindex="-1"><a class="header-anchor" href="#_10-设置工作模式与环境-上-建立计算机" aria-hidden="true">#</a> 10 | 设置工作模式与环境（上）：建立计算机</h1><p>你好，我是 LMOS。</p><p>经过前面那么多课程的准备，现在我们距离把我们自己操作系统跑起来，已经是一步之遥了。现在，你是不是很兴奋，很激动？有这些情绪说明你是喜欢这门课程的。</p><p>接下来的三节课，我们会一起完成一个壮举，从 GRUB 老大哥手中接过权柄，让计算机回归到我们的革命路线上来，为我们之后的开发自己的操作系统做好准备。</p><p>具体我是这样来安排的，今天这节课，我们先来搭好<mark>操作系统的测试环境</mark>。第二节课，我们一起实现一个<mark>初始化环境的组件——二级引导器</mark>，让它真正继承 GRUB 权力。第三节课，我们正式攻下初始化的第一个山头，<mark>对硬件抽象层进行初始化</mark>。</p>',5),h={href:"https://gitee.com/lmos/cosmos/tree/master/lesson10~11",target:"_blank",rel:"noopener noreferrer"},g=a('<blockquote><p>在 Linux 里面有一个工具，叫 <strong><code>Grub2</code></strong>，全称 Grand Unified Bootloader Version 2。顾名思义，<code>就是搞系统启动的</code>。</p></blockquote><h2 id="从内核映像格式说起" tabindex="-1"><a class="header-anchor" href="#从内核映像格式说起" aria-hidden="true">#</a> 从内核映像格式说起</h2><p>我们都知道，一个<strong>内核工程</strong>肯定有多个文件组成，为了不让 GRUB 老哥加载多个文件，因疲劳过度而产生问题，我们决定让 GRUB 只加载一个文件。</p><p>但是要把<strong>多个文件变成一个文件</strong>就需要封装，即把多个文件组装在一起形成一个文件。这个文件我们称为<strong>内核映像文件</strong>，其中包含 <mark>1 二级引导器的模块</mark>，<mark>2 内核模块</mark>，<mark>3 图片和字库文件</mark>。为了这映像文件能被 GRUB 加载，并让它自身能够解析其中的内容，我们就要定义好具体的格式。如下图所示。</p><img src="'+c+`" alt="img" style="zoom:15%;"><p>内核映像文件格式</p><p>上图中的 <mark>GRUB 头</mark>有 4KB 大小，<mark>GRUB</mark> 正是通过这一小段代码，来识别映像文件的。另外，根据<mark>映像文件头描述符</mark>和<mark>文件头描述符</mark>里的信息，这一小段代码还可以解析映像文件中的其它文件。</p><h2 id="描述符" tabindex="-1"><a class="header-anchor" href="#描述符" aria-hidden="true">#</a> 描述符</h2><p>映像文件头描述符和文件描述符是两个 C 语言结构体，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//映像文件头描述符</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_mlosrddsc</span>
<span class="token punctuation">{</span>
    <span class="token class-name">u64_t</span> mdc_mgic<span class="token punctuation">;</span> <span class="token comment">//映像文件标识</span>
    <span class="token class-name">u64_t</span> mdc_sfsum<span class="token punctuation">;</span><span class="token comment">//未使用</span>
    <span class="token class-name">u64_t</span> mdc_sfsoff<span class="token punctuation">;</span><span class="token comment">//未使用</span>
    <span class="token class-name">u64_t</span> mdc_sfeoff<span class="token punctuation">;</span><span class="token comment">//未使用</span>
    <span class="token class-name">u64_t</span> mdc_sfrlsz<span class="token punctuation">;</span><span class="token comment">//未使用</span>
    
    <span class="token class-name">u64_t</span> mdc_ldrbk_s<span class="token punctuation">;</span><span class="token comment">//映像文件中二级引导器的开始偏移</span>
    <span class="token class-name">u64_t</span> mdc_ldrbk_e<span class="token punctuation">;</span><span class="token comment">//映像文件中二级引导器的结束偏移</span>
    <span class="token class-name">u64_t</span> mdc_ldrbk_rsz<span class="token punctuation">;</span><span class="token comment">//映像文件中二级引导器的实际大小</span>
    <span class="token class-name">u64_t</span> mdc_ldrbk_sum<span class="token punctuation">;</span><span class="token comment">//映像文件中二级引导器的校验和</span>
    
    <span class="token class-name">u64_t</span> mdc_fhdbk_s<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头描述的开始偏移</span>
    <span class="token class-name">u64_t</span> mdc_fhdbk_e<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头描述的结束偏移</span>
    <span class="token class-name">u64_t</span> mdc_fhdbk_rsz<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头描述的实际大小</span>
    <span class="token class-name">u64_t</span> mdc_fhdbk_sum<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头描述的校验和</span>
    
    <span class="token class-name">u64_t</span> mdc_filbk_s<span class="token punctuation">;</span><span class="token comment">//映像文件中文件数据的开始偏移</span>
    <span class="token class-name">u64_t</span> mdc_filbk_e<span class="token punctuation">;</span><span class="token comment">//映像文件中文件数据的结束偏移</span>
    <span class="token class-name">u64_t</span> mdc_filbk_rsz<span class="token punctuation">;</span><span class="token comment">//映像文件中文件数据的实际大小</span>
    <span class="token class-name">u64_t</span> mdc_filbk_sum<span class="token punctuation">;</span><span class="token comment">//映像文件中文件数据的校验和</span>
    
    <span class="token class-name">u64_t</span> mdc_ldrcodenr<span class="token punctuation">;</span><span class="token comment">//映像文件中二级引导器的文件头描述符的索引号</span>
    <span class="token class-name">u64_t</span> mdc_fhdnr<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头描述符有多少个</span>
    <span class="token class-name">u64_t</span> mdc_filnr<span class="token punctuation">;</span><span class="token comment">//映像文件中文件头有多少个</span>
    <span class="token class-name">u64_t</span> mdc_endgic<span class="token punctuation">;</span><span class="token comment">//映像文件结束标识</span>
    <span class="token class-name">u64_t</span> mdc_rv<span class="token punctuation">;</span><span class="token comment">//映像文件版本</span>
<span class="token punctuation">}</span><span class="token class-name">mlosrddsc_t</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FHDSC_NMAX</span> <span class="token expression"><span class="token number">192</span> </span><span class="token comment">//文件名长度</span></span>
<span class="token comment">//文件头描述符</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_fhdsc</span>
<span class="token punctuation">{</span>
    <span class="token class-name">u64_t</span> fhd_type<span class="token punctuation">;</span>		<span class="token comment">//文件类型</span>
    <span class="token class-name">u64_t</span> fhd_subtype<span class="token punctuation">;</span>	<span class="token comment">//文件子类型</span>
    <span class="token class-name">u64_t</span> fhd_stuts<span class="token punctuation">;</span>	<span class="token comment">//文件状态</span>
    <span class="token class-name">u64_t</span> fhd_id<span class="token punctuation">;</span>		<span class="token comment">//文件id</span>
    <span class="token class-name">u64_t</span> fhd_intsfsoff<span class="token punctuation">;</span><span class="token comment">//文件在映像文件位置开始偏移</span>
    <span class="token class-name">u64_t</span> fhd_intsfend<span class="token punctuation">;</span>	<span class="token comment">//文件在映像文件的结束偏移</span>
    <span class="token class-name">u64_t</span> fhd_frealsz<span class="token punctuation">;</span>	<span class="token comment">//文件实际大小</span>
    <span class="token class-name">u64_t</span> fhd_fsum<span class="token punctuation">;</span>		<span class="token comment">//文件校验和</span>
    <span class="token keyword">char</span>   fhd_name<span class="token punctuation">[</span>FHDSC_NMAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//文件名</span>
<span class="token punctuation">}</span><span class="token class-name">fhdsc_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打包映像的工具-lmoskrlimg" tabindex="-1"><a class="header-anchor" href="#打包映像的工具-lmoskrlimg" aria-hidden="true">#</a> 打包映像的工具: lmoskrlimg</h2>`,11),f=n("mark",null,"打包映像的工具",-1),_={href:"https://gitee.com/lmos/cosmos/tree/master/tools/lmoskrlimg",target:"_blank",rel:"noopener noreferrer"},x=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lmoskrlimg <span class="token parameter variable">-m</span> k <span class="token parameter variable">-lhf</span> GRUB头文件 <span class="token parameter variable">-o</span> 映像文件 <span class="token parameter variable">-f</span> 输入的文件列表
<span class="token parameter variable">-m</span> 表示模式 只能是k内核模式
<span class="token parameter variable">-lhf</span> 表示后面跟上GRUB头文件
<span class="token parameter variable">-o</span> 表示输出的映像文件名 
<span class="token parameter variable">-f</span> 表示输入文件列表
例如：lmoskrlimg <span class="token parameter variable">-m</span> k <span class="token parameter variable">-lhf</span> grubhead.bin <span class="token parameter variable">-o</span> kernel.img <span class="token parameter variable">-f</span> file1.bin file2.bin file3.bin file4.bin 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="准备虚拟机" tabindex="-1"><a class="header-anchor" href="#准备虚拟机" aria-hidden="true">#</a> 准备虚拟机</h2><p>打包好了映像文件，我们还有很重要的一步配置——准备虚拟机。这里你不妨先想一想，开发应用跟开发操作系统有什么不同呢？</p><p>在你开发应用程序时，可以在 IDE 中随时编译运行应用程序，然后观察结果状态是否正确，中间可能还要百度一下查找相关资料，不要笑，这是大多数人的开发日常。但是你开发操作系统时，不可能写 5 行代码之后就安装在计算机上，重启计算机去观察运行结果，这非常繁琐，也很浪费时间。</p><p>好在我们有虚拟机这个好帮手。<strong>虚拟机用软件的方式实现了真实计算机的全部功能特性，它在我们所使用的 Linux 下，其实就是个应用程序</strong>。</p><p>使用虚拟机软件我们就可以在现有的 Linux 系统之上开发、编译、运行我们的操作系统了，省时且方便。节约的时间我们可以喝茶、听听音乐、享受美好生活。</p><h2 id="安装虚拟机" tabindex="-1"><a class="header-anchor" href="#安装虚拟机" aria-hidden="true">#</a> 安装虚拟机</h2><p>这里我们一致约定使用甲骨文公司的<strong>VirtualBox虚拟机</strong>。经过测试，我发现 VirtualBox 虚拟机有很多优点，它的功能相对完善、性能强、BUG 少，而且比较稳定。</p><p>在现代 Linux 系统上安装 VirtualBox 虚拟机是非常简单的，你只要在 Linux 发行版中找到其应用商店，在其中搜索 VirtualBox 就行了。我们作为专业人士一条命令可以解决的事情，为什么要用鼠标点来点去呢，多浪费时间。</p><p>所以，你只要在终端中输入如下命令就行了，我假定你安装了 Ubuntu 系的 Linux 发行版，这里 Ubuntu 的版本不做规定。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> virtualbox-6.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行 Virtualbox 后，如果出现如下界面，就说明安装 VirtualBox 成功了。</p><img src="`+r+'" alt="img" style="zoom:50%;"><p>安装VirtualBox</p><h2 id="建立虚拟电脑" tabindex="-1"><a class="header-anchor" href="#建立虚拟电脑" aria-hidden="true">#</a> 建立虚拟电脑</h2><p>前面我们只是安好了虚拟机管理软件，我们还要新建虚拟机才可以。点击上图中的新建，然后选择专家模式，就可以进入专家模式配置我们的电脑了。</p><p>尽管它是虚拟的，我们还是可以选择 <strong>CPU 类型、内存大小、硬盘大小、网络等</strong>配置，为了一致性，请你按照如下截图来配置。</p><img src="'+d+'" alt="img" style="zoom:50%;"><p>新建虚拟机</p><img src="'+u+`" alt="img" style="zoom:50%;"><p>新建虚拟机</p><blockquote><p>可以看到，我们选择了 64 位的架构，1024MB 内存，但是不要添加硬盘，后面自有妙用。显卡是 VBoxVGA，还有硬件加速，这会让虚拟机调用我们机器上真实的 CPU 来运行我们的操作系统。</p></blockquote><h2 id="手工生产硬盘" tabindex="-1"><a class="header-anchor" href="#手工生产硬盘" aria-hidden="true">#</a> 手工生产硬盘</h2><p>上面的虚拟机中还没有硬盘，没有硬盘虚拟机就没地方加载数据，我们当然不是要买一块硬盘挂上去，而是要去手工生产一块硬盘。你马上就会发现，从零开始生产一块虚拟硬盘，这比从零开始写一个操作系统简单得多。</p><p>至于为什么手工生产硬盘，我先卖个关子，你看完这部分内容就能找到答案。</p><p>其实大多数虚拟机都是<strong>用文件来模拟硬盘的</strong>，即主机系统（HOST OS 即你使用的物理机系统 ）下<strong>特定格式的文件</strong>，虚拟机中操作系统的数据只是写入了这个文件中。</p><h2 id="生产虚拟硬盘-dd-生成指定大小纯二进制文件" tabindex="-1"><a class="header-anchor" href="#生产虚拟硬盘-dd-生成指定大小纯二进制文件" aria-hidden="true">#</a> 生产虚拟硬盘: dd 生成指定大小纯二进制文件</h2><p>其实虚拟机只是用特定格式的文件来模拟硬盘，所以生产虚拟硬盘就变成了生成对应格式的文件，这就容易多了。我们要建立 100MB 的硬盘，这意味着要生成 100MB 的大文件。</p><p>下面我们用 Linux 下的 <strong>dd 命令</strong>（用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换）生成 100MB 的纯二进制的文件（就是 1～100M 字节的文件里面填充为 0 ），如下所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">512</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>hd.img <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">204800</span>

<span class="token punctuation">;</span>bs:表示块大小，这里是512字节
<span class="token punctuation">;</span>if：表示输入文件，/dev/zero就是Linux下专门返回0数据的设备文件，读取它就返回0
<span class="token punctuation">;</span>of：表示输出文件，即我们的硬盘文件。
<span class="token punctuation">;</span>count：表示输出多少块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上命令就可以生成 100MB 的文件。文件数据为全 0。由于我们不用转换数据，就是需要全 0 的文件，所以 dd 命令只需要这几个参数就行。</p><h2 id="格式化虚拟硬盘-losetup-mkfs-ext4-mount" tabindex="-1"><a class="header-anchor" href="#格式化虚拟硬盘-losetup-mkfs-ext4-mount" aria-hidden="true">#</a> 格式化虚拟硬盘: losetup-&gt;mkfs.ext4-&gt;mount</h2><p>虚拟硬盘也需要格式化才能使用，所谓格式化就是<strong>在硬盘上建立文件系统</strong>。只有建立了文件系统，现有的成熟操作系统才能在其中存放数据。</p><p>可是，问题来了。虚拟硬盘毕竟是个文件，如何让 Linux 在一个文件上建立文件系统呢？这个问题我们要分成三步来解决。</p><p><strong><code>第一步</code></strong>，把虚拟硬盘文件变成 Linux 下的回环设备，让 Linux 以为这是个设备。其实在 Linux 下文件可以是设备，设备可以是文件。下面我们用 losetup 命令，将 hd.img 变成 Linux 的回环设备，代码如下。</p><blockquote><p>用 losetup -a 命令看下，是不是自己用到的 loop 已经被使用了，具体可参考课程留言区“老王”的留言：</p><p>在整个操作中<br> 安装GRUB这一步：<br> sudo grub-install --boot-directory=./hdisk/boot/ --force --allow-floppy /dev/loop0<br> 在ubutnu16.04下会报告一下问题<br> Installing for i386-pc platform.<br> grub-install: warning: File system \`ext2&#39; doesn&#39;t support embedding.<br> grub-install：错误： 无法嵌入，但在跨盘安装时是必须的.<br> 我尝试修复也不成功，后面换ubutnu18.04，一次成功<br> 但是如果创建回环设备这一步<br> sudo losetup /dev/loop0 hd.img<br> 出现&quot;losetup: hd.img：设置回环设备失败: 设备或资源忙&quot;<br> 那么就使用 ls /dev/loop* 查看下<br> brw-rw---- 1 root disk 7, 0 6月 1 12:13 /dev/loop0<br> brw-rw---- 1 root disk 7, 1 6月 1 12:13 /dev/loop1<br> brw-rw---- 1 root disk 7, 2 6月 1 12:13 /dev/loop2<br> brw-rw---- 1 root disk 7, 3 6月 1 12:13 /dev/loop3<br> brw-rw---- 1 root disk 7, 4 6月 1 12:13 /dev/loop4<br> brw-rw---- 1 root disk 7, 5 6月 1 12:13 /dev/loop5<br> brw-rw---- 1 root disk 7, 6 6月 1 12:13 /dev/loop6<br> brw-rw---- 1 root disk 7, 7 6月 1 12:13 /dev/loop7<br> brw-rw---- 1 root disk 7, 8 6月 1 12:13 /dev/loop8<br> crw-rw---- 1 root disk 10, 237 6月 1 12:13 /dev/loop-control<br> 那么说明/dev/loop9是空的,可以使用<br> sudo losetup /dev/loop9 hd.img可以创建成功<br> 其他操作为了防止不套娃可以参&quot;第几天魔王&quot;的操作</p><hr><p>已完成实验，有几个心得分享一下。<br> 1，如果主机就是Linux比如Ubuntu，则完全按照东哥的教程做即可，即Linux主机安装虚拟机启动HelloOS。<br> 2，如果主机是Windows，启动虚拟机运行Ubuntu，很多童鞋担心虚拟机Ubuntu里再运行虚拟机启动HelloOS，这样就会套娃。其实可以避免套娃的。在你的虚拟机，也就是Ubuntu环境下，完成hd.img的创建，文件系统的格式化，grub的安装后，生成最终的hd.img文件。然后把hd.img文件通过命令变成vdi文件即可。然后在你的WIN主机环境下，新建一个虚拟机，加载vdi即可。也就是说此时HelloOS和Ubuntu都是你WIN环境下并列的两个虚拟机，这样就可以避免套娃了。<br> 3，如果虚拟机使用的不是VirtualBox， 面是vmware，在生成hd.img后，可以使用starwindconverter工具（网上下载，WIN下运行），这个工具可以把img转换为各种格式，比如vmware的vmdk文件。然后vmware创建一个新的虚拟机，硬盘选择这个vmdk文件，就可以加载HelloOS了。<br> 4，如果HelloOS加载成功，但是提示&#39;hd0,msdos1&#39;错误，则重新制作镜像，并且修改grub.cfg里的这行为&#39;hd0,msdos1&#39;为&#39;hd0&#39;即可。</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sudo losetup <span class="token operator">/</span>dev<span class="token operator">/</span>loop0 hd<span class="token punctuation">.</span>img
sudo losetup <span class="token operator">/</span>dev<span class="token operator">/</span>loop70 hd<span class="token punctuation">.</span>img
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>第二步</code></strong>，将 losetup 命令用于设置回环设备。回环设备可以把文件虚拟成 Linux 块设备，用来模拟整个文件系统，让用户可以将其看作硬盘、光驱或软驱等设备，并且可用 mount 命令挂载当作目录来使用。</p><p>我们可以用 Linux 下的 mkfs.ext4 命令格式化这个 /dev/loop0 回环块设备，在里面建立 EXT4 文件系统。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sudo mkfs<span class="token punctuation">.</span>ext4 <span class="token operator">-</span>q <span class="token operator">/</span>dev<span class="token operator">/</span>loop0
sudo mkfs<span class="token punctuation">.</span>ext4 <span class="token operator">-</span>q <span class="token operator">/</span>dev<span class="token operator">/</span>loop70
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>第三步</code></strong>，我们用 Linux 下的 mount 命令，将 hd.img 文件当作块设备，把它挂载到事先建立的 hdisk 目录下，并在其中建立一个 boot，这也是后面安装 GRUB 需要的。如果能建立成功，就说明前面的工作都正确完成了。</p><p>说到这里，也许你已经想到了我们要手工生成硬盘的原因。<strong>这是因为 mount 命令只能识别在纯二进制文件上建立的文件系统，如果使用虚拟机自己生成的硬盘文件，mount 就无法识别我们的文件系统了</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> ./hdisk/ <span class="token comment">#建立hdisk目录</span>
<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-o</span> loop ./hd.img ./hdisk/ <span class="token comment">#挂载硬盘文件</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> ./hdisk/boot/ <span class="token comment">#建立boot目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行到这里，我们会发现 hdisk 目录下多了一个 boot 目录，<strong><code>这说明我们挂载成功了</code></strong>。</p><h2 id="安装-grub-losetup-grub-install" tabindex="-1"><a class="header-anchor" href="#安装-grub-losetup-grub-install" aria-hidden="true">#</a> 安装 GRUB: losetup-&gt;grub-install</h2><p>正常安装系统的情况下，Linux 会把 GRUB 安装在我们的物理硬盘上，可是我们现在要<strong>把 GRUB 安装在我们的虚拟硬盘上</strong>，而且我们的操作系统还没有安装程序。所以，我们得利用一下手上 Linux（HOST OS），通过 GRUB 的安装程序，把 GRUB 安装到指定的设备上（虚拟硬盘）。</p><p>想要安装 GRUB 也不难，具体分为两步，如下所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#(已完成)第一步挂载虚拟硬盘文件为loop0回环设备</span>
<span class="token function">sudo</span> losetup /dev/loop0 hd.img
<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-o</span> loop ./hd.img ./hdisk/ <span class="token comment">#挂载硬盘文件</span>
<span class="token comment">#第二步安装GRUB</span>
<span class="token function">sudo</span> grub-install --boot-directory<span class="token operator">=</span>./hdisk/boot/ <span class="token parameter variable">--force</span> --allow-floppy /dev/loop0
<span class="token function">sudo</span> grub-install --boot-directory<span class="token operator">=</span>./hdisk/boot/ <span class="token parameter variable">--force</span> --allow-floppy /dev/loop70
；--boot-directory 指向先前我们在虚拟硬盘中建立的boot目录。
；--force --allow-floppy ：指向我们的虚拟硬盘设备文件/dev/loop0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，现在 /hdisk/boot/ 目录下多了一个 grub 目录，表示我们的 GRUB 安装成功。请注意，这里还要在 /hdisk/boot/grub/ 目录下建立一个 <strong>grub.cfg 文本文件</strong>，GRUB 正是通过这个文件内容，查找到<mark>我们的操作系统映像文件</mark>的。</p><p>我们需要在这个文件里写入如下内容。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>menuentry <span class="token string">&#39;HelloOS&#39;</span> <span class="token punctuation">{</span>
insmod part_msdos
insmod ext2
<span class="token builtin class-name">set</span> <span class="token assign-left variable">root</span><span class="token operator">=</span><span class="token string">&#39;hd0,msdos1&#39;</span> <span class="token comment">#我们的硬盘只有一个分区所以是&#39;hd0,msdos1&#39;</span>
multiboot2 /boot/HelloOS.eki <span class="token comment">#加载boot目录下的HelloOS.eki文件</span>
boot <span class="token comment">#引导启动</span>
<span class="token punctuation">}</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout_style</span><span class="token operator">=</span>menu
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${timeout}</span>&quot;</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment">#等待10秒钟自动启动</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="转换虚拟硬盘格式-vboxmanage" tabindex="-1"><a class="header-anchor" href="#转换虚拟硬盘格式-vboxmanage" aria-hidden="true">#</a> 转换虚拟硬盘格式: VBoxManage</h2><p>你可能会好奇，我们前面好不容易生产了 mount 命令能识别的虚拟硬盘，这里为什么又要转换虚拟硬盘的格式呢？</p><p>这是因为这个纯二进制格式只能被我们使用的 <code>Linux</code> 系统识别，但不能被<code>虚拟机</code>本身识别，但是我们最终目的却是让这个虚拟机加载这个虚拟硬盘，从而启动其中的由我们开发的操作系统。</p><p>好在虚拟机提供了专用的转换格式的工具，我们只要输入一行命令即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>VBoxManage convertfromraw ./hd.img <span class="token parameter variable">--format</span> VDI ./hd.vdi
<span class="token punctuation">;</span>convertfromraw 指向原始格式文件
；--format VDI  表示转换成虚拟需要的VDI格式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装虚拟硬盘" tabindex="-1"><a class="header-anchor" href="#安装虚拟硬盘" aria-hidden="true">#</a> 安装虚拟硬盘</h2><p>好了，到这里我们已经生成了 VDI 格式的虚拟硬盘，这正是我们虚拟机所需要的。然而虚拟硬盘必须要安装虚拟机才可以运行，也就是这个 hd.vdi 文件要和虚拟机软件联系起来。</p><p>因为我们之前在建立虚拟机时并没有配置硬盘相关的信息，所以这里需要我们进行手工配置。</p><p>配置虚拟硬盘分两步：</p><ul><li>第一步，配置硬盘控制器，我们使用 SATA 的硬盘，其控制器是 intelAHCI；</li><li>第二步，(先删除虚拟硬盘UUID并重新分配), 挂载虚拟硬盘文件(将虚拟硬盘挂到虚拟机的硬盘控制器)。</li></ul><p>具体操作如下所示。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#第一步 SATA的硬盘其控制器是intelAHCI</span>
VBoxManage storagectl HelloOS <span class="token parameter variable">--name</span> <span class="token string">&quot;SATA&quot;</span> <span class="token parameter variable">--add</span> sata <span class="token parameter variable">--controller</span> IntelAhci <span class="token parameter variable">--portcount</span> <span class="token number">1</span>
<span class="token comment">#第二步</span>
VBoxManage closemedium disk ./hd.vdi <span class="token comment">#删除虚拟硬盘UUID并重新分配</span>
<span class="token comment">#将虚拟硬盘挂到虚拟机的硬盘控制器</span>
VBoxManage storageattach HelloOS <span class="token parameter variable">--storagectl</span> <span class="token string">&quot;SATA&quot;</span> <span class="token parameter variable">--port</span> <span class="token number">1</span> <span class="token parameter variable">--device</span> <span class="token number">0</span> <span class="token parameter variable">--type</span> hdd <span class="token parameter variable">--medium</span> ./hd.vdi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 VirtualBox 虚拟机用 UUID 管理硬盘，所以每次挂载硬盘时，都需要删除虚拟硬盘的 UUID 并重新分配。</p><h2 id="最成功的失败" tabindex="-1"><a class="header-anchor" href="#最成功的失败" aria-hidden="true">#</a> 最成功的失败</h2><p>现在硬盘也安装好了，下面终于可以启动我们的虚拟电脑了，我们依然通过命令启动，在 Linux 终端中输入如下命令就可以了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>VBoxManage startvm HelloOS #启动虚拟机
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入以上命令就会出现以下界面，出现 GRUB 引导菜单。</p><img src="`+m+'" alt="img" style="zoom:50%;"><p>虚拟机启动</p><p>直接按下回车键，就能选择我们的 HelloOS，GRUB 就会加载我们的 HelloOS，但是会出现如下错误。</p><img src="'+k+'" alt="img" style="zoom:50%;"><p>虚拟机GRUB未找到文件</p><p>上面的错误显示，GRUB 没有找到 HelloOS.eki 文件，这是因为我们从来没有向虚拟硬盘中放入 HelloOS.eki 文件，所以才会失败。</p><p><strong>但这是我们最成功的失败，因为我们配置好了虚拟机，手动建造了硬盘，并在其上安装了 GRUB，到这里我们运行测试环境已经准备好了。</strong></p><p>其实你不必太过担心，等我们完成了二级引导器的时候，这个问题会迎刃而解。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>希望今天这节课给你带来成就感，虽然我们才走出了万里长征的第一步。为了这一步我们准备了很多。但是我们始终没忘记这一课程的目的，即我们要从 GRUB 老大哥手里接过权柄，控制计算机王国，为此，我们完成了后面这三个工作。</p><ol><li><p>我们了解了内核映像格式，以便我们对编译产生的内核程序文件进行封装打包。</p></li><li><p>为了方便测试我们的操作系统，我们了解并安装了虚拟机。</p></li><li><p>手动建立了虚拟硬盘，对其格式化，在其中手动安装了 GRUB 引导器，并且启动了虚拟电脑。</p></li></ol><p>虽然我们启动虚拟电脑失败了，但是对我们而言却是巨大的成功，因为它标志着我们测试运行内核的环境已经成功建立，下一课我们将继续实现二级引导器。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请问，我们为什么要把虚拟硬盘格式化成 ext4 文件系统格式呢？</p><p>欢迎你在留言区跟我交流探讨，如果你身边有对写操作系统感兴趣的朋友，也欢迎把这节课分享给他，一起学习。</p><p>好，我是 LMOS，我们下节课见！</p><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1>',85);function B(U,w){const e=l("ExternalLinkIcon");return p(),i("div",null,[v,n("p",null,[s("好，让我们正式开始今天的学习。首先我们来解决内核文件封装的问题，然后动手一步步建好虚拟机和生产虚拟硬盘。课程配套代码你可以在"),n("a",h,[s("这里下载"),o(e)]),s("。")]),g,n("p",null,[s("有了映像文件格式，我们还要有个"),f,s("，我给你提供了一个 Linux 命令行下的工具（在 Gitee 代码仓库中，通过"),n("a",_,[s("这个链接"),o(e)]),s("获取），你只要明白使用方法就可以，如下所示。")]),x])}const S=t(b,[["render",B],["__file","D10-设置工作模式与环境（上）.html.vue"]]);export{S as default};
