import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const e="/assets/ce58ed9419a405f5b403ff031bb5992b-cdad66da.jpg",t="/assets/image-20220707142752983-dbe3775d.png",o="/assets/23d2b5c0918cce7664e158e8bf925be6-a9b21e3b.jpg",c="/assets/04d5fd0788012cd076ef13aa623b65d1-29ab9d03.jpg",l="/assets/image-20220707143329112-437395ff.png",i="/assets/e98a2e51e5410be1a98d8820c60d3211-c0f0f9ae.jpg",r="/assets/9a33d0da55dfdd7dabdeb461af671418-7180ec6f.jpg",u={},k=p(`<h1 id="_22-瞧一瞧linux-伙伴系统如何分配内存" tabindex="-1"><a class="header-anchor" href="#_22-瞧一瞧linux-伙伴系统如何分配内存" aria-hidden="true">#</a> 22 | 瞧一瞧Linux：伙伴系统如何分配内存？</h1><p>你好，我是 LMOS。</p><p>前面我们实现了 Cosmos 的内存管理组件，相信你对计算机内存管理已经有了相当深刻的认识和见解。那么，像 Linux 这样的成熟操作系统，又是怎样实现内存管理的呢？</p><p>这就要说到 Linux 系统中，用来管理==[整] 物理内存页面<mark>的<strong>伙伴系统</strong>，以及负责分配</mark>[碎] 比页更小的内存对象==的 <strong>SLAB 分配器</strong>了。</p><p>我会通过两节课给你理清这两种内存管理技术，这节课我们先来说说伙伴系统，下节课再讲 SLAB。只要你紧跟我的思路，再加上前面的学习，真正理解这两种技术也并不难。</p><h2 id="伙伴系统" tabindex="-1"><a class="header-anchor" href="#伙伴系统" aria-hidden="true">#</a> 伙伴系统</h2><p>伙伴系统源于 Sun 公司的 Solaris 操作系统，是 Solaris 操作系统上极为优秀的物理内存页面管理算法。</p><p>但是，好东西总是容易被别人窃取或者效仿，伙伴系统也成了 Linux 的物理内存管理算法。由于 Linux 的开放和非赢利，这自然无可厚非，这不得不让我们想起了鲁迅《孔乙己》中的：“窃书不算偷”。</p><p>那 Linux 上伙伴系统算法是怎样实现的呢？我们不妨从一些重要的数据结构开始入手。</p><h2 id="怎样表示一个页-page" tabindex="-1"><a class="header-anchor" href="#怎样表示一个页-page" aria-hidden="true">#</a> 怎样表示一个页: page</h2><p>Linux 也是使用分页机制管理物理内存的，即 Linux 把物理内存分成 4KB 大小的页面进行管理。那 Linux 用了一个什么样的数据结构，表示一个页呢？</p><p>早期 Linux 使用了位图，后来使用了字节数组，但是现在 Linux 定义了一个 <code>page 结构体</code>来表示一个页，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token punctuation">{</span>
    <span class="token comment">//page结构体的标志，它决定页面是什么状态</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span>
    <span class="token keyword">union</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token punctuation">{</span>
            <span class="token comment">//挂载上级结构的链表</span>
            <span class="token keyword">struct</span> <span class="token class-name">list_head</span> lru<span class="token punctuation">;</span>
            <span class="token comment">//用于文件系统，address_space结构描述上文件占用了哪些内存页面</span>
            <span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping<span class="token punctuation">;</span>
            <span class="token class-name">pgoff_t</span> index<span class="token punctuation">;</span>  
            <span class="token keyword">unsigned</span> <span class="token keyword">long</span> private<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//DMA设备的地址</span>
        <span class="token keyword">struct</span> <span class="token punctuation">{</span>
            <span class="token class-name">dma_addr_t</span> dma_addr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//当页面用于内存对象时指向相关的数据结构 </span>
        <span class="token keyword">struct</span> <span class="token punctuation">{</span>   
            <span class="token keyword">union</span> <span class="token punctuation">{</span>
                <span class="token keyword">struct</span> <span class="token class-name">list_head</span> slab_list<span class="token punctuation">;</span>
                <span class="token keyword">struct</span> <span class="token punctuation">{</span>  
                    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_64BIT</span></span>
                    <span class="token keyword">int</span> pages<span class="token punctuation">;</span> 
                    <span class="token keyword">int</span> pobjects<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
                    <span class="token keyword">short</span> <span class="token keyword">int</span> pages<span class="token punctuation">;</span>
                    <span class="token keyword">short</span> <span class="token keyword">int</span> pobjects<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">//指向管理SLAB的结构kmem_cache</span>
            <span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>slab_cache<span class="token punctuation">;</span>
            <span class="token comment">//指向SLAB的第一个对象</span>
            <span class="token keyword">void</span> <span class="token operator">*</span>freelist<span class="token punctuation">;</span>   
            <span class="token keyword">union</span> <span class="token punctuation">{</span>
                <span class="token keyword">void</span> <span class="token operator">*</span>s_mem<span class="token punctuation">;</span>  
                <span class="token keyword">unsigned</span> <span class="token keyword">long</span> counters<span class="token punctuation">;</span>   
                <span class="token keyword">struct</span> <span class="token punctuation">{</span>            
                    <span class="token keyword">unsigned</span> inuse<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">;</span>
                    <span class="token keyword">unsigned</span> objects<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">;</span>
                    <span class="token keyword">unsigned</span> frozen<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//用于页表映射相关的字段</span>
        <span class="token keyword">struct</span> <span class="token punctuation">{</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">long</span> _pt_pad_1<span class="token punctuation">;</span>   
            <span class="token class-name">pgtable_t</span> pmd_huge_pte<span class="token punctuation">;</span> 
            <span class="token keyword">unsigned</span> <span class="token keyword">long</span> _pt_pad_2<span class="token punctuation">;</span>
            <span class="token keyword">union</span> <span class="token punctuation">{</span>
                <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>pt_mm<span class="token punctuation">;</span>
                <span class="token class-name">atomic_t</span> pt_frag_refcount<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">//自旋锁</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">ALLOC_SPLIT_PTLOCKS</span></span>
            <span class="token class-name">spinlock_t</span> <span class="token operator">*</span>ptl<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
            <span class="token class-name">spinlock_t</span> ptl<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//用于设备映射</span>
        <span class="token keyword">struct</span> <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">dev_pagemap</span> <span class="token operator">*</span>pgmap<span class="token punctuation">;</span>
            <span class="token keyword">void</span> <span class="token operator">*</span>zone_device_data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> rcu_head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//页面引用计数</span>
    <span class="token class-name">atomic_t</span> _refcount<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">LAST_CPUPID_NOT_IN_PAGE_FLAGS</span></span>
    <span class="token keyword">int</span> _last_cpupid<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span> _struct_page_alignment<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 page 结构看上去非常巨大，信息量很多，但其实它占用的内存很少，根据 Linux 内核配置选项不同，<strong>占用 20～40 个字节空间</strong>。page 结构大量使用了 C 语言 <mark>union 联合体</mark>定义结构字段，这个联合体的大小，<strong>要根据它里面占用内存最大的变量来决定</strong>。</p><p>不难猜出，使用过程中，page 结构正是通过 <mark>flags</mark> 表示它处于哪种状态，根据不同的状态来使用 union 联合体的变量表示的数据信息。如果 page 处于空闲状态，它就会使用 union 联合体中的 <strong>lru 字段</strong>，挂载到对应空闲链表中。</p><p>一“页”障目，不见泰山，这里我们不需要了解 page 结构的所有细节，我们只需要知道 <strong>Linux 内核中，一个 page 结构表示一个物理内存页面就行了。</strong></p><h2 id="怎样表示一个区-zone" tabindex="-1"><a class="header-anchor" href="#怎样表示一个区-zone" aria-hidden="true">#</a> 怎样表示一个区: zone</h2><p>Linux 内核中也有区的逻辑概念，因为硬件的限制，Linux 内核不能对所有的物理内存页统一对待，<strong>所以就把<code>属性相同物理内存页面</code>，归结到了<code>一个区</code>中</strong>。</p><p><strong>不同硬件平台，区的划分也不一样</strong>。比如在 32 位的 x86 平台中，一些使用 DMA 的设备只能访问 0~16MB 的物理空间，因此将 0~16MB 划分为 DMA 区。</p><p><mark>高内存区</mark>则适用于要访问的物理地址空间大于虚拟地址空间，<strong>Linux 内核不能建立直接映射的情况</strong>。除开(DMA区/高内存区)这两个内存区，物理内存中剩余的页面就划分到<strong>常规内存区</strong>了。</p><ul><li>有的平台没有 DMA 区，</li><li>64 位的 x86 平台则没有高内存区。</li></ul><p>在 Linux 里可以查看自己机器上的内存区，指令如下图所示。</p><img src="`+e+`" alt="img" style="zoom:50%;"><blockquote><p>PS：在我的系统上还有<mark>防止内存碎片化的MOVABLE区</mark>和<mark>支持设备热插拔的DEVICE区</mark></p></blockquote><p>Linux 内核用 zone 数据结构表示一个区，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">migratetype</span> <span class="token punctuation">{</span>
    MIGRATE_UNMOVABLE<span class="token punctuation">,</span> <span class="token comment">//不能移动的</span>
    MIGRATE_MOVABLE<span class="token punctuation">,</span>   <span class="token comment">//可移动和</span>
    MIGRATE_RECLAIMABLE<span class="token punctuation">,</span>
    MIGRATE_PCPTYPES<span class="token punctuation">,</span>  <span class="token comment">//属于pcp list的</span>
    MIGRATE_HIGHATOMIC <span class="token operator">=</span> MIGRATE_PCPTYPES<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_CMA</span></span>
    MIGRATE_CMA<span class="token punctuation">,</span>   <span class="token comment">//属于CMA区的</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_MEMORY_ISOLATION</span></span>
    MIGRATE_ISOLATE<span class="token punctuation">,</span>   
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    MIGRATE_TYPES
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//页面空闲链表头</span>
<span class="token keyword">struct</span> <span class="token class-name">free_area</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span>    free_list<span class="token punctuation">[</span>MIGRATE_TYPES<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span>       nr_free<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> _watermark<span class="token punctuation">[</span>NR_WMARK<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> watermark_boost<span class="token punctuation">;</span>
    <span class="token comment">//预留的内存页面数</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> nr_reserved_highatomic<span class="token punctuation">;</span>
    <span class="token comment">//内存区属于哪个内存节点 </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_NUMA</span></span>
    <span class="token keyword">int</span> node<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">struct</span> <span class="token class-name">pglist_data</span>  <span class="token operator">*</span>zone_pgdat<span class="token punctuation">;</span>
    <span class="token comment">//内存区开始的page结构数组的开始下标 </span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span>       zone_start_pfn<span class="token punctuation">;</span>
    
    <span class="token class-name">atomic_long_t</span>       managed_pages<span class="token punctuation">;</span>
    <span class="token comment">//内存区总的页面数</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span>       spanned_pages<span class="token punctuation">;</span>
    <span class="token comment">//内存区存在的页面数</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span>       present_pages<span class="token punctuation">;</span>
    <span class="token comment">//内存区名字</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span>      <span class="token operator">*</span>name<span class="token punctuation">;</span>
    <span class="token comment">//挂载页面page结构的链表</span>
    <span class="token keyword">struct</span> <span class="token class-name">free_area</span>    free_area<span class="token punctuation">[</span>MAX_ORDER<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//内存区的标志</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span>       flags<span class="token punctuation">;</span>
    <span class="token comment">/*保护free_area的自旋锁*/</span>
    <span class="token class-name">spinlock_t</span>      lock<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了节约你的时间，我只列出了需要我们关注的字段。</p><ul><li>其中 <code>_watermark</code> 表示内存页面总量的水位线有 min, low, high 三种状态，可以作为启动内存页面回收的判断标准。</li><li><code>spanned_pages</code> 是该内存区总的页面数。</li></ul><p>为什么要有个 present_pages 字段表示页面真正存在呢？<strong>那是因为一些内存区中存在内存空洞，空洞对应的 page 结构不能用</strong>。你可以做个对比，我们的 Cosmos 不会对内存空洞建立 msadsc_t，避免浪费内存。</p><h3 id="伙伴系统-1" tabindex="-1"><a class="header-anchor" href="#伙伴系统-1" aria-hidden="true">#</a> 伙伴系统</h3><p>在 zone 结构中我们真正要关注的是 <strong>free_area 结构的数组</strong>，这个数组就是用于实现<mark>伙伴系统</mark>的。其中 MAX_ORDER 的值默认为 11，分别表示挂载地址连续的 page 结构数目为 1，2，4，8，16，32……最大为 1024。</p><blockquote><p>Linux 中的内存管理的“页”大小为 4KB。把所有的空闲页分组为 11 个<mark>页块链表</mark>，每个块链表分别包含很多个大小的页块，<mark>有 1、2、4、8、16、32、64、128、256、512 和 1024 个连续页的页块</mark>。最大可以申请 1024 个连续页，对应 4MB 大小的连续内存。每个页块的第一个页的物理地址是该页块大小的整数倍。</p><img src="`+t+'" alt="image-20220707142752983" style="zoom:25%;"></blockquote><p>而 free_area 结构中又是一个 list_head 链表数组，该数组将具有相同迁移类型的 page 结构尽可能地分组，有的页面可以迁移，有的不可以迁移，同一类型的所有相同 order 的 page 结构，就构成了一组 page 结构块。</p><p>分配的时候，会先按请求的 migratetype 从对应的 page 结构块中寻找，如果不成功，才会从其他 migratetype 的 page 结构块中分配。这样做是为了<strong>让内存页迁移更加高效，可以有效降低内存碎片。</strong></p><p>zone 结构中还有一个指针，指向 pglist_data 结构，这个结构也很重要，下面我们一起去研究它。</p><h2 id="怎样表示一个内存节点-numa" tabindex="-1"><a class="header-anchor" href="#怎样表示一个内存节点-numa" aria-hidden="true">#</a> 怎样表示一个内存节点: NUMA</h2><p>在了解 Linux 内存节点数据结构之前，我们先要了解 <strong>NUMA</strong>。</p><p>在很多服务器和大型计算机上，如果物理内存是分布式的，由多个计算节点组成，那么每个 CPU 核都会有自己的本地内存，CPU 在访问它的本地内存的时候就比较快，访问其他 CPU 核内存的时候就比较慢，这种体系结构被称为 <strong>Non-Uniform Memory Access（NUMA）</strong>。</p><p>逻辑如下图所示。</p><img src="'+o+`" alt="img" style="zoom:15%;"><p>NUMA架构</p><p>Linux 对 NUMA 进行了抽象，它可以<strong>将<code>一整块连续物理内存</code>的划分成<code>几个内存节点</code></strong>，也可以<strong>把<code>不是连续的物理内存</code>当成<code>真正的 NUMA</code></strong>。</p><p>那么 Linux 使用什么数据结构表示一个内存节点呢？请看代码，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token punctuation">{</span>
    ZONELIST_FALLBACK<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_NUMA</span></span>
    ZONELIST_NOFALLBACK<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    MAX_ZONELISTS
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">zoneref</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>zone<span class="token punctuation">;</span><span class="token comment">//内存区指针</span>
    <span class="token keyword">int</span> zone_idx<span class="token punctuation">;</span>     <span class="token comment">//内存区对应的索引</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">zonelist</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">zoneref</span> _zonerefs<span class="token punctuation">[</span>MAX_ZONES_PER_ZONELIST <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//zone枚举类型 从0开始</span>
<span class="token keyword">enum</span> <span class="token class-name">zone_type</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ZONE_DMA</span></span>
    ZONE_DMA<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ZONE_DMA32</span></span>
    ZONE_DMA32<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    ZONE_NORMAL<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_HIGHMEM</span></span>
    ZONE_HIGHMEM<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    ZONE_MOVABLE<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ZONE_DEVICE</span></span>
    ZONE_DEVICE<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    __MAX_NR_ZONES

<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//定义MAX_NR_ZONES为__MAX_NR_ZONES 最大为6</span>
<span class="token function">DEFINE</span><span class="token punctuation">(</span>MAX_NR_ZONES<span class="token punctuation">,</span> __MAX_NR_ZONES<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//内存节点</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">pglist_data</span> <span class="token punctuation">{</span>
    <span class="token comment">//定一个内存区数组，最大为6个zone元素</span>
    <span class="token keyword">struct</span> <span class="token class-name">zone</span> node_zones<span class="token punctuation">[</span>MAX_NR_ZONES<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//两个zonelist，一个是指向本节点的的内存区，另一个指向由本节点分配不到内存时可选的备用内存区。</span>
    <span class="token keyword">struct</span> <span class="token class-name">zonelist</span> node_zonelists<span class="token punctuation">[</span>MAX_ZONELISTS<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//本节点有多少个内存区</span>
    <span class="token keyword">int</span> nr_zones<span class="token punctuation">;</span> 
    <span class="token comment">//本节点开始的page索引号</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> node_start_pfn<span class="token punctuation">;</span>
    <span class="token comment">//本节点有多少个可用的页面 </span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> node_present_pages<span class="token punctuation">;</span>
    <span class="token comment">//本节点有多少个可用的页面包含内存空洞 </span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> node_spanned_pages<span class="token punctuation">;</span>
    <span class="token comment">//节点id</span>
    <span class="token keyword">int</span> node_id<span class="token punctuation">;</span>
    <span class="token comment">//交换内存页面相关的字段</span>
    <span class="token class-name">wait_queue_head_t</span> kswapd_wait<span class="token punctuation">;</span>
    <span class="token class-name">wait_queue_head_t</span> pfmemalloc_wait<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>kswapd<span class="token punctuation">;</span> 
    <span class="token comment">//本节点保留的内存页面</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span>       totalreserve_pages<span class="token punctuation">;</span>
    <span class="token comment">//自旋锁</span>
    <span class="token class-name">spinlock_t</span>      lru_lock<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token class-name">pg_data_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，pglist_data 结构中包含了 zonelist 数组。第一个 zonelist 类型的元素指向本节点内的 zone 数组，第二个 zonelist 类型的元素指向其它节点的 zone 数组，而一个 zone 结构中的 free_area 数组中又挂载着 page 结构。</p><p>这样在本节点中分配不到内存页面的时候，就会到其它节点中分配内存页面。当计算机不是 NUMA 时，这时 Linux 就只创建一个节点。</p><h2 id="数据结构之间的关系" tabindex="-1"><a class="header-anchor" href="#数据结构之间的关系" aria-hidden="true">#</a> 数据结构之间的关系</h2><p>现在，我们已经了解了 pglist_data、zonelist、zone、page 这些数据结构的核心内容。</p><p>有了这些必要的知识积累，我再带你从宏观上梳理一下这些结构的关系，只有搞清楚了它们之间的关系，你才能清楚伙伴系统的核心算法的实现。</p><p>根据前面的描述，我们来画张图就清晰了。</p><img src="`+c+'" alt="img" style="zoom:33%;"><img src="'+l+'" alt="image-20220707143329112" style="zoom:25%;"><p>Linux内存数据结构关系</p><p>我相信你看了这张图，再结合上节课 Cosmos 的物理内存管理器的内容，Linux 的伙伴系统算法，你就已经心中有数了。下面，我们去看看何为伙伴。</p><h2 id="何为伙伴" tabindex="-1"><a class="header-anchor" href="#何为伙伴" aria-hidden="true">#</a> 何为伙伴</h2><p>我们一直在说伙伴系统，但是我们还不清楚何为伙伴？</p><p>在我们现实世界中，伙伴就是好朋友，而在 Linux 物理内存页面管理中，<strong>连续且相同大小的 pages 就可以表示成伙伴</strong>。</p><p>比如，第 0 个 page 和第 1 个 page 是伙伴，但是和第 2 个 page 不是伙伴，第 2 个 page 和第 3 个 page 是伙伴。同时，第 0 个 page 和第 1 个 page 连续起来作为一个整体 pages，这和第 2 个 page 和第 3 个 page 连续起来作为一个整体 pages，<strong>它们又是伙伴，依次类推</strong>。</p><p>我们还是来画幅图吧，如下所示。</p><img src="'+i+'" alt="img" style="zoom:15%;"><p>伙伴系统示意图</p><p>上图中，首先最小的 page（0,1）是伙伴，page（2,3）是伙伴，page（4,5）是伙伴，page（6,7）是伙伴，然后 A 与 B 是伙伴，C 与 D 是伙伴，最后 E 与 F 是伙伴。有了图解，你是不是瞬间明白伙伴系统的伙伴了呢？</p><h2 id="分配页面" tabindex="-1"><a class="header-anchor" href="#分配页面" aria-hidden="true">#</a> 分配页面</h2><p>下面，我们开始研究 Linux 下怎样分配物理内存页面，看过前面的数据结构和它们之间的关系，分配物理内存页面的过程很好推理：<strong>首先要找到内存节点，接着找到内存区，然后合适的空闲链表，最后在其中找到页的 page 结构，完成物理内存页面的分配。</strong></p><h3 id="通过接口找到内存节点" tabindex="-1"><a class="header-anchor" href="#通过接口找到内存节点" aria-hidden="true">#</a> 通过接口找到内存节点</h3><p>我们先来了解一下分配内存页面的接口，我用一幅图来表示接口以及它们调用关系。我相信图解是理解接口函数的最佳方式，如下所示。</p><img src="'+r+`" alt="img" style="zoom:15%;"><p>分配内存页面接口</p><p>上图中，虚线框中为接口函数，下面则是分配内存页面的核心实现，所有的接口函数都会调用到 alloc_pages 函数，而这个函数最终会调用 __alloc_pages_nodemask 函数完成内存页面的分配。</p><p>下面我们来看看 alloc_pages 函数的形式，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">alloc_pages_current</span><span class="token punctuation">(</span><span class="token class-name">gfp_t</span> gfp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> order<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">mempolicy</span> <span class="token operator">*</span>pol <span class="token operator">=</span> <span class="token operator">&amp;</span>default_policy<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>gfp <span class="token operator">&amp;</span> __GFP_THISNODE<span class="token punctuation">)</span><span class="token punctuation">)</span>
        pol <span class="token operator">=</span> <span class="token function">get_task_policy</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pol<span class="token operator">-&gt;</span>mode <span class="token operator">==</span> MPOL_INTERLEAVE<span class="token punctuation">)</span>
        page <span class="token operator">=</span> <span class="token function">alloc_page_interleave</span><span class="token punctuation">(</span>gfp<span class="token punctuation">,</span> order<span class="token punctuation">,</span> <span class="token function">interleave_nodes</span><span class="token punctuation">(</span>pol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        page <span class="token operator">=</span> <span class="token function">__alloc_pages_nodemask</span><span class="token punctuation">(</span>gfp<span class="token punctuation">,</span> order<span class="token punctuation">,</span>
                <span class="token function">policy_node</span><span class="token punctuation">(</span>gfp<span class="token punctuation">,</span> pol<span class="token punctuation">,</span> <span class="token function">numa_node_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token function">policy_nodemask</span><span class="token punctuation">(</span>gfp<span class="token punctuation">,</span> pol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span> <span class="token function">alloc_pages</span><span class="token punctuation">(</span><span class="token class-name">gfp_t</span> gfp_mask<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">alloc_pages_current</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们这里不需要关注 alloc_pages_current 函数的其它细节，<strong>只要知道它最终要调用 __alloc_pages_nodemask 函数</strong>，而且我们还要搞清楚它的参数，order 很好理解，它表示请求分配 2 的 order 次方个页面，<strong>重点是 gfp_t 类型的 gfp_mask</strong>。</p><p>gfp_mask 的类型和取值如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __bitwise <span class="token class-name">gfp_t</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_DMA</span>      <span class="token expression"><span class="token number">0x01u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_HIGHMEM</span>      <span class="token expression"><span class="token number">0x02u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_DMA32</span>        <span class="token expression"><span class="token number">0x04u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_MOVABLE</span>      <span class="token expression"><span class="token number">0x08u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_RECLAIMABLE</span>  <span class="token expression"><span class="token number">0x10u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_HIGH</span>     <span class="token expression"><span class="token number">0x20u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_IO</span>       <span class="token expression"><span class="token number">0x40u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_FS</span>       <span class="token expression"><span class="token number">0x80u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_ZERO</span>     <span class="token expression"><span class="token number">0x100u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_ATOMIC</span>       <span class="token expression"><span class="token number">0x200u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_DIRECT_RECLAIM</span>   <span class="token expression"><span class="token number">0x400u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_KSWAPD_RECLAIM</span>   <span class="token expression"><span class="token number">0x800u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_WRITE</span>        <span class="token expression"><span class="token number">0x1000u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_NOWARN</span>       <span class="token expression"><span class="token number">0x2000u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_RETRY_MAYFAIL</span>    <span class="token expression"><span class="token number">0x4000u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_NOFAIL</span>       <span class="token expression"><span class="token number">0x8000u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_NORETRY</span>      <span class="token expression"><span class="token number">0x10000u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_MEMALLOC</span>     <span class="token expression"><span class="token number">0x20000u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_COMP</span>     <span class="token expression"><span class="token number">0x40000u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_NOMEMALLOC</span>   <span class="token expression"><span class="token number">0x80000u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_HARDWALL</span>     <span class="token expression"><span class="token number">0x100000u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_THISNODE</span>     <span class="token expression"><span class="token number">0x200000u</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">___GFP_ACCOUNT</span>      <span class="token expression"><span class="token number">0x400000u</span></span></span>
<span class="token comment">//需要原子分配内存不得让请求者进入睡眠</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_ATOMIC</span>  <span class="token expression"><span class="token punctuation">(</span>__GFP_HIGH<span class="token operator">|</span>__GFP_ATOMIC<span class="token operator">|</span>__GFP_KSWAPD_RECLAIM<span class="token punctuation">)</span></span></span>
<span class="token comment">//分配用于内核自己使用的内存，可以有IO和文件系统相关的操作</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_KERNEL</span>  <span class="token expression"><span class="token punctuation">(</span>__GFP_RECLAIM <span class="token operator">|</span> __GFP_IO <span class="token operator">|</span> __GFP_FS<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_KERNEL_ACCOUNT</span> <span class="token expression"><span class="token punctuation">(</span>GFP_KERNEL <span class="token operator">|</span> __GFP_ACCOUNT<span class="token punctuation">)</span></span></span>
<span class="token comment">//分配内存不能睡眠，不能有I/O和文件系统相关的操作</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_NOWAIT</span>  <span class="token expression"><span class="token punctuation">(</span>__GFP_KSWAPD_RECLAIM<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_NOIO</span>    <span class="token expression"><span class="token punctuation">(</span>__GFP_RECLAIM<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_NOFS</span>    <span class="token expression"><span class="token punctuation">(</span>__GFP_RECLAIM <span class="token operator">|</span> __GFP_IO<span class="token punctuation">)</span></span></span>
<span class="token comment">//分配用于用户进程的内存</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_USER</span>    <span class="token expression"><span class="token punctuation">(</span>__GFP_RECLAIM <span class="token operator">|</span> __GFP_IO <span class="token operator">|</span> __GFP_FS <span class="token operator">|</span> __GFP_HARDWALL<span class="token punctuation">)</span></span></span>
<span class="token comment">//用于DMA设备的内存</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_DMA</span>     <span class="token expression">__GFP_DMA</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_DMA32</span>   <span class="token expression">__GFP_DMA32</span></span>
<span class="token comment">//把高端内存区的内存分配给用户进程</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_HIGHUSER</span>    <span class="token expression"><span class="token punctuation">(</span>GFP_USER <span class="token operator">|</span> __GFP_HIGHMEM<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_HIGHUSER_MOVABLE</span>    <span class="token expression"><span class="token punctuation">(</span>GFP_HIGHUSER <span class="token operator">|</span> __GFP_MOVABLE<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_TRANSHUGE_LIGHT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>GFP_HIGHUSER_MOVABLE <span class="token operator">|</span> __GFP_COMP <span class="token operator">|</span> \\__GFP_NOMEMALLOC <span class="token operator">|</span> __GFP_NOWARN<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>__GFP_RECLAIM<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GFP_TRANSHUGE</span>   <span class="token expression"><span class="token punctuation">(</span>GFP_TRANSHUGE_LIGHT <span class="token operator">|</span> __GFP_DIRECT_RECLAIM<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难发现，gfp_t 类型就是 int 类型，用其中位的状态表示请求分配不同的内存区的内存页面，以及分配内存页面的不同方式。</p><h3 id="开始分配" tabindex="-1"><a class="header-anchor" href="#开始分配" aria-hidden="true">#</a> 开始分配</h3><p>前面我们已经搞清楚了，内存页面分配接口的参数。下面我们进入分配内存页面的主要函数，这个 <strong>__alloc_pages_nodemask 函数</strong>主要干了三件事。</p><p>\\1. 准备分配页面的参数；</p><p>\\2. 进入快速分配路径；</p><p>\\3. 若快速分配路径没有分配到页面，就进入慢速分配路径。</p><p>让我们来看看它的代码实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">__alloc_pages_nodemask</span><span class="token punctuation">(</span><span class="token class-name">gfp_t</span> gfp_mask<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">,</span> <span class="token keyword">int</span> preferred_nid<span class="token punctuation">,</span>  <span class="token class-name">nodemask_t</span> <span class="token operator">*</span>nodemask<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> alloc_flags <span class="token operator">=</span> ALLOC_WMARK_LOW<span class="token punctuation">;</span>
    <span class="token class-name">gfp_t</span> alloc_mask<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">alloc_context</span> ac <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//分配页面的order大于等于最大的order直接返回NULL</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>order <span class="token operator">&gt;=</span> MAX_ORDER<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">WARN_ON_ONCE</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>gfp_mask <span class="token operator">&amp;</span> __GFP_NOWARN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    gfp_mask <span class="token operator">&amp;=</span> gfp_allowed_mask<span class="token punctuation">;</span>
    alloc_mask <span class="token operator">=</span> gfp_mask<span class="token punctuation">;</span>
    <span class="token comment">//准备分配页面的参数放在ac变量中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">prepare_alloc_pages</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">,</span> order<span class="token punctuation">,</span> preferred_nid<span class="token punctuation">,</span> nodemask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ac<span class="token punctuation">,</span> <span class="token operator">&amp;</span>alloc_mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>alloc_flags<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    alloc_flags <span class="token operator">|=</span> <span class="token function">alloc_flags_nofragment</span><span class="token punctuation">(</span>ac<span class="token punctuation">.</span>preferred_zoneref<span class="token operator">-&gt;</span>zone<span class="token punctuation">,</span> gfp_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//进入快速分配路径</span>
    page <span class="token operator">=</span> <span class="token function">get_page_from_freelist</span><span class="token punctuation">(</span>alloc_mask<span class="token punctuation">,</span> order<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ac<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    alloc_mask <span class="token operator">=</span> <span class="token function">current_gfp_context</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ac<span class="token punctuation">.</span>spread_dirty_pages <span class="token operator">=</span> false<span class="token punctuation">;</span>
    ac<span class="token punctuation">.</span>nodemask <span class="token operator">=</span> nodemask<span class="token punctuation">;</span>
    <span class="token comment">//进入慢速分配路径</span>
    page <span class="token operator">=</span> <span class="token function">__alloc_pages_slowpath</span><span class="token punctuation">(</span>alloc_mask<span class="token punctuation">,</span> order<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ac<span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token operator">:</span>
    <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="准备分配页面的参数" tabindex="-1"><a class="header-anchor" href="#准备分配页面的参数" aria-hidden="true">#</a> 准备分配页面的参数</h3><p>我想你在 __alloc_pages_nodemask 函数中，一定看到了<strong>一个变量 ac 是 alloc_context 类型的</strong>，顾名思义，分配参数就保存在了 ac 这个分配上下文的变量中。</p><p>prepare_alloc_pages 函数根据传递进来的参数，还会对 ac 变量做进一步处理，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">alloc_context</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">zonelist</span> <span class="token operator">*</span>zonelist<span class="token punctuation">;</span>
    <span class="token class-name">nodemask_t</span> <span class="token operator">*</span>nodemask<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">zoneref</span> <span class="token operator">*</span>preferred_zoneref<span class="token punctuation">;</span>
    <span class="token keyword">int</span> migratetype<span class="token punctuation">;</span>
    <span class="token keyword">enum</span> <span class="token class-name">zone_type</span> highest_zoneidx<span class="token punctuation">;</span>
    bool spread_dirty_pages<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> bool <span class="token function">prepare_alloc_pages</span><span class="token punctuation">(</span><span class="token class-name">gfp_t</span> gfp_mask<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">,</span>
        <span class="token keyword">int</span> preferred_nid<span class="token punctuation">,</span> <span class="token class-name">nodemask_t</span> <span class="token operator">*</span>nodemask<span class="token punctuation">,</span>
        <span class="token keyword">struct</span> <span class="token class-name">alloc_context</span> <span class="token operator">*</span>ac<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> <span class="token operator">*</span>alloc_mask<span class="token punctuation">,</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>alloc_flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//从哪个内存区分配内存</span>
    ac<span class="token operator">-&gt;</span>highest_zoneidx <span class="token operator">=</span> <span class="token function">gfp_zone</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据节点id计算出zone的指针</span>
    ac<span class="token operator">-&gt;</span>zonelist <span class="token operator">=</span> <span class="token function">node_zonelist</span><span class="token punctuation">(</span>preferred_nid<span class="token punctuation">,</span> gfp_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ac<span class="token operator">-&gt;</span>nodemask <span class="token operator">=</span> nodemask<span class="token punctuation">;</span>
    <span class="token comment">//计算出free_area中的migratetype值，比如如分配的掩码为GFP_KERNEL，那么其类型为MIGRATE_UNMOVABLE；</span>
    ac<span class="token operator">-&gt;</span>migratetype <span class="token operator">=</span> <span class="token function">gfp_migratetype</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//处理CMA相关的分配选项</span>
    <span class="token operator">*</span>alloc_flags <span class="token operator">=</span> <span class="token function">current_alloc_flags</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">,</span> <span class="token operator">*</span>alloc_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ac<span class="token operator">-&gt;</span>spread_dirty_pages <span class="token operator">=</span> <span class="token punctuation">(</span>gfp_mask <span class="token operator">&amp;</span> __GFP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//搜索nodemask表示的节点中可用的zone保存在preferred_zoneref</span>
    ac<span class="token operator">-&gt;</span>preferred_zoneref <span class="token operator">=</span> <span class="token function">first_zones_zonelist</span><span class="token punctuation">(</span>ac<span class="token operator">-&gt;</span>zonelist<span class="token punctuation">,</span>
                    ac<span class="token operator">-&gt;</span>highest_zoneidx<span class="token punctuation">,</span> ac<span class="token operator">-&gt;</span>nodemask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，prepare_alloc_pages 函数根据传递进入的参数，就能找出要分配内存区、候选内存区以及内存区中空闲链表的 migratetype 类型。它把这些全部收集到 ac 结构中，只要它返回 true，就说明分配内存页面的参数已经准备好了。</p><h3 id="plan-a-快速分配路径" tabindex="-1"><a class="header-anchor" href="#plan-a-快速分配路径" aria-hidden="true">#</a> Plan A：快速分配路径</h3><p>为了优化内存页面的分配性能，在一定情况下可以进入快速分配路径，请注意**快速分配路径<code>不会处理</code>内存页面合并和回收。**我们一起来看看代码，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>
<span class="token function">get_page_from_freelist</span><span class="token punctuation">(</span><span class="token class-name">gfp_t</span> gfp_mask<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">,</span> <span class="token keyword">int</span> alloc_flags<span class="token punctuation">,</span>
                        <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">alloc_context</span> <span class="token operator">*</span>ac<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">zoneref</span> <span class="token operator">*</span>z<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>zone<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">pglist_data</span> <span class="token operator">*</span>last_pgdat_dirty_limit <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    bool no_fallback<span class="token punctuation">;</span>
retry<span class="token operator">:</span>
    no_fallback <span class="token operator">=</span> alloc_flags <span class="token operator">&amp;</span> ALLOC_NOFRAGMENT<span class="token punctuation">;</span>
    z <span class="token operator">=</span> ac<span class="token operator">-&gt;</span>preferred_zoneref<span class="token punctuation">;</span>
    <span class="token comment">//遍历ac-&gt;preferred_zoneref中每个内存区</span>
    <span class="token function">for_next_zone_zonelist_nodemask</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ac<span class="token operator">-&gt;</span>highest_zoneidx<span class="token punctuation">,</span>
                    ac<span class="token operator">-&gt;</span>nodemask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> mark<span class="token punctuation">;</span>
        <span class="token comment">//查看内存水位线</span>
        mark <span class="token operator">=</span> <span class="token function">wmark_pages</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> alloc_flags <span class="token operator">&amp;</span> ALLOC_WMARK_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//检查内存区中空闲内存是否在水印之上</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">zone_watermark_fast</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> order<span class="token punctuation">,</span> mark<span class="token punctuation">,</span>
                       ac<span class="token operator">-&gt;</span>highest_zoneidx<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">,</span>
                       gfp_mask<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
            <span class="token comment">//当前内存区的内存结点需要做内存回收吗</span>
            ret <span class="token operator">=</span> <span class="token function">node_reclaim</span><span class="token punctuation">(</span>zone<span class="token operator">-&gt;</span>zone_pgdat<span class="token punctuation">,</span> gfp_mask<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//快速分配路径不处理页面回收的问题</span>
            <span class="token keyword">case</span> NODE_RECLAIM_NOSCAN<span class="token operator">:</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> NODE_RECLAIM_FULL<span class="token operator">:</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token comment">//根据分配的order数量判断内存区的水位线是否满足要求</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">zone_watermark_ok</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> order<span class="token punctuation">,</span> mark<span class="token punctuation">,</span>
                    ac<span class="token operator">-&gt;</span>highest_zoneidx<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token comment">//如果可以可就从这个内存区开始分配</span>
                    <span class="token keyword">goto</span> try_this_zone<span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

try_this_zone<span class="token operator">:</span>
        <span class="token comment">//真正分配内存页面</span>
        page <span class="token operator">=</span> <span class="token function">rmqueue</span><span class="token punctuation">(</span>ac<span class="token operator">-&gt;</span>preferred_zoneref<span class="token operator">-&gt;</span>zone<span class="token punctuation">,</span> zone<span class="token punctuation">,</span> order<span class="token punctuation">,</span>
                gfp_mask<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">,</span> ac<span class="token operator">-&gt;</span>migratetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//清除一些标志或者设置联合页等等</span>
            <span class="token function">prep_new_page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> order<span class="token punctuation">,</span> gfp_mask<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> page<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>no_fallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        alloc_flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>ALLOC_NOFRAGMENT<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> retry<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述这段代码中，我删除了一部分非核心代码，如果你有兴趣深入了解请看这里。这个函数的逻辑就是<strong>遍历所有的候选内存区，然后针对每个内存区检查水位线，是不是执行内存回收机制，当一切检查通过之后，就开始调用 rmqueue 函数执行内存页面分配。</strong></p><h3 id="plan-b-慢速分配路径" tabindex="-1"><a class="header-anchor" href="#plan-b-慢速分配路径" aria-hidden="true">#</a> Plan B：慢速分配路径</h3><p>当快速分配路径没有分配到页面的时候，就会进入慢速分配路径。跟快速路径相比，慢速路径最主要的不同是它**<code>会执行</code>内存页面回收**，回收页面之后会进行多次重复分配，直到最后分配到内存页面，或者分配失败，具体代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>
<span class="token function">__alloc_pages_slowpath</span><span class="token punctuation">(</span><span class="token class-name">gfp_t</span> gfp_mask<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">,</span>
                        <span class="token keyword">struct</span> <span class="token class-name">alloc_context</span> <span class="token operator">*</span>ac<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    bool can_direct_reclaim <span class="token operator">=</span> gfp_mask <span class="token operator">&amp;</span> __GFP_DIRECT_RECLAIM<span class="token punctuation">;</span>
    <span class="token keyword">const</span> bool costly_order <span class="token operator">=</span> order <span class="token operator">&gt;</span> PAGE_ALLOC_COSTLY_ORDER<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> alloc_flags<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> did_some_progress<span class="token punctuation">;</span>
    <span class="token keyword">enum</span> <span class="token class-name">compact_priority</span> compact_priority<span class="token punctuation">;</span>
    <span class="token keyword">enum</span> <span class="token class-name">compact_result</span> compact_result<span class="token punctuation">;</span>
    <span class="token keyword">int</span> compaction_retries<span class="token punctuation">;</span>
    <span class="token keyword">int</span> no_progress_loops<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cpuset_mems_cookie<span class="token punctuation">;</span>
    <span class="token keyword">int</span> reserve_flags<span class="token punctuation">;</span>

retry<span class="token operator">:</span>
    <span class="token comment">//唤醒所有交换内存的线程</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>alloc_flags <span class="token operator">&amp;</span> ALLOC_KSWAPD<span class="token punctuation">)</span>
        <span class="token function">wake_all_kswapds</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> gfp_mask<span class="token punctuation">,</span> ac<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//依然调用快速分配路径入口函数尝试分配内存页面</span>
     page <span class="token operator">=</span> <span class="token function">get_page_from_freelist</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">,</span> order<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">,</span> ac<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> got_pg<span class="token punctuation">;</span>

    <span class="token comment">//尝试直接回收内存并且再分配内存页面    </span>
    page <span class="token operator">=</span> <span class="token function">__alloc_pages_direct_reclaim</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">,</span> order<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">,</span> ac<span class="token punctuation">,</span>
                            <span class="token operator">&amp;</span>did_some_progress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> got_pg<span class="token punctuation">;</span>

    <span class="token comment">//尝试直接压缩内存并且再分配内存页面</span>
    page <span class="token operator">=</span> <span class="token function">__alloc_pages_direct_compact</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">,</span> order<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">,</span> ac<span class="token punctuation">,</span>
                    compact_priority<span class="token punctuation">,</span> <span class="token operator">&amp;</span>compact_result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> got_pg<span class="token punctuation">;</span>
    <span class="token comment">//检查对于给定的分配请求，重试回收是否有意义</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">should_reclaim_retry</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">,</span> order<span class="token punctuation">,</span> ac<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">,</span>
                 did_some_progress <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>no_progress_loops<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> retry<span class="token punctuation">;</span>
    <span class="token comment">//检查对于给定的分配请求，重试压缩是否有意义</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>did_some_progress <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
            <span class="token function">should_compact_retry</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> order<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">,</span>
                compact_result<span class="token punctuation">,</span> <span class="token operator">&amp;</span>compact_priority<span class="token punctuation">,</span>
                <span class="token operator">&amp;</span>compaction_retries<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> retry<span class="token punctuation">;</span>
    <span class="token comment">//回收、压缩内存已经失败了，开始尝试杀死进程，回收内存页面 </span>
    page <span class="token operator">=</span> <span class="token function">__alloc_pages_may_oom</span><span class="token punctuation">(</span>gfp_mask<span class="token punctuation">,</span> order<span class="token punctuation">,</span> ac<span class="token punctuation">,</span> <span class="token operator">&amp;</span>did_some_progress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> got_pg<span class="token punctuation">;</span>
got_pg<span class="token operator">:</span>
    <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，依然会调用快速分配路径入口函数进行分配，不过到这里大概率会分配失败，如果能成功分配，也就不会进入到 __alloc_pages_slowpath 函数中。</p><p>__alloc_pages_slowpath 函数一开始会唤醒所有用于内存交换回收的线程 get_page_from_freelist 函数分配失败了就会进行内存回收，内存回收主要是释放一些文件占用的内存页面。如果内存回收不行，就会就进入到内存压缩环节。</p><p>这里有一个常见的误区你要留意，<strong>内存压缩不是指压缩内存中的数据，而是指移动内存页面，进行内存碎片整理</strong>，**腾出更大的连续的内存空间。**如果内存碎片整理了，还是不能成功分配内存，就要杀死进程以便释放更多内存页面了。</p><p>因为回收内存的机制不是重点，我们主要关注的是<mark>伙伴系统</mark>的实现，这里你只要明白它们工作流程就好了。</p><h3 id="如何分配内存页面" tabindex="-1"><a class="header-anchor" href="#如何分配内存页面" aria-hidden="true">#</a> 如何分配内存页面</h3><p>无论快速分配路径还是慢速分配路径，最终执行内存页面分配动作的始终是 get_page_from_freelist 函数，更准确地说，实际完成分配任务的是 <strong>rmqueue 函数</strong>。</p><p>我们弄懂了这个函数，才能真正搞清楚伙伴系统的核心原理，后面这段是它的代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">rmqueue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>preferred_zone<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>zone<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">,</span>
            <span class="token class-name">gfp_t</span> gfp_flags<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> alloc_flags<span class="token punctuation">,</span>
            <span class="token keyword">int</span> migratetype<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>order <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_CMA<span class="token punctuation">)</span> <span class="token operator">||</span> alloc_flags <span class="token operator">&amp;</span> ALLOC_CMA <span class="token operator">||</span>
                migratetype <span class="token operator">!=</span> MIGRATE_MOVABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果order等于0,就说明是分配一个页面，说就从pcplist中分配</span>
            page <span class="token operator">=</span> <span class="token function">rmqueue_pcplist</span><span class="token punctuation">(</span>preferred_zone<span class="token punctuation">,</span> zone<span class="token punctuation">,</span> gfp_flags<span class="token punctuation">,</span>
                    migratetype<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//加锁并关中断 </span>
    <span class="token function">spin_lock_irqsave</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zone<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        page <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> alloc_flags <span class="token operator">&amp;</span> ALLOC_HARDER<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//从free_area中分配</span>
            page <span class="token operator">=</span> <span class="token function">__rmqueue_smallest</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> order<span class="token punctuation">,</span> MIGRATE_HIGHATOMIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span>
        <span class="token comment">//它最后也是调用__rmqueue_smallest函数</span>
            page <span class="token operator">=</span> <span class="token function">__rmqueue</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> order<span class="token punctuation">,</span> migratetype<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>page <span class="token operator">&amp;&amp;</span> <span class="token function">check_new_pages</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>zone<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">zone_statistics</span><span class="token punctuation">(</span>preferred_zone<span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">local_irq_restore</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token operator">:</span>
    <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中，我们只需要关注两个函数 rmqueue_pcplist 和 __rmqueue_smallest，这是分配内存页面的核心函数。</p><p>先来看看 rmqueue_pcplist 函数，在请求分配一个页面的时候，就是用它从 pcplist 中分配页面的。所谓的 pcp 是指，每个 CPU 都有一个内存页面高速缓冲，由数据结构 per_cpu_pageset 描述，包含在内存区中。</p><p>在 Linux 内核中，系统会经常请求和释放单个页面。如果针对每个 CPU，都建立出预先分配了单个内存页面的链表，用于满足本地 CPU 发出的单一内存请求，就能提升系统的性能，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">per_cpu_pages</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span>      <span class="token comment">//列表中的页面数</span>
    <span class="token keyword">int</span> high<span class="token punctuation">;</span>       <span class="token comment">//页面数高于水位线，需要清空</span>
    <span class="token keyword">int</span> batch<span class="token punctuation">;</span>      <span class="token comment">//从伙伴系统增加/删除的块数</span>
    <span class="token comment">//页面列表，每个迁移类型一个。</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> lists<span class="token punctuation">[</span>MIGRATE_PCPTYPES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">per_cpu_pageset</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">per_cpu_pages</span> pcp<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_NUMA</span></span>
    s8 expire<span class="token punctuation">;</span>
    u16 vm_numa_stat_diff<span class="token punctuation">[</span>NR_VM_NUMA_STAT_ITEMS<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SMP</span></span>
    s8 stat_threshold<span class="token punctuation">;</span>
    s8 vm_stat_diff<span class="token punctuation">[</span>NR_VM_ZONE_STAT_ITEMS<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">__rmqueue_pcplist</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>zone<span class="token punctuation">,</span> <span class="token keyword">int</span> migratetype<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> alloc_flags<span class="token punctuation">,</span><span class="token keyword">struct</span> <span class="token class-name">per_cpu_pages</span> <span class="token operator">*</span>pcp<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>list<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">list_empty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果list为空，就从这个内存区中分配一部分页面到pcp中来</span>
            pcp<span class="token operator">-&gt;</span>count <span class="token operator">+=</span> <span class="token function">rmqueue_bulk</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                    pcp<span class="token operator">-&gt;</span>batch<span class="token punctuation">,</span> list<span class="token punctuation">,</span>
                    migratetype<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">list_empty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//获取list上第一个page结构</span>
        page <span class="token operator">=</span> <span class="token function">list_first_entry</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">page</span><span class="token punctuation">,</span> lru<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//脱链</span>
        <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page<span class="token operator">-&gt;</span>lru<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//减少pcp页面计数</span>
        pcp<span class="token operator">-&gt;</span>count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">check_new_pcp</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">rmqueue_pcplist</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>preferred_zone<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>zone<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> gfp_flags<span class="token punctuation">,</span><span class="token keyword">int</span> migratetype<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> alloc_flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">per_cpu_pages</span> <span class="token operator">*</span>pcp<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>list<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span>
    <span class="token comment">//关中断</span>
    <span class="token function">local_irq_save</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取当前CPU下的pcp</span>
    pcp <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token function">this_cpu_ptr</span><span class="token punctuation">(</span>zone<span class="token operator">-&gt;</span>pageset<span class="token punctuation">)</span><span class="token operator">-&gt;</span>pcp<span class="token punctuation">;</span>
    <span class="token comment">//获取pcp下迁移的list链表</span>
    list <span class="token operator">=</span> <span class="token operator">&amp;</span>pcp<span class="token operator">-&gt;</span>lists<span class="token punctuation">[</span>migratetype<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//摘取list上的page结构</span>
    page <span class="token operator">=</span> <span class="token function">__rmqueue_pcplist</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span>  migratetype<span class="token punctuation">,</span> alloc_flags<span class="token punctuation">,</span> pcp<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//开中断</span>
    <span class="token function">local_irq_restore</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的注释已经很清楚了，它主要是优化了请求分配单个内存页面的性能。但是遇到多个内存页面的分配请求，就会调用 __rmqueue_smallest 函数，从 free_area 数组中分配。</p><p>我们一起来看看 __rmqueue_smallest 函数的代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">get_page_from_free_area</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">free_area</span> <span class="token operator">*</span>area<span class="token punctuation">,</span><span class="token keyword">int</span> migratetype<span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token comment">//返回free_list[migratetype]中的第一个page若没有就返回NULL</span>
    <span class="token keyword">return</span> <span class="token function">list_first_entry_or_null</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>area<span class="token operator">-&gt;</span>free_list<span class="token punctuation">[</span>migratetype<span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token keyword">struct</span> <span class="token class-name">page</span><span class="token punctuation">,</span> lru<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">del_page_from_free_list</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>zone<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">page_reported</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">__ClearPageReported</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//脱链</span>
    <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page<span class="token operator">-&gt;</span>lru<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//清除page中伙伴系统的标志</span>
    <span class="token function">__ClearPageBuddy</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_page_private</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//减少free_area中页面计数</span>
    zone<span class="token operator">-&gt;</span>free_area<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">.</span>nr_free<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add_to_free_list</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>zone<span class="token punctuation">,</span>
                    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">,</span> <span class="token keyword">int</span> migratetype<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">free_area</span> <span class="token operator">*</span>area <span class="token operator">=</span> <span class="token operator">&amp;</span>zone<span class="token operator">-&gt;</span>free_area<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//把一组page的首个page加入对应的free_area中</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page<span class="token operator">-&gt;</span>lru<span class="token punctuation">,</span> <span class="token operator">&amp;</span>area<span class="token operator">-&gt;</span>free_list<span class="token punctuation">[</span>migratetype<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    area<span class="token operator">-&gt;</span>nr_free<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//分割一组页</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">expand</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>zone<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span>
    <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> migratetype<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//最高order下连续的page数 比如high = 3 size=8</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> high<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">&gt;</span> low<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        high<span class="token operator">--</span><span class="token punctuation">;</span>
        size <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//每次循环左移一位 4,2,1</span>
        <span class="token comment">//标记为保护页，当其伙伴被释放时，允许合并</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">set_page_guard</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> <span class="token operator">&amp;</span>page<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> migratetype<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">//把另一半pages加入对应的free_area中</span>
        <span class="token function">add_to_free_list</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">,</span> zone<span class="token punctuation">,</span> high<span class="token punctuation">,</span> migratetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置伙伴</span>
        <span class="token function">set_buddy_order</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> __always_inline <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">__rmqueue_smallest</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">zone</span> <span class="token operator">*</span>zone<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">,</span><span class="token keyword">int</span> migratetype<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> current_order<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">free_area</span> <span class="token operator">*</span>area<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>current_order <span class="token operator">=</span> order<span class="token punctuation">;</span> current_order <span class="token operator">&lt;</span> MAX_ORDER<span class="token punctuation">;</span> <span class="token operator">++</span>current_order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取current_order对应的free_area</span>
        area <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>zone<span class="token operator">-&gt;</span>free_area<span class="token punctuation">[</span>current_order<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取free_area中对应migratetype为下标的free_list中的page</span>
        page <span class="token operator">=</span> <span class="token function">get_page_from_free_area</span><span class="token punctuation">(</span>area<span class="token punctuation">,</span> migratetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">//脱链page</span>
        <span class="token function">del_page_from_free_list</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> zone<span class="token punctuation">,</span> current_order<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//分割伙伴</span>
        <span class="token function">expand</span><span class="token punctuation">(</span>zone<span class="token punctuation">,</span> page<span class="token punctuation">,</span> order<span class="token punctuation">,</span> current_order<span class="token punctuation">,</span> migratetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">set_pcppage_migratetype</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> migratetype<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> page<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在 __rmqueue_smallest 函数中，首先要取得 current_order 对应的 free_area 区中 page，若没有，就继续增加 current_order，直到最大的 MAX_ORDER。要是得到一组连续 page 的首地址，就对其脱链，然后调用 expand 函数分割伙伴。</p><p>可以说 <strong>expand 函数是完成伙伴算法的核心</strong>，结合注释你有没有发现，它和我们 Cosmos 物理内存分配算法有点类似呢？好，伙伴系统算法的核心，我们现在已经搞清楚了，下节课我再跟你说说 SLAB。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>至此，伙伴系统我们就介绍完了，我来帮你梳理一下本课程的重点，主要有两个方面。</p><p>首先，我们学习了伙伴系统的数据结构，我们从页开始，Linux 用 page 结构代表一个物理内存页面，接着在 page 上层定义了内存区 zone，这是为了不同的地址空间的分配要求。然后 Linux 为了支持 NUMA 体系的计算机，而定义了**节点 pglist_data，**每个节点中包含了多个 zone，我们一起理清了这些数据结构之间的关系。</p><p>之后，我们进入到分配页面这一步，为了理解伙伴系统的内存分配的原理，我们研究了伙伴系统的分配接口，然后重点分析了它的快速分配路径和慢速分配路径。</p><p>只有在快速分配路径失败之后，才会进入慢速分配路径，慢速分配路径中会进行内存回收相关的工作。最后，我们一起了解了 expand 函数是如何分割伙伴，完成页面分配的。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>在默认配置下，Linux 伙伴系统能分配多大的连续物理内存？</p><p>欢迎你在留言区跟我交流互动，也欢迎你把这节课转给对 Linux 伙伴系统感兴趣的朋友，一去学习进步。</p><p>好，我是 LMOS，我们下节课见！</p>`,120),d=[k];function m(v,_){return s(),a("div",null,d)}const y=n(u,[["render",m],["__file","H22-Linux的伙伴系统.html.vue"]]);export{y as default};
