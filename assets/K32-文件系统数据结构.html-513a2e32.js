import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,d as e}from"./app-cdabc73c.js";const p="/assets/118c2bc88574013ec38fc8b3fe4c3c61-68ddecfb.jpg",t="/assets/cd767aa537a75809585bbe4f0335f4b7-a981c111.jpg",c="/assets/f4c90e532a8d2842fd8f5e885434b06f-4d49a43f.jpg",l="/assets/26ebdd53a840yy572ddc89108d377ce0-f2ec90d1.jpg",i="/assets/0a15871efd0705234d9f7031129da877-4cd9829e.jpg",o="/assets/d34ba4f8067159d8dc69ee2a1902fd0b-f0d27319.jpg",r="/assets/4d35b5906fb0e4f422ea2a3216baaa6e-8eb2d2ec.jpg",d={},m=e('<h1 id="_32-仓库结构-如何组织文件" tabindex="-1"><a class="header-anchor" href="#_32-仓库结构-如何组织文件" aria-hidden="true">#</a> 32 | 仓库结构：如何组织文件?</h1><p>你好，我是 LMOS。</p><p>你有没有想过，蜜蜂把劳动成果变成蜜糖存放在蜂巢中，人类把劳动成果量化成财富存放在银行，但一个进程的劳动成果放在哪里呢？</p><p>看到这里，你可能有疑问，进程有劳动成果吗？当然有，<strong>进程加工处理的数据就是进程的劳动成果</strong>，可是这个“劳动成果”，如何表示、如何组织，又放在哪里呢？这些问题都会在我们讲解文件系统的过程中一一得到解答。</p><p>那今天我们先来搞清楚什么是文件系统，然后解决文件系统如何组织文件，最后对我们文件系统进行设计并抽象成数据结构。好了，下面我们正式开始今天的学习吧。</p><p>这节课的配套代码，你可以从这里获取。</p><h2 id="什么是文件系统" tabindex="-1"><a class="header-anchor" href="#什么是文件系统" aria-hidden="true">#</a> 什么是文件系统</h2><p>我们经常在计算机上听 APE 音乐、看 4K 视频、阅读各种文档、浏览各种精美的网页，这些东西都是一些特定格式的数据，我们习惯把它们叫做文件，这些文件可能储存在 HD 机械硬盘、SSD 固态硬盘、TF 卡，甚至远程计算机上。</p><p>所以你可以这样理解，文件系统解决的就是如何把许多文件储存在某一种储存设备上，方便进程对各种文件执行打开、关闭、读写、增加和删除等操作。因为这些操作实际上非常复杂，所以操作系统中分出一个子系统专门处理这些问题，这个系统就叫<strong>文件系统</strong>。</p><p>文件系统的核心现在我们还没法直观地感受到，但是它在上层为用户或者进程提供了一个逻辑视图，也就是目录结构。</p><p>下图中就是典型的文件系统逻辑视图，从 /（根）目录开始，就能找到每个文件、每个目录和每个目录下的所有文件。我们可以看出目录也是文件的一部分，它也扮演了“组织仓库管理员”的角色，可以对文件进行分层分类，以便用户对众多文件进行管理。</p><img src="'+p+'" alt="img" style="zoom:15%;"><p>文件组织结构</p><p>虽然这看上去好像有点复杂、是个技术活，但是别怕，毕竟我们不是干这事的第一批人，可以参考别人的设计与实现。好了，废话不多说，难不难，要做了才知道……</p><h2 id="文件系统设计" tabindex="-1"><a class="header-anchor" href="#文件系统设计" aria-hidden="true">#</a> 文件系统设计</h2><p>既然要实现一个文件系统，还是要好好设计一下，我们首先从三个问题出发对文件系统设计方面的思考。</p><ol><li></li></ol><p>文件系统为什么可以是一个设备开始，以及它在整个 Cosmos 内核中的位置格局？</p><ol start="2"><li></li></ol><p>文件数据的格式以及储存介质的最小单位是什么？</p><ol start="3"><li></li></ol><p>如何组织越来越多的文件。</p><p>搞清楚这三大问题的过程，就是设计文件系统的过程，这里是重点中的重点，你可以停下来好好揣摩，然后再继续往下学习。</p><h2 id="文件系统只是一个设备" tabindex="-1"><a class="header-anchor" href="#文件系统只是一个设备" aria-hidden="true">#</a> 文件系统只是一个设备</h2><p>HD 机械硬盘、SSD 固态硬盘、U 盘、各种 TF 卡等都属于存储设备，这些设备上的文件储存格式都不相同，甚至同一个硬盘上不同的分区的储存格式也不同。这个储存格式就是相应文件系统在储存设备上组织储存文件的方式。</p><p>例如我们经常看到的：FAT32、NTFS、Ext4、Btrfs、ZFS、HPFS 等，这些都是不同的文件系统建立的文件系统格式。</p><p>看到上面储存设备与文件系统多样性的情况之后，不难发现让文件系统成为 Cosmos 内核中一部分，是个非常愚蠢的想法。那怎么解决这个困难呢，你可以先自己想一想，然后再参考我后面的分析。</p><p>针对前面的困难，我们不难提出这样两点设想：第一，文件系统组件是独立的与内核分开的；第二，操作系统需要动态加载和删除不同的文件系统组件，这样就可以适应复杂的情况了。例如，硬盘上不同的分区有不同的文件系统格式，还可以拔插 U 盘、TF 卡等。</p><p>你还记得前面 Cosmos 内核的设备驱动的设计吗？如果文件系统也是 Cosmos 内核下的一个设备，那就好办多了，因为不同的设备驱动程序可以动态加载，而且可以建立多个文件系统设备，而对各个文件系统设备驱动程序的实现，就是各个文件系统的实现。</p><p>刚好前面的驱动模型中（第 30 节课），定义了文件系统的设备类型。这个架构我给你画一幅图，你看一下就明白了。</p><img src="'+t+'" alt="img" style="zoom:15%;"><p>文件系统架构示意图</p><p>这里我不仅给出了文件系统设备的架构，还简单地梳理了内核中其它组件与文件系统的关系。</p><p>如图所示，文件系统下面有诸如 U 盘、硬盘、SSD、CD、TF 卡等储存设备。文件系统一定要有储存设备，这个储存设备可以是硬盘，也可以是 TF 卡，总之能储存数据的设备就行。</p><p>为了减小程序的复杂程度，我们使用一块 4MB 大小的内存空间来模拟储存设备，何况又不是我们第一次建造内存文件系统（ramfs），只是我们做得更小。在文件系统设备驱动程序的入口函数中，分配 4MB 大小的内存空间。</p><p>相信即使如此，也能让我们清楚地看到文件系统的实现。等哪天有时间了，写好了硬盘驱动程序，也可以让文件系统设备驱动程序处理好了数据，然后发送给硬盘设备驱动程序，让其写入到硬盘中去。</p><p>这在我们设计的驱动模型中是完全允许的，这就形成了储存系统的“I/O 栈”。</p><h2 id="文件格式与储存块" tabindex="-1"><a class="header-anchor" href="#文件格式与储存块" aria-hidden="true">#</a> 文件格式与储存块</h2><p>通常说的文件，都是一堆数据，当我们把这堆数据组织成一个文件，储存在储存介质上时，就有了一个问题：我们按什么格式把这些数据存放在储存介质上。</p><p>当然，这个格式是指文件系统存放文件数据的格式。文件数据本身的格式，文件系统不该多管，例如 MP3、Word 文档的内部格式，各不相同。</p><p>关于文件系统存放文件数据的格式，类 UNIX 系统和 Windows 系统都采用了相同的方案，那就是逻辑上认为一个文件就是一个可以动态增加、减少的线性字节数组，即文件数据的每个字节都一一对应到这个线性数组中的每个元素。</p><p>那么我们也和它们一样，我来给你画个图梳理逻辑关系。</p><img src="'+c+'" alt="img" style="zoom:15%;"><p>文件字节数组</p><p>图中的文件数据字节数组，终究是逻辑上的，所以问题又来了，我们如何把这个逻辑上的文件数据字节数组，映射到具体的储存设备上呢？只有解决了这个问题，才能真正储存数据。</p><p>现在的机械硬盘、SSD 固态硬盘、TF 卡，它们都是以储存块为单位储存数据的，一个储存块的大小可以是 512、1024、2048、4096 字节，访问这些储存设备的最小单位也是一个储存块，不像内存设备可以最少访问一个字节。</p><p>文件系统把文件数据定义成一个<strong>动态的线性字节数组</strong>，可是一开始我们不知道这个数组是多大，需要分配多少个物理储存块，最好是把这个动态的线性字节数组分成一个个数据块。</p><p>然而，不同的储存设备的物理储存块的大小不同，有的是 512 字节，而有的是 4096 字节，我们为了文件系统能工作在不同的储存设备上，所以我们把这里的数据块定义为文件系统逻辑块，其大小为 4096 字节，最后把这个逻辑块映射到一个或多个物理储存块。</p><p>为了让你更好地理解这个过程，我为你准备了一幅图，如下所示。</p><p>从这幅图里，我们可以看到从文件这个抽象概念，它是如何一步步从文件字节数组，整合形成文件数据逻辑块，最后映射到储存介质上的物理储存块。你需要先掌握整个演变过程的逻辑，具体怎么实现我们后面继续讲。</p><img src="'+l+`" alt="img" style="zoom:15%;"><p>文件逻辑块映射</p><h2 id="如何组织文件" tabindex="-1"><a class="header-anchor" href="#如何组织文件" aria-hidden="true">#</a> 如何组织文件</h2><p>现在 PC 机上的文件数量都已经上十万的数量级了，网络服务器上更是不止这个数量。</p><p>我们不难想到，如果把十万个文件顺序地排列在一起，要找出其中一个文件，那是非常困难的，即使是计算机程序查找起来也是相当慢的，加上硬盘、TF 卡之类的储存设备比内存慢得多，因此会变得更慢。</p><p>所以，需要一个叫文件目录或者叫文件夹的东西，我们习惯称其为目录。这样我们就可以用不同的目录来归纳不同的文件，例如在 MP3 目录下存放 MP3 音乐文件，或者在 MP4 目录下存放视频文件。同时，目录之下还可以创建目录，这样就建立了非常好的层次关系。</p><p>你可能经常在 LINUX 系统中看到如：“/dev/kvm，/user/bin/gcc”之类的东西，其中 dev、user、bin 它们就是目录，kvm、gcc 它们就是文件，“/”符号就是文件路径分隔符，它们合起来就是文件路径名。</p><p>可以看出，整个文件层次结构就像是一棵倒挂的树。前面那幅图已经显示出了这种结构。后面我们的文件系统也会采用目录来组织文件。这里你只要明白，文件数量多了就出现了目录，而目录是用来帮助用户组织或归纳文件的就行了。</p><h2 id="文件系统数据结构" tabindex="-1"><a class="header-anchor" href="#文件系统数据结构" aria-hidden="true">#</a> 文件系统数据结构</h2><p>一路走来，不难发现操作系统内核的任何组件的实现，都需要设计一套相应的数据结构，文件系统也不例外。</p><p>根据前面我们对文件系统的设计，我们至少需要表示文件和目录的数据结构，除此之外，还需要表示文件系统本身的一些数据结构，这些数据结构我们称为<strong>文件系统元数据</strong>。下面我们先从文件系统元数据开始吧！</p><h3 id="设计超级块" tabindex="-1"><a class="header-anchor" href="#设计超级块" aria-hidden="true">#</a> 设计超级块</h3><p>一个文件系统有很多重要的信息，例如文件系统标识、版本、状态，储存介质大小，文件系统逻辑储存块大小，位图所在的储存块，还有根目录等。因为这些信息很重要，没有它们就等于没有文件系统，所以包含这些信息的数据结构，就叫做文件系统的超级块或者文件系统描述块。</p><p>下面我们就来设计超级块的数据结构，先在 cosmos/include/drvinc/ 目录下建立一个 drvrfs_t.h 文件，写下 rfssublk_t 结构，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_RFSSUBLK</span>
<span class="token punctuation">{</span>
    <span class="token class-name">spinlock_t</span> rsb_lock<span class="token punctuation">;</span><span class="token comment">//超级块在内存中使用的自旋锁</span>
    <span class="token class-name">uint_t</span> rsb_mgic<span class="token punctuation">;</span><span class="token comment">//文件系统标识</span>
    <span class="token class-name">uint_t</span> rsb_vec<span class="token punctuation">;</span><span class="token comment">//文件系统版本</span>
    <span class="token class-name">uint_t</span> rsb_flg<span class="token punctuation">;</span><span class="token comment">//标志</span>
    <span class="token class-name">uint_t</span> rsb_stus<span class="token punctuation">;</span><span class="token comment">//状态</span>
    <span class="token class-name">size_t</span> rsb_sz<span class="token punctuation">;</span><span class="token comment">//该数据结构本身的大小</span>
    <span class="token class-name">size_t</span> rsb_sblksz<span class="token punctuation">;</span><span class="token comment">//超级块大小</span>
    <span class="token class-name">size_t</span> rsb_dblksz<span class="token punctuation">;</span><span class="token comment">//文件系统逻辑储存块大小，我们这里用的是4KB</span>
    <span class="token class-name">uint_t</span> rsb_bmpbks<span class="token punctuation">;</span><span class="token comment">//位图的开始逻辑储存块</span>
    <span class="token class-name">uint_t</span> rsb_bmpbknr<span class="token punctuation">;</span><span class="token comment">//位图占用多少个逻辑储存块</span>
    <span class="token class-name">uint_t</span> rsb_fsysallblk<span class="token punctuation">;</span><span class="token comment">//文件系统有多少个逻辑储存块</span>
    <span class="token class-name">rfsdir_t</span> rsb_rootdir<span class="token punctuation">;</span><span class="token comment">//根目录，后面会看到这个数据结构的</span>
<span class="token punctuation">}</span><span class="token class-name">rfssublk_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们文件系统的超级块，保存在储存设备的第一个 4KB 大小的逻辑储存块中，但是它本身的大小没有 4KB，多余的空间用于以后扩展。rfsdir_t 数据结构是一个目录数据结构，你先有个印象，后面我们会有介绍的。</p><p>当然把根目录数据结构直接放在超级块中，目前也是可行的，反正现在超级块中有多余的空间。</p><h3 id="位图" tabindex="-1"><a class="header-anchor" href="#位图" aria-hidden="true">#</a> 位图</h3><p>我们把一个储存设备分成一个个逻辑储存块（4KB），当储存一个文件数据时，就按逻辑储存块进行分配。那这就产生了一个新的问题：怎么来标识哪些逻辑储存块是空闲的，哪些逻辑储存块是已经分配占用的呢？</p><p>我们可以用位图来解决这个问题，这里的位图，就是利用一块储存空间中所有位的状态，达到映射逻辑储存块状态（是否已分配）的目的。</p><p>一个字节是 8 个位，那么 4KB 的储存空间中，就有（4096*8）个位，这每个位映射到一个逻辑储存块，其中一个位的值为 0，就表示该位对应的逻辑储存块是空闲的，反之就表示对应的逻辑储存块是占用的。</p><p>上面的说明如果你还是难以明白，我再画一幅图你就清楚多了，如下所示。</p><img src="`+i+`" alt="img" style="zoom:15%;"><p>位图块</p><p>其实位图并不需要定义实际的数据结构，在实际操作时，我们把位图这个储存块当成一个字节数组就行了。这里我们用了一块 4MB 的内存空间模拟储存设备，所以一共只有 1024 个 4KB 大小的逻辑储存块。因为远远小于 4096，所以用不着把所有位都利用起来，操作一个个位很麻烦，完全可以用一个字节表示一个逻辑储存块是否空闲还是占用。</p><h3 id="文件目录" tabindex="-1"><a class="header-anchor" href="#文件目录" aria-hidden="true">#</a> 文件目录</h3><p>根据我们的设计，为了方便用户查找和归纳越来越多的文件，才产生了目录。其实从本质上来说，目录也是一种数据，这种数据中包含了目录类型、状态、指向文件数据管理头的块号、名称等信息。</p><p>下面我们就动手把这些信息整理成 rfsdir_t 数据结构，写在 drvrfs_t.h 文件中，方便以后使用，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DR_NM_MAX</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">128</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RDR_NUL_TYPE</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RDR_DIR_TYPE</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RDR_FIL_TYPE</span> <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RDR_DEL_TYPE</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_RFSDIR</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint_t</span> rdr_stus<span class="token punctuation">;</span><span class="token comment">//目录状态</span>
    <span class="token class-name">uint_t</span> rdr_type<span class="token punctuation">;</span><span class="token comment">//目录类型，可以是空类型、目录类型、文件类型、已删除的类型</span>
    <span class="token class-name">uint_t</span> rdr_blknr<span class="token punctuation">;</span><span class="token comment">//指向文件数据管理头的块号，不像内存可以用指针，只能按块访问</span>
    <span class="token class-name">char_t</span> rdr_name<span class="token punctuation">[</span>DR_NM_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名称数组，大小为DR_NM_MAX</span>
<span class="token punctuation">}</span><span class="token class-name">rfsdir_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面代码中的 DR_NM_MAX 宏，我们可以看出 rfsdir_t 数据结构最多只有 128 字节大小。而名称数组的大小就是 128 减去 3 个 8 字节，由于储存设备不能用字节地址访问，它只能一块一块的访问，所以 rfsdir_t 结构中有个域，指向文件数据管理头的块号。</p><p>为什么 rfsdir_t 结构中会有很多类型呢？这里要注意，目录也是一种特殊的文件，它里面就是保存着一系列 rfsdir_t 结构的实例变量。这些 rfsdir_t 结构再次表明它代表的是一个文件，还是一个目录。</p><p>我画个图，你就明白了。如下所示。</p><img src="`+o+`" alt="img" style="zoom:15%;"><p>目录结构</p><p>上图中可以看到，超级块中的 rfsdir_t 结构保存了根目录的名称和指向管理根目录数据的文件管理头的块号。而实际的目录数据保存在逻辑储存块中，这表明目录也是一种数据。即一系列的 rfsdir_t 结构的实例变量。通过这一系列的 rfsdir_t 结构就能找到根目录下的其它文件和目录了。</p><h3 id="文件管理头" tabindex="-1"><a class="header-anchor" href="#文件管理头" aria-hidden="true">#</a> 文件管理头</h3><p>文件系统最重要是管理和存放文件。我们平常接触文件，只看到了文件名，但一个文件的信息难道真的只有一个文件名称吗？</p><p>显然不是，它还有状态、类型、创建时间、访问时间、大小，更为重要的是要知道该文件使用了哪些逻辑储存块。下面就来把上述所有的文件信息，归纳整理成一个数据结构，写在 drvrfs_t.h 文件中称为文件管理头，即 fimgrhd_t 结构，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FBLKS_MAX</span> <span class="token expression"><span class="token number">32</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FMD_NUL_TYPE</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FMD_DIR_TYPE</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FMD_FIL_TYPE</span> <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FMD_DEL_TYPE</span> <span class="token expression"><span class="token number">5</span></span><span class="token comment">//文件管理头也需要表明它管理的是目录文件还是普通文件</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_FILBLKS</span>
<span class="token punctuation">{</span>    
    <span class="token class-name">uint_t</span> fb_blkstart<span class="token punctuation">;</span><span class="token comment">//开始的逻辑储存块号</span>
    <span class="token class-name">uint_t</span> fb_blknr<span class="token punctuation">;</span><span class="token comment">//逻辑储存块的块数，从blkstart开始的连续块数</span>
<span class="token punctuation">}</span><span class="token class-name">filblks_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_fimgrhd</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint_t</span> fmd_stus<span class="token punctuation">;</span><span class="token comment">//文件状态</span>
    <span class="token class-name">uint_t</span> fmd_type<span class="token punctuation">;</span><span class="token comment">//文件类型：可以是目录文件、普通文件、空文件、已删除的文件</span>
    <span class="token class-name">uint_t</span> fmd_flg<span class="token punctuation">;</span><span class="token comment">//文件标志</span>
    <span class="token class-name">uint_t</span> fmd_sfblk<span class="token punctuation">;</span><span class="token comment">//文件管理头自身所在的逻辑储存块</span>
    <span class="token class-name">uint_t</span> fmd_acss<span class="token punctuation">;</span><span class="token comment">//文件访问权限</span>
    <span class="token class-name">uint_t</span> fmd_newtime<span class="token punctuation">;</span><span class="token comment">//文件的创建时间，换算成秒</span>
    <span class="token class-name">uint_t</span> fmd_acstime<span class="token punctuation">;</span><span class="token comment">//文件的访问时间，换算成秒</span>
    <span class="token class-name">uint_t</span> fmd_fileallbk<span class="token punctuation">;</span><span class="token comment">//文件一共占用多少个逻辑储存块</span>
    <span class="token class-name">uint_t</span> fmd_filesz<span class="token punctuation">;</span><span class="token comment">//文件大小</span>
    <span class="token class-name">uint_t</span> fmd_fileifstbkoff<span class="token punctuation">;</span><span class="token comment">//文件数据在第一块逻辑储存块中的偏移</span>
    <span class="token class-name">uint_t</span> fmd_fileiendbkoff<span class="token punctuation">;</span><span class="token comment">//文件数据在最后一块逻辑储存块中的偏移</span>
    <span class="token class-name">uint_t</span> fmd_curfwritebk<span class="token punctuation">;</span><span class="token comment">//文件数据当前将要写入的逻辑储存块</span>
    <span class="token class-name">uint_t</span> fmd_curfinwbkoff<span class="token punctuation">;</span><span class="token comment">//文件数据当前将要写入的逻辑储存块中的偏移</span>
    <span class="token class-name">filblks_t</span> fmd_fleblk<span class="token punctuation">[</span>FBLKS_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//文件占用逻辑储存块的数组，一共32个filblks_t结构</span>
    <span class="token class-name">uint_t</span> fmd_linkpblk<span class="token punctuation">;</span><span class="token comment">//指向文件的上一个文件管理头的逻辑储存块</span>
    <span class="token class-name">uint_t</span> fmd_linknblk<span class="token punctuation">;</span><span class="token comment">//指向文件的下一个文件管理头的逻辑储存块</span>
<span class="token punctuation">}</span><span class="token class-name">fimgrhd_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fimgrhd_t 结构中，其它的信息都比较易懂，关键是 <strong>fmd_fleblk 数组</strong>，它里面的每个元素都保存一片连续的逻辑储存块。</p><p>比如一个文件占用：4<sub>8、10</sub>15、30~40 的逻辑储存块，那么就在 fmd_fleblk[0]中保存 4 和 4，在 fmd_fleblk[1]中保存 10 和 5，在 fmd_fleblk[2]中保存 30 和 10。</p><p>细心的你可以发现，当文件特别大时，fmd_fleblk 数组元素可能就不够用了。</p><p>但是我们想了一个办法，在 fmd_fleblk 数组元素用完时，就再分配一个逻辑储存块，在里面再次存放同一个文件的 fimgrhd_t 结构，让上一个 fimgrhd_t 结构中的 fmd_linknblk 域指向这个逻辑储存块，再让这个逻辑储存块中 fimgrhd_t 结构中的 fmd_linkpblk 域，指向上一个 fimgrhd_t 结构所在的逻辑储存块。</p><p>为了帮助你梳理思路，我还画了示意图。</p><img src="`+r+'" alt="img" style="zoom:25%;"><p>文件管理头</p><p>从这张图中，我们可以看到 fimgrhd_t 结构如何管理一个文件占有的所有逻辑储存块，并且可以通过类似链表的形式动态增加 fimgrhd_t 结构，实际上就是在动态增加文件的逻辑储存块。同时我们不难发现，文件的第一个逻辑储存块的首个 512 字节空间中，存放的就是 fimgrhd_t 数据结构。</p><p>好了，一个简单的文件系统所需要的所有数据结构就设计完成了，你可能会想，不会这样就完了吧？我们还没写什么代码呢，文件系统就实现了么？别急，怎么写代码实现这个文件系统，下节课我们继续探索……</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>今天的课程就到这里了，对于文件系统，我们才刚刚开始探索，我把今天的课程重点梳理一下。</p><p>\\1. 我们一起了解了什么是文件系统，就是解决如何把许多进程产生的数据——文件，储存在某一种储存设备之上，让进程十分方便就能对各个文件进行相应的操作。</p><p>\\2. 我们设计了自己的文件系统，它在 Cosmos 中就是一个设备，规划了文件系统的文件格式和如何储存文件，还有如何组织多个文件。</p><p>\\3. 我们把文件系统设计变成了对应数据结构，它们分别是描述文件系统信息的超级块、解决逻辑储存块分配状态的位图，还有用文件管理的目录和文件管理头。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请问，我们文件系统的储存单位为什么要自定义一个逻辑储存块？</p><p>欢迎你在留言区跟我交流互动，也欢迎你把这节课分享给身边的朋友，跟他一起学习进步。</p><p>好，我是 LMOS，我们下节课见!</p>',107),k=[m];function u(_,v){return n(),a("div",null,k)}const h=s(d,[["render",u],["__file","K32-文件系统数据结构.html.vue"]]);export{h as default};
