import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,e as p,d as t}from"./app-cdabc73c.js";const i="/assets/f0dcb83fcaa4f185a8e36c9d28f12345-11169f86.jpg",u="/assets/9b802943af4e3ae80ce4d0d7f2190af1-3a9ad433.jpg",r="/assets/ecdea93c2544cf9c1d84461b602b03c9-2410e747.jpg",k="/assets/94efd92cbeb4d4ff155a645b93d71eb3-72f69f92.jpg",d="/assets/78d351d0105c8e5bf0e49c685a2c1a44-3ddc0605.jpg",m={},v=t(`<h1 id="_25-用户态内存映射-如何找到正确的会议室" tabindex="-1"><a class="header-anchor" href="#_25-用户态内存映射-如何找到正确的会议室" aria-hidden="true">#</a> 25 | 用户态内存映射：如何找到正确的会议室？</h1><p>前面几节，我们既看了虚拟内存空间如何组织的，也看了物理页面如何管理的。现在我们需要一些数据结构，将二者关联起来。</p><h2 id="mmap-的原理" tabindex="-1"><a class="header-anchor" href="#mmap-的原理" aria-hidden="true">#</a> mmap 的原理</h2><p>在虚拟地址空间那一节，我们知道，每一个进程都有一个列表 vm_area_struct，指向虚拟地址空间的不同的内存块，这个变量的名字叫 <strong>mmap</strong>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>mmap<span class="token punctuation">;</span>    <span class="token comment">/* list of VMAs */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * For areas with an address space and backing store,
   * linkage into the address_space-&gt;i_mmap interval tree.
   */</span>
  <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> rb<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> rb_subtree_last<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> shared<span class="token punctuation">;</span>




  <span class="token comment">/*
   * A file&#39;s MAP_PRIVATE vma can be in both i_mmap tree and anon_vma
   * list, after a COW of one of the file pages.  A MAP_SHARED vma
   * can only be in the i_mmap tree.  An anonymous MAP_PRIVATE, stack
   * or brk vma (with NULL file) can only be in an anon_vma list.
   */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> anon_vma_chain<span class="token punctuation">;</span> <span class="token comment">/* Serialized by mmap_sem &amp;
            * page_table_lock */</span>
  <span class="token keyword">struct</span> <span class="token class-name">anon_vma</span> <span class="token operator">*</span>anon_vma<span class="token punctuation">;</span>  <span class="token comment">/* Serialized by page_table_lock */</span>




  <span class="token comment">/* Function pointers to deal with this struct. */</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">vm_operations_struct</span> <span class="token operator">*</span>vm_ops<span class="token punctuation">;</span>
  <span class="token comment">/* Information about our backing store: */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> vm_pgoff<span class="token punctuation">;</span>    <span class="token comment">/* Offset (within vm_file) in PAGE_SIZE
             units */</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> vm_file<span class="token punctuation">;</span>    <span class="token comment">/* File we map to (can be NULL). */</span>
  <span class="token keyword">void</span> <span class="token operator">*</span> vm_private_data<span class="token punctuation">;</span>    <span class="token comment">/* was vm_pte (shared mem) */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内存映射区" tabindex="-1"><a class="header-anchor" href="#内存映射区" aria-hidden="true">#</a> 内存映射区</h3><p>其实内存映射不仅仅是物理内存和虚拟内存之间的映射，还包括将文件中的内容映射到虚拟内存空间。这个时候，访问内存空间就能够访问到文件里面的数据。而仅有物理内存和虚拟内存的映射，是一种特殊情况。</p><img src="`+i+`" alt="img" style="zoom:25%;"><p>前面咱们讲堆的时候讲过，如果我们要申请小块内存，就用 brk。brk 函数之前已经解析过了，这里就不多说了。如果申请一大块内存，就要用 mmap。对于堆的申请来讲，mmap 是映射内存空间到物理内存。</p><h3 id="mmap-系统调用" tabindex="-1"><a class="header-anchor" href="#mmap-系统调用" aria-hidden="true">#</a> mmap 系统调用</h3><p>另外，如果一个进程想映射一个文件到自己的虚拟内存空间，也要通过 <strong>mmap 系统调用</strong>。这个时候 mmap 是映射内存空间到物理内存再到文件。可见 mmap 这个系统调用是核心，我们现在来看 mmap 这个系统调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE6</span><span class="token punctuation">(</span>mmap<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span>
                <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> prot<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> flags<span class="token punctuation">,</span>
                <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> off<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        error <span class="token operator">=</span> <span class="token function">sys_mmap_pgoff</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> len<span class="token punctuation">,</span> prot<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> off <span class="token operator">&gt;&gt;</span> PAGE_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token function">SYSCALL_DEFINE6</span><span class="token punctuation">(</span>mmap_pgoff<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> prot<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> flags<span class="token punctuation">,</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> pgoff<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  file <span class="token operator">=</span> <span class="token function">fget</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  retval <span class="token operator">=</span> <span class="token function">vm_mmap_pgoff</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> len<span class="token punctuation">,</span> prot<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> pgoff<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> retval<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要映射到文件，fd 会传进来一个<mark>文件描述符</mark>，并且 mmap_pgoff 里面通过 fget 函数，根据文件描述符获得 struct file。struct file 表示打开的一个文件。</p><p>接下来的调用链是 vm_mmap_pgoff-&gt;do_mmap_pgoff-&gt;do_mmap。这里面主要干了两件事情：</p><ul><li>调用 get_unmapped_area 找到一个没有映射的区域；</li><li>调用 mmap_region 映射这个区域。</li></ul><p>我们先来看 get_unmapped_area 函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span>
<span class="token function">get_unmapped_area</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> addr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">,</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> pgoff<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token punctuation">(</span><span class="token operator">*</span>get_area<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span>
          <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  get_area <span class="token operator">=</span> current<span class="token operator">-&gt;</span>mm<span class="token operator">-&gt;</span>get_unmapped_area<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>get_unmapped_area<span class="token punctuation">)</span>
      get_area <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>get_unmapped_area<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面如果是<mark>匿名映射</mark>，则调用 mm_struct 里面的 get_unmapped_area 函数。这个函数其实是 arch_get_unmapped_area。它会调用 find_vma_prev，在表示虚拟内存区域的 vm_area_struct 红黑树上找到相应的位置。之所以叫 prev，是说这个时候虚拟内存区域还没有建立，找到前一个 vm_area_struct。</p><p>如果不是匿名映射，而是<mark>映射到一个文件</mark>，这样在 Linux 里面，每个打开的文件都有一个 struct file 结构，里面有一个 file_operations，用来表示和这个文件相关的操作。如果是我们熟知的 ext4 文件系统，调用的是 thp_get_unmapped_area。如果我们仔细看这个函数，最终还是调用 mm_struct 里面的 get_unmapped_area 函数。殊途同归。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> ext4_file_operations <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">.</span>mmap           <span class="token operator">=</span> ext4_file_mmap
        <span class="token punctuation">.</span>get_unmapped_area <span class="token operator">=</span> thp_get_unmapped_area<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">__thp_get_unmapped_area</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">,</span>
                <span class="token class-name">loff_t</span> off<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> addr<span class="token punctuation">;</span>
        <span class="token class-name">loff_t</span> off_end <span class="token operator">=</span> off <span class="token operator">+</span> len<span class="token punctuation">;</span>
        <span class="token class-name">loff_t</span> off_align <span class="token operator">=</span> <span class="token function">round_up</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len_pad<span class="token punctuation">;</span>
        len_pad <span class="token operator">=</span> len <span class="token operator">+</span> size<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        addr <span class="token operator">=</span> current<span class="token operator">-&gt;</span>mm<span class="token operator">-&gt;</span><span class="token function">get_unmapped_area</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len_pad<span class="token punctuation">,</span>
                                              off <span class="token operator">&gt;&gt;</span> PAGE_SHIFT<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        addr <span class="token operator">+=</span> <span class="token punctuation">(</span>off <span class="token operator">-</span> addr<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再来看 mmap_region，看它如何映射这个虚拟内存区域。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">mmap_region</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> addr<span class="token punctuation">,</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">,</span> <span class="token class-name">vm_flags_t</span> vm_flags<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> pgoff<span class="token punctuation">,</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>uf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm <span class="token operator">=</span> current<span class="token operator">-&gt;</span>mm<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">,</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">rb_node</span> <span class="token operator">*</span><span class="token operator">*</span>rb_link<span class="token punctuation">,</span> <span class="token operator">*</span>rb_parent<span class="token punctuation">;</span>


  <span class="token comment">/*
   * Can we just expand an old mapping?
   */</span>
  vma <span class="token operator">=</span> <span class="token function">vma_merge</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> addr <span class="token operator">+</span> len<span class="token punctuation">,</span> vm_flags<span class="token punctuation">,</span>
      <span class="token constant">NULL</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> pgoff<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> NULL_VM_UFFD_CTX<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vma<span class="token punctuation">)</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>


  <span class="token comment">/*
   * Determine the object being mapped and call the appropriate
   * specific mapper. the address has already been validated, but
   * not unmapped, but the maps are removed from the list.
   */</span>
  vma <span class="token operator">=</span> <span class="token function">kmem_cache_zalloc</span><span class="token punctuation">(</span>vm_area_cachep<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vma<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    error <span class="token operator">=</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
    <span class="token keyword">goto</span> unacct_error<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  vma<span class="token operator">-&gt;</span>vm_mm <span class="token operator">=</span> mm<span class="token punctuation">;</span>
  vma<span class="token operator">-&gt;</span>vm_start <span class="token operator">=</span> addr<span class="token punctuation">;</span>
  vma<span class="token operator">-&gt;</span>vm_end <span class="token operator">=</span> addr <span class="token operator">+</span> len<span class="token punctuation">;</span>
  vma<span class="token operator">-&gt;</span>vm_flags <span class="token operator">=</span> vm_flags<span class="token punctuation">;</span>
  vma<span class="token operator">-&gt;</span>vm_page_prot <span class="token operator">=</span> <span class="token function">vm_get_page_prot</span><span class="token punctuation">(</span>vm_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vma<span class="token operator">-&gt;</span>vm_pgoff <span class="token operator">=</span> pgoff<span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vma<span class="token operator">-&gt;</span>anon_vma_chain<span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vma<span class="token operator">-&gt;</span>vm_file <span class="token operator">=</span> <span class="token function">get_file</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    error <span class="token operator">=</span> <span class="token function">call_mmap</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> vma<span class="token punctuation">)</span><span class="token punctuation">;</span>
    addr <span class="token operator">=</span> vma<span class="token operator">-&gt;</span>vm_start<span class="token punctuation">;</span>
    vm_flags <span class="token operator">=</span> vma<span class="token operator">-&gt;</span>vm_flags<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">vma_link</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> vma<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> rb_link<span class="token punctuation">,</span> rb_parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> addr<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还记得咱们刚找到了虚拟内存区域的前一个 vm_area_struct，我们首先要看，是否能够基于它进行扩展，也即调用 vma_merge，和前一个 vm_area_struct 合并到一起。</p><p>如果不能，就需要调用 kmem_cache_zalloc，在 Slub 里面创建一个新的 vm_area_struct 对象，设置起始和结束位置，将它加入队列。如果是映射到文件，则设置 vm_file 为目标文件，调用 call_mmap。其实就是调用 file_operations 的 mmap 函数。对于 ext4 文件系统，调用的是 ext4_file_mmap。从这个函数的参数可以看出，这一刻文件和内存开始发生关系了。这里我们将 vm_area_struct 的内存操作设置为文件系统操作，也就是说，读写内存其实就是读写文件系统。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">call_mmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span><span class="token function">mmap</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> vma<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ext4_file_mmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      vma<span class="token operator">-&gt;</span>vm_ops <span class="token operator">=</span> <span class="token operator">&amp;</span>ext4_file_vm_ops<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再回到 mmap_region 函数。最终，vma_link 函数将新创建的 vm_area_struct 挂在了 mm_struct 里面的红黑树上。</p><p>这个时候，从内存到文件的映射关系，至少要在逻辑层面建立起来。那从文件到内存的映射关系呢？vma_link 还做了另外一件事情，就是 __vma_link_file。这个东西要用于建立这层映射关系。</p><p>对于打开的文件，会有一个结构 struct file 来表示。它有个成员指向 struct address_space 结构，这里面有棵变量名为 i_mmap 的红黑树，vm_area_struct 就挂在这棵树上。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span>    <span class="token operator">*</span>host<span class="token punctuation">;</span>    <span class="token comment">/* owner: inode, block_device */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">rb_root</span>    i_mmap<span class="token punctuation">;</span>    <span class="token comment">/* tree of private and shared mappings */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">address_space_operations</span> <span class="token operator">*</span>a_ops<span class="token punctuation">;</span>  <span class="token comment">/* methods */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__vma_link_file</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">;</span>


  file <span class="token operator">=</span> vma<span class="token operator">-&gt;</span>vm_file<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_mapping<span class="token punctuation">;</span>
    <span class="token function">vma_interval_tree_insert</span><span class="token punctuation">(</span>vma<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mapping<span class="token operator">-&gt;</span>i_mmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，内存映射的内容要告一段落了。你可能会困惑，好像还没和物理内存发生任何关系，还是在虚拟内存里面折腾呀？</p><p>对的，因为到目前为止，我们还没有开始真正访问内存呀！这个时候，内存管理并不直接分配物理内存，因为物理内存相对于虚拟地址空间太宝贵了，只有等你真正用的那一刻才会开始分配。</p><h2 id="用户态缺页异常" tabindex="-1"><a class="header-anchor" href="#用户态缺页异常" aria-hidden="true">#</a> 用户态缺页异常</h2><p>一旦开始访问虚拟内存的某个地址，如果我们发现，并没有对应的物理页，那就触发缺页中断，调用 do_page_fault。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>dotraplinkage <span class="token keyword">void</span> notrace
<span class="token function">do_page_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>regs<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> error_code<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> address <span class="token operator">=</span> <span class="token function">read_cr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Get the faulting address */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">__do_page_fault</span><span class="token punctuation">(</span>regs<span class="token punctuation">,</span> error_code<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token comment">/*
 * This routine handles page faults.  It determines the address,
 * and the problem, and then passes it off to one of the appropriate
 * routines.
 */</span>
<span class="token keyword">static</span> noinline <span class="token keyword">void</span>
<span class="token function">__do_page_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>regs<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> error_code<span class="token punctuation">,</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> address<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm<span class="token punctuation">;</span>
  tsk <span class="token operator">=</span> current<span class="token punctuation">;</span>
  mm <span class="token operator">=</span> tsk<span class="token operator">-&gt;</span>mm<span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">fault_in_kernel_space</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">vmalloc_fault</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vma <span class="token operator">=</span> <span class="token function">find_vma</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  fault <span class="token operator">=</span> <span class="token function">handle_mm_fault</span><span class="token punctuation">(</span>vma<span class="token punctuation">,</span> address<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 __do_page_fault 里面，先要判断缺页中断是否发生在内核。如果发生在内核则调用 vmalloc_fault，这就和咱们前面学过的虚拟内存的布局对应上了。在内核里面，vmalloc 区域需要内核页表映射到物理页。咱们这里把内核的这部分放放，接着看用户空间的部分。</p><p>接下来在用户空间里面，找到你访问的那个地址所在的区域 vm_area_struct，然后调用 handle_mm_fault 来映射这个区域。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__handle_mm_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> address<span class="token punctuation">,</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vm_fault</span> vmf <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>vma <span class="token operator">=</span> vma<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>address <span class="token operator">=</span> address <span class="token operator">&amp;</span> PAGE_MASK<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>flags <span class="token operator">=</span> flags<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>pgoff <span class="token operator">=</span> <span class="token function">linear_page_index</span><span class="token punctuation">(</span>vma<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>gfp_mask <span class="token operator">=</span> <span class="token function">__get_fault_gfp_mask</span><span class="token punctuation">(</span>vma<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm <span class="token operator">=</span> vma<span class="token operator">-&gt;</span>vm_mm<span class="token punctuation">;</span>
  <span class="token class-name">pgd_t</span> <span class="token operator">*</span>pgd<span class="token punctuation">;</span>
  <span class="token class-name">p4d_t</span> <span class="token operator">*</span>p4d<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">;</span>


  pgd <span class="token operator">=</span> <span class="token function">pgd_offset</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
  p4d <span class="token operator">=</span> <span class="token function">p4d_alloc</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> pgd<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vmf<span class="token punctuation">.</span>pud <span class="token operator">=</span> <span class="token function">pud_alloc</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> p4d<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vmf<span class="token punctuation">.</span>pmd <span class="token operator">=</span> <span class="token function">pmd_alloc</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> vmf<span class="token punctuation">.</span>pud<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token function">handle_pte_fault</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vmf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，终于看到了我们熟悉的 PGD、P4G、PUD、PMD、PTE，这就是前面讲页表的时候，讲述的<mark>四级页表</mark>的概念，因为暂且不考虑五级页表，我们暂时忽略 P4G。</p><img src="`+u+`" alt="img" style="zoom:25%;"><p>pgd_t 用于<mark>全局页目录项</mark>，pud_t 用于<mark>上层页目录项</mark>，pmd_t 用于<mark>中间页目录项</mark>，pte_t 用于<mark>直接页表项</mark>。</p><p>每个进程都有独立的地址空间，为了这个进程独立完成映射，每个进程都有独立的进程页表，这个页表的最顶级的 pgd 存放在 task_struct 中的 mm_struct 的 pgd 变量里面。</p><p>在一个进程新创建的时候，会调用 fork，对于内存的部分会调用 copy_mm，里面调用 dup_mm。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * Allocate a new mm structure and copy contents from the
 * mm structure of the passed in task structure.
 */</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span><span class="token function">dup_mm</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span> <span class="token operator">*</span>oldmm <span class="token operator">=</span> current<span class="token operator">-&gt;</span>mm<span class="token punctuation">;</span>
  mm <span class="token operator">=</span> <span class="token function">allocate_mm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> oldmm<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>mm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">mm_init</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> tsk<span class="token punctuation">,</span> mm<span class="token operator">-&gt;</span>user_ns<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> fail_nomem<span class="token punctuation">;</span>
  err <span class="token operator">=</span> <span class="token function">dup_mmap</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> oldmm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> mm<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，除了创建一个新的 mm_struct，并且通过 memcpy 将它和父进程的弄成一模一样之外，我们还需要调用 mm_init 进行初始化。接下来，mm_init 调用 mm_alloc_pgd，分配全局页目录项，赋值给 mm_struct 的 pgd 成员变量。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">mm_alloc_pgd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  mm<span class="token operator">-&gt;</span>pgd <span class="token operator">=</span> <span class="token function">pgd_alloc</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pgd_alloc 里面除了分配 PGD 之外，还做了很重要的一个事情，就是调用 pgd_ctor。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pgd_ctor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span> <span class="token class-name">pgd_t</span> <span class="token operator">*</span>pgd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* If the pgd points to a shared pagetable level (either the
     ptes in non-PAE, or shared PMD in PAE), then just copy the
     references from swapper_pg_dir. */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>CONFIG_PGTABLE_LEVELS <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span>CONFIG_PGTABLE_LEVELS <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> SHARED_KERNEL_PMD<span class="token punctuation">)</span> <span class="token operator">||</span>
      CONFIG_PGTABLE_LEVELS <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clone_pgd_range</span><span class="token punctuation">(</span>pgd <span class="token operator">+</span> KERNEL_PGD_BOUNDARY<span class="token punctuation">,</span>
        swapper_pg_dir <span class="token operator">+</span> KERNEL_PGD_BOUNDARY<span class="token punctuation">,</span>
        KERNEL_PGD_PTRS<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pgd_ctor 干了什么事情呢？我们注意看里面的注释，它拷贝了对于 swapper_pg_dir 的引用。swapper_pg_dir 是内核页表的最顶级的全局页目录。</p><p>一个进程的虚拟地址空间包含用户态和内核态两部分。为了从虚拟地址空间映射到物理页面，页表也分为用户地址空间的页表和内核页表，这就和上面遇到的 vmalloc 有关系了。在内核里面，映射靠内核页表，这里内核页表会拷贝一份到进程的页表。至于 swapper_pg_dir 是什么，怎么初始化的，怎么工作的，我们还是先放一放，放到下一节统一讨论。</p><blockquote><p>至此，一个进程 fork 完毕之后，有了内核页表，有了自己顶级的 pgd，但是对于用户地址空间来讲，还完全没有映射过。<strong>这需要等到这个进程在某个 CPU 上运行，并且对内存访问的那一刻了</strong>。</p></blockquote><h3 id="访问那一刻开始调度" tabindex="-1"><a class="header-anchor" href="#访问那一刻开始调度" aria-hidden="true">#</a> 访问那一刻开始调度</h3><img src="`+r+`" alt="ecdea93c2544cf9c1d84461b602b03c9" style="zoom:15%;"><p>当这个进程被调度到某个 CPU 上运行的时候，咱们在调度那一节讲过，要调用 context_switch 进行上下文切换。对于内存方面的切换会调用 switch_mm_irqs_off，这里面会调用 load_new_mm_cr3。</p><p><mark>cr3</mark> 是 CPU 的一个寄存器，它会指向当前进程的顶级 pgd。如果 CPU 的指令要访问进程的虚拟内存，它就会自动从 cr3 里面得到 pgd 在物理内存的地址，然后根据里面的页表解析虚拟内存的地址为物理内存，从而访问真正的物理内存上的数据。</p><h3 id="需要注意的两点" tabindex="-1"><a class="header-anchor" href="#需要注意的两点" aria-hidden="true">#</a> 需要注意的两点</h3><p>这里需要注意两点。</p><p>第一点，cr3 里面存放当前进程的顶级 pgd，这个是硬件的要求。cr3 里面需要存放 pgd 在物理内存的地址，不能是虚拟地址。因而 load_new_mm_cr3 里面会使用 __pa，将 mm_struct 里面的成员变量 pgd（mm_struct 里面存的都是虚拟地址）变为物理地址，才能加载到 cr3 里面去。</p><p>第二点，用户进程在运行的过程中，访问虚拟内存中的数据，会被 cr3 里面指向的页表转换为物理地址后，才在物理内存中访问数据，这个过程都是在用户态运行的，地址转换的过程无需进入内核态。</p><p>只有访问虚拟内存的时候，发现没有映射到物理内存，页表也没有创建过，才触发缺页异常。进入内核调用 do_page_fault，一直调用到 <code>__handle_mm_fault</code>，这才有了上面解析到这个函数的时候，我们看到的代码。既然原来没有创建过页表，那只好补上这一课。于是，<code>__handle_mm_fault</code> 调用 pud_alloc 和 pmd_alloc，来创建相应的页目录项，最后调用 handle_pte_fault 来创建页表项。</p><h3 id="可能出现的三种情况" tabindex="-1"><a class="header-anchor" href="#可能出现的三种情况" aria-hidden="true">#</a> 可能出现的三种情况</h3><p>绕了一大圈，终于将页表整个机制的各个部分串了起来。但是咱们的故事还没讲完，物理的内存还没找到。我们还得接着分析 handle_pte_fault 的实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">handle_pte_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vm_fault</span> <span class="token operator">*</span>vmf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">pte_t</span> entry<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vmf<span class="token operator">-&gt;</span>pte <span class="token operator">=</span> <span class="token function">pte_offset_map</span><span class="token punctuation">(</span>vmf<span class="token operator">-&gt;</span>pmd<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vmf<span class="token operator">-&gt;</span>orig_pte <span class="token operator">=</span> <span class="token operator">*</span>vmf<span class="token operator">-&gt;</span>pte<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vmf<span class="token operator">-&gt;</span>pte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">vma_is_anonymous</span><span class="token punctuation">(</span>vmf<span class="token operator">-&gt;</span>vma<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">do_anonymous_page</span><span class="token punctuation">(</span>vmf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      <span class="token keyword">return</span> <span class="token function">do_fault</span><span class="token punctuation">(</span>vmf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">pte_present</span><span class="token punctuation">(</span>vmf<span class="token operator">-&gt;</span>orig_pte<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">do_swap_page</span><span class="token punctuation">(</span>vmf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面总的来说分了三种情况。如果 PTE，也就是页表项，从来没有出现过，那就是新映射的页。</p><ol><li>如果是匿名页，就是第一种情况，应该映射到一个物理内存页，在这里调用的是 do_anonymous_page。</li><li>如果是映射到文件，调用的就是 do_fault，这是第二种情况。</li><li>如果 PTE 原来出现过，说明原来页面在物理内存中，后来换出到硬盘了，现在应该换回来，调用的是 do_swap_page。</li></ol><h3 id="第一种情况-do-anonymous-page" tabindex="-1"><a class="header-anchor" href="#第一种情况-do-anonymous-page" aria-hidden="true">#</a> 第一种情况: do_anonymous_page</h3><p>我们来看第一种情况，do_anonymous_page。对于匿名页的映射，我们需要先通过 pte_alloc 分配一个页表项，然后通过 alloc_zeroed_user_highpage_movable 分配一个页。之后它会调用 alloc_pages_vma，并最终调用 __alloc_pages_nodemask。</p><p>这个函数你还记得吗？就是咱们伙伴系统的核心函数，专门用来分配物理页面的。do_anonymous_page 接下来要调用 mk_pte，将页表项指向新分配的物理页，set_pte_at 会将页表项塞到页表里面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">do_anonymous_page</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vm_fault</span> <span class="token operator">*</span>vmf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma <span class="token operator">=</span> vmf<span class="token operator">-&gt;</span>vma<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mem_cgroup</span> <span class="token operator">*</span>memcg<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">pte_t</span> entry<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pte_alloc</span><span class="token punctuation">(</span>vma<span class="token operator">-&gt;</span>vm_mm<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>pmd<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> VM_FAULT_OOM<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  page <span class="token operator">=</span> <span class="token function">alloc_zeroed_user_highpage_movable</span><span class="token punctuation">(</span>vma<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  entry <span class="token operator">=</span> <span class="token function">mk_pte</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> vma<span class="token operator">-&gt;</span>vm_page_prot<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vma<span class="token operator">-&gt;</span>vm_flags <span class="token operator">&amp;</span> VM_WRITE<span class="token punctuation">)</span>
    entry <span class="token operator">=</span> <span class="token function">pte_mkwrite</span><span class="token punctuation">(</span><span class="token function">pte_mkdirty</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  vmf<span class="token operator">-&gt;</span>pte <span class="token operator">=</span> <span class="token function">pte_offset_map_lock</span><span class="token punctuation">(</span>vma<span class="token operator">-&gt;</span>vm_mm<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>pmd<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>vmf<span class="token operator">-&gt;</span>ptl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">set_pte_at</span><span class="token punctuation">(</span>vma<span class="token operator">-&gt;</span>vm_mm<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>pte<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二种情况-do-fault" tabindex="-1"><a class="header-anchor" href="#第二种情况-do-fault" aria-hidden="true">#</a> 第二种情况: do_fault</h3><p>第二种情况映射到文件 do_fault，最终我们会调用 __do_fault。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__do_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vm_fault</span> <span class="token operator">*</span>vmf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma <span class="token operator">=</span> vmf<span class="token operator">-&gt;</span>vma<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ret <span class="token operator">=</span> vma<span class="token operator">-&gt;</span>vm_ops<span class="token operator">-&gt;</span><span class="token function">fault</span><span class="token punctuation">(</span>vmf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里调用了 struct vm_operations_struct vm_ops 的 fault 函数。还记得咱们上面用 mmap 映射文件的时候，对于 ext4 文件系统，vm_ops 指向了 ext4_file_vm_ops，也就是调用了 ext4_filemap_fault。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">vm_operations_struct</span> ext4_file_vm_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>fault    <span class="token operator">=</span> ext4_filemap_fault<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>map_pages  <span class="token operator">=</span> filemap_map_pages<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>page_mkwrite   <span class="token operator">=</span> ext4_page_mkwrite<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">ext4_filemap_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vm_fault</span> <span class="token operator">*</span>vmf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode <span class="token operator">=</span> <span class="token function">file_inode</span><span class="token punctuation">(</span>vmf<span class="token operator">-&gt;</span>vma<span class="token operator">-&gt;</span>vm_file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  err <span class="token operator">=</span> <span class="token function">filemap_fault</span><span class="token punctuation">(</span>vmf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ext4_filemap_fault 里面的逻辑我们很容易就能读懂。vm_file 就是咱们当时 mmap 的时候映射的那个文件，然后我们需要调用 filemap_fault。对于文件映射来说，一般这个文件会在物理内存里面有页面作为它的缓存，find_get_page 就是找那个页。如果找到了，就调用 do_async_mmap_readahead，预读一些数据到内存里面；如果没有，就跳到 no_cached_page。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">filemap_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vm_fault</span> <span class="token operator">*</span>vmf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> error<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file <span class="token operator">=</span> vmf<span class="token operator">-&gt;</span>vma<span class="token operator">-&gt;</span>vm_file<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_mapping<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode <span class="token operator">=</span> mapping<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span>
  <span class="token class-name">pgoff_t</span> offset <span class="token operator">=</span> vmf<span class="token operator">-&gt;</span>pgoff<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  page <span class="token operator">=</span> <span class="token function">find_get_page</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>vmf<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> FAULT_FLAG_TRIED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">do_async_mmap_readahead</span><span class="token punctuation">(</span>vmf<span class="token operator">-&gt;</span>vma<span class="token punctuation">,</span> ra<span class="token punctuation">,</span> file<span class="token punctuation">,</span> page<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">goto</span> no_cached_page<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vmf<span class="token operator">-&gt;</span>page <span class="token operator">=</span> page<span class="token punctuation">;</span>
  <span class="token keyword">return</span> ret <span class="token operator">|</span> VM_FAULT_LOCKED<span class="token punctuation">;</span>
no_cached_page<span class="token operator">:</span>
  error <span class="token operator">=</span> <span class="token function">page_cache_read</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>gfp_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有物理内存中的缓存页，那我们就调用 page_cache_read。在这里显示分配一个缓存页，将这一页加到 lru 表里面，然后在 address_space 中调用 address_space_operations 的 readpage 函数，将文件内容读到内存中。address_space 的作用咱们上面也介绍过了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">page_cache_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token class-name">pgoff_t</span> offset<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> gfp_mask<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_mapping<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  page <span class="token operator">=</span> <span class="token function">__page_cache_alloc</span><span class="token punctuation">(</span>gfp_mask<span class="token operator">|</span>__GFP_COLD<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ret <span class="token operator">=</span> <span class="token function">add_to_page_cache_lru</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> mapping<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> gfp_mask <span class="token operator">&amp;</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ret <span class="token operator">=</span> mapping<span class="token operator">-&gt;</span>a_ops<span class="token operator">-&gt;</span><span class="token function">readpage</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>struct address_space_operations 对于 ext4 文件系统的定义如下所示。这么说来，上面的 readpage 调用的其实是 ext4_readpage。因为我们还没讲到文件系统，这里我们不详细介绍 ext4_readpage 具体干了什么。你只要知道，最后会调用 ext4_read_inline_page，这里面有部分逻辑和内存映射有关就行了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">address_space_operations</span> ext4_aops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>readpage    <span class="token operator">=</span> ext4_readpage<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>readpages    <span class="token operator">=</span> ext4_readpages<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ext4_read_inline_page</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>kaddr<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  kaddr <span class="token operator">=</span> <span class="token function">kmap_atomic</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ret <span class="token operator">=</span> <span class="token function">ext4_read_inline_data</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> kaddr<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iloc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">flush_dcache_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">kunmap_atomic</span><span class="token punctuation">(</span>kaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ext4_read_inline_page 函数里，我们需要先调用 kmap_atomic，将物理内存映射到内核的虚拟地址空间，得到内核中的地址 kaddr。 我们在前面提到过 kmap_atomic，它是用来做临时内核映射的。本来把物理内存映射到用户虚拟地址空间，不需要在内核里面映射一把。但是，现在因为要从文件里面读取数据并写入这个物理页面，又不能使用物理地址，我们只能使用虚拟地址，这就需要在内核里面临时映射一把。临时映射后，ext4_read_inline_data 读取文件到这个虚拟地址。读取完毕后，我们取消这个临时映射 kunmap_atomic 就行了。</p><p>至于 kmap_atomic 的具体实现，我们还是放到内核映射部分再讲。</p><h3 id="第三种情况-do-swap-page" tabindex="-1"><a class="header-anchor" href="#第三种情况-do-swap-page" aria-hidden="true">#</a> 第三种情况: do_swap_page</h3><p>我们再来看第三种情况，do_swap_page。之前我们讲过物理内存管理，你这里可以回忆一下。如果长时间不用，就要换出到硬盘，也就是 swap，现在这部分数据又要访问了，我们还得想办法再次读到内存中来。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_swap_page</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vm_fault</span> <span class="token operator">*</span>vmf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma <span class="token operator">=</span> vmf<span class="token operator">-&gt;</span>vma<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span> <span class="token operator">*</span>swapcache<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mem_cgroup</span> <span class="token operator">*</span>memcg<span class="token punctuation">;</span>
  <span class="token class-name">swp_entry_t</span> entry<span class="token punctuation">;</span>
  <span class="token class-name">pte_t</span> pte<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  entry <span class="token operator">=</span> <span class="token function">pte_to_swp_entry</span><span class="token punctuation">(</span>vmf<span class="token operator">-&gt;</span>orig_pte<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  page <span class="token operator">=</span> <span class="token function">lookup_swap_cache</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    page <span class="token operator">=</span> <span class="token function">swapin_readahead</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> GFP_HIGHUSER_MOVABLE<span class="token punctuation">,</span> vma<span class="token punctuation">,</span>
          vmf<span class="token operator">-&gt;</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  swapcache <span class="token operator">=</span> page<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  pte <span class="token operator">=</span> <span class="token function">mk_pte</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> vma<span class="token operator">-&gt;</span>vm_page_prot<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">set_pte_at</span><span class="token punctuation">(</span>vma<span class="token operator">-&gt;</span>vm_mm<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>address<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>pte<span class="token punctuation">,</span> pte<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vmf<span class="token operator">-&gt;</span>orig_pte <span class="token operator">=</span> pte<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">swap_free</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>do_swap_page 函数会先查找 swap 文件有没有缓存页。如果没有，就调用 swapin_readahead，将 swap 文件读到内存中来，形成内存页，并通过 mk_pte 生成页表项。set_pte_at 将页表项插入页表，swap_free 将 swap 文件清理。因为重新加载回内存了，不再需要 swap 文件了。</p><p>swapin_readahead 会最终调用 swap_readpage，在这里，我们看到了熟悉的 readpage 函数，也就是说读取普通文件和读取 swap 文件，过程是一样的，同样需要用 kmap_atomic 做临时映射。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">swap_readpage</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span> bool do_poll<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">swap_info_struct</span> <span class="token operator">*</span>sis <span class="token operator">=</span> <span class="token function">page_swap_info</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">blk_qc_t</span> qc<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>bdev<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sis<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> SWP_FILE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>swap_file <span class="token operator">=</span> sis<span class="token operator">-&gt;</span>swap_file<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping <span class="token operator">=</span> swap_file<span class="token operator">-&gt;</span>f_mapping<span class="token punctuation">;</span>
    ret <span class="token operator">=</span> mapping<span class="token operator">-&gt;</span>a_ops<span class="token operator">-&gt;</span><span class="token function">readpage</span><span class="token punctuation">(</span>swap_file<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tlb辅助-热冷页" tabindex="-1"><a class="header-anchor" href="#tlb辅助-热冷页" aria-hidden="true">#</a> TLB辅助: 热冷页</h3><p>通过上面复杂的过程，用户态缺页异常处理完毕了。物理内存中有了页面，页表也建立好了映射。接下来，用户程序在虚拟内存空间里面，可以通过虚拟地址顺利经过页表映射的访问物理页面上的数据了。</p><p>为了加快映射速度，我们不需要每次从虚拟地址到物理地址的转换都走一遍页表。</p><img src="`+k+'" alt="img" style="zoom:25%;"><p>页表一般都很大，只能存放在内存中。操作系统每次访问内存都要折腾两步，先通过查询页表得到物理地址，然后访问该物理地址读取指令、数据。</p><p>为了提高映射速度，我们引入了 <strong>TLB</strong>（Translation Lookaside Buffer），我们经常称为<strong>快表</strong>，专门用来做地址映射的硬件设备。它不在内存中，可存储的数据比较少，但是比内存要快。所以，我们可以想象，TLB 就是页表的 Cache，其中存储了当前最可能被访问到的页表项，其内容是部分页表项的一个副本。</p><p>有了 TLB 之后，地址映射的过程就像图中画的。我们先查块表，块表中有映射关系，然后直接转换为物理地址。如果在 TLB 查不到映射关系时，才会到内存中查询页表。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>用户态的内存映射机制，我们解析的差不多了，我们来总结一下，用户态的内存映射机制包含以下几个部分。</p><ul><li><code>用户态内存映射函数 mmap</code>，包括用它来做<mark>匿名映射</mark>和<mark>文件映射</mark>。</li><li>用户态的<mark>页表结构</mark>，存储位置在 <code>mm_struct</code> 中。</li><li>在用户态访问没有映射的内存会引发缺页异常，分配物理页表、补齐页表。 <ul><li>如果是匿名映射则分配物理内存；</li><li>如果是 swap，则将 swap 文件读入；</li><li>如果是文件映射，则将文件读入。</li></ul></li></ul><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li>申请小块内存用 brk; 申请大块内存或文件映射用 mmap</li><li>mmap 映射文件, 由 fd 得到 struct file</li><li>调用 ...-&gt;do_mmap<br> - 调用 get_unmapped_area 找到一个可以进行映射的 vm_area_struct<br> - 调用 mmap_region 进行映射 <ul><li>get_unmapped_area</li><li>匿名映射: 找到前一个 vm_area_struct <ul><li>文件映射: 调用 file 中 file_operations 文件的相关操作, 最终也会调用到 get_unmapped_area</li></ul></li><li>mmap_region</li><li>通过 vm_area_struct 判断, 能否基于现有的块扩展(调用 vma_merge) <ul><li>若不能, 调用 kmem_cache_alloc 在 slub 中得到一个 vm_area_struct 并进行设置</li><li>若是文件映射: 则调用 file_operations 的 mmap 将 vm_area_struct 的内存操作设置为文件系统对应操作(读写内存就是读写文件系统)</li><li>通过 vma_link 将 vm_area_struct 插入红黑树</li><li>若是文件映射, 调用 __vma_link_file 建立文件到内存的反映射</li></ul></li></ul></li><li>内存管理不直接分配内存, 在使用时才分配</li><li>用户态缺页异常, 触发缺页中断, 调用 do_page_default</li><li>__do_page_fault 判断中断是否发生在内核</li><li>若发生在内核, 调用 vmalloc_fault, 使用内核页表进行映射 <ul><li>若不是, 找到对应 vm_area_struct 调用 handle_mm_fault</li><li>得到多级页表地址 pgd 等</li><li>pgd 存在 task_struct.mm_struct.pgd 中</li><li>全局页目录项 pgd 在创建进程 task_struct 时创建并初始化, 会调用 pgd_ctor 拷贝内核页表到进程的页表</li></ul></li><li>进程被调度运行时, 通过 switch_mm_irqs_off-&gt;load_new_mm_cr3 切换内存上下文</li><li>cr3 是 cpu 寄存器, 存储进程 pgd 的物理地址(load_new_mm_cr3 加载时通过直接内存映射进行转换)</li><li>cpu 访问进程虚拟内存时, 从 cr3 得到 pgd 页表, 最后得到进程访问的物理地址</li><li>进程地址转换发生在用户态, 缺页时才进入内核态(调用__handle_mm_fault)</li><li>__handle_mm_fault 调用 pud_alloc, pmd_alloc, handle_pte_fault 分配页表项</li><li>若不存在 pte<br> - 匿名页: 调用 do_anonymous_page 分配物理页 ①<br> - 文件映射: 调用 do_fault ② <ul><li>若存在 pte, 调用 do_swap_page 换入内存 ③</li><li>① 1 为匿名页分配内存</li><li>调用 pte_alloc 分配 pte 页表项 <ul><li>调用 ...-&gt;__alloc_pages_nodemask 分配物理页</li><li>mk_pte 页表项指向物理页; set_pte_at 插入页表项</li></ul></li><li>② 2 为文件映射分配内存 __do_fault</li><li>以 ext4 为例, 调用 ext4_file_fault-&gt;filemap_fault <ul><li>文件映射一般有物理页作为缓存 find_get_page 找缓存页</li><li>若有缓存页, 调用函数预读数据到内存</li><li>若无缓存页, 调用 page_cache_read 分配一个, 加入 lru 队列, 调用 readpage 读数据: 调用 kmap_atomic 将物理内存映射到内核临时映射空间, 由内核读取文件, 再调用 kunmap_atomic 解映射</li></ul></li><li>③ 3 do_swap_page</li><li>先检查对应 swap 有没有缓存页 <ul><li>没有, 读入 swap 文件(也是调用 readpage)</li><li>调用 mk_pte; set_pet_at; swap_free(清理 swap)</li></ul></li></ul></li><li>避免每次都需要经过页表(存再内存中)访问内存</li><li>TLB 缓存部分页表项的副本</li></ul></blockquote><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>你可以试着用 mmap 系统调用，写一个程序来映射一个文件，并读取文件的内容。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2>',103),_=n("br",null,null,-1),g=n("br",null,null,-1),b={href:"https://www.cnblogs.com/luoahong/p/10916458.html",target:"_blank",rel:"noopener noreferrer"},f=n("br",null,null,-1),w=n("p",null,[s("我感觉学得很吃力，调用链太长了"),n("br"),s(" 作者回复: "),n("strong",null,"忽略调用链，记住重点节点，调用链就是为了证明的确这样过去的"),n("br"),s(" 网友回复: 看总结归纳，我写应用层的连调用链都不怎么看。。大概知道做了什么事就行。。")],-1),y=n("p",null,[s("请问老师，内核里面这些复杂的机制的实现，在当初软件开发开始前有详细的设计文档的吗？分布在全球各地的开发者是如何能达成这种复杂设计的共识的呢？这些内核里的函数相互依赖又和底层硬件相关，是如何进行单元测试的呢？"),n("br"),s(" 作者回复: 可以参考一下开源软件的运作模式，要写设计，大牛review，通过后写代码，大牛组成委员会，看够不够资格合并进去，要合并进去就要有相应的测试用例，覆盖率等，有邮件列表，实时对话工具")],-1),h={href:"https://garlicspace.com/2020/07/22/mmap%e7%9b%b8%e5%85%b3api/",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,[s("难道"),n("strong",null,"堆中数据也是通过匿名映射来获取具体的物理地址"),s("？"),n("br"),s(" 作者回复: 对的")],-1),E={href:"https://zhuanlan.zhihu.com/p/57454565",target:"_blank",rel:"noopener noreferrer"},L=t("<p>当时看内存映射有些懵，可能陷入各种调用了，突然间怎么又出来这么一个调用，其实讲的前面已经提到的调用。看完文件与输入输出后 反过来又看了一遍内存映射，嗯，基本都理解了。</p><p>有一个问题，就是比如内核内存管理模块分配物理内存的时候，是要保证并发安全的吧，因为可能多个核上的程序都发生了缺页中断，也要分配物理内存</p><p>分配全局页目录项，赋值给mm_struct的pdg成员变量。这里应该是pgd吧老师？<br> 作者回复: Page Global Directory,PGD，是的，老是倒</p><p>请教下老师，内核线程的task struct上的mm为什么为空？另外看代码还有个active_mm，这个设计上有什么考虑吗？<br> 作者回复: <strong>内核线程没有用户地址空间</strong>。<br> 1 如果是<strong>用户进程</strong>，则两者一样。<br> 2 如果是<strong>内核线程</strong>，没有mm，active_mm指向此时用户态的地址空间。</p><p>mmap_region只是把虚拟内存在建立了一个假的物理内存映射（如果是文件，并记录目标文件位置和操作）而已。真正的内存分配要等程序开始访问内存之后，发现并没有实际的物理内存页，触发缺页异常再来处理并分配物理内存。这个时候应该会更新这个假的物理内存地址。这才算完成真正的映射。</p><p>4 级页表示意图有个地方搞颠倒了：PGDIR_SHIT (39)、PUD_SHIT(30) 位置互换下。</p><p>好像没看到区分minor pagefault和major pagefault的点？我理解对于匿名映射，只会出现minor pagefault,对文件映射以及涉及swap in的部分，可能既有minor pagefault，又有major pagefault，这种情况下可能会出现io。</p><p><strong>看了隔壁的计算机组成原理，这几张感觉理解来轻松了些。第二遍过，带着问题看，理解加深了</strong></p><p>在用户态访问没有映射的内存会引发缺页异常，分配物理页表、补齐页表。如果是匿名映射则分配物理内存；如果是 swap，则将 swap 文件读入；如果是文件映射，则将文件读入。</p><p>mmap可以将文件映射到内核态的虚拟内存空间吗？（据说NIO直接内存就是这么实现的）<br> 作者回复: 内核就不是mmap了</p><p>请问老师，<strong>malloc 调用的也是 mmap</strong> 吗？<br> 作者回复: 大内存是的</p><p>老师，我们平时说的pss应该是指已经分配给进程的物理页面大小的总和吧？那如果运行中有部分页面被swap到了硬盘，此时的pss还把这部分大小算进去吗？<br> 作者回复: 算进去了。</p><p>老师，想问一下，中断和异常有什么区别<br> 作者回复: <strong>有的异常会产生中断，有的异常是应用层的，可以不产生中断</strong></p>",13);function P(A,I){const a=o("ExternalLinkIcon");return c(),l("div",null,[v,n("p",null,[s("比起《深入浅出计算机组成原理》和《Linux性能优化实战》的篇幅"),_,s(" 本节花了三天，每天不少于2小时，才把笔记做完，估计老师也花费不少时间"),g,s(" day25笔记："),n("a",b,[s("https://www.cnblogs.com/luoahong/p/10916458.html"),p(a)]),f,s(" 作者回复: 是啊是啊，理解万岁")]),w,y,n("p",null,[s("mmap 创建可以通过文件， 也可以匿名创建，通过文件创建， 如果文件大小和映射区域大小不一致， 超过映射访问边界会触发SIGSEGV, 大于文件边界小于映射区域的访问会触发SIGBUS， 有种特殊情况是·Hole Punching·， SPARSE FILE稀疏文件，映射的时候中间有空洞， 如果访问空洞是不会抛出异常的，进程多了要申请内存大于实际内存的话可以通过 overcommit来调节。 mmap配合dax文件系统，可以绕开文件系统减少swap，提升性能， "),n("a",h,[s("笔记"),p(a)])]),x,n("p",null,[s("这里有个很久以前使用mmap进行文件读取和打印数据的demo（虽然当时是想用来表达进程通信的） 希望对大家有所帮助 "),n("a",E,[s("https://zhuanlan.zhihu.com/p/57454565"),p(a)])]),L])}const S=e(m,[["render",P],["__file","I25-用户态内存映射.html.vue"]]);export{S as default};
