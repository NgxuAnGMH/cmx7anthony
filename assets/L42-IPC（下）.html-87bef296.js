import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,e as p,d as l}from"./app-cdabc73c.js";const u="/assets/0352227c5f49d194b6094f229220cdd6-a56555b5.png",i="/assets/6028c83b0aa00e65916988911aa01b7c-4d179b8a.png",r={},k=l(`<h1 id="_42-ipc-下-不同项目组之间抢资源-如何协调" tabindex="-1"><a class="header-anchor" href="#_42-ipc-下-不同项目组之间抢资源-如何协调" aria-hidden="true">#</a> 42 | IPC（下）：不同项目组之间抢资源，如何协调？</h1><p>IPC 这块的内容比较多，为了让你能够更好地理解，我分成了三节来讲。前面我们解析完了共享内存的内核机制后，今天我们来看最后一部分，信号量的内核机制。</p><p>首先，我们需要创建一个信号量，调用的是系统调用 semget。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>semget<span class="token punctuation">,</span> <span class="token class-name">key_t</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> nsems<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> semflg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">ipc_ops</span> sem_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>getnew <span class="token operator">=</span> newary<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>associate <span class="token operator">=</span> sem_security<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>more_checks <span class="token operator">=</span> sem_more_checks<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ipc_params</span> sem_params<span class="token punctuation">;</span>
  ns <span class="token operator">=</span> current<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>ipc_ns<span class="token punctuation">;</span>
  sem_params<span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
  sem_params<span class="token punctuation">.</span>flg <span class="token operator">=</span> semflg<span class="token punctuation">;</span>
  sem_params<span class="token punctuation">.</span>u<span class="token punctuation">.</span>nsems <span class="token operator">=</span> nsems<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">ipcget</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">sem_ids</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sem_ops<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sem_params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们解析过了共享内存，再看信号量，就顺畅很多了。这里同样调用了抽象的 ipcget，参数分别为信号量对应的 sem_ids、对应的操作 sem_ops 以及对应的参数 sem_params。</p><p>ipcget 的代码我们已经解析过了。如果 key 设置为 IPC_PRIVATE 则永远创建新的；如果不是的话，就会调用 ipcget_public。</p><p>在 ipcget_public 中，我们能会按照 key，去查找 struct kern_ipc_perm。如果没有找到，那就看看是否设置了 IPC_CREAT。如果设置了，就创建一个新的。如果找到了，就将对应的 id 返回。</p><p>我们这里重点看，如何按照参数 sem_ops，创建新的信号量会调用 newary。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">newary</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ipc_params</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> retval<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_array</span> <span class="token operator">*</span>sma<span class="token punctuation">;</span>
  <span class="token class-name">key_t</span> key <span class="token operator">=</span> params<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
  <span class="token keyword">int</span> nsems <span class="token operator">=</span> params<span class="token operator">-&gt;</span>u<span class="token punctuation">.</span>nsems<span class="token punctuation">;</span>
  <span class="token keyword">int</span> semflg <span class="token operator">=</span> params<span class="token operator">-&gt;</span>flg<span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  sma <span class="token operator">=</span> <span class="token function">sem_alloc</span><span class="token punctuation">(</span>nsems<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  sma<span class="token operator">-&gt;</span>sem_perm<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token punctuation">(</span>semflg <span class="token operator">&amp;</span> S_IRWXUGO<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sma<span class="token operator">-&gt;</span>sem_perm<span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
  sma<span class="token operator">-&gt;</span>sem_perm<span class="token punctuation">.</span>security <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nsems<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>sems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pending_alter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>sems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pending_const<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>sems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  sma<span class="token operator">-&gt;</span>complex_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  sma<span class="token operator">-&gt;</span>use_global_lock <span class="token operator">=</span> USE_GLOBAL_LOCK_HYSTERESIS<span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>pending_alter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>pending_const<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>list_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sma<span class="token operator">-&gt;</span>sem_nsems <span class="token operator">=</span> nsems<span class="token punctuation">;</span>
  sma<span class="token operator">-&gt;</span>sem_ctime <span class="token operator">=</span> <span class="token function">get_seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  retval <span class="token operator">=</span> <span class="token function">ipc_addid</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">sem_ids</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>sem_perm<span class="token punctuation">,</span> ns<span class="token operator">-&gt;</span>sc_semmni<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ns<span class="token operator">-&gt;</span>used_sems <span class="token operator">+=</span> nsems<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> sma<span class="token operator">-&gt;</span>sem_perm<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>newary 函数的第一步，通过 kvmalloc 在直接映射区分配一个 struct sem_array 结构。这个结构是用来描述信号量的，这个结构最开始就是上面说的 struct kern_ipc_perm 结构。接下来就是填充这个 struct sem_array 结构，例如 key、权限等。</p><p>struct sem_array 里有多个信号量，放在 struct sem sems[]数组里面，在 struct sem 里面有当前的信号量的数值 semval。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sem</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span>  semval<span class="token punctuation">;</span>    <span class="token comment">/* current value */</span>
  <span class="token comment">/*
   * PID of the process that last modified the semaphore. For
   * Linux, specifically these are:
   *  - semop
   *  - semctl, via SETVAL and SETALL.
   *  - at task exit when performing undo adjustments (see exit_sem).
   */</span>
  <span class="token keyword">int</span>  sempid<span class="token punctuation">;</span>
  <span class="token class-name">spinlock_t</span>  lock<span class="token punctuation">;</span>  <span class="token comment">/* spinlock for fine-grained semtimedop */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> pending_alter<span class="token punctuation">;</span> <span class="token comment">/* pending single-sop operations that alter the semaphore */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> pending_const<span class="token punctuation">;</span> <span class="token comment">/* pending single-sop operations that do not alter the semaphore*/</span>
  <span class="token class-name">time_t</span>  sem_otime<span class="token punctuation">;</span>  <span class="token comment">/* candidate for sem_otime */</span>
<span class="token punctuation">}</span> ____cacheline_aligned_in_smp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>struct sem_array 和 struct sem 各有一个链表 struct list_head pending_alter，分别表示对于整个信号量数组的修改和对于某个信号量的修改。</p><p>newary 函数的第二步，就是初始化这些链表。</p><p>newary 函数的第三步，通过 ipc_addid 将新创建的 struct sem_array 结构，挂到 sem_ids 里面的基数树上，并返回相应的 id。</p><p>信号量创建的过程到此结束，接下来我们来看，如何通过 semctl 对信号量数组进行初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE4</span><span class="token punctuation">(</span>semctl<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> semid<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> semnum<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> version<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">;</span>
  <span class="token keyword">void</span> __user <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
  ns <span class="token operator">=</span> current<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>ipc_ns<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> IPC_INFO<span class="token operator">:</span>
  <span class="token keyword">case</span> SEM_INFO<span class="token operator">:</span>
  <span class="token keyword">case</span> IPC_STAT<span class="token operator">:</span>
  <span class="token keyword">case</span> SEM_STAT<span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token function">semctl_nolock</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> semid<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> version<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> GETALL<span class="token operator">:</span>
  <span class="token keyword">case</span> GETVAL<span class="token operator">:</span>
  <span class="token keyword">case</span> GETPID<span class="token operator">:</span>
  <span class="token keyword">case</span> GETNCNT<span class="token operator">:</span>
  <span class="token keyword">case</span> GETZCNT<span class="token operator">:</span>
  <span class="token keyword">case</span> SETALL<span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token function">semctl_main</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> semid<span class="token punctuation">,</span> semnum<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> SETVAL<span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token function">semctl_setval</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> semid<span class="token punctuation">,</span> semnum<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> IPC_RMID<span class="token operator">:</span>
  <span class="token keyword">case</span> IPC_SET<span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token function">semctl_down</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> semid<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> version<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们重点看，SETALL 操作调用的 semctl_main 函数，以及 SETVAL 操作调用的 semctl_setval 函数。</p><p>对于 SETALL 操作来讲，传进来的参数为 union semun 里面的 unsigned short *array，会设置整个信号量集合。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">semctl_main</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">,</span> <span class="token keyword">int</span> semid<span class="token punctuation">,</span> <span class="token keyword">int</span> semnum<span class="token punctuation">,</span>
    <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">void</span> __user <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_array</span> <span class="token operator">*</span>sma<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem</span> <span class="token operator">*</span>curr<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">,</span> nsems<span class="token punctuation">;</span>
  ushort fast_sem_io<span class="token punctuation">[</span>SEMMSL_FAST<span class="token punctuation">]</span><span class="token punctuation">;</span>
  ushort <span class="token operator">*</span>sem_io <span class="token operator">=</span> fast_sem_io<span class="token punctuation">;</span>
  <span class="token function">DEFINE_WAKE_Q</span><span class="token punctuation">(</span>wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sma <span class="token operator">=</span> <span class="token function">sem_obtain_object_check</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> semid<span class="token punctuation">)</span><span class="token punctuation">;</span>
  nsems <span class="token operator">=</span> sma<span class="token operator">-&gt;</span>sem_nsems<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">case</span> SETALL<span class="token operator">:</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sem_undo</span> <span class="token operator">*</span>un<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>sem_io<span class="token punctuation">,</span> p<span class="token punctuation">,</span> nsems<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ushort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nsems<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sma<span class="token operator">-&gt;</span>sems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>semval <span class="token operator">=</span> sem_io<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      sma<span class="token operator">-&gt;</span>sems<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sempid <span class="token operator">=</span> <span class="token function">task_tgid_vnr</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    sma<span class="token operator">-&gt;</span>sem_ctime <span class="token operator">=</span> <span class="token function">get_seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* maybe some queued-up processes were waiting for this */</span>
    <span class="token function">do_smart_update</span><span class="token punctuation">(</span>sma<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">wake_up_q</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 semctl_main 函数中，先是通过 sem_obtain_object_check，根据信号量集合的 id 在基数树里面找到 struct sem_array 对象，发现如果是 SETALL 操作，就将用户的参数中的 unsigned short *array 通过 copy_from_user 拷贝到内核里面的 sem_io 数组，然后是一个循环，对于信号量集合里面的每一个信号量，设置 semval，以及修改这个信号量值的 pid。</p><p>对于 SETVAL 操作来讲，传进来的参数 union semun 里面的 int val，仅仅会设置某个信号量。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">semctl_setval</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">,</span> <span class="token keyword">int</span> semid<span class="token punctuation">,</span> <span class="token keyword">int</span> semnum<span class="token punctuation">,</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_undo</span> <span class="token operator">*</span>un<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_array</span> <span class="token operator">*</span>sma<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem</span> <span class="token operator">*</span>curr<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">,</span> val<span class="token punctuation">;</span>
  <span class="token function">DEFINE_WAKE_Q</span><span class="token punctuation">(</span>wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  sma <span class="token operator">=</span> <span class="token function">sem_obtain_object_check</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> semid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  curr <span class="token operator">=</span> <span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>sems<span class="token punctuation">[</span>semnum<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  curr<span class="token operator">-&gt;</span>semval <span class="token operator">=</span> val<span class="token punctuation">;</span>
  curr<span class="token operator">-&gt;</span>sempid <span class="token operator">=</span> <span class="token function">task_tgid_vnr</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sma<span class="token operator">-&gt;</span>sem_ctime <span class="token operator">=</span> <span class="token function">get_seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* maybe some queued-up processes were waiting for this */</span>
  <span class="token function">do_smart_update</span><span class="token punctuation">(</span>sma<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">wake_up_q</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 semctl_setval 函数中，我们先是通过 sem_obtain_object_check，根据信号量集合的 id 在基数树里面找到 struct sem_array 对象，对于 SETVAL 操作，直接根据参数中的 val 设置 semval，以及修改这个信号量值的 pid。</p><p>至此，信号量数组初始化完毕。接下来我们来看 P 操作和 V 操作。无论是 P 操作，还是 V 操作都是调用 semop 系统调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>semop<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> semid<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sembuf</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> tsops<span class="token punctuation">,</span>
    <span class="token keyword">unsigned</span><span class="token punctuation">,</span> nsops<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">sys_semtimedop</span><span class="token punctuation">(</span>semid<span class="token punctuation">,</span> tsops<span class="token punctuation">,</span> nsops<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">SYSCALL_DEFINE4</span><span class="token punctuation">(</span>semtimedop<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> semid<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sembuf</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> tsops<span class="token punctuation">,</span>
    <span class="token keyword">unsigned</span><span class="token punctuation">,</span> nsops<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> error <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_array</span> <span class="token operator">*</span>sma<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sembuf</span> fast_sops<span class="token punctuation">[</span>SEMOPM_FAST<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sembuf</span> <span class="token operator">*</span>sops <span class="token operator">=</span> fast_sops<span class="token punctuation">,</span> <span class="token operator">*</span>sop<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_undo</span> <span class="token operator">*</span>un<span class="token punctuation">;</span>
  <span class="token keyword">int</span> max<span class="token punctuation">,</span> locknum<span class="token punctuation">;</span>
  bool undos <span class="token operator">=</span> false<span class="token punctuation">,</span> alter <span class="token operator">=</span> false<span class="token punctuation">,</span> dupsop <span class="token operator">=</span> false<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_queue</span> queue<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> dup <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> jiffies_left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">;</span>

  ns <span class="token operator">=</span> current<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>ipc_ns<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>sops<span class="token punctuation">,</span> tsops<span class="token punctuation">,</span> nsops <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>tsops<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    error <span class="token operator">=</span>  <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out_free<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">timespec</span> _timeout<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_timeout<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    jiffies_left <span class="token operator">=</span> <span class="token function">timespec_to_jiffies</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/* On success, find_alloc_undo takes the rcu_read_lock */</span>
  un <span class="token operator">=</span> <span class="token function">find_alloc_undo</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> semid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  sma <span class="token operator">=</span> <span class="token function">sem_obtain_object_check</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> semid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  queue<span class="token punctuation">.</span>sops <span class="token operator">=</span> sops<span class="token punctuation">;</span>
  queue<span class="token punctuation">.</span>nsops <span class="token operator">=</span> nsops<span class="token punctuation">;</span>
  queue<span class="token punctuation">.</span>undo <span class="token operator">=</span> un<span class="token punctuation">;</span>
  queue<span class="token punctuation">.</span>pid <span class="token operator">=</span> <span class="token function">task_tgid_vnr</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
  queue<span class="token punctuation">.</span>alter <span class="token operator">=</span> alter<span class="token punctuation">;</span>
  queue<span class="token punctuation">.</span>dupsop <span class="token operator">=</span> dupsop<span class="token punctuation">;</span>

  error <span class="token operator">=</span> <span class="token function">perform_atomic_semop</span><span class="token punctuation">(</span>sma<span class="token punctuation">,</span> <span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* non-blocking succesfull path */</span>
    <span class="token function">DEFINE_WAKE_Q</span><span class="token punctuation">(</span>wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">do_smart_update</span><span class="token punctuation">(</span>sma<span class="token punctuation">,</span> sops<span class="token punctuation">,</span> nsops<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">wake_up_q</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out_free<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/*
   * We need to sleep on this operation, so we put the current
   * task into the pending queue and go to sleep.
   */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nsops <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sem</span> <span class="token operator">*</span>curr<span class="token punctuation">;</span>
    curr <span class="token operator">=</span> <span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>sems<span class="token punctuation">[</span>sops<span class="token operator">-&gt;</span>sem_num<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">.</span>list<span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>curr<span class="token operator">-&gt;</span>pending_alter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>pending_alter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    queue<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token operator">-</span>EINTR<span class="token punctuation">;</span>
    queue<span class="token punctuation">.</span>sleeper <span class="token operator">=</span> current<span class="token punctuation">;</span>

    <span class="token function">__set_current_state</span><span class="token punctuation">(</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
      jiffies_left <span class="token operator">=</span> <span class="token function">schedule_timeout</span><span class="token punctuation">(</span>jiffies_left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/*
     * If an interrupt occurred we have to clean up the queue.
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&amp;&amp;</span> jiffies_left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      error <span class="token operator">=</span> <span class="token operator">-</span>EAGAIN<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token operator">-</span>EINTR <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">signal_pending</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* spurious */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>semop 会调用 semtimedop，这是一个非常复杂的函数。</p><p>semtimedop 做的第一件事情，就是将用户的参数，例如，对于信号量的操作 struct sembuf，拷贝到内核里面来。另外，如果是 P 操作，很可能让进程进入等待状态，是否要为这个等待状态设置一个超时，timeout 也是一个参数，会把它变成时钟的滴答数目。</p><p>semtimedop 做的第二件事情，是通过 sem_obtain_object_check，根据信号量集合的 id，获得 struct sem_array，然后，创建一个 struct sem_queue 表示当前的信号量操作。为什么叫 queue 呢？因为这个操作可能马上就能完成，也可能因为无法获取信号量不能完成，不能完成的话就只好排列到队列上，等待信号量满足条件的时候。semtimedop 会调用 perform_atomic_semop 在实施信号量操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">perform_atomic_semop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sem_array</span> <span class="token operator">*</span>sma<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sem_queue</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> result<span class="token punctuation">,</span> sem_op<span class="token punctuation">,</span> nsops<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sembuf</span> <span class="token operator">*</span>sop<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem</span> <span class="token operator">*</span>curr<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sembuf</span> <span class="token operator">*</span>sops<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_undo</span> <span class="token operator">*</span>un<span class="token punctuation">;</span>

  sops <span class="token operator">=</span> q<span class="token operator">-&gt;</span>sops<span class="token punctuation">;</span>
  nsops <span class="token operator">=</span> q<span class="token operator">-&gt;</span>nsops<span class="token punctuation">;</span>
  un <span class="token operator">=</span> q<span class="token operator">-&gt;</span>undo<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>sop <span class="token operator">=</span> sops<span class="token punctuation">;</span> sop <span class="token operator">&lt;</span> sops <span class="token operator">+</span> nsops<span class="token punctuation">;</span> sop<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    curr <span class="token operator">=</span> <span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>sems<span class="token punctuation">[</span>sop<span class="token operator">-&gt;</span>sem_num<span class="token punctuation">]</span><span class="token punctuation">;</span>
    sem_op <span class="token operator">=</span> sop<span class="token operator">-&gt;</span>sem_op<span class="token punctuation">;</span>
    result <span class="token operator">=</span> curr<span class="token operator">-&gt;</span>semval<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    result <span class="token operator">+=</span> sem_op<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> would_block<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sop<span class="token operator">-&gt;</span>sem_flg <span class="token operator">&amp;</span> SEM_UNDO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> undo <span class="token operator">=</span> un<span class="token operator">-&gt;</span>semadj<span class="token punctuation">[</span>sop<span class="token operator">-&gt;</span>sem_num<span class="token punctuation">]</span> <span class="token operator">-</span> sem_op<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>sop <span class="token operator">=</span> sops<span class="token punctuation">;</span> sop <span class="token operator">&lt;</span> sops <span class="token operator">+</span> nsops<span class="token punctuation">;</span> sop<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    curr <span class="token operator">=</span> <span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>sems<span class="token punctuation">[</span>sop<span class="token operator">-&gt;</span>sem_num<span class="token punctuation">]</span><span class="token punctuation">;</span>
    sem_op <span class="token operator">=</span> sop<span class="token operator">-&gt;</span>sem_op<span class="token punctuation">;</span>
    result <span class="token operator">=</span> curr<span class="token operator">-&gt;</span>semval<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>sop<span class="token operator">-&gt;</span>sem_flg <span class="token operator">&amp;</span> SEM_UNDO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> undo <span class="token operator">=</span> un<span class="token operator">-&gt;</span>semadj<span class="token punctuation">[</span>sop<span class="token operator">-&gt;</span>sem_num<span class="token punctuation">]</span> <span class="token operator">-</span> sem_op<span class="token punctuation">;</span>
      un<span class="token operator">-&gt;</span>semadj<span class="token punctuation">[</span>sop<span class="token operator">-&gt;</span>sem_num<span class="token punctuation">]</span> <span class="token operator">=</span> undo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    curr<span class="token operator">-&gt;</span>semval <span class="token operator">+=</span> sem_op<span class="token punctuation">;</span>
    curr<span class="token operator">-&gt;</span>sempid <span class="token operator">=</span> q<span class="token operator">-&gt;</span>pid<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
would_block<span class="token operator">:</span>
  q<span class="token operator">-&gt;</span>blocking <span class="token operator">=</span> sop<span class="token punctuation">;</span>
  <span class="token keyword">return</span> sop<span class="token operator">-&gt;</span>sem_flg <span class="token operator">&amp;</span> IPC_NOWAIT <span class="token operator">?</span> <span class="token operator">-</span>EAGAIN <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 perform_atomic_semop 函数中，对于所有信号量操作都进行两次循环。在第一次循环中，如果发现计算出的 result 小于 0，则说明必须等待，于是跳到 would_block 中，设置 q-&gt;blocking = sop 表示这个 queue 是 block 在这个操作上，然后如果需要等待，则返回 1。如果第一次循环中发现无需等待，则第二个循环实施所有的信号量操作，将信号量的值设置为新的值，并且返回 0。</p><p>接下来，我们回到 semtimedop，来看它干的第三件事情，就是如果需要等待，应该怎么办？</p><p>如果需要等待，则要区分刚才的对于信号量的操作，是对一个信号量的，还是对于整个信号量集合的。如果是对于一个信号量的，那我们就将 queue 挂到这个信号量的 pending_alter 中；如果是对于整个信号量集合的，那我们就将 queue 挂到整个信号量集合的 pending_alter 中。</p><p>接下来的 do-while 循环，就是要开始等待了。如果等待没有时间限制，则调用 schedule 让出 CPU；如果等待有时间限制，则调用 schedule_timeout 让出 CPU，过一段时间还回来。当回来的时候，判断是否等待超时，如果没有等待超时则进入下一轮循环，再次等待，如果超时则退出循环，返回错误。在让出 CPU 的时候，设置进程的状态为 TASK_INTERRUPTIBLE，并且循环的结束会通过 signal_pending 查看是否收到过信号，这说明这个等待信号量的进程是可以被信号中断的，也即一个等待信号量的进程是可以通过 kill 杀掉的。</p><p>我们再来看，semtimedop 要做的第四件事情，如果不需要等待，应该怎么办？</p><p>如果不需要等待，就说明对于信号量的操作完成了，也改变了信号量的值。接下来，就是一个标准流程。我们通过 DEFINE_WAKE_Q(wake_q) 声明一个 wake_q，调用 do_smart_update，看这次对于信号量的值的改变，可以影响并可以激活等待队列中的哪些 struct sem_queue，然后把它们都放在 wake_q 里面，调用 wake_up_q 唤醒这些进程。其实，所有的对于信号量的值的修改都会涉及这三个操作，如果你回过头去仔细看 SETALL 和 SETVAL 操作，在设置完毕信号量之后，也是这三个操作。</p><p>我们来看 do_smart_update 是如何实现的。do_smart_update 会调用 update_queue。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">update_queue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sem_array</span> <span class="token operator">*</span>sma<span class="token punctuation">,</span> <span class="token keyword">int</span> semnum<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">wake_q_head</span> <span class="token operator">*</span>wake_q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_queue</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> <span class="token operator">*</span>pending_list<span class="token punctuation">;</span>
  <span class="token keyword">int</span> semop_completed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>semnum <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    pending_list <span class="token operator">=</span> <span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>pending_alter<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    pending_list <span class="token operator">=</span> <span class="token operator">&amp;</span>sma<span class="token operator">-&gt;</span>sems<span class="token punctuation">[</span>semnum<span class="token punctuation">]</span><span class="token punctuation">.</span>pending_alter<span class="token punctuation">;</span>

again<span class="token operator">:</span>
  <span class="token function">list_for_each_entry_safe</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> pending_list<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> error<span class="token punctuation">,</span> restart<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    error <span class="token operator">=</span> <span class="token function">perform_atomic_semop</span><span class="token punctuation">(</span>sma<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Does q-&gt;sleeper still need to sleep? */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>

    <span class="token function">unlink_queue</span><span class="token punctuation">(</span>sma<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">wake_up_sem_queue_prepare</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> error<span class="token punctuation">,</span> wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> semop_completed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">wake_up_sem_queue_prepare</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sem_queue</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> error<span class="token punctuation">,</span>
               <span class="token keyword">struct</span> <span class="token class-name">wake_q_head</span> <span class="token operator">*</span>wake_q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">wake_q_add</span><span class="token punctuation">(</span>wake_q<span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>sleeper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>update_queue 会依次循环整个信号量集合的等待队列 pending_alter，或者某个信号量的等待队列。试图在信号量的值变了的情况下，再次尝试 perform_atomic_semop 进行信号量操作。如果不成功，则尝试队列中的下一个；如果尝试成功，则调用 unlink_queue 从队列上取下来，然后调用 wake_up_sem_queue_prepare，将 q-&gt;sleeper 加到 wake_q 上去。q-&gt;sleeper 是一个 task_struct，是等待在这个信号量操作上的进程。</p><p>接下来，wake_up_q 就依次唤醒 wake_q 上的所有 task_struct，调用的是我们在进程调度那一节学过的 wake_up_process 方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">wake_up_q</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">wake_q_head</span> <span class="token operator">*</span>head<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">wake_q_node</span> <span class="token operator">*</span>node <span class="token operator">=</span> head<span class="token operator">-&gt;</span>first<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> WAKE_Q_TAIL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>task<span class="token punctuation">;</span>

    task <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">task_struct</span><span class="token punctuation">,</span> wake_q<span class="token punctuation">)</span><span class="token punctuation">;</span>

    node <span class="token operator">=</span> node<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    task<span class="token operator">-&gt;</span>wake_q<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">wake_up_process</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put_task_struct</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，对于信号量的主流操作都解析完毕了。</p><p>其实还有一点需要强调一下，信号量是一个整个 Linux 可见的全局资源，而不像咱们在线程同步那一节讲过的都是某个进程独占的资源，好处是可以跨进程通信，坏处就是如果一个进程通过 P 操作拿到了一个信号量，但是不幸异常退出了，如果没有来得及归还这个信号量，可能所有其他的进程都阻塞了。</p><p>那怎么办呢？Linux 有一种机制叫 SEM_UNDO，也即每一个 semop 操作都会保存一个反向 struct sem_undo 操作，当因为某个进程异常退出的时候，这个进程做的所有的操作都会回退，从而保证其他进程可以正常工作。</p><p>如果你回头看，我们写的程序里面的 semaphore_p 函数和 semaphore_v 函数，都把 sem_flg 设置为 SEM_UNDO，就是这个作用。</p><p>等待队列上的每一个 struct sem_queue，都有一个 struct sem_undo，以此来表示这次操作的反向操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sem_queue</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  list<span class="token punctuation">;</span>   <span class="token comment">/* queue of pending operations */</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_struct</span>  <span class="token operator">*</span>sleeper<span class="token punctuation">;</span> <span class="token comment">/* this process */</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_undo</span>    <span class="token operator">*</span>undo<span class="token punctuation">;</span>   <span class="token comment">/* undo structure */</span>
  <span class="token keyword">int</span>      pid<span class="token punctuation">;</span>   <span class="token comment">/* process id of requesting process */</span>
  <span class="token keyword">int</span>      status<span class="token punctuation">;</span>   <span class="token comment">/* completion status of operation */</span>
  <span class="token keyword">struct</span> <span class="token class-name">sembuf</span>    <span class="token operator">*</span>sops<span class="token punctuation">;</span>   <span class="token comment">/* array of pending operations */</span>
  <span class="token keyword">struct</span> <span class="token class-name">sembuf</span>    <span class="token operator">*</span>blocking<span class="token punctuation">;</span> <span class="token comment">/* the operation that blocked */</span>
  <span class="token keyword">int</span>      nsops<span class="token punctuation">;</span>   <span class="token comment">/* number of operations */</span>
  bool      alter<span class="token punctuation">;</span>   <span class="token comment">/* does *sops alter the array? */</span>
  bool                    dupsop<span class="token punctuation">;</span>   <span class="token comment">/* sops on more than one sem_num */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在进程的 task_struct 里面对于信号量有一个成员 struct sysv_sem，里面是一个 struct sem_undo_list，将这个进程所有的 semop 所带来的 undo 操作都串起来。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">struct</span> <span class="token class-name">sysv_sem</span>      sysvsem<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">sysv_sem</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_undo_list</span> <span class="token operator">*</span>undo_list<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">sem_undo</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  list_proc<span class="token punctuation">;</span>  <span class="token comment">/* per-process list: *
             * all undos from one process
             * rcu protected */</span>
  <span class="token keyword">struct</span> <span class="token class-name">rcu_head</span>    rcu<span class="token punctuation">;</span>    <span class="token comment">/* rcu struct for sem_undo */</span>
  <span class="token keyword">struct</span> <span class="token class-name">sem_undo_list</span>  <span class="token operator">*</span>ulp<span class="token punctuation">;</span>    <span class="token comment">/* back ptr to sem_undo_list */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  list_id<span class="token punctuation">;</span>  <span class="token comment">/* per semaphore array list:
             * all undos for one array */</span>
  <span class="token keyword">int</span>      semid<span class="token punctuation">;</span>    <span class="token comment">/* semaphore set identifier */</span>
  <span class="token keyword">short</span>      <span class="token operator">*</span>semadj<span class="token punctuation">;</span>  <span class="token comment">/* array of adjustments */</span>
            <span class="token comment">/* one per semaphore */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">sem_undo_list</span> <span class="token punctuation">{</span>
  <span class="token class-name">atomic_t</span>    refcnt<span class="token punctuation">;</span>
  <span class="token class-name">spinlock_t</span>    lock<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  list_proc<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让你更清楚地理解 struct sem_undo 的原理，我们这里举一个例子。</p><p>假设我们创建了两个信号量集合。一个叫 semaphore1，它包含三个信号量，初始化值为 3，另一个叫 semaphore2，它包含 4 个信号量，初始化值都为 4。初始化时候的信号量以及 undo 结构里面的值如图中 (1) 标号所示。</p><figure><img src="`+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>首先，我们来看进程 1。我们调用 semop，将 semaphore1 的三个信号量的值，分别加 1、加 2 和减 3，从而信号量的值变为 4,5,0。于是在 semaphore1 和进程 1 链表交汇的 undo 结构里面，填写 -1,-2,+3，是 semop 操作的反向操作，如图中 (2) 标号所示。</p><p>然后，我们来看进程 2。我们调用 semop，将 semaphore1 的三个信号量的值，分别减 3、加 2 和加 1，从而信号量的值变为 1、7、1。于是在 semaphore1 和进程 2 链表交汇的 undo 结构里面，填写 +3、-2、-1，是 semop 操作的反向操作，如图中 (3) 标号所示。</p><p>然后，我们接着看进程 2。我们调用 semop，将 semaphore2 的四个信号量的值，分别减 3、加 1、加 4 和减 1，从而信号量的值变为 1、5、8、3。于是，在 semaphore2 和进程 2 链表交汇的 undo 结构里面，填写 +3、-1、-4、+1，是 semop 操作的反向操作，如图中 (4) 标号所示。</p><p>然后，我们再来看进程 1。我们调用 semop，将 semaphore2 的四个信号量的值，分别减 1、减 4、减 5 和加 2，从而信号量的值变为 0、1、3、5。于是在 semaphore2 和进程 1 链表交汇的 undo 结构里面，填写 +1、+4、+5、-2，是 semop 操作的反向操作，如图中 (5) 标号所示。</p><p>从这个例子可以看出，无论哪个进程异常退出，只要将 undo 结构里面的值加回当前信号量的值，就能够得到正确的信号量的值，不会因为一个进程退出，导致信号量的值处于不一致的状态。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> <strong>总结时刻</strong></h2><p>信号量的机制也很复杂，我们对着下面这个图总结一下。</p><figure><img src="'+i+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>1.调用 semget 创建信号量集合。</li><li>2.ipc_findkey 会在基数树中，根据 key 查找信号量集合 sem_array 对象。如果已经被创建，就会被查询出来。例如 producer 被创建过，在 consumer 中就会查询出来。</li><li>3.如果信号量集合没有被创建过，则调用 sem_ops 的 newary 方法，创建一个信号量集合对象 sem_array。例如，在 producer 中就会新建。</li><li>4.调用 semctl(SETALL) 初始化信号量。</li><li>5.sem_obtain_object_check 先从基数树里面找到 sem_array 对象。</li><li>6.根据用户指定的信号量数组，初始化信号量集合，也即初始化 sem_array 对象的 struct sem sems[]成员。</li><li>7.调用 semop 操作信号量。</li><li>8.创建信号量操作结构 sem_queue，放入队列。</li><li>9.创建 undo 结构，放入链表。</li></ul><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> <strong>课堂练习</strong></h2><p>现在，我们的共享内存、信号量、消息队列都讲完了，你是不是觉得，它们的 API 非常相似。为了方便记忆，你可以自己整理一个表格，列一下这三种进程间通信机制、行为创建 xxxget、使用、控制 xxxctl、对应的 API 和系统调用。</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>终于把共享内存和信号量集合的知识串联在一起了, 其中的操作的确有些复杂<br> 共享内存若想实现进程之间的同步读写, 则需要配合信号量共同使用</p><ul><li><strong>共享内存</strong></li><li><strong>共享内存的创建</strong><br> - 开辟共享内存区域, 使用 shmid_kernel 描述<br> - 通过 kvmalloc 在内核的直接映射区分配一个 shmid_kernel 结构体<br> - 将内存映射到文件<br> - 这个文件并非磁盘文件, <strong>而是通过内存文件系统 shmem 创建的内存文件</strong><br> - 这么做的原因是因为<strong>文件可以跨进程共享</strong><br> - 将这个 shmid_kernel 挂载到共享内存基树上, 返回对应的 id <ul><li><strong>共享内存的映射</strong></li><li>通过 id 在共享内存基树上找到对应的共享内存描述 shmid_kernel <ul><li>创建一个 shm_file_data 指向共享内存的内存文件</li><li>创建一个 file 指向 shm_file_data</li><li>在用户空间找一块内存区域, 将这个 file 映射到用户地址空间</li><li>通过文件映射之后, 便可以在用户空间操作这块内存了</li></ul></li></ul></li><li><strong>信号量集合</strong></li><li>信号量集合的创建<br> - 创建 sem_array 结构体, 用于描述信号量<br> - 将这个 sem_array 信号量添加到基树上, 返回对应的 id <ul><li>信号量集合的初始化</li><li>SETALL: 为所有信号量集合赋值 <ul><li>SETVAL: 为指定信号量赋值</li></ul></li><li>操作信号量集合</li><li>调用 <strong>perform_atomic_semop</strong> 尝试从操作队列中读取执行 <ul><li>若执行成功, 则说明无需等待</li><li>调用 do_smart_update, 看看这次操作能够激活等待队列中的哪些进程 <ul><li>调用 <strong>wake_up_q</strong> 唤醒因为信号量阻塞的进程</li></ul></li><li>若需要等待</li><li>根据是操作信号量还是信号集合, 将其挂载到对应的 pending_alter 中 <ul><li>执行 looper 等待, 直到 timeout 或者被 wake_up_q 唤醒</li><li>若未设置 timeout, 则让出 CPU 资源</li></ul></li></ul></li></ul></li></ul><hr>',68),d=n("br",null,null,-1),m={href:"https://user-images.githubusercontent.com/12036324/67062221-431e6f80-f195-11e9-9dd1-4353ebbc730c.png",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),b={href:"https://github.com/helios741/myblog/issues/60",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,[s("消息队列的内核实现好像没讲过？"),n("br"),s(" 作者回复: 是的，因为实际编程的时候，用的少，就没有解析。（有太多用户级别的消息队列，功能更强大。）")],-1),g=n("p",null,[s("一个进程已经等待在心信号量上时，如果另一个进程释放了此信号量，原先等待的进程如何知道该提前退出了？按文中的代码，是要一直等到超时，如果没超时，就会一直等下去。"),n("br"),s(" 网友回复：发信号且唤醒进程")],-1),y=n("p",null,[s("请问一下老师，在应用程序开发中，像信号量 共享内存这些内核资源怎么样防止泄漏呢？比如有进程a和b用共享内存共享数据，共享内存资源由教程a申请和维护，但由于异常情况导致教程异常退出导致共享内存资源没有释放，导致了申请的共享内存没有释放。这种情况一般怎么处理呢？Linux内核是否有相关资源保护吗？谢谢了"),n("br"),s(" 作者回复: 或者客户端，或者服务端，要负责到底，不负责到底的话，linux就被搞挂了呗。所以c语言不像java那样有个垃圾回收器，而是自己要操心整个生命周期，不操心就会出事情")],-1);function w(f,h){const a=e("ExternalLinkIcon");return o(),c("div",null,[k,n("p",null,[s("思考问题总结了个图："),d,n("a",m,[s("https://user-images.githubusercontent.com/12036324/67062221-431e6f80-f195-11e9-9dd1-4353ebbc730c.png"),p(a)]),v,n("a",b,[s("https://github.com/helios741/myblog/issues/60"),p(a)])]),_,g,y])}const L=t(r,[["render",w],["__file","L42-IPC（下）.html.vue"]]);export{L as default};
