import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as o,a as n,b as s,e as c,d as u}from"./app-cdabc73c.js";const l="/assets/7b035797137a9e42cc1f6544d6d4dac8-ce95589f.jpg",i="/assets/c1d593a99ac6b08e50yy0c45a930857a-253c7056.jpg",k="/assets/2ea867d9beff30ca1b60fa9e8003ec23-8b4d08e3.jpg",r="/assets/7b035797137a9e42cc1f6544d6d4dac8-ce95589f.jpg",d="/assets/c9a820a96faa70f18a77155be538506c-c54c5872.jpg",b={},m=n("h1",{id:"_07-手写cpu-二-如何实现指令译码模块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_07-手写cpu-二-如何实现指令译码模块","aria-hidden":"true"},"#"),s(" 07｜手写CPU（二）：如何实现指令译码模块？")],-1),v=n("p",null,"你好，我是 LMOS。",-1),_=n("p",null,"上节课，我们了解了什么是 CPU 的流水线，并决定采用经典的五级流水线来设计我们的 MiniCPU，之后梳理了我们将要设计的 MiniCPU 架构长什么样，最后完成了流水线的第一步——取指。",-1),y=n("em",null,"译码模块",-1),w={href:"https://gitee.com/lmos/Geek-time-computer-foundation",target:"_blank",rel:"noopener noreferrer"},g=u('<h2 id="指令是如何翻译的" tabindex="-1"><a class="header-anchor" href="#指令是如何翻译的" aria-hidden="true">#</a> 指令是如何翻译的？</h2><p>第五节课我们已经讲过了 RISC-V 指令架构，明确了我们的 MiniCPU 选用的是 RV32I 指令集。其中每条指令都是 32 位，且分为 6 种指令格式，不同格式的指令中包含了不一样的指令信息。</p><figure><img src="'+l+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如上图所示的 6 种指令格式，</p><ul><li>其中 R 型指令包含了<br> 操作码 <code>opcode</code>、目标寄存器索引 <code>rd</code>、功能码 funct3 和 funct7 以及源寄存器索引 <code>rs1</code> 和 <code>rs2</code>。</li><li>而 I 型指令则是包含<br> 操作码 <code>opcode</code>、目标寄存器索引 <code>rd</code>、功能码 funct3、源寄存器索引 rs1 以及立即数 <code>imm</code>。</li></ul><p>与此类似，后面的 S 型指令、B 型指令、U 型指令和 J 型指令也有特定的操作码、功能码、源寄存器索引、目标寄存器索引和立即数。</p><p><em>不过指令格式不同，指令译码模块翻译指令的工作机制却是统一的</em>。首先译码电路会翻译出指令中携带的寄存器索引、立即数大小等执行信息。接着，在解决数据可能存在的数据冒险（这个概念后面第九节课会讲）之后，由译码数据通路负责把译码后的指令信息，发送给对应的执行单元去执行。</p><h2 id="译码模块的设计" tabindex="-1"><a class="header-anchor" href="#译码模块的设计" aria-hidden="true">#</a> 译码模块的设计</h2><p>通过上面的分析，你是否对译码模块的设计已经有了头绪？是的，译码模块就是拆解从取指模块传过来的每一条指令。译码时，需要识别出指令的操作码，并根据对应的指令格式提取出指令中包含的信息。</p><p>译码模块具体的 Verilog 设计代码如下：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token keyword">module</span> decode <span class="token punctuation">(</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> instr<span class="token punctuation">,</span>      <span class="token comment">//指令源码</span>
  <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rs1_addr<span class="token punctuation">,</span>    <span class="token comment">//源寄存器rs1索引</span>
  <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rs2_addr<span class="token punctuation">,</span>    <span class="token comment">//源寄存器rs2索引</span>
  <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd_addr<span class="token punctuation">,</span>    <span class="token comment">//目标寄存器rd索引</span>
  <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> funct3<span class="token punctuation">,</span>      <span class="token comment">//功能码funct3</span>
  <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> funct7<span class="token punctuation">,</span>      <span class="token comment">//功能码funct7</span>
  <span class="token keyword">output</span>        branch<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  jump<span class="token punctuation">,</span>
  <span class="token keyword">output</span>        mem_read<span class="token punctuation">,</span>
  <span class="token keyword">output</span>        mem_write<span class="token punctuation">,</span>
  <span class="token keyword">output</span>        reg_write<span class="token punctuation">,</span>
  <span class="token keyword">output</span>        to_reg<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  result_sel<span class="token punctuation">,</span>
  <span class="token keyword">output</span>        alu_src<span class="token punctuation">,</span>
  <span class="token keyword">output</span>        pc_add<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  types<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  alu_ctrlop<span class="token punctuation">,</span>
  <span class="token keyword">output</span>        valid_inst<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> imm
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_INVALID <span class="token operator">=</span> <span class="token number">21&#39;b0</span><span class="token punctuation">;</span>
<span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> dec_array<span class="token punctuation">;</span>
<span class="token comment">//---------- decode rs1、rs2 -----------------</span>
<span class="token keyword">assign</span> rs1_addr <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">assign</span> rs2_addr <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//---------- decode rd -----------------------</span>
<span class="token keyword">assign</span> rd_addr <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment">//---------- decode funct3、funct7 -----------</span>
<span class="token keyword">assign</span> funct7 <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">assign</span> funct3 <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment">// ----------------------------- decode signals ---------------------------------</span>
<span class="token comment">//                        20     19-18  17       16        15        14     13-12      11      10     9--------3  2---1      0</span>
<span class="token comment">//                        branch jump   memRead  memWrite  regWrite  toReg  resultSel  aluSrc  pcAdd     RISBUJZ  aluctrlop  validInst</span>
<span class="token keyword">localparam</span> DEC_LUI     <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b01</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0000100</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_AUIPC   <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0000100</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_JAL     <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b10</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0000010</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_JALR    <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b11</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b10</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0100000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_BRANCH  <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b1</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0001000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b10</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_LOAD    <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0100000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_STORE   <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0010000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_ALUI    <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0100000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b01</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_ALUR    <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b1000000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b01</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">assign</span>  <span class="token operator">{</span>branch<span class="token punctuation">,</span> jump<span class="token punctuation">,</span> mem_read<span class="token punctuation">,</span> mem_write<span class="token punctuation">,</span> reg_write<span class="token punctuation">,</span> to_reg<span class="token punctuation">,</span> result_sel<span class="token punctuation">,</span> alu_src<span class="token punctuation">,</span> pc_add<span class="token punctuation">,</span> types<span class="token punctuation">,</span> alu_ctrlop<span class="token punctuation">,</span> valid_inst<span class="token operator">}</span> <span class="token operator">=</span> dec_array<span class="token punctuation">;</span>
<span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
  <span class="token function">case</span><span class="token punctuation">(</span>instr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token constant">\`OPCODE_LUI</span>    <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_LUI<span class="token punctuation">;</span>   
    <span class="token constant">\`OPCODE_AUIPC</span>  <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_AUIPC<span class="token punctuation">;</span> 
    <span class="token constant">\`OPCODE_JAL</span>    <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_JAL<span class="token punctuation">;</span> 
    <span class="token constant">\`OPCODE_JALR</span>   <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_JALR<span class="token punctuation">;</span>   
    <span class="token constant">\`OPCODE_BRANCH</span> <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_BRANCH<span class="token punctuation">;</span> 
    <span class="token constant">\`OPCODE_LOAD</span>   <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_LOAD<span class="token punctuation">;</span>   
    <span class="token constant">\`OPCODE_STORE</span>  <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_STORE<span class="token punctuation">;</span>  
    <span class="token constant">\`OPCODE_ALUI</span>   <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_ALUI<span class="token punctuation">;</span>  
    <span class="token constant">\`OPCODE_ALUR</span>   <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_ALUR<span class="token punctuation">;</span>  
    <span class="token keyword">default</span>        <span class="token punctuation">:</span>  <span class="token keyword">begin</span>
                 dec_array <span class="token operator">&lt;=</span> DEC_INVALID<span class="token punctuation">;</span>
    <span class="token keyword">end</span>
  <span class="token keyword">endcase</span>
<span class="token keyword">end</span>
<span class="token comment">// -------------------- IMM -------------------------</span>
<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Iimm <span class="token operator">=</span> <span class="token operator">{{</span><span class="token number">21</span><span class="token operator">{</span>instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">}}</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Simm <span class="token operator">=</span> <span class="token operator">{{</span><span class="token number">21</span><span class="token operator">{</span>instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">}}</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Bimm <span class="token operator">=</span> <span class="token operator">{{</span><span class="token number">20</span><span class="token operator">{</span>instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">}}</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Uimm <span class="token operator">=</span> <span class="token operator">{</span>instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">12&#39;b0</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Jimm <span class="token operator">=</span> <span class="token operator">{{</span><span class="token number">12</span><span class="token operator">{</span>instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">}}</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token operator">}</span><span class="token punctuation">;</span>   
<span class="token keyword">assign</span> imm <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">32</span><span class="token operator">{</span>types<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">}}</span> <span class="token operator">&amp;</span> Iimm
           <span class="token operator">|</span> <span class="token operator">{</span><span class="token number">32</span><span class="token operator">{</span>types<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">}}</span> <span class="token operator">&amp;</span> Simm
           <span class="token operator">|</span> <span class="token operator">{</span><span class="token number">32</span><span class="token operator">{</span>types<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">}}</span> <span class="token operator">&amp;</span> Bimm
           <span class="token operator">|</span> <span class="token operator">{</span><span class="token number">32</span><span class="token operator">{</span>types<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">}}</span> <span class="token operator">&amp;</span> Uimm
           <span class="token operator">|</span> <span class="token operator">{</span><span class="token number">32</span><span class="token operator">{</span>types<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">}}</span> <span class="token operator">&amp;</span> Jimm<span class="token punctuation">;</span>
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码看起来很长，其实整个代码可以分为三个部分：第 28 行到 37 行负责完成指令的源寄存器、目标寄存器、3 位操作码和 7 位操作码的译码，第 40 行至 73 行负责完成指令格式类型的识别，第 75 行至 87 行负责完成立即数译码。</p><p>首先，我们来看指令中源寄存器、目标寄存器、3 位操作码和 7 位操作码的译码。仔细观察上面提到的 6 种指令格式，我们可以发现一定的规律：全部的目标寄存器索引 <strong>rd</strong> 都位于指令的第 7～11 位，源寄存器索引 <strong>rs1</strong> 位于指令的第 15～19 位，源寄存器索引 <strong>rs2</strong> 位于指令的第 20～24 位，三位的操作码 <strong>funct3</strong> 位于指令的第 12～14 位，七位的操作码 <strong>funct7</strong> 位于指令的第 25～31 位。</p><p>它们的位置分布如下图所示：</p><figure><img src="`+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上述这些信号在不同指令格式中的位置比较固定。因此我们就可以根据这些位置特点，直接从指令中截取，从而得到它们相应的信息，具体实现的 Verilog 代码如下（对应整体代码的 27～37 行）：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token comment">//---------- decode rs1、rs2 -----------------</span>
<span class="token keyword">assign</span> rs1_addr <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">assign</span> rs2_addr <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//---------- decode rd -----------------------</span>
<span class="token keyword">assign</span> rd_addr <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment">//---------- decode funct3、funct7 -----------</span>
<span class="token keyword">assign</span> funct7 <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">assign</span> funct3 <span class="token operator">=</span> instr<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在所有的指令格式中，还有一段最为特殊的信息码。这段信息码是每条指令都有的，且位置和位宽保持不变。没错，它就是指令的操作码 opcode。</p><p>对照 RISC-V 的官方手册，我为你整理出了 RV32I 指令集的操作码对照表，如下所示：</p><figure><img src="`+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们再来回顾一下 RISC-V 的指令格式，这次我们重点观察指令操作码的位置。</p><figure><img src="'+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>不难发现，所有指令操作码都位于指令的第 0～6 位。根据这 7 位的操作码就可以判断出一条指令是什么类型，它对应的是什么指令格式。进而可以产生指令执行信号，为后续的指令执行单元的操作提供依据。</p><p>以下就是指令操作码的译码和产生相关指令控制信号的 Verilog 代码（对应整体代码的 39～72 行）：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token comment">// ----------------------------- decode signals ---------------------------------</span>
<span class="token comment">//                        20     19-18  17       16        15        14     13-12      11      10     9--------3  2---1      0</span>
<span class="token comment">//                        branch jump   memRead  memWrite  regWrite  toReg  resultSel  aluSrc  pcAdd     RISBUJZ  aluctrlop  validInst</span>
<span class="token keyword">localparam</span> DEC_LUI     <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b01</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0000100</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_AUIPC   <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0000100</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_JAL     <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b10</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0000010</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_JALR    <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b11</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b10</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0100000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_BRANCH  <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b1</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0001000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b10</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_LOAD    <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0100000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_STORE   <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0010000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_ALUI    <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b0100000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b01</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">localparam</span> DEC_ALUR    <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>    <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">2&#39;b00</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>   <span class="token number">1&#39;b0</span><span class="token punctuation">,</span>  <span class="token number">7&#39;b1000000</span><span class="token punctuation">,</span> <span class="token number">2&#39;b01</span><span class="token punctuation">,</span>     <span class="token number">1&#39;b1</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">assign</span>  <span class="token operator">{</span>branch<span class="token punctuation">,</span> jump<span class="token punctuation">,</span> mem_read<span class="token punctuation">,</span> mem_write<span class="token punctuation">,</span> reg_write<span class="token punctuation">,</span> to_reg<span class="token punctuation">,</span> result_sel<span class="token punctuation">,</span> alu_src<span class="token punctuation">,</span> pc_add<span class="token punctuation">,</span> types<span class="token punctuation">,</span> alu_ctrlop<span class="token punctuation">,</span> valid_inst<span class="token operator">}</span> <span class="token operator">=</span> dec_array<span class="token punctuation">;</span>
<span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>
  <span class="token function">case</span><span class="token punctuation">(</span>instr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token constant">\`OPCODE_LUI</span>    <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_LUI<span class="token punctuation">;</span>   
    <span class="token constant">\`OPCODE_AUIPC</span>  <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_AUIPC<span class="token punctuation">;</span> 
    <span class="token constant">\`OPCODE_JAL</span>    <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_JAL<span class="token punctuation">;</span> 
    <span class="token constant">\`OPCODE_JALR</span>   <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_JALR<span class="token punctuation">;</span>   
    <span class="token constant">\`OPCODE_BRANCH</span> <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_BRANCH<span class="token punctuation">;</span> 
    <span class="token constant">\`OPCODE_LOAD</span>   <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_LOAD<span class="token punctuation">;</span>   
    <span class="token constant">\`OPCODE_STORE</span>  <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_STORE<span class="token punctuation">;</span>  
    <span class="token constant">\`OPCODE_ALUI</span>   <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_ALUI<span class="token punctuation">;</span>  
    <span class="token constant">\`OPCODE_ALUR</span>   <span class="token punctuation">:</span>   dec_array <span class="token operator">&lt;=</span> DEC_ALUR<span class="token punctuation">;</span>  
    <span class="token keyword">default</span>        <span class="token punctuation">:</span>  <span class="token keyword">begin</span>
                 dec_array <span class="token operator">&lt;=</span> DEC_INVALID<span class="token punctuation">;</span>
    <span class="token keyword">end</span>
  <span class="token keyword">endcase</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码我们可以看到，译码的过程就是先识别指令的低 7 位操作码 instr[6:0]，根据操作码对应的代码标识，产生分支信号 branch、跳转信号 jump、读存储器信号 mem_read……这些译码之后的指令控制信息。然后，把译码得到的信息交到 CPU 流水线的下一级去执行。</p><p>此外，还有指令中的立即数需要提取。观察上述的 6 种指令格式你会发现，除了 R 型指令不包含立即数，其他 5 种指令类型都包含了立即数。</p><p>前面我已经讲过了怎么去识别指令的类型。那指令里的立即数怎么提取呢？其实这跟提取指令的索引、功能码差不多。</p><p>我们根据不同指令类型中立即数的分布位置，就能直接提取指令的立即数。最后也是根据指令的类型选择性输出 I 型、S 型、B 型、U 型或者 J 型指令的立即数即可，具体的代码如下：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token comment">// -------------------- IMM -------------------------</span>
<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Iimm <span class="token operator">=</span> <span class="token operator">{{</span><span class="token number">21</span><span class="token operator">{</span>instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">}}</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Simm <span class="token operator">=</span> <span class="token operator">{{</span><span class="token number">21</span><span class="token operator">{</span>instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">}}</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Bimm <span class="token operator">=</span> <span class="token operator">{{</span><span class="token number">20</span><span class="token operator">{</span>instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">}}</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Uimm <span class="token operator">=</span> <span class="token operator">{</span>instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">12&#39;b0</span><span class="token operator">}</span><span class="token punctuation">;</span>
<span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Jimm <span class="token operator">=</span> <span class="token operator">{{</span><span class="token number">12</span><span class="token operator">{</span>instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token operator">}}</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> instr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1&#39;b0</span><span class="token operator">}</span><span class="token punctuation">;</span>   
<span class="token keyword">assign</span> imm <span class="token operator">=</span> <span class="token operator">{</span><span class="token number">32</span><span class="token operator">{</span>types<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">}}</span> <span class="token operator">&amp;</span> Iimm
           <span class="token operator">|</span> <span class="token operator">{</span><span class="token number">32</span><span class="token operator">{</span>types<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">}}</span> <span class="token operator">&amp;</span> Simm
           <span class="token operator">|</span> <span class="token operator">{</span><span class="token number">32</span><span class="token operator">{</span>types<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">}}</span> <span class="token operator">&amp;</span> Bimm
           <span class="token operator">|</span> <span class="token operator">{</span><span class="token number">32</span><span class="token operator">{</span>types<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">}}</span> <span class="token operator">&amp;</span> Uimm
           <span class="token operator">|</span> <span class="token operator">{</span><span class="token number">32</span><span class="token operator">{</span>types<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">}}</span> <span class="token operator">&amp;</span> Jimm<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="译码控制模块设计" tabindex="-1"><a class="header-anchor" href="#译码控制模块设计" aria-hidden="true">#</a> 译码控制模块设计</h2><p>前面的译码模块得到的指令信号，可以分为两大类。一类是由指令的操作码经过译码后产生的<strong>指令执行控制信号</strong>，如跳转操作 jump 信号、存储器读取 mem_read 信号等；另一类是从指令源码中提取出来的<strong>数据信息</strong>，如立即数、寄存器索引、功能码等。</p><p>为了能对流水线更好地实施控制，这里我们需要把译码后的数据和控制信号分开处理。首先来看译码控制模块的实现：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token keyword">module</span> <span class="token function">id_ex_ctrl</span><span class="token punctuation">(</span>
  <span class="token keyword">input</span>        clk<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        reset<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_ex_ctrl_itype<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_ex_ctrl_alu_ctrlop<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_ex_ctrl_result_sel<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_ex_ctrl_alu_src<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_ex_ctrl_pc_add<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_ex_ctrl_branch<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_ex_ctrl_jump<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_mem_ctrl_mem_read<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_mem_ctrl_mem_write<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_mem_ctrl_mask_mode<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_mem_ctrl_sext<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_wb_ctrl_to_reg<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_wb_ctrl_reg_write<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_noflush<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        flush<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        valid<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_ex_ctrl_itype<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out_ex_ctrl_alu_ctrlop<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out_ex_ctrl_result_sel<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_ex_ctrl_alu_src<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_ex_ctrl_pc_add<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_ex_ctrl_branch<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out_ex_ctrl_jump<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_mem_ctrl_mem_read<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_mem_ctrl_mem_write<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out_mem_ctrl_mask_mode<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_mem_ctrl_sext<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_wb_ctrl_to_reg<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_wb_ctrl_reg_write<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_noflush
<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">reg</span>  reg_ex_ctrl_itype<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_ex_ctrl_alu_ctrlop<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_ex_ctrl_result_sel<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_ex_ctrl_alu_src<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_ex_ctrl_pc_add<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_ex_ctrl_branch<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_ex_ctrl_jump<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_mem_ctrl_mem_read<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_mem_ctrl_mem_write<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_mem_ctrl_mask_mode<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_mem_ctrl_sext<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_wb_ctrl_to_reg<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_wb_ctrl_reg_write<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_noflush<span class="token punctuation">;</span> 
  ………………    <span class="token comment">//由于这里的代码较长，结构相似，这里省略了一部分</span>
  
  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_noflush <span class="token operator">&lt;=</span> <span class="token number">1&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_noflush <span class="token operator">&lt;=</span> <span class="token number">1&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_noflush <span class="token operator">&lt;=</span> in_noflush<span class="token punctuation">;</span> 
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面就是译码控制模块的 Verilog 设计代码。</p><p>上一节课学习取指模块的时候我们说过，<em>并不是所有从存储器中读取出来的指令，都能够给到执行单元去执行的</em>。比如，当指令发生冲突时，需要对流水线进行冲刷，这时就需要清除流水线中的指令。同样的，<em>译码阶段的指令信号也需要清除</em>。</p><p>译码控制模块就是为了实现这一功能，当指令清除信号 flush 有效时，把译码模块产生的 jump、branch、mem_read、mem_write、reg_write……这些控制信号全部清“0”。否则，就把这些控制信号发送给流水线的下一级进行处理。</p><h2 id="译码数据通路模块设计" tabindex="-1"><a class="header-anchor" href="#译码数据通路模块设计" aria-hidden="true">#</a> 译码数据通路模块设计</h2><p>和译码模块类似，译码数据通路模块会根据 CPU 相关控制模块产生的流水线冲刷控制信号，决定要不要把这些数据发送给后续模块。</p><p>其中，译码得到的数据信息包括立即数 imm、源寄存器索引 rs1 和 rs2、目标寄存器索引 rd 以及功能码 funct3 和 funct7。具体的设计代码如下所示：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token keyword">module</span> <span class="token function">id_ex</span><span class="token punctuation">(</span>
  <span class="token keyword">input</span>         clk<span class="token punctuation">,</span>
  <span class="token keyword">input</span>         reset<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  in_rd_addr<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  in_funct7<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  in_funct3<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_imm<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_rs2_data<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_rs1_data<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_pc<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  in_rs1_addr<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  in_rs2_addr<span class="token punctuation">,</span>
  <span class="token keyword">input</span>         flush<span class="token punctuation">,</span>
  <span class="token keyword">input</span>         valid<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  out_rd_addr<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  out_funct7<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  out_funct3<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out_imm<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out_rs2_data<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out_rs1_data<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out_pc<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  out_rs1_addr<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  out_rs2_addr
<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_rd_addr<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_funct7<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_funct3<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_imm<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_rs2_data<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_rs1_data<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_pc<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_rs1_addr<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_rs2_addr<span class="token punctuation">;</span> 
  …………  <span class="token comment">//由于代码较长，结构相似，这里省略了一部分，完整代码你可以从Gitee上获取</span>
  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_rs2_addr <span class="token operator">&lt;=</span> <span class="token number">5&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_rs2_addr <span class="token operator">&lt;=</span> <span class="token number">5&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_rs2_addr <span class="token operator">&lt;=</span> in_rs2_addr<span class="token punctuation">;</span> 
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们以目标寄存器的索引地址 reg_rd_addr 信号为例，分析一下它是怎么流通的。当流水线冲刷信号 flush 有效时，目标寄存器的索引地址 reg_rd_addr 直接清“0”，否则当信号有效标志 valid 为“1”时，把目标寄存器的索引地址传递给流水线的下一级。</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_rd_addr <span class="token operator">&lt;=</span> <span class="token number">5&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_rd_addr <span class="token operator">&lt;=</span> <span class="token number">5&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_rd_addr <span class="token operator">&lt;=</span> in_rd_addr<span class="token punctuation">;</span> 
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似地，当流水线冲刷信号 flush 有效时，把译码模块得到的源操作数 1、源操作数 2、立即数、目标寄存器地址……等等这些数据全部清“0”。否则，就把这些数据发送给流水线的下一级进行处理。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>指令译码是 CPU 流水线中比较重要的一步，在译码阶段一定不能出错，否则流水线后续的执行就全都乱了。今天我们设计出了指令译码的相关模块，我带你回顾一下这节课的要点。</p><p>首先，我们针对 RV32I 指令集的 6 种指令格式，分析了它们各自包含了哪些指令信号。根据这些信息的位置不同，指令译码模块就可以从不同类型的指令格式中，把每条指令包含的信息提取出来。</p><p>之后，根据上面分析的译码思路，我们就可以设计译码模块了。经过观察，<strong>我们发现指令中的操作码、目标寄存器索引、源寄存器索引和功能码，在不同指令格式中的位置比较固定，所以这些信息可以直接从指令中截取得到。</strong></p><p>由于指令的操作码有特殊的指令标识作用，我们可以根据操作码产生指令控制信息，给到 CPU 流水线的下一级去执行。此外，还可以根据不同指令类型中立即数的分布位置特点，通过截取得到指令的立即数。</p><p>译码得到的指令信号分为两大类：</p><ul><li>一类是由指令的操作码经过译码后产生的<strong>指令执行控制信号</strong>，另一类是从指令源码中提取出来的<strong>数据信息</strong>。</li><li>为了让译码后的信息，能更好地分发给流水线后续模块去执行，这里我们把译码后的数据和控制信号分开处理，分别设计了数据通路模块和译码控制模块。</li></ul><figure><img src="`+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>在 6 种指令格式中，S 型、J 型和 B 型指令里的立即数是不连续的，这是为什么？</p><p>欢迎你在留言区跟我交流互动，也推荐你把这节课分享给更多朋友，组团一起来跟我折腾 CPU!</p><blockquote><p>我觉得之所以将立即数设置为不连续，主要还是为了让rs1 rs2 rd 寄存器的位置保持固定，从而提高指令流水线的效率。至于不连续的立即数，只要在译码的时候拼接就可以了。<br> 作者回复: 正确 正确</p><p>我想请问一下，id_ex_ctrl这个译码控制模块的输入信号从哪里来？输出信号又送去哪里？<br> 作者回复: 控制器</p><p>立即数不连续是为了让不同指令源和目的寄存器位置固定，方便寄存器地址的译码。<br> 作者回复: 对</p><p>B型是有条件跳转指令，J型是无条件跳转指令。俺的理解是既然是跳转指令，允许不连续的<br> S型是和内存交流，俺的理解是可以为指令，也可以部分为数据，没有严格的要求导致可以允许不连续的！<br> 作者回复: 你理解正确</p></blockquote>',56);function f(h,C){const a=t("ExternalLinkIcon");return e(),o("div",null,[m,v,_,n("p",null,[s("取指阶段把存储器里的指令读出以后，就会传递给后续的"),y,s("进行处理。那之后指令是如何译码的呢？这就要说到流水线的第二步——译码（"),n("a",w,[s("代码从这里下载"),c(a)]),s("）。")]),g])}const x=p(b,[["render",f],["__file","F07-手写CPU（二）.html.vue"]]);export{x as default};
