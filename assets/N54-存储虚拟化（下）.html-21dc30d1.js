import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-cdabc73c.js";const p="/assets/2572f8b1e75b9eaab6560866fcb31fd0-c335008e.jpg",e="/assets/49414d5acc81933b66410bbba102b0db-65147b6c.jpg",o="/assets/79ad143a3149ea36bc80219940d7d00c-ddd99c7e.jpg",c={},i=t(`<h1 id="_54-存储虚拟化-下-如何建立自己保管的单独档案库" tabindex="-1"><a class="header-anchor" href="#_54-存储虚拟化-下-如何建立自己保管的单独档案库" aria-hidden="true">#</a> 54 | 存储虚拟化（下）：如何建立自己保管的单独档案库？</h1><p>上一节，我们讲了 qemu 启动过程中的存储虚拟化。好了，现在 qemu 启动了，硬盘设备文件已经打开了。那如果我们要往虚拟机的一个进程写入一个文件，该怎么做呢？最终这个文件又是如何落到宿主机上的硬盘文件的呢？这一节，我们一起来看一看。</p><p><strong>前端设备驱动 virtio_blk</strong></p><p>虚拟机里面的进程写入一个文件，当然要通过文件系统。整个过程和咱们在文件系统那一节讲的过程没有区别。只是到了设备驱动层，我们看到的就不是普通的硬盘驱动了，而是 virtio 的驱动。</p><p>virtio 的驱动程序代码在 Linux 操作系统的源代码里面，文件名叫 drivers/block/virtio_blk.c。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> error<span class="token punctuation">;</span>
  virtblk_wq <span class="token operator">=</span> <span class="token function">alloc_workqueue</span><span class="token punctuation">(</span><span class="token string">&quot;virtio-blk&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  major <span class="token operator">=</span> <span class="token function">register_blkdev</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;virtblk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  error <span class="token operator">=</span> <span class="token function">register_virtio_driver</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>virtio_blk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token function">module_init</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">module_exit</span><span class="token punctuation">(</span>fini<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">MODULE_DEVICE_TABLE</span><span class="token punctuation">(</span>virtio<span class="token punctuation">,</span> id_table<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span><span class="token string">&quot;Virtio block driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">&quot;GPL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">virtio_driver</span> virtio_blk <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span>driver<span class="token punctuation">.</span>name      <span class="token operator">=</span> KBUILD_MODNAME<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>driver<span class="token punctuation">.</span>owner      <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>id_table      <span class="token operator">=</span> id_table<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>probe        <span class="token operator">=</span> virtblk_probe<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>remove        <span class="token operator">=</span> virtblk_remove<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面我们介绍过设备驱动程序，从这里的代码中，我们能看到非常熟悉的结构。它会创建一个 workqueue，注册一个块设备，并获得一个主设备号，然后注册一个驱动函数 virtio_blk。</p><p>当一个设备驱动作为一个内核模块被初始化的时候，probe 函数会被调用，因而我们来看一下 virtblk_probe。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">virtblk_probe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_device</span> <span class="token operator">*</span>vdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtio_blk</span> <span class="token operator">*</span>vblk<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vdev<span class="token operator">-&gt;</span>priv <span class="token operator">=</span> vblk <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>vblk<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>vdev <span class="token operator">=</span> vdev<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>sg_elems <span class="token operator">=</span> sg_elems<span class="token punctuation">;</span>
  <span class="token function">INIT_WORK</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vblk<span class="token operator">-&gt;</span>config_work<span class="token punctuation">,</span> virtblk_config_changed_work<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  err <span class="token operator">=</span> <span class="token function">init_vq</span><span class="token punctuation">(</span>vblk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vblk<span class="token operator">-&gt;</span>disk <span class="token operator">=</span> <span class="token function">alloc_disk</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> PART_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">.</span>ops <span class="token operator">=</span> <span class="token operator">&amp;</span>virtio_mq_ops<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">.</span>queue_depth <span class="token operator">=</span> virtblk_queue_depth<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">.</span>numa_node <span class="token operator">=</span> NUMA_NO_NODE<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">.</span>flags <span class="token operator">=</span> BLK_MQ_F_SHOULD_MERGE<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">.</span>cmd_size <span class="token operator">=</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtblk_req</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">scatterlist</span><span class="token punctuation">)</span> <span class="token operator">*</span> sg_elems<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">.</span>driver_data <span class="token operator">=</span> vblk<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">.</span>nr_hw_queues <span class="token operator">=</span> vblk<span class="token operator">-&gt;</span>num_vqs<span class="token punctuation">;</span>
  err <span class="token operator">=</span> <span class="token function">blk_mq_alloc_tag_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  q <span class="token operator">=</span> <span class="token function">blk_mq_init_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vblk<span class="token operator">-&gt;</span>tag_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>disk<span class="token operator">-&gt;</span>queue <span class="token operator">=</span> q<span class="token punctuation">;</span>
  q<span class="token operator">-&gt;</span>queuedata <span class="token operator">=</span> vblk<span class="token punctuation">;</span>
  <span class="token function">virtblk_name_format</span><span class="token punctuation">(</span><span class="token string">&quot;vd&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> vblk<span class="token operator">-&gt;</span>disk<span class="token operator">-&gt;</span>disk_name<span class="token punctuation">,</span> DISK_NAME_LEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>disk<span class="token operator">-&gt;</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>disk<span class="token operator">-&gt;</span>first_minor <span class="token operator">=</span> <span class="token function">index_to_minor</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>disk<span class="token operator">-&gt;</span>private_data <span class="token operator">=</span> vblk<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>disk<span class="token operator">-&gt;</span>fops <span class="token operator">=</span> <span class="token operator">&amp;</span>virtblk_fops<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>disk<span class="token operator">-&gt;</span>flags <span class="token operator">|=</span> GENHD_FL_EXT_DEVT<span class="token punctuation">;</span>
  vblk<span class="token operator">-&gt;</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">device_add_disk</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>dev<span class="token punctuation">,</span> vblk<span class="token operator">-&gt;</span>disk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  err <span class="token operator">=</span> <span class="token function">device_create_file</span><span class="token punctuation">(</span><span class="token function">disk_to_dev</span><span class="token punctuation">(</span>vblk<span class="token operator">-&gt;</span>disk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dev_attr_serial<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 virtblk_probe 中，我们首先看到的是 struct request_queue，这是每一个块设备都有的一个队列。还记得吗？它有两个函数，一个是 make_request_fn 函数，用于生成 request；另一个是 request_fn 函数，用于处理 request。</p><p>这个 request_queue 的初始化过程在 blk_mq_init_queue 中。它会调用 blk_mq_init_allocated_queue-&gt;blk_queue_make_request。在这里面，我们可以将 make_request_fn 函数设置为 blk_mq_make_request，也就是说，一旦上层有写入请求，我们就通过 blk_mq_make_request 这个函数，将请求放入 request_queue 队列中。</p><p>另外，在 virtblk_probe 中，我们会初始化一个 gendisk。前面我们也讲了，每一个块设备都有这样一个结构。</p><p>在 virtblk_probe 中，还有一件重要的事情就是，init_vq 会来初始化 virtqueue。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">init_vq</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_blk</span> <span class="token operator">*</span>vblk<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
  <span class="token class-name">vq_callback_t</span> <span class="token operator">*</span><span class="token operator">*</span>callbacks<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>names<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span><span class="token operator">*</span>vqs<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> num_vqs<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtio_device</span> <span class="token operator">*</span>vdev <span class="token operator">=</span> vblk<span class="token operator">-&gt;</span>vdev<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vblk<span class="token operator">-&gt;</span>vqs <span class="token operator">=</span> <span class="token function">kmalloc_array</span><span class="token punctuation">(</span>num_vqs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>vblk<span class="token operator">-&gt;</span>vqs<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  names <span class="token operator">=</span> <span class="token function">kmalloc_array</span><span class="token punctuation">(</span>num_vqs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>names<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  callbacks <span class="token operator">=</span> <span class="token function">kmalloc_array</span><span class="token punctuation">(</span>num_vqs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>callbacks<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vqs <span class="token operator">=</span> <span class="token function">kmalloc_array</span><span class="token punctuation">(</span>num_vqs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>vqs<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_vqs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    callbacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> virtblk_done<span class="token punctuation">;</span>
    names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vblk<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* Discover virtqueues and write information to configuration.  */</span>
  err <span class="token operator">=</span> <span class="token function">virtio_find_vqs</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> num_vqs<span class="token punctuation">,</span> vqs<span class="token punctuation">,</span> callbacks<span class="token punctuation">,</span> names<span class="token punctuation">,</span> <span class="token operator">&amp;</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_vqs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vblk<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vq <span class="token operator">=</span> vqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  vblk<span class="token operator">-&gt;</span>num_vqs <span class="token operator">=</span> num_vqs<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照上面的原理来说，virtqueue 是一个介于客户机前端和 qemu 后端的一个结构，用于在这两端之间传递数据。这里建立的 struct virtqueue 是客户机前端对于队列的管理的数据结构，在客户机的 linux 内核中通过 kmalloc_array 进行分配。</p><p>而队列的实体需要通过函数 virtio_find_vqs 查找或者生成，所以这里我们还把 callback 函数指定为 virtblk_done。当 buffer 使用发生变化的时候，我们需要调用这个 callback 函数进行通知。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span>
<span class="token keyword">int</span> <span class="token function">virtio_find_vqs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_device</span> <span class="token operator">*</span>vdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> nvqs<span class="token punctuation">,</span>
      <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vqs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">vq_callback_t</span> <span class="token operator">*</span>callbacks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> names<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token keyword">struct</span> <span class="token class-name">irq_affinity</span> <span class="token operator">*</span>desc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> vdev<span class="token operator">-&gt;</span>config<span class="token operator">-&gt;</span><span class="token function">find_vqs</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> nvqs<span class="token punctuation">,</span> vqs<span class="token punctuation">,</span> callbacks<span class="token punctuation">,</span> names<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">virtio_config_ops</span> virtio_pci_config_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>get    <span class="token operator">=</span> vp_get<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>set    <span class="token operator">=</span> vp_set<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>generation  <span class="token operator">=</span> vp_generation<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>get_status  <span class="token operator">=</span> vp_get_status<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>set_status  <span class="token operator">=</span> vp_set_status<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>reset    <span class="token operator">=</span> vp_reset<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>find_vqs  <span class="token operator">=</span> vp_modern_find_vqs<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>del_vqs  <span class="token operator">=</span> vp_del_vqs<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>get_features  <span class="token operator">=</span> vp_get_features<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>finalize_features <span class="token operator">=</span> vp_finalize_features<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>bus_name  <span class="token operator">=</span> vp_bus_name<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>set_vq_affinity <span class="token operator">=</span> vp_set_vq_affinity<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>get_vq_affinity <span class="token operator">=</span> vp_get_vq_affinity<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 virtio_config_ops 的定义，virtio_find_vqs 会调用 vp_modern_find_vqs。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">vp_modern_find_vqs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_device</span> <span class="token operator">*</span>vdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> nvqs<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vqs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token class-name">vq_callback_t</span> <span class="token operator">*</span>callbacks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> names<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> bool <span class="token operator">*</span>ctx<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">irq_affinity</span> <span class="token operator">*</span>desc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtio_pci_device</span> <span class="token operator">*</span>vp_dev <span class="token operator">=</span> <span class="token function">to_vp_device</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">;</span>
  <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token function">vp_find_vqs</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> nvqs<span class="token punctuation">,</span> vqs<span class="token punctuation">,</span> callbacks<span class="token punctuation">,</span> names<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* Select and activate all queues. Has to be done last: once we do
   * this, there&#39;s no way to go back except reset.
   */</span>
  <span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>vq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>vqs<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">vp_iowrite16</span><span class="token punctuation">(</span>vq<span class="token operator">-&gt;</span>index<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vp_dev<span class="token operator">-&gt;</span>common<span class="token operator">-&gt;</span>queue_select<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vp_iowrite16</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vp_dev<span class="token operator">-&gt;</span>common<span class="token operator">-&gt;</span>queue_enable<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 vp_modern_find_vqs 中，vp_find_vqs 会调用 vp_find_vqs_intx。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">vp_find_vqs_intx</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_device</span> <span class="token operator">*</span>vdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> nvqs<span class="token punctuation">,</span>
    <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vqs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">vq_callback_t</span> <span class="token operator">*</span>callbacks<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> names<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> bool <span class="token operator">*</span>ctx<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtio_pci_device</span> <span class="token operator">*</span>vp_dev <span class="token operator">=</span> <span class="token function">to_vp_device</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> err<span class="token punctuation">;</span>

  vp_dev<span class="token operator">-&gt;</span>vqs <span class="token operator">=</span> <span class="token function">kcalloc</span><span class="token punctuation">(</span>nvqs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>vp_dev<span class="token operator">-&gt;</span>vqs<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  err <span class="token operator">=</span> <span class="token function">request_irq</span><span class="token punctuation">(</span>vp_dev<span class="token operator">-&gt;</span>pci_dev<span class="token operator">-&gt;</span>irq<span class="token punctuation">,</span> vp_interrupt<span class="token punctuation">,</span> IRQF_SHARED<span class="token punctuation">,</span>
      <span class="token function">dev_name</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">,</span> vp_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vp_dev<span class="token operator">-&gt;</span>intx_enabled <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  vp_dev<span class="token operator">-&gt;</span>per_vq_vectors <span class="token operator">=</span> false<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nvqs<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">vp_setup_vq</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> i<span class="token punctuation">,</span> callbacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
             ctx <span class="token operator">?</span> ctx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> false<span class="token punctuation">,</span>
             VIRTIO_MSI_NO_VECTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 vp_find_vqs_intx 中，我们通过 request_irq 注册一个中断处理函数 vp_interrupt，当设备的配置信息发生改变，会产生一个中断，当设备向队列中写入信息时，也会产生一个中断，我们称为 vq 中断，中断处理函数需要调用相应的队列的回调函数。</p><p>然后，我们根据队列的数目，依次调用 vp_setup_vq，完成 virtqueue、vring 的分配和初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span><span class="token function">vp_setup_vq</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_device</span> <span class="token operator">*</span>vdev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> index<span class="token punctuation">,</span>
             <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
             bool ctx<span class="token punctuation">,</span>
             u16 msix_vec<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtio_pci_device</span> <span class="token operator">*</span>vp_dev <span class="token operator">=</span> <span class="token function">to_vp_device</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtio_pci_vq_info</span> <span class="token operator">*</span>info <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token operator">*</span>info<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vq <span class="token operator">=</span> vp_dev<span class="token operator">-&gt;</span><span class="token function">setup_vq</span><span class="token punctuation">(</span>vp_dev<span class="token punctuation">,</span> info<span class="token punctuation">,</span> index<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> name<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span>
            msix_vec<span class="token punctuation">)</span><span class="token punctuation">;</span>
  info<span class="token operator">-&gt;</span>vq <span class="token operator">=</span> vq<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">spin_lock_irqsave</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp_dev<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token operator">-&gt;</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vp_dev<span class="token operator">-&gt;</span>virtqueues<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">spin_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vp_dev<span class="token operator">-&gt;</span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token operator">-&gt;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  vp_dev<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> info<span class="token punctuation">;</span>
  <span class="token keyword">return</span> vq<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span><span class="token function">setup_vq</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_pci_device</span> <span class="token operator">*</span>vp_dev<span class="token punctuation">,</span>
          <span class="token keyword">struct</span> <span class="token class-name">virtio_pci_vq_info</span> <span class="token operator">*</span>info<span class="token punctuation">,</span>
          <span class="token keyword">unsigned</span> index<span class="token punctuation">,</span>
          <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
          bool ctx<span class="token punctuation">,</span>
          u16 msix_vec<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtio_pci_common_cfg</span> __iomem <span class="token operator">*</span>cfg <span class="token operator">=</span> vp_dev<span class="token operator">-&gt;</span>common<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">;</span>
  u16 num<span class="token punctuation">,</span> off<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>

  <span class="token comment">/* Select the queue we&#39;re interested in */</span>
  <span class="token function">vp_iowrite16</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token operator">-&gt;</span>queue_select<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Check if queue is either not available or already active. */</span>
  num <span class="token operator">=</span> <span class="token function">vp_ioread16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cfg<span class="token operator">-&gt;</span>queue_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* get offset of notification word for this vq */</span>
  off <span class="token operator">=</span> <span class="token function">vp_ioread16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cfg<span class="token operator">-&gt;</span>queue_notify_off<span class="token punctuation">)</span><span class="token punctuation">;</span>

  info<span class="token operator">-&gt;</span>msix_vector <span class="token operator">=</span> msix_vec<span class="token punctuation">;</span>

  <span class="token comment">/* create the vring */</span>
  vq <span class="token operator">=</span> <span class="token function">vring_create_virtqueue</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> num<span class="token punctuation">,</span>
            SMP_CACHE_BYTES<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vp_dev<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span>
            true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span>
            vp_notify<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* activate the queue */</span>
  <span class="token function">vp_iowrite16</span><span class="token punctuation">(</span><span class="token function">virtqueue_get_vring_size</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token operator">-&gt;</span>queue_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">vp_iowrite64_twopart</span><span class="token punctuation">(</span><span class="token function">virtqueue_get_desc_addr</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token punctuation">,</span>
           <span class="token operator">&amp;</span>cfg<span class="token operator">-&gt;</span>queue_desc_lo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token operator">-&gt;</span>queue_desc_hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">vp_iowrite64_twopart</span><span class="token punctuation">(</span><span class="token function">virtqueue_get_avail_addr</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token punctuation">,</span>
           <span class="token operator">&amp;</span>cfg<span class="token operator">-&gt;</span>queue_avail_lo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token operator">-&gt;</span>queue_avail_hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">vp_iowrite64_twopart</span><span class="token punctuation">(</span><span class="token function">virtqueue_get_used_addr</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token punctuation">,</span>
           <span class="token operator">&amp;</span>cfg<span class="token operator">-&gt;</span>queue_used_lo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cfg<span class="token operator">-&gt;</span>queue_used_hi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> vq<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span><span class="token function">vring_create_virtqueue</span><span class="token punctuation">(</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> vring_align<span class="token punctuation">,</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtio_device</span> <span class="token operator">*</span>vdev<span class="token punctuation">,</span>
  bool weak_barriers<span class="token punctuation">,</span>
  bool may_reduce_num<span class="token punctuation">,</span>
  bool context<span class="token punctuation">,</span>
  <span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>notify<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>queue <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token class-name">dma_addr_t</span> dma_addr<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> queue_size_in_bytes<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">vring</span> vring<span class="token punctuation">;</span>

  <span class="token comment">/* TODO: allocate each queue chunk individually */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> num <span class="token operator">&amp;&amp;</span> <span class="token function">vring_size</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> vring_align<span class="token punctuation">)</span> <span class="token operator">&gt;</span> PAGE_SIZE<span class="token punctuation">;</span> num <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue <span class="token operator">=</span> <span class="token function">vring_alloc_queue</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> <span class="token function">vring_size</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> vring_align<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>dma_addr<span class="token punctuation">,</span>
            GFP_KERNEL<span class="token operator">|</span>__GFP_NOWARN<span class="token operator">|</span>__GFP_ZERO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* Try to get a single page. You are my only hope! */</span>
    queue <span class="token operator">=</span> <span class="token function">vring_alloc_queue</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> <span class="token function">vring_size</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> vring_align<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>dma_addr<span class="token punctuation">,</span> GFP_KERNEL<span class="token operator">|</span>__GFP_ZERO<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  queue_size_in_bytes <span class="token operator">=</span> <span class="token function">vring_size</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> vring_align<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">vring_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vring<span class="token punctuation">,</span> num<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> vring_align<span class="token punctuation">)</span><span class="token punctuation">;</span>

  vq <span class="token operator">=</span> <span class="token function">__vring_new_virtqueue</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> vring<span class="token punctuation">,</span> vdev<span class="token punctuation">,</span> weak_barriers<span class="token punctuation">,</span> context<span class="token punctuation">,</span> notify<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">to_vvq</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token operator">-&gt;</span>queue_dma_addr <span class="token operator">=</span> dma_addr<span class="token punctuation">;</span>
  <span class="token function">to_vvq</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token operator">-&gt;</span>queue_size_in_bytes <span class="token operator">=</span> queue_size_in_bytes<span class="token punctuation">;</span>
  <span class="token function">to_vvq</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token operator">-&gt;</span>we_own_ring <span class="token operator">=</span> true<span class="token punctuation">;</span>

  <span class="token keyword">return</span> vq<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 vring_create_virtqueue 中，我们会调用 vring_alloc_queue，来创建队列所需要的内存空间，然后调用 vring_init 初始化结构 struct vring，来管理队列的内存空间，调用 __vring_new_virtqueue，来创建 struct vring_virtqueue。</p><p>这个结构的一开始，是 struct virtqueue，它也是 struct virtqueue 的一个扩展，紧接着后面就是 struct vring。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">vring_virtqueue</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> vq<span class="token punctuation">;</span>

  <span class="token comment">/* Actual memory layout for this queue */</span>
  <span class="token keyword">struct</span> <span class="token class-name">vring</span> vring<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此我们发现，虚拟机里面的 virtio 的前端是这样的结构：struct virtio_device 里面有一个 struct vring_virtqueue，在 struct vring_virtqueue 里面有一个 struct vring。</p><p><strong>中间 virtio 队列的管理</strong></p><p>还记不记得我们上面讲 qemu 初始化的时候，virtio 的后端有数据结构 VirtIODevice，VirtQueue 和 vring 一模一样，前端和后端对应起来，都应该指向刚才创建的那一段内存。</p><p>现在的问题是，我们刚才分配的内存在客户机的内核里面，如何告知 qemu 来访问这段内存呢？</p><p>别忘了，qemu 模拟出来的 virtio block device 只是一个 PCI 设备。对于客户机来讲，这是一个外部设备，我们可以通过给外部设备发送指令的方式告知外部设备，这就是代码中 vp_iowrite16 的作用。它会调用专门给外部设备发送指令的函数 iowrite，告诉外部的 PCI 设备。</p><p>告知的有三个地址 virtqueue_get_desc_addr、virtqueue_get_avail_addr，virtqueue_get_used_addr。从客户机角度来看，这里面的地址都是物理地址，也即 GPA（Guest Physical Address）。因为只有物理地址才是客户机和 qemu 程序都认可的地址，本来客户机的物理内存也是 qemu 模拟出来的。</p><p>在 qemu 中，对 PCI 总线添加一个设备的时候，我们会调用 virtio_pci_device_plugged。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">virtio_pci_device_plugged</span><span class="token punctuation">(</span>DeviceState <span class="token operator">*</span>d<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    VirtIOPCIProxy <span class="token operator">*</span>proxy <span class="token operator">=</span> <span class="token function">VIRTIO_PCI</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">memory_region_init_io</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proxy<span class="token operator">-&gt;</span>bar<span class="token punctuation">,</span> <span class="token function">OBJECT</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">,</span>
                              <span class="token operator">&amp;</span>virtio_pci_config_ops<span class="token punctuation">,</span>
                              proxy<span class="token punctuation">,</span> <span class="token string">&quot;virtio-pci&quot;</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> MemoryRegionOps virtio_pci_config_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>read <span class="token operator">=</span> virtio_pci_config_read<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write <span class="token operator">=</span> virtio_pci_config_write<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>impl <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>min_access_size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>max_access_size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>endianness <span class="token operator">=</span> DEVICE_LITTLE_ENDIAN<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里面，对于这个加载的设备进行 I/O 操作，会映射到读写某一块内存空间，对应的操作为 virtio_pci_config_ops，也即写入这块内存空间，这就相当于对于这个 PCI 设备进行某种配置。</p><p>对 PCI 设备进行配置的时候，会有这样的调用链：virtio_pci_config_write-&gt;virtio_ioport_write-&gt;virtio_queue_set_addr。设置 virtio 的 queue 的地址是一项很重要的操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">virtio_queue_set_addr</span><span class="token punctuation">(</span>VirtIODevice <span class="token operator">*</span>vdev<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> hwaddr addr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>vring<span class="token punctuation">.</span>desc <span class="token operator">=</span> addr<span class="token punctuation">;</span>
    <span class="token function">virtio_queue_update_rings</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这里我们可以看出，qemu 后端的 VirtIODevice 的 VirtQueue 的 vring 的地址，被设置成了刚才给队列分配的内存的 GPA。</p><figure><img src="`+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接着，我们来看一下这个队列的格式。</p><figure><img src="'+e+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* Virtio ring descriptors: 16 bytes.  These can chain together via &quot;next&quot;. */</span>
<span class="token keyword">struct</span> <span class="token class-name">vring_desc</span> <span class="token punctuation">{</span>
  <span class="token comment">/* Address (guest-physical). */</span>
  __virtio64 addr<span class="token punctuation">;</span>
  <span class="token comment">/* Length. */</span>
  __virtio32 len<span class="token punctuation">;</span>
  <span class="token comment">/* The flags as indicated above. */</span>
  __virtio16 flags<span class="token punctuation">;</span>
  <span class="token comment">/* We chain unused descriptors via this, too */</span>
  __virtio16 next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">vring_avail</span> <span class="token punctuation">{</span>
  __virtio16 flags<span class="token punctuation">;</span>
  __virtio16 idx<span class="token punctuation">;</span>
  __virtio16 ring<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/* u32 is used here for ids for padding reasons. */</span>
<span class="token keyword">struct</span> <span class="token class-name">vring_used_elem</span> <span class="token punctuation">{</span>
  <span class="token comment">/* Index of start of used descriptor chain. */</span>
  __virtio32 id<span class="token punctuation">;</span>
  <span class="token comment">/* Total length of the descriptor chain which was used (written to) */</span>
  __virtio32 len<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">vring_used</span> <span class="token punctuation">{</span>
  __virtio16 flags<span class="token punctuation">;</span>
  __virtio16 idx<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">vring_used_elem</span> ring<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">vring</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">vring_desc</span> <span class="token operator">*</span>desc<span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">vring_avail</span> <span class="token operator">*</span>avail<span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">vring_used</span> <span class="token operator">*</span>used<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vring 包含三个成员：</p><ul><li>vring_desc 指向分配的内存块，用于存放客户机和 qemu 之间传输的数据。</li><li>avail-&gt;ring[]是发送端维护的环形队列，指向需要接收端处理的 vring_desc。</li><li>used-&gt;ring[]是接收端维护的环形队列，指向自己已经处理过了的 vring_desc。</li></ul><p><strong>数据写入的流程</strong></p><p>接下来，我们来看，真的写入一个数据的时候，会发生什么。</p><p>按照上面 virtio 驱动初始化的时候的逻辑，blk_mq_make_request 会被调用。这个函数比较复杂，会分成多个分支，但是最终都会调用到 request_queue 的 virtio_mq_ops 的 queue_rq 函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>q <span class="token operator">=</span> rq<span class="token operator">-&gt;</span>q<span class="token punctuation">;</span>
q<span class="token operator">-&gt;</span>mq_ops<span class="token operator">-&gt;</span><span class="token function">queue_rq</span><span class="token punctuation">(</span>hctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bd<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">blk_mq_ops</span> virtio_mq_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>queue_rq  <span class="token operator">=</span> virtio_queue_rq<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>complete  <span class="token operator">=</span> virtblk_request_done<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>init_request  <span class="token operator">=</span> virtblk_init_request<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>map_queues  <span class="token operator">=</span> virtblk_map_queues<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 virtio_mq_ops 的定义，我们现在要调用 virtio_queue_rq。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">blk_status_t</span> <span class="token function">virtio_queue_rq</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">blk_mq_hw_ctx</span> <span class="token operator">*</span>hctx<span class="token punctuation">,</span>
         <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">blk_mq_queue_data</span> <span class="token operator">*</span>bd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtio_blk</span> <span class="token operator">*</span>vblk <span class="token operator">=</span> hctx<span class="token operator">-&gt;</span>queue<span class="token operator">-&gt;</span>queuedata<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span>req <span class="token operator">=</span> bd<span class="token operator">-&gt;</span>rq<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtblk_req</span> <span class="token operator">*</span>vbr <span class="token operator">=</span> <span class="token function">blk_mq_rq_to_pdu</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  err <span class="token operator">=</span> <span class="token function">virtblk_add_req</span><span class="token punctuation">(</span>vblk<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span>qid<span class="token punctuation">]</span><span class="token punctuation">.</span>vq<span class="token punctuation">,</span> vbr<span class="token punctuation">,</span> vbr<span class="token operator">-&gt;</span>sg<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>notify<span class="token punctuation">)</span>
    <span class="token function">virtqueue_notify</span><span class="token punctuation">(</span>vblk<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span>qid<span class="token punctuation">]</span><span class="token punctuation">.</span>vq<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> BLK_STS_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 virtio_queue_rq 中，我们会将请求写入的数据，通过 virtblk_add_req 放入 struct virtqueue。</p><p>因此，接下来的调用链为：virtblk_add_req-&gt;virtqueue_add_sgs-&gt;virtqueue_add。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">virtqueue_add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>_vq<span class="token punctuation">,</span>
        <span class="token keyword">struct</span> <span class="token class-name">scatterlist</span> <span class="token operator">*</span>sgs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> total_sg<span class="token punctuation">,</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> out_sgs<span class="token punctuation">,</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> in_sgs<span class="token punctuation">,</span>
        <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span>
        <span class="token keyword">void</span> <span class="token operator">*</span>ctx<span class="token punctuation">,</span>
        <span class="token class-name">gfp_t</span> gfp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vring_virtqueue</span> <span class="token operator">*</span>vq <span class="token operator">=</span> <span class="token function">to_vvq</span><span class="token punctuation">(</span>_vq<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">scatterlist</span> <span class="token operator">*</span>sg<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">vring_desc</span> <span class="token operator">*</span>desc<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> n<span class="token punctuation">,</span> avail<span class="token punctuation">,</span> descs_used<span class="token punctuation">,</span> <span class="token function">uninitialized_var</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">,</span> err_idx<span class="token punctuation">;</span>
  <span class="token keyword">int</span> head<span class="token punctuation">;</span>
  bool indirect<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  head <span class="token operator">=</span> vq<span class="token operator">-&gt;</span>free_head<span class="token punctuation">;</span>

  indirect <span class="token operator">=</span> false<span class="token punctuation">;</span>
  desc <span class="token operator">=</span> vq<span class="token operator">-&gt;</span>vring<span class="token punctuation">.</span>desc<span class="token punctuation">;</span>
  i <span class="token operator">=</span> head<span class="token punctuation">;</span>
  descs_used <span class="token operator">=</span> total_sg<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> out_sgs<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>sg <span class="token operator">=</span> sgs<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> sg<span class="token punctuation">;</span> sg <span class="token operator">=</span> <span class="token function">sg_next</span><span class="token punctuation">(</span>sg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">dma_addr_t</span> addr <span class="token operator">=</span> <span class="token function">vring_map_one_sg</span><span class="token punctuation">(</span>vq<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> DMA_TO_DEVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      desc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>flags <span class="token operator">=</span> <span class="token function">cpu_to_virtio16</span><span class="token punctuation">(</span>_vq<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span> VRING_DESC_F_NEXT<span class="token punctuation">)</span><span class="token punctuation">;</span>
      desc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>addr <span class="token operator">=</span> <span class="token function">cpu_to_virtio64</span><span class="token punctuation">(</span>_vq<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
      desc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token function">cpu_to_virtio32</span><span class="token punctuation">(</span>_vq<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span> sg<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
      prev <span class="token operator">=</span> i<span class="token punctuation">;</span>
      i <span class="token operator">=</span> <span class="token function">virtio16_to_cpu</span><span class="token punctuation">(</span>_vq<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span> desc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/* Last one doesn&#39;t continue. */</span>
  desc<span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token punctuation">.</span>flags <span class="token operator">&amp;=</span> <span class="token function">cpu_to_virtio16</span><span class="token punctuation">(</span>_vq<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span> <span class="token operator">~</span>VRING_DESC_F_NEXT<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* We&#39;re using some buffers from the free list. */</span>
  vq<span class="token operator">-&gt;</span>vq<span class="token punctuation">.</span>num_free <span class="token operator">-=</span> descs_used<span class="token punctuation">;</span>

  <span class="token comment">/* Update free pointer */</span>
  vq<span class="token operator">-&gt;</span>free_head <span class="token operator">=</span> i<span class="token punctuation">;</span>

  <span class="token comment">/* Store token and indirect buffer state. */</span>
  vq<span class="token operator">-&gt;</span>desc_state<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>

  <span class="token comment">/* Put entry in available array (but don&#39;t update avail-&gt;idx until they do sync). */</span>
  avail <span class="token operator">=</span> vq<span class="token operator">-&gt;</span>avail_idx_shadow <span class="token operator">&amp;</span> <span class="token punctuation">(</span>vq<span class="token operator">-&gt;</span>vring<span class="token punctuation">.</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  vq<span class="token operator">-&gt;</span>vring<span class="token punctuation">.</span>avail<span class="token operator">-&gt;</span>ring<span class="token punctuation">[</span>avail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cpu_to_virtio16</span><span class="token punctuation">(</span>_vq<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Descriptors and available array need to be set before we expose the new available array entries. */</span>
  <span class="token function">virtio_wmb</span><span class="token punctuation">(</span>vq<span class="token operator">-&gt;</span>weak_barriers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vq<span class="token operator">-&gt;</span>avail_idx_shadow<span class="token operator">++</span><span class="token punctuation">;</span>
  vq<span class="token operator">-&gt;</span>vring<span class="token punctuation">.</span>avail<span class="token operator">-&gt;</span>idx <span class="token operator">=</span> <span class="token function">cpu_to_virtio16</span><span class="token punctuation">(</span>_vq<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span> vq<span class="token operator">-&gt;</span>avail_idx_shadow<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vq<span class="token operator">-&gt;</span>num_added<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 virtqueue_add 函数中，我们能看到，free_head 指向的整个内存块空闲链表的起始位置，用 head 变量记住这个起始位置。</p><p>接下来，i 也指向这个起始位置，然后是一个 for 循环，将数据放到内存块里面，放的过程中，next 不断指向下一个空闲位置，这样空闲的内存块被不断的占用。等所有的写入都结束了，i 就会指向这次存放的内存块的下一个空闲位置，然后 free_head 就指向 i，因为前面的都填满了。</p><p>至此，从 head 到 i 之间的内存块，就是这次写入的全部数据。</p><p>于是，在 vring 的 avail 变量中，在 ring[]数组中分配新的一项，在 avail 的位置，avail 的计算是 avail_idx_shadow &amp; (vq-&gt;vring.num - 1)，其中，avail_idx_shadow 是上一次的 avail 的位置。这里如果超过了 ring[]数组的下标，则重新跳到起始位置，就说明是一个环。这次分配的新的 avail 的位置就存放新写入的从 head 到 i 之间的内存块。然后是 avail_idx_shadow++，这说明这一块内存可以被接收方读取了。</p><p>接下来，我们回到 virtio_queue_rq，调用 virtqueue_notify 通知接收方。而 virtqueue_notify 会调用 vp_notify。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bool <span class="token function">vp_notify</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* we write the queue&#39;s selector into the notification register to
   * signal the other end */</span>
  <span class="token function">iowrite16</span><span class="token punctuation">(</span>vq<span class="token operator">-&gt;</span>index<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> __iomem <span class="token operator">*</span><span class="token punctuation">)</span>vq<span class="token operator">-&gt;</span>priv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们写入一个 I/O 会触发 VM exit。我们在解析 CPU 的时候看到过这个逻辑。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">kvm_cpu_exec</span><span class="token punctuation">(</span>CPUState <span class="token operator">*</span>cpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_run</span> <span class="token operator">*</span>run <span class="token operator">=</span> cpu<span class="token operator">-&gt;</span>kvm_run<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">,</span> run_ret<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    run_ret <span class="token operator">=</span> <span class="token function">kvm_vcpu_ioctl</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> KVM_RUN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>run<span class="token operator">-&gt;</span>exit_reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> KVM_EXIT_IO<span class="token operator">:</span>
            <span class="token function">DPRINTF</span><span class="token punctuation">(</span><span class="token string">&quot;handle_io\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">/* Called outside BQL */</span>
            <span class="token function">kvm_handle_io</span><span class="token punctuation">(</span>run<span class="token operator">-&gt;</span>io<span class="token punctuation">.</span>port<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span>
                          <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>run <span class="token operator">+</span> run<span class="token operator">-&gt;</span>io<span class="token punctuation">.</span>data_offset<span class="token punctuation">,</span>
                          run<span class="token operator">-&gt;</span>io<span class="token punctuation">.</span>direction<span class="token punctuation">,</span>
                          run<span class="token operator">-&gt;</span>io<span class="token punctuation">.</span>size<span class="token punctuation">,</span>
                          run<span class="token operator">-&gt;</span>io<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次写入的也是一个 I/O 的内存空间，同样会触发 virtio_ioport_write，这次会调用 virtio_queue_notify。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">virtio_queue_notify</span><span class="token punctuation">(</span>VirtIODevice <span class="token operator">*</span>vdev<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    VirtQueue <span class="token operator">*</span>vq <span class="token operator">=</span> <span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vq<span class="token operator">-&gt;</span>handle_aio_output<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">event_notifier_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vq<span class="token operator">-&gt;</span>host_notifier<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vq<span class="token operator">-&gt;</span>handle_output<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vq<span class="token operator">-&gt;</span><span class="token function">handle_output</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> vq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>virtio_queue_notify 会调用 VirtQueue 的 handle_output 函数，前面我们已经设置过这个函数了，是 virtio_blk_handle_output。</p><p>接下来的调用链为：virtio_blk_handle_output-&gt;virtio_blk_handle_output_do-&gt;virtio_blk_handle_vq。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bool <span class="token function">virtio_blk_handle_vq</span><span class="token punctuation">(</span>VirtIOBlock <span class="token operator">*</span>s<span class="token punctuation">,</span> VirtQueue <span class="token operator">*</span>vq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    VirtIOBlockReq <span class="token operator">*</span>req<span class="token punctuation">;</span>
    MultiReqBuffer mrb <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    bool progress <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token function">virtio_queue_set_notification</span><span class="token punctuation">(</span>vq<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>req <span class="token operator">=</span> <span class="token function">virtio_blk_get_request</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> vq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            progress <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">virtio_blk_handle_request</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mrb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">virtqueue_detach_element</span><span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>vq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token operator">-&gt;</span>elem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">virtio_blk_free_request</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token function">virtio_queue_set_notification</span><span class="token punctuation">(</span>vq<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">virtio_queue_empty</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>mrb<span class="token punctuation">.</span>num_reqs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">virtio_blk_submit_multireq</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>blk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mrb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> progress<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 virtio_blk_handle_vq 中，有一个 while 循环，在循环中调用函数 virtio_blk_get_request 从 vq 中取出请求，然后调用 virtio_blk_handle_request 处理从 vq 中取出的请求。</p><p>我们先来看 virtio_blk_get_request。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> VirtIOBlockReq <span class="token operator">*</span><span class="token function">virtio_blk_get_request</span><span class="token punctuation">(</span>VirtIOBlock <span class="token operator">*</span>s<span class="token punctuation">,</span> VirtQueue <span class="token operator">*</span>vq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    VirtIOBlockReq <span class="token operator">*</span>req <span class="token operator">=</span> <span class="token function">virtqueue_pop</span><span class="token punctuation">(</span>vq<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VirtIOBlockReq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">virtio_blk_init_request</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> vq<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> req<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">virtqueue_pop</span><span class="token punctuation">(</span>VirtQueue <span class="token operator">*</span>vq<span class="token punctuation">,</span> <span class="token class-name">size_t</span> sz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> head<span class="token punctuation">,</span> max<span class="token punctuation">;</span>
    VRingMemoryRegionCaches <span class="token operator">*</span>caches<span class="token punctuation">;</span>
    MemoryRegionCache <span class="token operator">*</span>desc_cache<span class="token punctuation">;</span>
    <span class="token class-name">int64_t</span> len<span class="token punctuation">;</span>
    VirtIODevice <span class="token operator">*</span>vdev <span class="token operator">=</span> vq<span class="token operator">-&gt;</span>vdev<span class="token punctuation">;</span>
    VirtQueueElement <span class="token operator">*</span>elem <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> out_num<span class="token punctuation">,</span> in_num<span class="token punctuation">,</span> elem_entries<span class="token punctuation">;</span>
    hwaddr addr<span class="token punctuation">[</span>VIRTQUEUE_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">iovec</span> iov<span class="token punctuation">[</span>VIRTQUEUE_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    VRingDesc desc<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rc<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* When we start there are none of either input nor output. */</span>
    out_num <span class="token operator">=</span> in_num <span class="token operator">=</span> elem_entries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    max <span class="token operator">=</span> vq<span class="token operator">-&gt;</span>vring<span class="token punctuation">.</span>num<span class="token punctuation">;</span>

    i <span class="token operator">=</span> head<span class="token punctuation">;</span>

    caches <span class="token operator">=</span> <span class="token function">vring_get_region_caches</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    desc_cache <span class="token operator">=</span> <span class="token operator">&amp;</span>caches<span class="token operator">-&gt;</span>desc<span class="token punctuation">;</span>
    <span class="token function">vring_desc_read</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>desc<span class="token punctuation">,</span> desc_cache<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Collect all the descriptors */</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        bool map_ok<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> VRING_DESC_F_WRITE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map_ok <span class="token operator">=</span> <span class="token function">virtqueue_map_desc</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>in_num<span class="token punctuation">,</span> addr <span class="token operator">+</span> out_num<span class="token punctuation">,</span>
                                        iov <span class="token operator">+</span> out_num<span class="token punctuation">,</span>
                                        VIRTQUEUE_MAX_SIZE <span class="token operator">-</span> out_num<span class="token punctuation">,</span> true<span class="token punctuation">,</span>
                                        desc<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> desc<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            map_ok <span class="token operator">=</span> <span class="token function">virtqueue_map_desc</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>out_num<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> iov<span class="token punctuation">,</span>
                                        VIRTQUEUE_MAX_SIZE<span class="token punctuation">,</span> false<span class="token punctuation">,</span>
                                        desc<span class="token punctuation">.</span>addr<span class="token punctuation">,</span> desc<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        rc <span class="token operator">=</span> <span class="token function">virtqueue_read_next_desc</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>desc<span class="token punctuation">,</span> desc_cache<span class="token punctuation">,</span> max<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>rc <span class="token operator">==</span> VIRTQUEUE_READ_DESC_MORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Now copy what we have collected and mapped */</span>
    elem <span class="token operator">=</span> <span class="token function">virtqueue_alloc_element</span><span class="token punctuation">(</span>sz<span class="token punctuation">,</span> out_num<span class="token punctuation">,</span> in_num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    elem<span class="token operator">-&gt;</span>index <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> out_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elem<span class="token operator">-&gt;</span>out_addr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> addr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        elem<span class="token operator">-&gt;</span>out_sg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> iov<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> in_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        elem<span class="token operator">-&gt;</span>in_addr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> addr<span class="token punctuation">[</span>out_num <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        elem<span class="token operator">-&gt;</span>in_sg<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> iov<span class="token punctuation">[</span>out_num <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    vq<span class="token operator">-&gt;</span>inuse<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> elem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，virtio_blk_get_request 会调用 virtqueue_pop。在这里面，我们能看到对于 vring 的操作，也即从这里面将客户机里面写入的数据读取出来，放到 VirtIOBlockReq 结构中。</p><p>接下来，我们就要调用 virtio_blk_handle_request 处理这些数据。所以接下来的调用链为：virtio_blk_handle_request-&gt;virtio_blk_submit_multireq-&gt;submit_requests。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">submit_requests</span><span class="token punctuation">(</span>BlockBackend <span class="token operator">*</span>blk<span class="token punctuation">,</span> MultiReqBuffer <span class="token operator">*</span>mrb<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> num_reqs<span class="token punctuation">,</span> <span class="token keyword">int</span> niov<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QEMUIOVector <span class="token operator">*</span>qiov <span class="token operator">=</span> <span class="token operator">&amp;</span>mrb<span class="token operator">-&gt;</span>reqs<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">-&gt;</span>qiov<span class="token punctuation">;</span>
    <span class="token class-name">int64_t</span> sector_num <span class="token operator">=</span> mrb<span class="token operator">-&gt;</span>reqs<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">-&gt;</span>sector_num<span class="token punctuation">;</span>
    bool is_write <span class="token operator">=</span> mrb<span class="token operator">-&gt;</span>is_write<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>num_reqs <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span>tmp_iov <span class="token operator">=</span> qiov<span class="token operator">-&gt;</span>iov<span class="token punctuation">;</span>
        <span class="token keyword">int</span> tmp_niov <span class="token operator">=</span> qiov<span class="token operator">-&gt;</span>niov<span class="token punctuation">;</span>
        <span class="token function">qemu_iovec_init</span><span class="token punctuation">(</span>qiov<span class="token punctuation">,</span> niov<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tmp_niov<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">qemu_iovec_add</span><span class="token punctuation">(</span>qiov<span class="token punctuation">,</span> tmp_iov<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base<span class="token punctuation">,</span> tmp_iov<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> start <span class="token operator">+</span> num_reqs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">qemu_iovec_concat</span><span class="token punctuation">(</span>qiov<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mrb<span class="token operator">-&gt;</span>reqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>qiov<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                              mrb<span class="token operator">-&gt;</span>reqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-&gt;</span>qiov<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mrb<span class="token operator">-&gt;</span>reqs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span>mr_next <span class="token operator">=</span> mrb<span class="token operator">-&gt;</span>reqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token function">block_acct_merge_done</span><span class="token punctuation">(</span><span class="token function">blk_get_stats</span><span class="token punctuation">(</span>blk<span class="token punctuation">)</span><span class="token punctuation">,</span>
                              is_write <span class="token operator">?</span> BLOCK_ACCT_WRITE <span class="token operator">:</span> BLOCK_ACCT_READ<span class="token punctuation">,</span>
                              num_reqs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_write<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">blk_aio_pwritev</span><span class="token punctuation">(</span>blk<span class="token punctuation">,</span> sector_num <span class="token operator">&lt;&lt;</span> BDRV_SECTOR_BITS<span class="token punctuation">,</span> qiov<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                        virtio_blk_rw_complete<span class="token punctuation">,</span> mrb<span class="token operator">-&gt;</span>reqs<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">blk_aio_preadv</span><span class="token punctuation">(</span>blk<span class="token punctuation">,</span> sector_num <span class="token operator">&lt;&lt;</span> BDRV_SECTOR_BITS<span class="token punctuation">,</span> qiov<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                       virtio_blk_rw_complete<span class="token punctuation">,</span> mrb<span class="token operator">-&gt;</span>reqs<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 submit_requests 中，我们看到了 BlockBackend。这是在 qemu 启动的时候，打开 qcow2 文件的时候生成的，现在我们可以用它来写入文件了，调用的是 blk_aio_pwritev。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>BlockAIOCB <span class="token operator">*</span><span class="token function">blk_aio_pwritev</span><span class="token punctuation">(</span>BlockBackend <span class="token operator">*</span>blk<span class="token punctuation">,</span> <span class="token class-name">int64_t</span> offset<span class="token punctuation">,</span>
                            QEMUIOVector <span class="token operator">*</span>qiov<span class="token punctuation">,</span> BdrvRequestFlags flags<span class="token punctuation">,</span>
                            BlockCompletionFunc <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>opaque<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">blk_aio_prwv</span><span class="token punctuation">(</span>blk<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> qiov<span class="token operator">-&gt;</span>size<span class="token punctuation">,</span> qiov<span class="token punctuation">,</span>
                        blk_aio_write_entry<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> BlockAIOCB <span class="token operator">*</span><span class="token function">blk_aio_prwv</span><span class="token punctuation">(</span>BlockBackend <span class="token operator">*</span>blk<span class="token punctuation">,</span> <span class="token class-name">int64_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> bytes<span class="token punctuation">,</span>
                                <span class="token keyword">void</span> <span class="token operator">*</span>iobuf<span class="token punctuation">,</span> CoroutineEntry co_entry<span class="token punctuation">,</span>
                                BdrvRequestFlags flags<span class="token punctuation">,</span>
                                BlockCompletionFunc <span class="token operator">*</span>cb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>opaque<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BlkAioEmAIOCB <span class="token operator">*</span>acb<span class="token punctuation">;</span>
    Coroutine <span class="token operator">*</span>co<span class="token punctuation">;</span>
    acb <span class="token operator">=</span> <span class="token function">blk_aio_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>blk_aio_em_aiocb_info<span class="token punctuation">,</span> blk<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
    acb<span class="token operator">-&gt;</span>rwco <span class="token operator">=</span> <span class="token punctuation">(</span>BlkRwCo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>blk    <span class="token operator">=</span> blk<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>offset <span class="token operator">=</span> offset<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>iobuf  <span class="token operator">=</span> iobuf<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>flags  <span class="token operator">=</span> flags<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ret    <span class="token operator">=</span> NOT_DONE<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    acb<span class="token operator">-&gt;</span>bytes <span class="token operator">=</span> bytes<span class="token punctuation">;</span>
    acb<span class="token operator">-&gt;</span>has_returned <span class="token operator">=</span> false<span class="token punctuation">;</span>

    co <span class="token operator">=</span> <span class="token function">qemu_coroutine_create</span><span class="token punctuation">(</span>co_entry<span class="token punctuation">,</span> acb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bdrv_coroutine_enter</span><span class="token punctuation">(</span><span class="token function">blk_bs</span><span class="token punctuation">(</span>blk<span class="token punctuation">)</span><span class="token punctuation">,</span> co<span class="token punctuation">)</span><span class="token punctuation">;</span>

    acb<span class="token operator">-&gt;</span>has_returned <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>acb<span class="token operator">-&gt;</span>common<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 blk_aio_pwritev 中，我们看到，又是创建了一个协程来进行写入。写入完毕之后调用 virtio_blk_rw_complete-&gt;virtio_blk_req_complete。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">virtio_blk_req_complete</span><span class="token punctuation">(</span>VirtIOBlockReq <span class="token operator">*</span>req<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> status<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    VirtIOBlock <span class="token operator">*</span>s <span class="token operator">=</span> req<span class="token operator">-&gt;</span>dev<span class="token punctuation">;</span>
    VirtIODevice <span class="token operator">*</span>vdev <span class="token operator">=</span> <span class="token function">VIRTIO_DEVICE</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">trace_virtio_blk_req_complete</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> req<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">stb_p</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token operator">-&gt;</span>in<span class="token operator">-&gt;</span>status<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">virtqueue_push</span><span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>vq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token operator">-&gt;</span>elem<span class="token punctuation">,</span> req<span class="token operator">-&gt;</span>in_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">virtio_notify</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> req<span class="token operator">-&gt;</span>vq<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 virtio_blk_req_complete 中，我们先是调用 virtqueue_push，更新 vring 中 used 变量，表示这部分已经写入完毕，空间可以回收利用了。但是，这部分的改变仅仅改变了 qemu 后端的 vring，我们还需要通知客户机中 virtio 前端的 vring 的值，因而要调用 virtio_notify。virtio_notify 会调用 virtio_irq 发送一个中断。</p><p>还记得咱们前面注册过一个中断处理函数 vp_interrupt 吗？它就是干这个事情的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">irqreturn_t</span> <span class="token function">vp_interrupt</span><span class="token punctuation">(</span><span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>opaque<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtio_pci_device</span> <span class="token operator">*</span>vp_dev <span class="token operator">=</span> opaque<span class="token punctuation">;</span>
  u8 isr<span class="token punctuation">;</span>

  <span class="token comment">/* reading the ISR has the effect of also clearing it so it&#39;s very
   * important to save off the value. */</span>
  isr <span class="token operator">=</span> <span class="token function">ioread8</span><span class="token punctuation">(</span>vp_dev<span class="token operator">-&gt;</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Configuration change?  Tell driver if it wants to know. */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isr <span class="token operator">&amp;</span> VIRTIO_PCI_ISR_CONFIG<span class="token punctuation">)</span>
    <span class="token function">vp_config_changed</span><span class="token punctuation">(</span>irq<span class="token punctuation">,</span> opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">vp_vring_interrupt</span><span class="token punctuation">(</span>irq<span class="token punctuation">,</span> opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像前面说的一样 vp_interrupt 这个中断处理函数，一是处理配置变化，二是处理 I/O 结束。第二种的调用链为：vp_interrupt-&gt;vp_vring_interrupt-&gt;vring_interrupt。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">irqreturn_t</span> <span class="token function">vring_interrupt</span><span class="token punctuation">(</span><span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>_vq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vring_virtqueue</span> <span class="token operator">*</span>vq <span class="token operator">=</span> <span class="token function">to_vvq</span><span class="token punctuation">(</span>_vq<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vq<span class="token operator">-&gt;</span>vq<span class="token punctuation">.</span>callback<span class="token punctuation">)</span>
    vq<span class="token operator">-&gt;</span>vq<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vq<span class="token operator">-&gt;</span>vq<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> IRQ_HANDLED<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 vring_interrupt 中，我们会调用 callback 函数，这个也是在前面注册过的，是 virtblk_done。</p><p>接下来的调用链为：virtblk_done-&gt;virtqueue_get_buf-&gt;virtqueue_get_buf_ctx。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">virtqueue_get_buf_ctx</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>_vq<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>len<span class="token punctuation">,</span>
          <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>ctx<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vring_virtqueue</span> <span class="token operator">*</span>vq <span class="token operator">=</span> <span class="token function">to_vvq</span><span class="token punctuation">(</span>_vq<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>ret<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>
  u16 last_used<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  last_used <span class="token operator">=</span> <span class="token punctuation">(</span>vq<span class="token operator">-&gt;</span>last_used_idx <span class="token operator">&amp;</span> <span class="token punctuation">(</span>vq<span class="token operator">-&gt;</span>vring<span class="token punctuation">.</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  i <span class="token operator">=</span> <span class="token function">virtio32_to_cpu</span><span class="token punctuation">(</span>_vq<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span> vq<span class="token operator">-&gt;</span>vring<span class="token punctuation">.</span>used<span class="token operator">-&gt;</span>ring<span class="token punctuation">[</span>last_used<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>len <span class="token operator">=</span> <span class="token function">virtio32_to_cpu</span><span class="token punctuation">(</span>_vq<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span> vq<span class="token operator">-&gt;</span>vring<span class="token punctuation">.</span>used<span class="token operator">-&gt;</span>ring<span class="token punctuation">[</span>last_used<span class="token punctuation">]</span><span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/* detach_buf clears data, so grab it now. */</span>
  ret <span class="token operator">=</span> vq<span class="token operator">-&gt;</span>desc_state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token function">detach_buf</span><span class="token punctuation">(</span>vq<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vq<span class="token operator">-&gt;</span>last_used_idx<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 virtqueue_get_buf_ctx 中，我们可以看到，virtio 前端的 vring 中的 last_used_idx 加一，说明这块数据 qemu 后端已经消费完毕。我们可以通过 detach_buf 将其放入空闲队列中，留给以后的写入请求使用。</p><p>至此，整个存储虚拟化的写入流程才全部完成。</p><p><strong>总结时刻</strong></p><p>下面我们来总结一下存储虚拟化的场景下，整个写入的过程。</p><ul><li>在虚拟机里面，应用层调用 write 系统调用写入文件。</li><li>write 系统调用进入虚拟机里面的内核，经过 VFS，通用块设备层，I/O 调度层，到达块设备驱动。</li><li>虚拟机里面的块设备驱动是 virtio_blk，它和通用的块设备驱动一样，有一个 request queue，另外有一个函数 make_request_fn 会被设置为 blk_mq_make_request，这个函数用于将请求放入队列。</li><li>虚拟机里面的块设备驱动是 virtio_blk 会注册一个中断处理函数 vp_interrupt。当 qemu 写入完成之后，它会通知虚拟机里面的块设备驱动。</li><li>blk_mq_make_request 最终调用 virtqueue_add，将请求添加到传输队列 virtqueue 中，然后调用 virtqueue_notify 通知 qemu。</li><li>在 qemu 中，本来虚拟机正处于 KVM_RUN 的状态，也即处于客户机状态。</li><li>qemu 收到通知后，通过 VM exit 指令退出客户机状态，进入宿主机状态，根据退出原因，得知有 I/O 需要处理。</li><li>qemu 调用 virtio_blk_handle_output，最终调用 virtio_blk_handle_vq。</li><li>virtio_blk_handle_vq 里面有一个循环，在循环中，virtio_blk_get_request 函数从传输队列中拿出请求，然后调用 virtio_blk_handle_request 处理请求。</li><li>virtio_blk_handle_request 会调用 blk_aio_pwritev，通过 BlockBackend 驱动写入 qcow2 文件。</li><li>写入完毕之后，virtio_blk_req_complete 会调用 virtio_notify 通知虚拟机里面的驱动。数据写入完成，刚才注册的中断处理函数 vp_interrupt 会收到这个通知。</li></ul><figure><img src="`+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>课堂练习</strong></p><p>请你沿着代码，仔细分析并牢记 virtqueue 的结构以及写入和读取方式。这个结构在下面的网络传输过程中，还要起大作用。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p>',94),u=[i];function l(r,k){return s(),a("div",null,u)}const m=n(c,[["render",l],["__file","N54-存储虚拟化（下）.html.vue"]]);export{m as default};
