import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/1e13ffd5ac846c52739291cb489d0233-eb3e97e1.png",o="/assets/2e9ef612f7b80ec9fcd91e200f4946f3-c0e49f19.png",e="/assets/e18dae0a5951392c4a8e8630e53a616d-dadc1212.jpg",c="/assets/1f0c3043a11d6ea1a802f7d0f3b0b34b-f9388efb.jpg",i={},l=p('<h1 id="_53-存储虚拟化-上-如何建立自己保管的单独档案库" tabindex="-1"><a class="header-anchor" href="#_53-存储虚拟化-上-如何建立自己保管的单独档案库" aria-hidden="true">#</a> 53 | 存储虚拟化（上）：如何建立自己保管的单独档案库？</h1><p>前面几节，我们讲了 CPU 和内存的虚拟化。我们知道，完全虚拟化是很慢的，而通过内核的 KVM 技术和 EPT 技术，加速虚拟机对于物理 CPU 和内存的使用，我们称为硬件辅助虚拟化。</p><p>对于一台虚拟机而言，除了要虚拟化 CPU 和内存，存储和网络也需要虚拟化，存储和网络都属于外部设备，这些外部设备应该如何虚拟化呢？</p><p>当然一种方式还是完全虚拟化。比如，有什么样的硬盘设备或者网卡设备，我们就用 qemu 模拟一个一模一样的软件的硬盘和网卡设备，这样在虚拟机里面的操作系统看来，使用这些设备和使用物理设备是一样的。当然缺点就是，qemu 模拟的设备又是一个翻译官的角色。虽然这个时候虚拟机里面的操作系统，意识不到自己是运行在虚拟机里面的，但是这种每个指令都翻译的方式，实在是太慢了。</p><p>另外一种方式就是，虚拟机里面的操作系统不是一个通用的操作系统，它知道自己是运行在虚拟机里面的，使用的硬盘设备和网络设备都是虚拟的，应该加载特殊的驱动才能运行。这些特殊的驱动往往要通过虚拟机里面和外面配合工作的模式，来加速对于物理存储和网络设备的使用。</p><p><strong>virtio 的基本原理</strong></p><p>在虚拟化技术的早期，不同的虚拟化技术会针对不同硬盘设备和网络设备实现不同的驱动，虚拟机里面的操作系统也要根据不同的虚拟化技术和物理存储和网络设备，选择加载不同的驱动。但是，由于硬盘设备和网络设备太多了，驱动纷繁复杂。</p><p>后来慢慢就形成了一定的标准，这就是 <strong>virtio</strong>，就是<strong>虚拟化 I/O 设备</strong>的意思。virtio 负责对于虚拟机提供统一的接口。也就是说，在虚拟机里面的操作系统加载的驱动，以后都统一加载 virtio 就可以了。</p><figure><img src="'+t+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在虚拟机外，我们可以实现不同的 virtio 的后端，来适配不同的物理硬件设备。那 virtio 到底长什么样子呢？我们一起来看一看。</p><p>virtio 的架构可以分为四层。</p><p>首先，在虚拟机里面的 virtio 前端，针对不同类型的设备有不同的<strong>驱动程序</strong>，但是接口都是统一的。例如，硬盘就是 virtio_blk，网络就是 virtio_net。</p><p>其次，在宿主机的 qemu 里面，实现 virtio 后端的逻辑，主要就是<strong>操作硬件的设备</strong>。例如通过写一个物理机硬盘上的文件来完成虚拟机写入硬盘的操作。再如向内核协议栈发送一个网络包完成虚拟机对于网络的操作。</p><p>在 virtio 的前端和后端之间，有一个通信层，里面包含 <strong>virtio 层</strong>和 <strong>virtio-ring 层</strong>。virtio 这一层实现的是虚拟队列接口，算是前后端通信的桥梁。而 virtio-ring 则是该桥梁的具体实现。</p><figure><img src="'+o+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>virtio 使用 virtqueue 进行前端和后端的高速通信。不同类型的设备队列数目不同。virtio-net 使用两个队列，一个用于接收，另一个用于发送；而 virtio-blk 仅使用一个队列。</p><p>如果客户机要向宿主机发送数据，客户机会将数据的 buffer 添加到 virtqueue 中，然后通过写入寄存器通知宿主机。这样宿主机就可以从 virtqueue 中收到的 buffer 里面的数据。</p><p>了解了 virtio 的基本原理，接下来，我们以硬盘写入为例，具体看一下存储虚拟化的过程。</p><p><strong>初始化阶段的存储虚拟化</strong></p><p>和咱们在学习 CPU 的时候看到的一样，Virtio Block Device 也是一种类。它的继承关系如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo device_type_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> TYPE_DEVICE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parent <span class="token operator">=</span> TYPE_OBJECT<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DeviceState<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_init <span class="token operator">=</span> device_initfn<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_post_init <span class="token operator">=</span> device_post_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_finalize <span class="token operator">=</span> device_finalize<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_base_init <span class="token operator">=</span> device_class_base_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_init <span class="token operator">=</span> device_class_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>abstract <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DeviceClass<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo virtio_device_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> TYPE_VIRTIO_DEVICE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parent <span class="token operator">=</span> TYPE_DEVICE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VirtIODevice<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_init <span class="token operator">=</span> virtio_device_class_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_finalize <span class="token operator">=</span> virtio_device_instance_finalize<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>abstract <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VirtioDeviceClass<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo virtio_blk_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> TYPE_VIRTIO_BLK<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parent <span class="token operator">=</span> TYPE_VIRTIO_DEVICE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VirtIOBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_init <span class="token operator">=</span> virtio_blk_instance_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_init <span class="token operator">=</span> virtio_blk_class_init<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">virtio_register_types</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">type_register_static</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>virtio_blk_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">type_init</span><span class="token punctuation">(</span>virtio_register_types<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Virtio Block Device 这种类的定义是有多层继承关系的。TYPE_VIRTIO_BLK 的父类是 TYPE_VIRTIO_DEVICE，TYPE_VIRTIO_DEVICE 的父类是 TYPE_DEVICE，TYPE_DEVICE 的父类是 TYPE_OBJECT。到头了。</p><p>type_init 用于注册这种类。这里面每一层都有 class_init，用于从 TypeImpl 生产 xxxClass。还有 instance_init，可以将 xxxClass 初始化为实例。</p><p>在 TYPE_VIRTIO_BLK 层的 class_init 函数 virtio_blk_class_init 中，定义了 DeviceClass 的 realize 函数为 virtio_blk_device_realize，这一点在CPU那一节也有类似的结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">virtio_blk_device_realize</span><span class="token punctuation">(</span>DeviceState <span class="token operator">*</span>dev<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    VirtIODevice <span class="token operator">*</span>vdev <span class="token operator">=</span> <span class="token function">VIRTIO_DEVICE</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    VirtIOBlock <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">VIRTIO_BLK</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    VirtIOBlkConf <span class="token operator">*</span>conf <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token operator">-&gt;</span>conf<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">blkconf_blocksizes</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>conf<span class="token operator">-&gt;</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">virtio_blk_set_config_size</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s<span class="token operator">-&gt;</span>host_features<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">virtio_init</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> <span class="token string">&quot;virtio-blk&quot;</span><span class="token punctuation">,</span> VIRTIO_ID_BLOCK<span class="token punctuation">,</span> s<span class="token operator">-&gt;</span>config_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>blk <span class="token operator">=</span> conf<span class="token operator">-&gt;</span>conf<span class="token punctuation">.</span>blk<span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>rq <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>sector_mask <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>conf<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>logical_block_size <span class="token operator">/</span> BDRV_SECTOR_SIZE<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> conf<span class="token operator">-&gt;</span>num_queues<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">virtio_add_queue</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> conf<span class="token operator">-&gt;</span>queue_size<span class="token punctuation">,</span> virtio_blk_handle_output<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">virtio_blk_data_plane_create</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> conf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token operator">-&gt;</span>dataplane<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>change <span class="token operator">=</span> <span class="token function">qemu_add_vm_change_state_handler</span><span class="token punctuation">(</span>virtio_blk_dma_restart_cb<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">blk_set_dev_ops</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>blk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>virtio_block_ops<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">blk_set_guest_block_size</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>blk<span class="token punctuation">,</span> s<span class="token operator">-&gt;</span>conf<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>logical_block_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">blk_iostatus_enable</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>blk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 virtio_blk_device_realize 函数中，我们先是通过 virtio_init 初始化 VirtIODevice 结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">virtio_init</span><span class="token punctuation">(</span>VirtIODevice <span class="token operator">*</span>vdev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
                 <span class="token class-name">uint16_t</span> device_id<span class="token punctuation">,</span> <span class="token class-name">size_t</span> config_size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BusState <span class="token operator">*</span>qbus <span class="token operator">=</span> <span class="token function">qdev_get_parent_bus</span><span class="token punctuation">(</span><span class="token function">DEVICE</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    VirtioBusClass <span class="token operator">*</span>k <span class="token operator">=</span> <span class="token function">VIRTIO_BUS_GET_CLASS</span><span class="token punctuation">(</span>qbus<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">int</span> nvectors <span class="token operator">=</span> k<span class="token operator">-&gt;</span>query_nvectors <span class="token operator">?</span> k<span class="token operator">-&gt;</span><span class="token function">query_nvectors</span><span class="token punctuation">(</span>qbus<span class="token operator">-&gt;</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>nvectors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vdev<span class="token operator">-&gt;</span>vector_queues <span class="token operator">=</span>
            <span class="token function">g_malloc0</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>vdev<span class="token operator">-&gt;</span>vector_queues<span class="token punctuation">)</span> <span class="token operator">*</span> nvectors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    vdev<span class="token operator">-&gt;</span>device_id <span class="token operator">=</span> device_id<span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">atomic_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>isr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>queue_sel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>config_vector <span class="token operator">=</span> VIRTIO_NO_VECTOR<span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>vq <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>VirtQueue<span class="token punctuation">)</span> <span class="token operator">*</span> VIRTIO_QUEUE_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>vm_running <span class="token operator">=</span> <span class="token function">runstate_is_running</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>broken <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> VIRTIO_QUEUE_MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vector <span class="token operator">=</span> VIRTIO_NO_VECTOR<span class="token punctuation">;</span>
        vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vdev <span class="token operator">=</span> vdev<span class="token punctuation">;</span>
        vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>queue_index <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    vdev<span class="token operator">-&gt;</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>config_len <span class="token operator">=</span> config_size<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vdev<span class="token operator">-&gt;</span>config_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vdev<span class="token operator">-&gt;</span>config <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span>config_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        vdev<span class="token operator">-&gt;</span>config <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    vdev<span class="token operator">-&gt;</span>vmstate <span class="token operator">=</span> <span class="token function">qemu_add_vm_change_state_handler</span><span class="token punctuation">(</span>virtio_vmstate_change<span class="token punctuation">,</span>
                                                     vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>device_endian <span class="token operator">=</span> <span class="token function">virtio_default_endian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>use_guest_notifier_mask <span class="token operator">=</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 virtio_init 中可以看出，VirtIODevice 结构里面有一个 VirtQueue 数组，这就是 virtio 前端和后端互相传数据的队列，最多 VIRTIO_QUEUE_MAX 个。</p><p>我们回到 virtio_blk_device_realize 函数。接下来，根据配置的队列数目 num_queues，对于每个队列都调用 virtio_add_queue 来初始化队列。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>VirtQueue <span class="token operator">*</span><span class="token function">virtio_add_queue</span><span class="token punctuation">(</span>VirtIODevice <span class="token operator">*</span>vdev<span class="token punctuation">,</span> <span class="token keyword">int</span> queue_size<span class="token punctuation">,</span>
                            VirtIOHandleOutput handle_output<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vring<span class="token punctuation">.</span>num <span class="token operator">=</span> queue_size<span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vring<span class="token punctuation">.</span>num_default <span class="token operator">=</span> queue_size<span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vring<span class="token punctuation">.</span>align <span class="token operator">=</span> VIRTIO_PCI_VRING_ALIGN<span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>handle_output <span class="token operator">=</span> handle_output<span class="token punctuation">;</span>
    vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>handle_aio_output <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>vq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在每个 VirtQueue 中，都有一个 vring，用来维护这个队列里面的数据；另外还有一个函数 virtio_blk_handle_output，用于处理数据写入，这个函数我们后面会用到。</p><p>至此，VirtIODevice，VirtQueue，vring 之间的关系如下图所示。这是在 qemu 里面的对应关系，请你记好，后面我们还能看到类似的结构。</p><figure><img src="`+e+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>qemu 启动过程中的存储虚拟化</strong></p><p>初始化过程解析完毕以后，我们接下来从 qemu 的启动过程看起。</p><p>对于硬盘的虚拟化，qemu 的启动参数里面有关的是下面两行：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">-</span>drive file<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>nova<span class="token operator">/</span>instances<span class="token operator">/</span><span class="token number">1f</span><span class="token number">8e6f</span><span class="token number">7e-5</span>a70<span class="token operator">-</span><span class="token number">4780</span><span class="token operator">-</span><span class="token number">89</span>c1<span class="token operator">-</span><span class="token number">464</span>dc0e7f308<span class="token operator">/</span>disk<span class="token punctuation">,</span><span class="token keyword">if</span><span class="token operator">=</span>none<span class="token punctuation">,</span>id<span class="token operator">=</span>drive<span class="token operator">-</span>virtio<span class="token operator">-</span>disk0<span class="token punctuation">,</span>format<span class="token operator">=</span>qcow2<span class="token punctuation">,</span>cache<span class="token operator">=</span>none
<span class="token operator">-</span>device virtio<span class="token operator">-</span>blk<span class="token operator">-</span>pci<span class="token punctuation">,</span>scsi<span class="token operator">=</span>off<span class="token punctuation">,</span>bus<span class="token operator">=</span>pci<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token number">0x4</span><span class="token punctuation">,</span>drive<span class="token operator">=</span>drive<span class="token operator">-</span>virtio<span class="token operator">-</span>disk0<span class="token punctuation">,</span>id<span class="token operator">=</span>virtio<span class="token operator">-</span>disk0<span class="token punctuation">,</span>bootindex<span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，第一行指定了宿主机硬盘上的一个文件，文件的格式是 qcow2，这个格式我们这里不准备解析它，你只要明白，对于宿主机上的一个文件，可以被 qemu 模拟称为客户机上的一块硬盘就可以了。</p><p>而第二行说明了，使用的驱动是 virtio-blk 驱动。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">configure_blockdev</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bdo_queue<span class="token punctuation">,</span> machine_class<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 qemu 启动的 main 函数里面，初始化块设备，是通过 configure_blockdev 调用开始的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">configure_blockdev</span><span class="token punctuation">(</span>BlockdevOptionsQueue <span class="token operator">*</span>bdo_queue<span class="token punctuation">,</span> MachineClass <span class="token operator">*</span>machine_class<span class="token punctuation">,</span> <span class="token keyword">int</span> snapshot<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qemu_opts_foreach</span><span class="token punctuation">(</span><span class="token function">qemu_find_opts</span><span class="token punctuation">(</span><span class="token string">&quot;drive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> drive_init_func<span class="token punctuation">,</span>
                          <span class="token operator">&amp;</span>machine_class<span class="token operator">-&gt;</span>block_default_type<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error_fatal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">drive_init_func</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>opaque<span class="token punctuation">,</span> QemuOpts <span class="token operator">*</span>opts<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BlockInterfaceType <span class="token operator">*</span>block_default_type <span class="token operator">=</span> opaque<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">drive_new</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> <span class="token operator">*</span>block_default_type<span class="token punctuation">,</span> errp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 configure_blockdev 中，我们能看到对于 drive 这个参数的解析，并且初始化这个设备要调用 drive_init_func 函数，这里面会调用 drive_new 创建一个设备。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>DriveInfo <span class="token operator">*</span><span class="token function">drive_new</span><span class="token punctuation">(</span>QemuOpts <span class="token operator">*</span>all_opts<span class="token punctuation">,</span> BlockInterfaceType block_default_type<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
    BlockBackend <span class="token operator">*</span>blk<span class="token punctuation">;</span>
    DriveInfo <span class="token operator">*</span>dinfo <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    QDict <span class="token operator">*</span>bs_opts<span class="token punctuation">;</span>
    QemuOpts <span class="token operator">*</span>legacy_opts<span class="token punctuation">;</span>
    DriveMediaType media <span class="token operator">=</span> MEDIA_DISK<span class="token punctuation">;</span>
    BlockInterfaceType type<span class="token punctuation">;</span>
    <span class="token keyword">int</span> max_devs<span class="token punctuation">,</span> bus_id<span class="token punctuation">,</span> unit_id<span class="token punctuation">,</span> index<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>werror<span class="token punctuation">,</span> <span class="token operator">*</span>rerror<span class="token punctuation">;</span>
    bool read_only <span class="token operator">=</span> false<span class="token punctuation">;</span>
    bool copy_on_read<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">;</span>
    Error <span class="token operator">*</span>local_err <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    legacy_opts <span class="token operator">=</span> <span class="token function">qemu_opts_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_legacy_drive_opts<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                                   <span class="token operator">&amp;</span>error_abort<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Add virtio block device */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> IF_VIRTIO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        QemuOpts <span class="token operator">*</span>devopts<span class="token punctuation">;</span>
        devopts <span class="token operator">=</span> <span class="token function">qemu_opts_create</span><span class="token punctuation">(</span><span class="token function">qemu_find_opts</span><span class="token punctuation">(</span><span class="token string">&quot;device&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                                   <span class="token operator">&amp;</span>error_abort<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">qemu_opt_set</span><span class="token punctuation">(</span>devopts<span class="token punctuation">,</span> <span class="token string">&quot;driver&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;virtio-blk-pci&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>error_abort<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">qemu_opt_set</span><span class="token punctuation">(</span>devopts<span class="token punctuation">,</span> <span class="token string">&quot;drive&quot;</span><span class="token punctuation">,</span> <span class="token function">qdict_get_str</span><span class="token punctuation">(</span>bs_opts<span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token operator">&amp;</span>error_abort<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    filename <span class="token operator">=</span> <span class="token function">qemu_opt_get</span><span class="token punctuation">(</span>legacy_opts<span class="token punctuation">,</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Actual block device init: Functionality shared with blockdev-add */</span>
    blk <span class="token operator">=</span> <span class="token function">blockdev_init</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> bs_opts<span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Create legacy DriveInfo */</span>
    dinfo <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>dinfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dinfo<span class="token operator">-&gt;</span>opts <span class="token operator">=</span> all_opts<span class="token punctuation">;</span>

    dinfo<span class="token operator">-&gt;</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    dinfo<span class="token operator">-&gt;</span>bus <span class="token operator">=</span> bus_id<span class="token punctuation">;</span>
    dinfo<span class="token operator">-&gt;</span>unit <span class="token operator">=</span> unit_id<span class="token punctuation">;</span>

    <span class="token function">blk_set_legacy_dinfo</span><span class="token punctuation">(</span>blk<span class="token punctuation">,</span> dinfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> IF_IDE<span class="token operator">:</span>
    <span class="token keyword">case</span> IF_SCSI<span class="token operator">:</span>
    <span class="token keyword">case</span> IF_XEN<span class="token operator">:</span>
    <span class="token keyword">case</span> IF_NONE<span class="token operator">:</span>
        dinfo<span class="token operator">-&gt;</span>media_cd <span class="token operator">=</span> media <span class="token operator">==</span> MEDIA_CDROM<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 drive_new 里面，会解析 qemu 的启动参数。对于 virtio 来讲，会解析 device 参数，把 driver 设置为 virtio-blk-pci；还会解析 file 参数，就是指向那个宿主机上的文件。</p><p>接下来，drive_new 会调用 blockdev_init，根据参数进行初始化，最后会创建一个 DriveInfo 来管理这个设备。</p><p>我们重点来看 blockdev_init。在这里面，我们发现，如果 file 不为空，则应该调用 blk_new_open 打开宿主机上的硬盘文件，返回的结果是 BlockBackend，对应我们上面讲原理的时候的 virtio 的后端。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>BlockBackend <span class="token operator">*</span><span class="token function">blk_new_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>reference<span class="token punctuation">,</span>
                           QDict <span class="token operator">*</span>options<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BlockBackend <span class="token operator">*</span>blk<span class="token punctuation">;</span>
    BlockDriverState <span class="token operator">*</span>bs<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> perm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    blk <span class="token operator">=</span> <span class="token function">blk_new</span><span class="token punctuation">(</span>perm<span class="token punctuation">,</span> BLK_PERM_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bs <span class="token operator">=</span> <span class="token function">bdrv_open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> reference<span class="token punctuation">,</span> options<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> errp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    blk<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token function">bdrv_root_attach_child</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>child_root<span class="token punctuation">,</span>
                                       perm<span class="token punctuation">,</span> BLK_PERM_ALL<span class="token punctuation">,</span> blk<span class="token punctuation">,</span> errp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> blk<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的调用链为：bdrv_open-&gt;bdrv_open_inherit-&gt;bdrv_open_common.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bdrv_open_common</span><span class="token punctuation">(</span>BlockDriverState <span class="token operator">*</span>bs<span class="token punctuation">,</span> BlockBackend <span class="token operator">*</span>file<span class="token punctuation">,</span>
                            QDict <span class="token operator">*</span>options<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">,</span> open_flags<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>driver_name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>node_name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>discard<span class="token punctuation">;</span>
    QemuOpts <span class="token operator">*</span>opts<span class="token punctuation">;</span>
    BlockDriver <span class="token operator">*</span>drv<span class="token punctuation">;</span>
    Error <span class="token operator">*</span>local_err <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    drv <span class="token operator">=</span> <span class="token function">bdrv_find_format</span><span class="token punctuation">(</span>driver_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    ret <span class="token operator">=</span> <span class="token function">bdrv_open_driver</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> drv<span class="token punctuation">,</span> node_name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> open_flags<span class="token punctuation">,</span> errp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bdrv_open_driver</span><span class="token punctuation">(</span>BlockDriverState <span class="token operator">*</span>bs<span class="token punctuation">,</span> BlockDriver <span class="token operator">*</span>drv<span class="token punctuation">,</span>
                            <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>node_name<span class="token punctuation">,</span> QDict <span class="token operator">*</span>options<span class="token punctuation">,</span>
                            <span class="token keyword">int</span> open_flags<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    bs<span class="token operator">-&gt;</span>drv <span class="token operator">=</span> drv<span class="token punctuation">;</span>
    bs<span class="token operator">-&gt;</span>read_only <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>bs<span class="token operator">-&gt;</span>open_flags <span class="token operator">&amp;</span> BDRV_O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bs<span class="token operator">-&gt;</span>opaque <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span>drv<span class="token operator">-&gt;</span>instance_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>drv<span class="token operator">-&gt;</span>bdrv_open<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> drv<span class="token operator">-&gt;</span><span class="token function">bdrv_open</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> options<span class="token punctuation">,</span> open_flags<span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 bdrv_open_common 中，根据硬盘文件的格式，得到 BlockDriver。因为虚拟机的硬盘文件格式有很多种，qcow2 是一种，raw 是一种，vmdk 是一种，各有优缺点，启动虚拟机的时候，可以自由选择。</p><p>对于不同的格式，打开的方式不一样，我们拿 qcow2 来解析。它的 BlockDriver 定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>BlockDriver bdrv_qcow2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>format_name        <span class="token operator">=</span> <span class="token string">&quot;qcow2&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size      <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>BDRVQcow2State<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_probe         <span class="token operator">=</span> qcow2_probe<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_open          <span class="token operator">=</span> qcow2_open<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_close         <span class="token operator">=</span> qcow2_close<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">.</span>bdrv_snapshot_create   <span class="token operator">=</span> qcow2_snapshot_create<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_snapshot_goto     <span class="token operator">=</span> qcow2_snapshot_goto<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_snapshot_delete   <span class="token operator">=</span> qcow2_snapshot_delete<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_snapshot_list     <span class="token operator">=</span> qcow2_snapshot_list<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_snapshot_load_tmp <span class="token operator">=</span> qcow2_snapshot_load_tmp<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_measure           <span class="token operator">=</span> qcow2_measure<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_get_info          <span class="token operator">=</span> qcow2_get_info<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_get_specific_info <span class="token operator">=</span> qcow2_get_specific_info<span class="token punctuation">,</span>

    <span class="token punctuation">.</span>bdrv_save_vmstate    <span class="token operator">=</span> qcow2_save_vmstate<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_load_vmstate    <span class="token operator">=</span> qcow2_load_vmstate<span class="token punctuation">,</span>

    <span class="token punctuation">.</span>supports_backing           <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>bdrv_change_backing_file   <span class="token operator">=</span> qcow2_change_backing_file<span class="token punctuation">,</span>

    <span class="token punctuation">.</span>bdrv_refresh_limits        <span class="token operator">=</span> qcow2_refresh_limits<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上面的定义，对于 qcow2 来讲，bdrv_open 调用的是 qcow2_open。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">qcow2_open</span><span class="token punctuation">(</span>BlockDriverState <span class="token operator">*</span>bs<span class="token punctuation">,</span> QDict <span class="token operator">*</span>options<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>
                      Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BDRVQcow2State <span class="token operator">*</span>s <span class="token operator">=</span> bs<span class="token operator">-&gt;</span>opaque<span class="token punctuation">;</span>
    QCow2OpenCo qoc <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>bs <span class="token operator">=</span> bs<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>options <span class="token operator">=</span> options<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>flags <span class="token operator">=</span> flags<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>errp <span class="token operator">=</span> errp<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ret <span class="token operator">=</span> <span class="token operator">-</span>EINPROGRESS
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    bs<span class="token operator">-&gt;</span>file <span class="token operator">=</span> <span class="token function">bdrv_open_child</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> bs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>child_file<span class="token punctuation">,</span>
                               false<span class="token punctuation">,</span> errp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_coroutine_enter</span><span class="token punctuation">(</span><span class="token function">qemu_coroutine_create</span><span class="token punctuation">(</span>qcow2_open_entry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>qoc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 qcow2_open 中，我们会通过 qemu_coroutine_enter 进入一个协程 coroutine。什么叫协程呢？我们可以简单地将它理解为用户态自己实现的线程。</p><p>前面咱们讲线程的时候说过，如果一个程序想实现并发，可以创建多个线程，但是线程是一个内核的概念，创建的每一个线程内核都能看到，内核的调度也是以线程为单位的。这对于普通的进程没有什么问题，但是对于 qemu 这种虚拟机，如果在用户态和内核态切换来切换去，由于还涉及虚拟机的状态，代价比较大。</p><p>但是，qemu 的设备也是需要多线程能力的，怎么办呢？我们就在用户态实现一个类似线程的东西，也就是协程，用于实现并发，并且不被内核看到，调度全部在用户态完成。</p><p>从后面的读写过程可以看出，协程在后端经常使用。这里打开一个 qcow2 文件就是使用一个协程，创建一个协程和创建一个线程很像，也需要指定一个函数来执行，qcow2_open_entry 就是协程的函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> coroutine_fn <span class="token function">qcow2_open_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>opaque<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    QCow2OpenCo <span class="token operator">*</span>qoc <span class="token operator">=</span> opaque<span class="token punctuation">;</span>
    BDRVQcow2State <span class="token operator">*</span>s <span class="token operator">=</span> qoc<span class="token operator">-&gt;</span>bs<span class="token operator">-&gt;</span>opaque<span class="token punctuation">;</span>

    <span class="token function">qemu_co_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    qoc<span class="token operator">-&gt;</span>ret <span class="token operator">=</span> <span class="token function">qcow2_do_open</span><span class="token punctuation">(</span>qoc<span class="token operator">-&gt;</span>bs<span class="token punctuation">,</span> qoc<span class="token operator">-&gt;</span>options<span class="token punctuation">,</span> qoc<span class="token operator">-&gt;</span>flags<span class="token punctuation">,</span> qoc<span class="token operator">-&gt;</span>errp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_co_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，qcow2_open_entry 函数前面有一个 coroutine_fn，说明它是一个协程函数。在 qcow2_do_open 中，qcow2_do_open 根据 qcow2 的格式打开硬盘文件。这个格式官网就有，我们这里就不花篇幅解析了。</p><p><strong>总结时刻</strong></p><p>我们这里来总结一下，存储虚拟化的过程分为前端、后端和中间的队列。</p><p>前端有前端的块设备驱动 Front-end driver，在客户机的内核里面，它符合普通设备驱动的格式，对外通过 VFS 暴露文件系统接口给客户机里面的应用。这一部分这一节我们没有讲，放在下一节解析。</p><p>后端有后端的设备驱动 Back-end driver，在宿主机的 qemu 进程中，当收到客户机的写入请求的时候，调用文件系统的 write 函数，写入宿主机的 VFS 文件系统，最终写到物理硬盘设备上的 qcow2 文件。</p><p>中间的队列用于前端和后端之间传输数据，在前端的设备驱动和后端的设备驱动，都有类似的数据结构 virt-queue 来管理这些队列，这一部分这一节我们也没有讲，也放到下一节解析。</p><figure><img src="`+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>课堂练习</strong></p><p>对于 qemu-kvm 来讲，qcow2 是一种常见的文件格式。它有精妙的格式设计，从而适应虚拟化的场景，请你研究一下这个文件格式。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p>',70),u=[l];function r(k,d){return s(),a("div",null,u)}const _=n(i,[["render",r],["__file","N53-存储虚拟化（上）.html.vue"]]);export{_ as default};
