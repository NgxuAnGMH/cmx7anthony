import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,e as i,d as a}from"./app-cdabc73c.js";const l="/assets/0c49a870b9e6441381fec8d9bf3dee65-a3ad28a2.png",u={},r=a(`<h1 id="_30-文件缓存-常用文档应该放在触手可得的地方" tabindex="-1"><a class="header-anchor" href="#_30-文件缓存-常用文档应该放在触手可得的地方" aria-hidden="true">#</a> 30 | 文件缓存：常用文档应该放在触手可得的地方</h1><p>上一节，我们讲了文件系统的挂载和文件的打开，并通过打开文件的过程，构建了一个文件管理的整套数据结构体系。其实到这里，我们还没有对文件进行读写，还属于对于元数据的操作。那这一节，我们就重点关注读写。</p><h2 id="系统调用层和虚拟文件系统层" tabindex="-1"><a class="header-anchor" href="#系统调用层和虚拟文件系统层" aria-hidden="true">#</a> 系统调用层和虚拟文件系统层</h2><p>文件系统的读写，其实就是调用系统函数 read 和 write。由于读和写的很多逻辑是相似的，这里我们一起来看一下这个过程。</p><p>下面的代码就是 read 和 write 的系统调用，在内核里面的定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>read<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">fd</span> f <span class="token operator">=</span> <span class="token function">fdget_pos</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token class-name">loff_t</span> pos <span class="token operator">=</span> <span class="token function">file_pos_read</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ret <span class="token operator">=</span> <span class="token function">vfs_read</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>file<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>write<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span>
    <span class="token class-name">size_t</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">fd</span> f <span class="token operator">=</span> <span class="token function">fdget_pos</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token class-name">loff_t</span> pos <span class="token operator">=</span> <span class="token function">file_pos_read</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">vfs_write</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>file<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 read 来讲，里面调用 vfs_read-&gt;<code>__vfs_read</code>。对于 write 来讲，里面调用 vfs_write-&gt;<code>__vfs_write</code>。</p><p>下面是 <code>__vfs_read</code> 和 <code>__vfs_write</code> 的代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">__vfs_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span>
       <span class="token class-name">loff_t</span> <span class="token operator">*</span>pos<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>read<span class="token punctuation">)</span>
    <span class="token keyword">return</span> file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>read_iter<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">new_sync_read</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token class-name">ssize_t</span> <span class="token function">__vfs_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span>
        <span class="token class-name">loff_t</span> <span class="token operator">*</span>pos<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>write<span class="token punctuation">)</span>
    <span class="token keyword">return</span> file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> p<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>write_iter<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">new_sync_write</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> p<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上一节，我们讲了，每一个打开的文件，都有一个 struct file 结构。这里面有一个 struct file_operations f_op，用于定义对这个文件做的操作。<code>__vfs_read</code> 会调用相应文件系统的 file_operations 里面的 read 操作，<code>__vfs_write</code> 会调用相应文件系统 file_operations 里的 write 操作。</p><h2 id="ext4-文件系统层" tabindex="-1"><a class="header-anchor" href="#ext4-文件系统层" aria-hidden="true">#</a> ext4 文件系统层</h2><p>对于 ext4 文件系统来讲，内核定义了一个 ext4_file_operations。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> ext4_file_operations <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span>read_iter  <span class="token operator">=</span> ext4_file_read_iter<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write_iter  <span class="token operator">=</span> ext4_file_write_iter<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 ext4 没有定义 read 和 write 函数，于是会调用 ext4_file_read_iter 和 ext4_file_write_iter。</p><p>ext4_file_read_iter 会调用 generic_file_read_iter，ext4_file_write_iter 会调用 __generic_file_write_iter。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span>
<span class="token function">generic_file_read_iter</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span>iocb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>iter<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>iocb<span class="token operator">-&gt;</span>ki_flags <span class="token operator">&amp;</span> IOCB_DIRECT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_mapping<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        retval <span class="token operator">=</span> mapping<span class="token operator">-&gt;</span>a_ops<span class="token operator">-&gt;</span><span class="token function">direct_IO</span><span class="token punctuation">(</span>iocb<span class="token punctuation">,</span> iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    retval <span class="token operator">=</span> <span class="token function">generic_file_buffered_read</span><span class="token punctuation">(</span>iocb<span class="token punctuation">,</span> iter<span class="token punctuation">,</span> retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token class-name">ssize_t</span> <span class="token function">__generic_file_write_iter</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span>iocb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>from<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>iocb<span class="token operator">-&gt;</span>ki_flags <span class="token operator">&amp;</span> IOCB_DIRECT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        written <span class="token operator">=</span> <span class="token function">generic_file_direct_write</span><span class="token punctuation">(</span>iocb<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    written <span class="token operator">=</span> <span class="token function">generic_perform_write</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> from<span class="token punctuation">,</span> iocb<span class="token operator">-&gt;</span>ki_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>generic_file_read_iter 和 __generic_file_write_iter 有相似的逻辑，就是要区分是否用缓存。</p><p>缓存其实就是内存中的一块空间。因为内存比硬盘快得多，Linux 为了改进性能，有时候会选择不直接操作硬盘，而是读写都在内存中，然后批量读取或者写入硬盘。一旦能够命中内存，读写效率就会大幅度提高。</p><h2 id="文件的io操作-缓存-直接" tabindex="-1"><a class="header-anchor" href="#文件的io操作-缓存-直接" aria-hidden="true">#</a> 文件的IO操作/缓存/直接</h2><p>因此，根据是否使用内存做缓存，我们可以把文件的 I/O 操作分为两种类型。</p><h3 id="_1-缓存io" tabindex="-1"><a class="header-anchor" href="#_1-缓存io" aria-hidden="true">#</a> 1) 缓存IO</h3><p>第一种类型是**<code>缓存 I/O</code>**。大多数文件系统的默认 I/O 操作都是缓存 I/O。</p><ul><li>对于读操作来讲，操作系统会先检查，内核的缓冲区有没有需要的数据。</li><li>如果已经缓存了，那就直接从缓存中返回； <ul><li>否则从磁盘中读取，然后缓存在操作系统的缓存中。</li></ul></li><li>对于写操作来讲，操作系统会先将数据从用户空间复制到内核空间的缓存中。</li><li>这时对用户程序来说，写操作就已经完成。至于什么时候再写到磁盘中由操作系统决定，除非显式地调用了 sync 同步命令。</li></ul><h3 id="_2-直接io" tabindex="-1"><a class="header-anchor" href="#_2-直接io" aria-hidden="true">#</a> 2) 直接IO</h3><p>第二种类型是**<code>直接 I/O</code>**，就是应用程序直接访问磁盘数据，而不经过内核缓冲区，从而减少了在内核缓存和用户程序之间数据复制。</p><h3 id="相关流程" tabindex="-1"><a class="header-anchor" href="#相关流程" aria-hidden="true">#</a> # 相关流程</h3><p>如果在读的逻辑 generic_file_read_iter 里面，发现设置了 IOCB_DIRECT，则会调用 address_space 的 direct_IO 的函数，将数据直接读取硬盘。我们在 mmap 映射文件到内存的时候讲过 address_space，它主要用于在内存映射的时候将文件和内存页产生关联。</p><p>同样，对于缓存来讲，也需要文件和内存页进行关联，这就要用到 address_space。address_space 的相关操作定义在 struct address_space_operations 结构中。对于 ext4 文件系统来讲， address_space 的操作定义在 ext4_aops，direct_IO 对应的函数是 ext4_direct_IO。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">address_space_operations</span> ext4_aops <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span>direct_IO    <span class="token operator">=</span> ext4_direct_IO<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在写的逻辑 __generic_file_write_iter 里面，发现设置了 IOCB_DIRECT，则调用 generic_file_direct_write，里面同样会调用 address_space 的 direct_IO 的函数，将数据直接写入硬盘。</p><p>ext4_direct_IO 最终会调用到 __blockdev_direct_IO-&gt;do_blockdev_direct_IO，这就跨过了缓存层，到了通用块层，最终到了文件系统的设备驱动层。由于文件系统是块设备，所以这个调用的是 blockdev 相关的函数，有关块设备驱动程序的原理我们下一章详细讲，这一节我们就讲到文件系统到块设备的分界线部分。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * This is a library function for use by filesystem drivers.
 */</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token class-name">ssize_t</span>
<span class="token function">do_blockdev_direct_IO</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span>iocb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span>
          <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>bdev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>iter<span class="token punctuation">,</span>
          <span class="token class-name">get_block_t</span> get_block<span class="token punctuation">,</span> <span class="token class-name">dio_iodone_t</span> end_io<span class="token punctuation">,</span>
          <span class="token class-name">dio_submit_t</span> submit_io<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们重点看带缓存的部分如果进行读写。</p><h2 id="带缓存的写入操作" tabindex="-1"><a class="header-anchor" href="#带缓存的写入操作" aria-hidden="true">#</a> 带缓存的写入操作</h2><p>我们先来看带缓存写入的函数 generic_perform_write。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">generic_perform_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>
        <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>i<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> pos<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_mapping<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">address_space_operations</span> <span class="token operator">*</span>a_ops <span class="token operator">=</span> mapping<span class="token operator">-&gt;</span>a_ops<span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> offset<span class="token punctuation">;</span>  <span class="token comment">/* Offset into pagecache page */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> bytes<span class="token punctuation">;</span>  <span class="token comment">/* Bytes to write to page */</span>
    status <span class="token operator">=</span> a_ops<span class="token operator">-&gt;</span><span class="token function">write_begin</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> mapping<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> flags<span class="token punctuation">,</span>
            <span class="token operator">&amp;</span>page<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fsdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    copied <span class="token operator">=</span> <span class="token function">iov_iter_copy_from_user_atomic</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> i<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">flush_dcache_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    status <span class="token operator">=</span> a_ops<span class="token operator">-&gt;</span><span class="token function">write_end</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> mapping<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> copied<span class="token punctuation">,</span>
            page<span class="token punctuation">,</span> fsdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pos <span class="token operator">+=</span> copied<span class="token punctuation">;</span>
    written <span class="token operator">+=</span> copied<span class="token punctuation">;</span>


    <span class="token function">balance_dirty_pages_ratelimited</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">iov_iter_count</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数里，是一个 while 循环。我们需要找出这次写入影响的所有的页，然后依次写入。对于每一个循环，主要做四件事情：</p><ul><li>对于每一页，先调用 address_space 的 write_begin 做一些准备；</li><li>调用 iov_iter_copy_from_user_atomic，将写入的内容从用户态拷贝到内核态的页中；</li><li>调用 address_space 的 write_end 完成写操作；</li><li>调用 balance_dirty_pages_ratelimited，看脏页是否太多，需要写回硬盘。所谓脏页，就是写入到缓存，但是还没有写入到硬盘的页面。</li></ul><p>我们依次来看这四个步骤。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">address_space_operations</span> ext4_aops <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span>write_begin    <span class="token operator">=</span> ext4_write_begin<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write_end    <span class="token operator">=</span> ext4_write_end<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1" tabindex="-1"><a class="header-anchor" href="#_1" aria-hidden="true">#</a> 1)</h3><p>第一步，对于 ext4 来讲，调用的是 ext4_write_begin。</p><p>ext4 是一种日志文件系统，是为了防止突然断电的时候的数据丢失，引入了**<code>日志（Journal）模式</code>**。日志文件系统比非日志文件系统多了一个 Journal 区域。文件在 ext4 中分两部分存储，一部分是文件的元数据，另一部分是数据。元数据和数据的操作日志 Journal 也是分开管理的。你可以在挂载 ext4 的时候，选择 Journal 模式。这种模式在将数据写入文件系统前，必须等待元数据和数据的日志已经落盘才能发挥作用。这样性能比较差，但是最安全。</p><p>另一种模式是 <strong><code>order 模式</code></strong>。这个模式不记录数据的日志，只记录元数据的日志，但是在写元数据的日志前，必须先确保数据已经落盘。这个折中，是默认模式。</p><p>还有一种模式是 <strong><code>writeback 模式</code></strong>，不记录数据的日志，仅记录元数据的日志，并且不保证数据比元数据先落盘。这个性能最好，但是最不安全。</p><p>在 ext4_write_begin，我们能看到对于 ext4_journal_start 的调用，就是在做日志相关的工作。</p><p>在 ext4_write_begin 中，还做了另外一件重要的事情，就是调用 grab_cache_page_write_begin，来得到应该写入的缓存页。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">grab_cache_page_write_begin</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping<span class="token punctuation">,</span>
          <span class="token class-name">pgoff_t</span> index<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
  <span class="token keyword">int</span> fgp_flags <span class="token operator">=</span> FGP_LOCK<span class="token operator">|</span>FGP_WRITE<span class="token operator">|</span>FGP_CREAT<span class="token punctuation">;</span>
  page <span class="token operator">=</span> <span class="token function">pagecache_get_page</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> index<span class="token punctuation">,</span> fgp_flags<span class="token punctuation">,</span>
      <span class="token function">mapping_gfp_mask</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span>
    <span class="token function">wait_for_stable_page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在内核中，缓存以页为单位放在内存里面，那我们如何知道，一个文件的哪些数据已经被放到缓存中了呢？每一个打开的文件都有一个 struct file 结构，每个 struct file 结构都有一个 struct address_space 用于关联文件和内存，就是在这个结构里面，有一棵树，用于保存所有与这个文件相关的的缓存页。</p><p>我们查找的时候，往往需要根据文件中的偏移量找出相应的页面，而基数树 radix tree 这种数据结构能够快速根据一个长整型查找到其相应的对象，因而这里缓存页就放在 radix 基数树里面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span>    <span class="token operator">*</span>host<span class="token punctuation">;</span>    <span class="token comment">/* owner: inode, block_device */</span>
  <span class="token keyword">struct</span> <span class="token class-name">radix_tree_root</span>  page_tree<span class="token punctuation">;</span>  <span class="token comment">/* radix tree of all pages */</span>
  <span class="token class-name">spinlock_t</span>    tree_lock<span class="token punctuation">;</span>  <span class="token comment">/* and lock protecting it */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>pagecache_get_page 就是根据 pgoff_t index 这个长整型，在这棵树里面查找缓存页，如果找不到就会创建一个缓存页。</p><h3 id="_2" tabindex="-1"><a class="header-anchor" href="#_2" aria-hidden="true">#</a> 2)</h3><p>第二步，调用 iov_iter_copy_from_user_atomic。先将分配好的页面调用 kmap_atomic 映射到内核里面的一个虚拟地址，然后将用户态的数据拷贝到内核态的页面的虚拟地址中，调用 kunmap_atomic 把内核里面的映射删除。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">size_t</span> <span class="token function">iov_iter_copy_from_user_atomic</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span>
    <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>i<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token class-name">size_t</span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>kaddr <span class="token operator">=</span> <span class="token function">kmap_atomic</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> kaddr <span class="token operator">+</span> offset<span class="token punctuation">;</span>
  <span class="token function">iterate_all_kinds</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> v<span class="token punctuation">,</span>
    <span class="token function">copyin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">+=</span> v<span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">.</span>iov_len<span class="token punctuation">,</span> v<span class="token punctuation">.</span>iov_base<span class="token punctuation">,</span> v<span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">memcpy_from_page</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">+=</span> v<span class="token punctuation">.</span>bv_len<span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">.</span>bv_len<span class="token punctuation">,</span> v<span class="token punctuation">.</span>bv_page<span class="token punctuation">,</span>
         v<span class="token punctuation">.</span>bv_offset<span class="token punctuation">,</span> v<span class="token punctuation">.</span>bv_len<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">+=</span> v<span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">.</span>iov_len<span class="token punctuation">,</span> v<span class="token punctuation">.</span>iov_base<span class="token punctuation">,</span> v<span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
  <span class="token function">kunmap_atomic</span><span class="token punctuation">(</span>kaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3" tabindex="-1"><a class="header-anchor" href="#_3" aria-hidden="true">#</a> 3)</h3><p>第三步，调用 ext4_write_end 完成写入。这里面会调用 ext4_journal_stop 完成日志的写入，会调用 block_write_end-&gt;__block_commit_write-&gt;mark_buffer_dirty，将修改过的缓存标记为脏页。可以看出，其实所谓的完成写入，并没有真正写入硬盘，仅仅是写入缓存后，标记为脏页。</p><p>但是这里有一个问题，数据很危险，一旦宕机就没有了，所以需要一种机制，将写入的页面真正写到硬盘中，我们称为回写（Write Back）。</p><h3 id="_4" tabindex="-1"><a class="header-anchor" href="#_4" aria-hidden="true">#</a> 4)</h3><p>第四步，调用 balance_dirty_pages_ratelimited，是回写脏页的一个很好的时机。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * balance_dirty_pages_ratelimited - balance dirty memory state
 * @mapping: address_space which was dirtied
 *
 * Processes which are dirtying memory should call in here once for each page
 * which was newly dirtied.  The function will periodically check the system&#39;s
 * dirty state and will initiate writeback if needed.
  */</span>
<span class="token keyword">void</span> <span class="token function">balance_dirty_pages_ratelimited</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode <span class="token operator">=</span> mapping<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">backing_dev_info</span> <span class="token operator">*</span>bdi <span class="token operator">=</span> <span class="token function">inode_to_bdi</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">bdi_writeback</span> <span class="token operator">*</span>wb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> ratelimit<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>nr_dirtied <span class="token operator">&gt;=</span> ratelimit<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">balance_dirty_pages</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> wb<span class="token punctuation">,</span> current<span class="token operator">-&gt;</span>nr_dirtied<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 balance_dirty_pages_ratelimited 里面，发现脏页的数目超过了规定的数目，就调用 balance_dirty_pages-&gt;wb_start_background_writeback，启动一个背后线程开始回写。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">wb_start_background_writeback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bdi_writeback</span> <span class="token operator">*</span>wb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/*
   * We just wake up the flusher thread. It will perform background
   * writeback as soon as there is no other work to do.
   */</span>
  <span class="token function">wb_wakeup</span><span class="token punctuation">(</span>wb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">wb_wakeup</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bdi_writeback</span> <span class="token operator">*</span>wb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">spin_lock_bh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>work_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">test_bit</span><span class="token punctuation">(</span>WB_registered<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">mod_delayed_work</span><span class="token punctuation">(</span>bdi_wq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>dwork<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">spin_unlock_bh</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>work_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


  <span class="token punctuation">(</span>_tflags<span class="token punctuation">)</span> <span class="token operator">|</span> TIMER_IRQSAFE<span class="token punctuation">)</span><span class="token punctuation">;</span>    \\
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>


<span class="token comment">/* bdi_wq serves all asynchronous writeback tasks */</span>
<span class="token keyword">struct</span> <span class="token class-name">workqueue_struct</span> <span class="token operator">*</span>bdi_wq<span class="token punctuation">;</span>


<span class="token comment">/**
 * mod_delayed_work - modify delay of or queue a delayed work
 * @wq: workqueue to use
 * @dwork: work to queue
 * @delay: number of jiffies to wait before queueing
 *
 * mod_delayed_work_on() on local CPU.
 */</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> bool <span class="token function">mod_delayed_work</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workqueue_struct</span> <span class="token operator">*</span>wq<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">delayed_work</span> <span class="token operator">*</span>dwork<span class="token punctuation">,</span>
            <span class="token keyword">unsigned</span> <span class="token keyword">long</span> delay<span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="保证一致性" tabindex="-1"><a class="header-anchor" href="#保证一致性" aria-hidden="true">#</a> # 保证一致性</h3><p>通过上面的代码，我们可以看出，bdi_wq 是一个全局变量，所有回写的任务都挂在这个队列上。mod_delayed_work 函数负责将一个回写任务 bdi_writeback 挂在这个队列上。bdi_writeback 有个成员变量 struct delayed_work dwork，bdi_writeback 就是以 delayed_work 的身份挂到队列上的，并且把 delay 设置为 0，意思就是一刻不等，马上执行。</p><p>那具体这个任务由谁来执行呢？这里的 bdi 的意思是 backing device info，用于描述后端存储相关的信息。每个块设备都会有这样一个结构，并且在初始化块设备的时候，调用 bdi_init 初始化这个结构，在初始化 bdi 的时候，也会调用 wb_init 初始化 bdi_writeback。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">wb_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bdi_writeback</span> <span class="token operator">*</span>wb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">backing_dev_info</span> <span class="token operator">*</span>bdi<span class="token punctuation">,</span>
       <span class="token keyword">int</span> blkcg_id<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> gfp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  wb<span class="token operator">-&gt;</span>bdi <span class="token operator">=</span> bdi<span class="token punctuation">;</span>
  wb<span class="token operator">-&gt;</span>last_old_flush <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>b_dirty<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>b_io<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>b_more_io<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>b_dirty_time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  wb<span class="token operator">-&gt;</span>bw_time_stamp <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>
  wb<span class="token operator">-&gt;</span>balanced_dirty_ratelimit <span class="token operator">=</span> INIT_BW<span class="token punctuation">;</span>
  wb<span class="token operator">-&gt;</span>dirty_ratelimit <span class="token operator">=</span> INIT_BW<span class="token punctuation">;</span>
  wb<span class="token operator">-&gt;</span>write_bandwidth <span class="token operator">=</span> INIT_BW<span class="token punctuation">;</span>
  wb<span class="token operator">-&gt;</span>avg_write_bandwidth <span class="token operator">=</span> INIT_BW<span class="token punctuation">;</span>
  <span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>work_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>work_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INIT_DELAYED_WORK</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wb<span class="token operator">-&gt;</span>dwork<span class="token punctuation">,</span> wb_workfn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  wb<span class="token operator">-&gt;</span>dirty_sleep <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__INIT_DELAYED_WORK</span><span class="token expression"><span class="token punctuation">(</span>_work<span class="token punctuation">,</span> _func<span class="token punctuation">,</span> _tflags<span class="token punctuation">)</span>      </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span>                </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">INIT_WORK</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>_work<span class="token punctuation">)</span><span class="token operator">-&gt;</span>work<span class="token punctuation">,</span> <span class="token punctuation">(</span>_func<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">__setup_timer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>_work<span class="token punctuation">)</span><span class="token operator">-&gt;</span>timer<span class="token punctuation">,</span> delayed_work_timer_fn<span class="token punctuation">,</span>  </span><span class="token punctuation">\\</span>
            <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_work<span class="token punctuation">)</span><span class="token punctuation">,</span>      </span><span class="token punctuation">\\</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面最重要的是 INIT_DELAYED_WORK。其实就是初始化一个 timer，也即定时器，到时候我们就执行 wb_workfn 这个函数。</p><p>接下来的调用链为：wb_workfn-&gt;wb_do_writeback-&gt;wb_writeback-&gt;writeback_sb_inodes-&gt;__writeback_single_inode-&gt;do_writepages，写入页面到硬盘。</p><p>在调用 write 的最后，当发现缓存的数据太多的时候，会触发回写，这仅仅是回写的一种场景。另外还有几种场景也会触发回写：</p><ul><li>用户主动调用 sync，将缓存刷到硬盘上去，最终会调用 wakeup_flusher_threads，同步脏页；</li><li>当内存十分紧张，以至于无法分配页面的时候，会调用 free_more_memory，最终会调用 wakeup_flusher_threads，释放脏页；</li><li>脏页已经更新了较长时间，时间上超过了 timer，需要及时回写，保持内存和磁盘上数据一致性。</li></ul><h2 id="带缓存的读操作" tabindex="-1"><a class="header-anchor" href="#带缓存的读操作" aria-hidden="true">#</a> 带缓存的读操作</h2><p>带缓存的写分析完了，接下来，我们看带缓存的读，对应的是函数 generic_file_buffered_read。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">generic_file_buffered_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span>iocb<span class="token punctuation">,</span>
    <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>iter<span class="token punctuation">,</span> <span class="token class-name">ssize_t</span> written<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp <span class="token operator">=</span> iocb<span class="token operator">-&gt;</span>ki_filp<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>f_mapping<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode <span class="token operator">=</span> mapping<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token class-name">pgoff_t</span> end_index<span class="token punctuation">;</span>
    <span class="token class-name">loff_t</span> isize<span class="token punctuation">;</span>
    page <span class="token operator">=</span> <span class="token function">find_get_page</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>iocb<span class="token operator">-&gt;</span>ki_flags <span class="token operator">&amp;</span> IOCB_NOWAIT<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> would_block<span class="token punctuation">;</span>
      <span class="token function">page_cache_sync_readahead</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span>
          ra<span class="token punctuation">,</span> filp<span class="token punctuation">,</span>
          index<span class="token punctuation">,</span> last_index <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
      page <span class="token operator">=</span> <span class="token function">find_get_page</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>page <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> no_cached_page<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">PageReadahead</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">page_cache_async_readahead</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span>
          ra<span class="token punctuation">,</span> filp<span class="token punctuation">,</span> page<span class="token punctuation">,</span>
          index<span class="token punctuation">,</span> last_index <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/*
     * Ok, we have the page, and it&#39;s up-to-date, so
     * now we can copy it to user space...
     */</span>
    ret <span class="token operator">=</span> <span class="token function">copy_page_to_iter</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取比写入总体而言简单一些，主要涉及预读的问题。</p><p>在 generic_file_buffered_read 函数中，我们需要先找到 page cache 里面是否有缓存页。如果没有找到，不但读取这一页，还要进行预读，这需要在 page_cache_sync_readahead 函数中实现。预读完了以后，再试一把查找缓存页，应该能找到了。</p><p>如果第一次找缓存页就找到了，我们还是要判断，是不是应该继续预读；如果需要，就调用 page_cache_async_readahead 发起一个异步预读。</p><p>最后，copy_page_to_iter 会将内容从内核缓存页拷贝到用户内存空间。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>这一节对于读取和写入的分析就到这里了。我们发现这个过程还是很复杂的，我这里画了一张调用图，你可以看到调用过程。</p><p>在系统调用层我们需要仔细学习 read 和 write。在 VFS 层调用的是 vfs_read 和 vfs_write 并且调用 file_operation。在 ext4 层调用的是 ext4_file_read_iter 和 ext4_file_write_iter。</p><p>接下来就是分叉。你需要知道缓存 I/O 和直接 I/O。直接 I/O 读写的流程是一样的，调用 ext4_direct_IO，再往下就调用块设备层了。缓存 I/O 读写的流程不一样。对于读，从块设备读取到缓存中，然后从缓存中拷贝到用户态。对于写，从用户态拷贝到缓存，设置缓存页为脏，然后启动一个线程写入块设备。</p><img src="`+l+'" alt="img" style="zoom:25%;"><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>你知道如何查询和清除文件系统缓存吗？</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>查看文件缓存:通过free命令中的buff/cache一栏的信息即可看到文件缓存的用量。<br> 清除缓存：sync; echo 1 &gt; /proc/sys/vm/drop_caches<br> free命令可以查看，echo 3 &gt; /proc/sys/vm/drop_caches可以清除<br> 作者回复: 赞</p><ul><li>系统调用层和虚拟文件系统层</li><li>调用 read/write 进行读写 → vfs_read/write → __vfs_read/write <ul><li>打开文件时创建 struct file, 其中有 file_operations, 虚拟文件系统调用 operations 中的 read/write</li></ul></li><li>ext4 文件系统层</li><li>调用到 generic_file_read/write_iter, 其中判断是否需要使用缓存 <ul><li>缓存, 即内存中一块空间, 可分为两类 I/O</li><li>缓存 I/O: 默认模式, 读操作先检测缓存区中是否有, 若无则从文件系统读取并缓存; 写操作直接从用户空间赋值到内核缓存中, 再由 OS 决定或用户调用 sync 写回磁盘 <ul><li>直接 I/O: 程序直接访问磁盘, 不经过缓存</li></ul></li><li>直接 I/O 过程:</li><li>读: 若设置了 IOCB_DIRECT, 调用 address_space 的 direct_io 直接读取硬盘( 文件与内存页映射) ; 若使用缓存也要调用 address_sapce 进行文件与内存页的映射 <ul><li>写: 若设置了 IOCB_DIRECT, 调用块设备驱动直接写入磁盘</li></ul></li><li>带缓存写过程</li><li>在 while 循环中, 找出写入影响的页, 并依次写入, 完成以下四步<br> - 每一页调用 write_begin 做准备<br> - 将写入内容从用户态拷贝到内核态<br> - 调用 write_end 完成写入<br> - 查看脏页 (未写入磁盘的缓存) 是否过多, 是否需要写回磁盘 <ul><li>write_begin 做准备</li><li>ext4 是日志文件系统, 通过日志避免断电数据丢失 <ul><li>文件分为元数据和数据, 其操作日志页分开维护</li><li>Journal 模式下: 写入数据前, 元数据及数据日志必须落盘, 安全但性能差 <ul><li>Order 模式下: 只记录元数据日志, 写日志前, 数据必须落盘, 折中</li><li>Writeback 模式下: 仅记录元数据日志, 数据不用先落盘</li></ul></li><li>write_begin 准备日志, 并得到应该写入的缓存页</li><li>内核中缓存以页为单位, 打开文件的 file 结构中用 radix tree 维护文件的缓存页</li></ul></li><li>iov_iter_copy_from_user_atomic 拷贝内容, kmap_atomic 将缓存页映射到内核虚拟地址; 将拥护他数据拷贝到内核态; kunmap_aotmic 解映射</li><li>write_end, 先完成日志写入 并将缓存设置为脏页</li><li>调用 balance_dirty_pages_ratelimited 若发先脏页超额, 启动一个线程执行回写.</li><li>回写任务 delayed_work 挂在 bdi_wq 队列, 若delay 设为 0, 马上执行回写 <ul><li>bdi = backing device info 描述块设备信息, 初始化块设备时回初始化 timer, 到时会执行写回函数</li></ul></li><li>另外其他情况也会回写</li><li>用户调用 sync 或内存紧张时, 回调用 wakeup_flusher_threads 刷回脏页 <ul><li>脏页时间超过 timer, 及时回写</li></ul></li></ul></li><li>带缓存读</li><li>generic_file_buffered_read 从 page cache 中判断是否由缓存页<br> - 若没则从文件系统读取并预读并缓存, 再次查找缓存页<br> - 若有, 还需判断是否需要预读, 若需要调用 page_cache_async_readahead<br> - 最后调用 copy_page_to_user 从内核拷贝到用户空间</li></ul></li></ul><p>“ext4_direct_IO 最终会调用到 __blockdev_direct_IO-&gt;do_blockdev_direct_IO，这就跨过了缓存层，直接到了文件系统的设备驱动层。” 觉得这个说法并不准确，绕过缓存，但并没有直接到达设备驱动层，而是通用块层，主要用于io合并之类操作，然后才是设备驱动层。<br> 作者回复: 是的。赞，谢谢指正</p><p>老师，我想问下，在学习mysql实战45讲这个课程里面，讲了数据库也有脏页和干净页，以及如何将脏页刷回磁盘的几个时机，请问这个机制是和本节课讲的操作系统的机制是一回事吗？谢谢老师<br> 作者回复: 不一样，那是数据库层次的，不是操作系统层次的。mysql 数据库读写磁盘使用的是 direct IO , 然后数据库内部自己实现了一套缓存机制，数据库并没有使用操作系统中文件系统的 page cache。大多数中间件，都是这样搞的。思想是一样的</p><p>请问 ext4的Journal 模式有什么优势呢，有日志逐条落盘的这个开销，为啥write不直接落盘呢？<br> 作者回复: 写入日志由于是顺序的，写入速度快很多</p><p>请教老师个问题1.系统默认脏页多长时间或者数量是多少的时候触发事件？2.如果脏页在回写过程中出现故障如何保证数据完整性？3.这里只是提到ext4，其他文件系统跟ext4相比原理一样吗？比如xfs？<br> 作者回复: vm.dirty_background_bytes = 0<br> vm.dirty_background_ratio = 10<br> vm.dirty_bytes = 0<br> vm.dirty_expire_centisecs = 3000<br> vm.dirty_ratio = 30<br> vm.dirty_writeback_centisecs = 500<br> 每个文件系统各自有各自的格式</p>',93),k={href:"https://garlicspace.com/2021/03/30/%e6%9f%a5%e8%af%a2%e5%92%8c%e6%b8%85%e9%99%a4%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e7%bc%93%e5%ad%98/",target:"_blank",rel:"noopener noreferrer"},d=a("<p>缓存利用局部性原理提高数据的读写速度，同时日志系统能够使随机读写变为顺序读写，也能提高速度。</p><p>这里建议作者明确说一下bio的概念，不管是直接io还是走缓存，最后都是会封装成一个bio请求到block层的。<br> 另外，这里有一句说法，所有的 异步IO 都是 直接IO ，这点可以关联起来看</p><p>第二遍： 与CPU的回写（高速缓存）策略不同的是，CPU是第二次使用脏Cache Line时立即回写。而这里，要达到一定数量的脏页才回写。为此，还需要配合更多的触发回写：长时间未回写，缓存空间紧张，用户主动sync。<br> 此外，回写采用的是异步线程，也可能导致数据丢失。因此还提供了日志。默认策略是：order。这一切都是为了性能服务的。但这个日志策略，还考虑了数据安全跟机制性能，没有把路封死。让用户自行选择！在开发基础设施的过程中，就应该同时考虑多种场景，不帮用户选择，让他自己选择？</p><p>缓存I/O 内核缓存区 等于 内核缓冲区么 ？ 缓存，缓冲含义不是不同的吗？<br> 作者回复: 是一个意思，用词有点随意了</p><p>脏页在缓存中，如果掉电了，怎么保证回写到硬盘<br> 网友回复：遵循日志先写，重启后可以通过日志找到某些数据并写到硬盘，但是如果在日志落盘前就掉电了，那么这部分就丢了，在mysql数据库应该是对这部分事务进行回滚处理<br> 网友回复：文件系统掉电总会丢失数据的，软件上无法保证的，主动写回只是影响了丢多少数据的问题。<br> 网友回复：总会有漏掉的可能，除非自己主动回写。</p>",5);function v(_,m){const p=e("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("free 查看Cache分配使用情况，其中 page cache是针对 file systems ， buffer是针对 block devices 两者是在不同时期不同场景下涉及的缓存机制，kernel2.4版本之前是分开的，并存的。之后版本进行了融合， 清除缓存可以操作 /proc/sys/vm/drop_caches， "),n("a",k,[s("学习笔记"),i(p)])]),d])}const w=t(u,[["render",v],["__file","J30-文件缓存机制.html.vue"]]);export{w as default};
