import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as a,c as n,a as e,b as o,e as s,d as p}from"./app-cdabc73c.js";const d="/assets/640-1691474544412-258-e7799819.png",c="/assets/640-1691474544412-259-eae134f4.png",l="/assets/640-1691474544412-260-a5a60925.png",g="/assets/640-1691474544412-261-f70e4ad5.png",_={},h=e("h1",{id:"_37-白泽带你读论文丨digtool-a-virtualization-based-framework-for-detecting",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_37-白泽带你读论文丨digtool-a-virtualization-based-framework-for-detecting","aria-hidden":"true"},"#"),o(" 37-白泽带你读论文丨Digtool: A Virtualization-Based Framework for Detecting")],-1),m=e("p",null,[e("strong",null,"Digtool: A Virtualization-Based Framework for Detecting Kernel Vulnerabilities")],-1),f={href:"https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-pan.pdf",target:"_blank",rel:"noopener noreferrer"},u=p('<p>本文发表在USENIX Security 2017，第一作者是来自<u>360冰刃实验室的潘剑锋</u>。</p><h2 id="_1-主要内容" tabindex="-1"><a class="header-anchor" href="#_1-主要内容" aria-hidden="true">#</a> <strong>1 主要内容</strong></h2><p>目前，针对操作系统的自动化内核漏洞挖掘工具主要分<em>静态源代码分析</em>和<em>动态执行分析</em>两个方向。尽管静态分析可以加大分析代码的覆盖率，从而找到更多的bug，但是对于闭源且规模庞大的操作系统，比如Windows，仍然依赖于动态分析技术来进行漏洞挖掘，而针对这种二进制层面的内核漏洞挖掘领域尚存在较大的空白，主要的技术限制有：</p><p>（1）内核二进制程序庞大，导致动态分析对性能的需求大；</p><p>（2）现有的技术很难较全面地捕捉到内核运行过程中的动态行为，从而辅助漏洞发现的过程。</p><p>因此，为了解决以上的问题，作者提出了一个基于虚拟化技术的自动化内核漏洞挖掘工具：Digtool，通过监控内核对象分配、内核内存访问、线程调度以及函数调用等，从而挖掘Windows系统以及Windows设备驱动中的UNPROBE、TOCTTOU、UAF、OOB四种类型的漏洞。最后作者使用该工具发现了45个漏洞，影响的操作系统版本包括Windows 7和Windows 10等。</p><h2 id="_2-设计与实现" tabindex="-1"><a class="header-anchor" href="#_2-设计与实现" aria-hidden="true">#</a> <strong>2 设计与实现</strong></h2><figure><img src="'+d+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>如图是Digtool的设计架构图，其各个模块分布在不同的系统层次中，包括在Hypervisor，客户机的内核以及客户机的用户空间中。主要包含以下六个工作流程：</p><p>（1）首先启动Hypervisor时，VMM虚拟机监控模块会检测当前机器上硬件环境的兼容性等，以确保工具能顺利运行。之后初始化Hypervisor，并加载一个原始的操作系统镜像到一个VM虚拟机（后续称客户机）中运行。</p><p>（2）处于客户机用户空间的Loader模块会读入一个配置文件，包含需要监测的系统调用函数，并将该信息通过其内核空间的Middleware模块传递到Hypervisor中，使得Hypervisor可以检测相应系统调用的漏洞。</p><p>（3）之后Loader模块会启动Fuzzer模块来调用系统调用，通过调整系统调用的参数，从而探索尽可能多的路径，使得工具可以挖掘尽可能多的漏洞。</p><p>（4）在Fuzz的过程中，Hypervisor会和处于内核中的Middlerware模块相互配合，从两个方面进行监控和漏洞检测：</p><p><em>a. Interface Detection（接口检测）</em>: 监控客户机用户层程序在调用系统调用时传递到内核中的参数。通过跟踪这些参数在内核中被使用和被检查时发生的内存位置，从而挖掘UNPROBE和TOCTTOU类型的漏洞；</p><p><em>b. Memory Detection（内存检测）</em>: 监控客户机内核中的非法内存访问情况，从而挖掘UAF和OOB类型的漏洞。其中Hypervisor使用了SPT（Shadow Page Table）技术来监控内核的内存访问。为了提高性能，Middlerware会hook内核一些特定的内存操作函数来动态调整需要监控的内存范围。</p><p>（5）对于接口检测过程中发现的潜在漏洞，Middleware会通过一个工作线程把漏洞的相关信息（包括系统调用号、事件类型、事件发生的时间、指令地址以及访问的内存）记录到日志文件中。使得处于客户机用户空间的日志分析模块可以通过分析日志文件，从而查找相应的漏洞。</p><p>（6）对于内存检测过程中发现的潜在漏洞，Middlerware会直接中断客户机，等待外部调试工具（如WinDbg）连接，人工进行后续的漏洞分析和确认。</p><h2 id="_3-实验与分析" tabindex="-1"><a class="header-anchor" href="#_3-实验与分析" aria-hidden="true">#</a> <strong>3 实验与分析</strong></h2><p>作者选择了一些软件产品进行测试，包括五个反病毒软件以及Windows操作系统，实验环境为Windows 7和Windows 10。其中反病毒软件用于测试UNPROBE和TOCTTOU（Time-Of-Check-To-Time-Of-Use）漏洞，Windows操作系统用于测试UAF（Use After Free）和OOB（Out Of Bound）。这里选择反病毒软件作为测试的原因是因为该类软件通常会在驱动层面hook许多用户程序调用的系统调用进行操作，从而实现底层的行为监控和拦截。</p><p><strong>（1）工具有效性评估</strong>：结果表明，DigTool总共在五个反病毒软件中检测到了23个UNPROBE漏洞以及18个TOCTTOU漏洞，在Windows设备驱动中检测到了1个UAF漏洞和3个OOB漏洞。</p><p><img src="'+c+'" alt="图片" loading="lazy"> <img src="'+l+'" alt="图片" loading="lazy"></p><p><strong>（2）工具性能评估</strong>：作者将Digtool和Bochspwn（一个基于Boches仿真器的内核漏洞检测工具）在挖掘TOCTTOU漏洞上进行性能的比较。作者选择了十个最经常使用且最经常被反病毒软件hook的系统调用进行测试，此外还加入了一个常用的软件WinRAR以保证实验的完整性。</p><p>结果如图所示，其中绿色表示Bochspwn，红色表示不监控指定的系统调用下的Digtool，紫色表示监控配置文件中指定的系统调用并记录相应行为下的Digtool，可以看到Bochspwn的性能消耗最大，Digtool的开销远远小于Bochspwn的开销。</p><figure><img src="'+g+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_4-评价" tabindex="-1"><a class="header-anchor" href="#_4-评价" aria-hidden="true">#</a> <strong>4 评价</strong></h2><p>Digtool是第一个实现了<em>基于虚拟化技术</em>进行操作系统层面的<em>自动化漏洞挖掘的工具</em>。通过独立实现的一套<em>轻量级Hypervisor</em>，Digtool可以获取<strong>全面的内存监控数据</strong>，从而高效挖掘Windows操作系统以及设备驱动中的<code>UNPROBE、TOCTTOU、UAF、OOB</code>四种漏洞。可以说是针对<u>闭源</u>操作系统的漏洞挖掘领域内的一个重大技术突破。</p><p>不过Digtool虽然在设计上已经尽可能的降低了系统开销，且从实验结果来看其性能也比现有的内核漏洞挖掘工具<mark>Bochspwn</mark>更佳，但是其需要在Hypervisor和客户机之间进行频繁的切换，从而实现线程的监控。因此产生了比较大的性能开销。</p><p>但总的来说，由于Digtool是基于虚拟化技术实现的，其Hypervisor和平台无关，<em>因此其可移植性较强</em>，只要修改位于客户机内核的组件Middleware，就可以支持其他操作系统平台层面的漏洞挖掘，因此该工具以及相关的工作还有更多的发展空间。</p>',28);function w(O,T){const r=t("ExternalLinkIcon");return a(),n("div",null,[h,m,e("p",null,[o("论文链接："),e("a",f,[o("https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-pan.pdf"),s(r)])]),u])}const y=i(_,[["render",w],["__file","37-白泽带你读论文丨Digtool A Virtualization-Based Framework for Detecting.html.vue"]]);export{y as default};
