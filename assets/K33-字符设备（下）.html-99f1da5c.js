import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-cdabc73c.js";const e="/assets/dd492efdcf956cb22ce3d51592cdc113-cd5f9097.png",p="/assets/26bde4fa2279f66098856c5b2b6d308f-f9d10e48.png",c={},o=t(`<h1 id="_33-字符设备-下-如何建立直销模式" tabindex="-1"><a class="header-anchor" href="#_33-字符设备-下-如何建立直销模式" aria-hidden="true">#</a> 33 | 字符设备（下）：如何建立直销模式？</h1><p>上一节，我们讲了一个设备能够被打开、能够读写，主流的功能基本就完成了。我们讲输入输出设备的时候说到，如果一个设备有事情需要通知操作系统，会通过中断和设备驱动程序进行交互，今天我们就来解析中断处理机制。</p><h2 id="中断将信息-设备驱动程序" tabindex="-1"><a class="header-anchor" href="#中断将信息-设备驱动程序" aria-hidden="true">#</a> 中断将信息 -&gt; 设备驱动程序</h2><p>鼠标就是通过中断，将自己的位置和按键信息，传递给设备驱动程序。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">logibm_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">input_dev</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">request_irq</span><span class="token punctuation">(</span>logibm_irq<span class="token punctuation">,</span> logibm_interrupt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;logibm&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_ERR <span class="token string">&quot;logibm.c: Can&#39;t allocate irq %d\\n&quot;</span><span class="token punctuation">,</span> logibm_irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>LOGIBM_ENABLE_IRQ<span class="token punctuation">,</span> LOGIBM_CONTROL_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token class-name">irqreturn_t</span> <span class="token function">logibm_interrupt</span><span class="token punctuation">(</span><span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>dev_id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buttons<span class="token punctuation">;</span>


  <span class="token function">outb</span><span class="token punctuation">(</span>LOGIBM_READ_X_LOW<span class="token punctuation">,</span> LOGIBM_CONTROL_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">inb</span><span class="token punctuation">(</span>LOGIBM_DATA_PORT<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>LOGIBM_READ_X_HIGH<span class="token punctuation">,</span> LOGIBM_CONTROL_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dx <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">inb</span><span class="token punctuation">(</span>LOGIBM_DATA_PORT<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>LOGIBM_READ_Y_LOW<span class="token punctuation">,</span> LOGIBM_CONTROL_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">inb</span><span class="token punctuation">(</span>LOGIBM_DATA_PORT<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">outb</span><span class="token punctuation">(</span>LOGIBM_READ_Y_HIGH<span class="token punctuation">,</span> LOGIBM_CONTROL_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  buttons <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span>LOGIBM_DATA_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dy <span class="token operator">|=</span> <span class="token punctuation">(</span>buttons <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
  buttons <span class="token operator">=</span> <span class="token operator">~</span>buttons <span class="token operator">&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>


  <span class="token function">input_report_rel</span><span class="token punctuation">(</span>logibm_dev<span class="token punctuation">,</span> REL_X<span class="token punctuation">,</span> dx<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">input_report_rel</span><span class="token punctuation">(</span>logibm_dev<span class="token punctuation">,</span> REL_Y<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">input_report_key</span><span class="token punctuation">(</span>logibm_dev<span class="token punctuation">,</span> BTN_RIGHT<span class="token punctuation">,</span>  buttons <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">input_report_key</span><span class="token punctuation">(</span>logibm_dev<span class="token punctuation">,</span> BTN_MIDDLE<span class="token punctuation">,</span> buttons <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">input_report_key</span><span class="token punctuation">(</span>logibm_dev<span class="token punctuation">,</span> BTN_LEFT<span class="token punctuation">,</span>   buttons <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">input_sync</span><span class="token punctuation">(</span>logibm_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token function">outb</span><span class="token punctuation">(</span>LOGIBM_ENABLE_IRQ<span class="token punctuation">,</span> LOGIBM_CONTROL_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> IRQ_HANDLED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="中断处理函数" tabindex="-1"><a class="header-anchor" href="#中断处理函数" aria-hidden="true">#</a> 中断处理函数</h2><p>要处理中断，需要有一个中断处理函数。定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">irqreturn_t</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">irq_handler_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> dev_id<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">/**
 * enum irqreturn
 * @IRQ_NONE    interrupt was not from this device or was not handled
 * @IRQ_HANDLED    interrupt was handled by this device
 * @IRQ_WAKE_THREAD  handler requests to wake the handler thread
 */</span>
<span class="token keyword">enum</span> <span class="token class-name">irqreturn</span> <span class="token punctuation">{</span>
  IRQ_NONE    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  IRQ_HANDLED    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  IRQ_WAKE_THREAD    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，irq 是一个整数，是中断信号。dev_id 是一个 void * 的通用指针，主要用于区分同一个中断处理函数对于不同设备的处理。</p><p>这里的返回值有三种：</p><ol><li><code>IRQ_NONE</code> 表示不是我的中断，不归我管；</li><li><code>IRQ_HANDLED</code> 表示处理完了的中断；</li><li><code>IRQ_WAKE_THREAD</code> 表示有一个进程正在等待这个中断，中断处理完了，应该唤醒它。</li></ol><p>上面的例子中，logibm_interrupt 这个中断处理函数，先是获取了 x 和 y 的移动坐标，以及左中右的按键，上报上去，然后返回 IRQ_HANDLED，这表示处理完毕。</p><p>其实，写一个真正生产用的中断处理程序还是很复杂的。当一个中断信号 A 触发后，正在处理的过程中，这个中断信号 A 是应该暂时关闭的，这样是为了防止再来一个中断信号 A，在当前的中断信号 A 的处理过程中插一杠子。但是，这个暂时关闭的时间应该多长呢？</p><p>如果太短了，应该原子化处理完毕的没有处理完毕，又被另一个中断信号 A 中断了，很多操作就不正确了；如果太长了，一直关闭着，新的中断信号 A 进不来，系统就显得很慢。所以，很多中断处理程序将整个中断要做的事情分成两部分，称为上半部和下半部，或者成为关键处理部分和延迟处理部分。在中断处理函数中，仅仅处理关键部分，完成了就将中断信号打开，使得新的中断可以进来，需要比较长时间处理的部分，也即延迟部分，往往通过工作队列等方式慢慢处理。</p><p>这个写起来可以是一本书了，推荐你好好读一读《Linux Device Drivers》这本书，这里我就不详细介绍了。</p><h2 id="注册中断处理函数" tabindex="-1"><a class="header-anchor" href="#注册中断处理函数" aria-hidden="true">#</a> 注册中断处理函数</h2><p>有了中断处理函数，接下来要调用 request_irq 来注册这个中断处理函数。request_irq 有这样几个参数：</p><ul><li><code>unsigned int irq</code> 是中断信号；</li><li><code>irq_handler_t handler</code> 是中断处理函数；</li><li><code>unsigned long flags</code> 是一些标识位；</li><li><code>const char *name</code> 是设备名称；</li><li><code>void *dev</code> 这个通用指针应该和中断处理函数的 void *dev 相对应。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> __must_check
<span class="token function">request_irq</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token class-name">irq_handler_t</span> handler<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">request_threaded_irq</span><span class="token punctuation">(</span>irq<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> flags<span class="token punctuation">,</span> name<span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中断处理函数被注册到哪里去呢？让我们沿着 request_irq 看下去。request_irq 调用的是 request_threaded_irq。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">request_threaded_irq</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token class-name">irq_handler_t</span> handler<span class="token punctuation">,</span>
       <span class="token class-name">irq_handler_t</span> thread_fn<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> irqflags<span class="token punctuation">,</span>
       <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>devname<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>dev_id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">irqaction</span> <span class="token operator">*</span>action<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">irq_desc</span> <span class="token operator">*</span>desc<span class="token punctuation">;</span>
  <span class="token keyword">int</span> retval<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  desc <span class="token operator">=</span> <span class="token function">irq_to_desc</span><span class="token punctuation">(</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  action <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">irqaction</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  action<span class="token operator">-&gt;</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
  action<span class="token operator">-&gt;</span>thread_fn <span class="token operator">=</span> thread_fn<span class="token punctuation">;</span>
  action<span class="token operator">-&gt;</span>flags <span class="token operator">=</span> irqflags<span class="token punctuation">;</span>
  action<span class="token operator">-&gt;</span>name <span class="token operator">=</span> devname<span class="token punctuation">;</span>
  action<span class="token operator">-&gt;</span>dev_id <span class="token operator">=</span> dev_id<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  retval <span class="token operator">=</span> <span class="token function">__setup_irq</span><span class="token punctuation">(</span>irq<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于每一个中断，都有一个对中断的描述结构 struct irq_desc。它有一个重要的成员变量是 struct irqaction，用于表示处理这个中断的动作。如果我们仔细看这个结构，会发现，它里面有 next 指针，也就是说，这是一个链表，对于这个中断的所有处理动作，都串在这个链表上。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">irq_desc</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">irqaction</span>  <span class="token operator">*</span>action<span class="token punctuation">;</span>  <span class="token comment">/* IRQ action list */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">module</span>    <span class="token operator">*</span>owner<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span>    <span class="token operator">*</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment">/**
 * struct irqaction - per interrupt action descriptor
 * @handler:  interrupt handler function
 * @name:  name of the device
 * @dev_id:  cookie to identify the device
 * @percpu_dev_id:  cookie to identify the device
 * @next:  pointer to the next irqaction for shared interrupts
 * @irq:  interrupt number
 * @flags:  flags (see IRQF_* above)
 * @thread_fn:  interrupt handler function for threaded interrupts
 * @thread:  thread pointer for threaded interrupts
 * @secondary:  pointer to secondary irqaction (force threading)
 * @thread_flags:  flags related to @thread
 * @thread_mask:  bitmask for keeping track of @thread activity
 * @dir:  pointer to the proc/irq/NN/name entry
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">irqaction</span> <span class="token punctuation">{</span>
  <span class="token class-name">irq_handler_t</span>    handler<span class="token punctuation">;</span>
  <span class="token keyword">void</span>      <span class="token operator">*</span>dev_id<span class="token punctuation">;</span>
  <span class="token keyword">void</span> __percpu    <span class="token operator">*</span>percpu_dev_id<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">irqaction</span>  <span class="token operator">*</span>next<span class="token punctuation">;</span>
  <span class="token class-name">irq_handler_t</span>    thread_fn<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_struct</span>  <span class="token operator">*</span>thread<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">irqaction</span>  <span class="token operator">*</span>secondary<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    irq<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    flags<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span>    thread_flags<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span>    thread_mask<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span>    <span class="token operator">*</span>name<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">proc_dir_entry</span>  <span class="token operator">*</span>dir<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个中断处理动作的结构 struct irqaction，都有以下成员：</p><ul><li>中断处理函数 <code>handler</code>；</li><li><code>void *dev_id</code> 为设备 id；</li><li><code>irq</code> 为中断信号；</li><li>如果中断处理函数在单独的线程运行，则有 thread_fn 是线程的执行函数，thread 是线程的 task_struct。</li></ul><p>在 request_threaded_irq 函数中，irq_to_desc 根据中断信号查找中断描述结构。如何查找呢？这就要区分情况。一般情况下，所有的 struct irq_desc 都放在一个数组里面，我们直接按下标查找就可以了。如果配置了 CONFIG_SPARSE_IRQ，那中断号是不连续的，就不适合用数组保存了，</p><p>我们可以放在一棵基数树上。我们不是第一次遇到这个数据结构了。这种结构对于从某个整型 key 找到 value 速度很快，中断信号 irq 是这个整数。通过它，我们很快就能定位到对应的 struct irq_desc。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SPARSE_IRQ</span></span>
<span class="token keyword">static</span> <span class="token function">RADIX_TREE</span><span class="token punctuation">(</span>irq_desc_tree<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">irq_desc</span> <span class="token operator">*</span><span class="token function">irq_to_desc</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> irq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">radix_tree_lookup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>irq_desc_tree<span class="token punctuation">,</span> irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span> <span class="token comment">/* !CONFIG_SPARSE_IRQ */</span></span>
<span class="token keyword">struct</span> <span class="token class-name">irq_desc</span> irq_desc<span class="token punctuation">[</span>NR_IRQS<span class="token punctuation">]</span> __cacheline_aligned_in_smp <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> NR_IRQS<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">irq_desc</span> <span class="token operator">*</span><span class="token function">irq_to_desc</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> irq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>irq <span class="token operator">&lt;</span> NR_IRQS<span class="token punctuation">)</span> <span class="token operator">?</span> irq_desc <span class="token operator">+</span> irq <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* !CONFIG_SPARSE_IRQ */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="中断抽象层" tabindex="-1"><a class="header-anchor" href="#中断抽象层" aria-hidden="true">#</a> 中断抽象层</h2><p>为什么中断信号会有稀疏，也就是不连续的情况呢？这里需要说明一下，这里的 irq 并不是真正的、物理的中断信号，而是一个抽象的、虚拟的中断信号。因为物理的中断信号和硬件关联比较大，中断控制器也是各种各样的。</p><p><strong>作为内核，我们不可能写程序的时候，适配各种各样的硬件中断控制器</strong>，因而就需要有一层中断抽象层。这里虚拟中断信号到中断描述结构的映射，就是抽象中断层的主要逻辑。</p><p>下面我们讲真正中断响应的时候，会涉及物理中断信号。可以想象，如果只有一个 CPU，一个中断控制器，则基本能够保证从物理中断信号到虚拟中断信号的映射是线性的，这样用数组表示就没啥问题，但是如果有多个 CPU，多个中断控制器，每个中断控制器各有各的物理中断信号，就没办法保证虚拟中断信号是连续的，所以就要用到基数树了。</p><p>接下来，request_threaded_irq 函数分配了一个 struct irqaction，并且初始化它，接着调用 __setup_irq。在这个函数里面，如果 struct irq_desc 里面已经有 struct irqaction 了，我们就将新的 struct irqaction 挂在链表的末端。如果设定了以单独的线程运行中断处理函数，setup_irq_thread 就会创建这个内核线程，wake_up_process 会唤醒它。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">__setup_irq</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">irq_desc</span> <span class="token operator">*</span>desc<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">irqaction</span> <span class="token operator">*</span>new<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">irqaction</span> <span class="token operator">*</span>old<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>old_ptr<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span> thread_mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">,</span> nested<span class="token punctuation">,</span> shared <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  new<span class="token operator">-&gt;</span>irq <span class="token operator">=</span> irq<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/*
   * Create a handler thread when a thread function is supplied
   * and the interrupt does not nest into another interrupt
   * thread.
   */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>new<span class="token operator">-&gt;</span>thread_fn <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>nested<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">=</span> <span class="token function">setup_irq_thread</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> irq<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  old_ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>desc<span class="token operator">-&gt;</span>action<span class="token punctuation">;</span>
  old <span class="token operator">=</span> <span class="token operator">*</span>old_ptr<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>old<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* add new interrupt at end of irq queue */</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
      thread_mask <span class="token operator">|=</span> old<span class="token operator">-&gt;</span>thread_mask<span class="token punctuation">;</span>
      old_ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>old<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
      old <span class="token operator">=</span> <span class="token operator">*</span>old_ptr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token operator">*</span>old_ptr <span class="token operator">=</span> new<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>new<span class="token operator">-&gt;</span>thread<span class="token punctuation">)</span>
    <span class="token function">wake_up_process</span><span class="token punctuation">(</span>new<span class="token operator">-&gt;</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">setup_irq_thread</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">irqaction</span> <span class="token operator">*</span>new<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> irq<span class="token punctuation">,</span> bool secondary<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sched_param</span> param <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>sched_priority <span class="token operator">=</span> MAX_USER_RT_PRIO<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>


  t <span class="token operator">=</span> <span class="token function">kthread_create</span><span class="token punctuation">(</span>irq_thread<span class="token punctuation">,</span> new<span class="token punctuation">,</span> <span class="token string">&quot;irq/%d-%s&quot;</span><span class="token punctuation">,</span> irq<span class="token punctuation">,</span> new<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sched_setscheduler_nocheck</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> SCHED_FIFO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">get_task_struct</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  new<span class="token operator">-&gt;</span>thread <span class="token operator">=</span> t<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此为止，request_irq 完成了它的使命。总结来说，它就是根据中断信号 irq，找到基数树上对应的 irq_desc，然后将新的 irqaction 挂在链表上。</p><h2 id="中断发生后的整个处理过程" tabindex="-1"><a class="header-anchor" href="#中断发生后的整个处理过程" aria-hidden="true">#</a> 中断发生后的整个处理过程</h2><p>接下来，我们就来看，真正中断来了的时候，会发生一些什么。</p><p>真正中断的发生还是要从硬件开始。这里面有四个层次。</p><ul><li>第一个层次是外部设备给中断控制器发送物理中断信号。</li><li>第二个层次是中断控制器将物理中断信号转换成为中断向量 interrupt vector，发给各个 CPU。</li><li>第三个层次是每个 CPU 都会有一个中断向量表，根据 interrupt vector 调用一个 IRQ 处理函数。注意这里的 IRQ 处理函数还不是咱们上面指定的 irq_handler_t，到这一层还是 CPU 硬件的要求。</li><li>第四个层次是在 IRQ 处理函数中，将 interrupt vector 转化为抽象中断层的中断信号 irq，调用中断信号 irq 对应的中断描述结构里面的 irq_handler_t。</li></ul><img src="`+e+`" alt="img" style="zoom:25%;"><p>在这里，我们不解析硬件的部分，我们从 CPU 收到中断向量开始分析。</p><p>CPU 收到的中断向量是什么样的呢？这个定义在文件 arch/x86/include/asm/<code>irq_vectors.h</code> 中。这里面的注释非常好，建议你仔细阅读。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * Linux IRQ vector layout.
 *
 * There are 256 IDT entries (per CPU - each entry is 8 bytes) which can
 * be defined by Linux. They are used as a jump table by the CPU when a
 * given vector is triggered - by a CPU-external, CPU-internal or
 * software-triggered event.
 *
 * Linux sets the kernel code address each entry jumps to early during
 * bootup, and never changes them. This is the general layout of the
 * IDT entries:
 *
 *  Vectors   0 ...  31 : system traps and exceptions - hardcoded events
 *  Vectors  32 ... 127 : device interrupts
 *  Vector  128         : legacy int80 syscall interface
 *  Vectors 129 ... INVALIDATE_TLB_VECTOR_START-1 except 204 : device interrupts
 *  Vectors INVALIDATE_TLB_VECTOR_START ... 255 : special interrupts
 *
 * 64-bit x86 has per CPU IDT tables, 32-bit has one shared IDT table.
 *
 * This file enumerates the exact layout of them:
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FIRST_EXTERNAL_VECTOR</span>    <span class="token expression"><span class="token number">0x20</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IA32_SYSCALL_VECTOR</span>    <span class="token expression"><span class="token number">0x80</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NR_VECTORS</span>       <span class="token expression"><span class="token number">256</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FIRST_SYSTEM_VECTOR</span>    <span class="token expression">NR_VECTORS</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这些注释，我们可以看出，CPU 能够处理的中断总共 256 个，用宏 NR_VECTOR 或者 FIRST_SYSTEM_VECTOR 表示。</p><p>为了处理中断，CPU 硬件要求每一个 CPU 都有一个中断向量表，通过 load_idt 加载，里面记录着每一个中断对应的处理方法，这个中断向量表定义在文件 arch/x86/kernel/<code>traps.c</code> 中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>gate_desc idt_table<span class="token punctuation">[</span>NR_VECTORS<span class="token punctuation">]</span> __page_aligned_bss<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于一个 CPU 可以处理的中断被分为几个部分，第一部分 0 到 31 的前 32 位是系统陷入或者系统异常，这些错误无法屏蔽，一定要处理。</p><p>这些中断的处理函数在系统初始化的时候，在 start_kernel 函数中调用过 trap_init()。这个咱们讲系统初始化和系统调用的时候，都大概讲过这个函数，这里还需要仔细看一下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> __init <span class="token function">trap_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">set_intr_gate</span><span class="token punctuation">(</span>X86_TRAP_DE<span class="token punctuation">,</span> divide_error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//各种各样的set_intr_gate，不都贴在这里了，只贴一头一尾</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">set_intr_gate</span><span class="token punctuation">(</span>X86_TRAP_XF<span class="token punctuation">,</span> simd_coprocessor_error<span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token comment">/* Reserve all the builtin and the syscall vector: */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> FIRST_EXTERNAL_VECTOR<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token function">set_bit</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> used_vectors<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_X86_32</span></span>
  <span class="token function">set_system_intr_gate</span><span class="token punctuation">(</span>IA32_SYSCALL_VECTOR<span class="token punctuation">,</span> entry_INT80_32<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">set_bit</span><span class="token punctuation">(</span>IA32_SYSCALL_VECTOR<span class="token punctuation">,</span> used_vectors<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>


  <span class="token comment">/*
   * Set the IDT descriptor to a fixed read-only location, so that the
   * &quot;sidt&quot; instruction will not leak the location of the kernel, and
   * to defend the IDT against arbitrary memory write vulnerabilities.
   * It will be reloaded in cpu_init() */</span>
  <span class="token function">__set_fixmap</span><span class="token punctuation">(</span>FIX_RO_IDT<span class="token punctuation">,</span> <span class="token function">__pa_symbol</span><span class="token punctuation">(</span>idt_table<span class="token punctuation">)</span><span class="token punctuation">,</span> PAGE_KERNEL_RO<span class="token punctuation">)</span><span class="token punctuation">;</span>
  idt_descr<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token function">fix_to_virt</span><span class="token punctuation">(</span>FIX_RO_IDT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我这里贴的代码省略了很多，在 trap_init 函数的一开始，调用了大量的 set_intr_gate，最终都会调用 _set_gate，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">_set_gate</span><span class="token punctuation">(</span><span class="token keyword">int</span> gate<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> type<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span>
           <span class="token keyword">unsigned</span> dpl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> ist<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> seg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  gate_desc s<span class="token punctuation">;</span>
  <span class="token function">pack_gate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>addr<span class="token punctuation">,</span> dpl<span class="token punctuation">,</span> ist<span class="token punctuation">,</span> seg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">write_idt_entry</span><span class="token punctuation">(</span>idt_table<span class="token punctuation">,</span> gate<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码可以看出，set_intr_gate 其实就是将每个中断都设置了中断处理函数，放在中断向量表 idt_table 中。</p><p>在 trap_init 中，由于 set_intr_gate 调用的太多，容易让人眼花缭乱。其实 arch/x86/include/asm/<code>traps.h</code> 文件中，早就定义好了前 32 个中断。如果仔细对比一下，你会发现，这些都在 trap_init 中使用 set_intr_gate 设置过了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* Interrupts/Exceptions */</span>
<span class="token keyword">enum</span> <span class="token punctuation">{</span>
  X86_TRAP_DE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">/*  0, Divide-by-zero */</span>
  X86_TRAP_DB<span class="token punctuation">,</span>    <span class="token comment">/*  1, Debug */</span>
  X86_TRAP_NMI<span class="token punctuation">,</span>    <span class="token comment">/*  2, Non-maskable Interrupt */</span>
  X86_TRAP_BP<span class="token punctuation">,</span>    <span class="token comment">/*  3, Breakpoint */</span>
  X86_TRAP_OF<span class="token punctuation">,</span>    <span class="token comment">/*  4, Overflow */</span>
  X86_TRAP_BR<span class="token punctuation">,</span>    <span class="token comment">/*  5, Bound Range Exceeded */</span>
  X86_TRAP_UD<span class="token punctuation">,</span>    <span class="token comment">/*  6, Invalid Opcode */</span>
  X86_TRAP_NM<span class="token punctuation">,</span>    <span class="token comment">/*  7, Device Not Available */</span>
  X86_TRAP_DF<span class="token punctuation">,</span>    <span class="token comment">/*  8, Double Fault */</span>
  X86_TRAP_OLD_MF<span class="token punctuation">,</span>  <span class="token comment">/*  9, Coprocessor Segment Overrun */</span>
  X86_TRAP_TS<span class="token punctuation">,</span>    <span class="token comment">/* 10, Invalid TSS */</span>
  X86_TRAP_NP<span class="token punctuation">,</span>    <span class="token comment">/* 11, Segment Not Present */</span>
  X86_TRAP_SS<span class="token punctuation">,</span>    <span class="token comment">/* 12, Stack Segment Fault */</span>
  X86_TRAP_GP<span class="token punctuation">,</span>    <span class="token comment">/* 13, General Protection Fault */</span>
  X86_TRAP_PF<span class="token punctuation">,</span>    <span class="token comment">/* 14, Page Fault */</span>
  X86_TRAP_SPURIOUS<span class="token punctuation">,</span>  <span class="token comment">/* 15, Spurious Interrupt */</span>
  X86_TRAP_MF<span class="token punctuation">,</span>    <span class="token comment">/* 16, x87 Floating-Point Exception */</span>
  X86_TRAP_AC<span class="token punctuation">,</span>    <span class="token comment">/* 17, Alignment Check */</span>
  X86_TRAP_MC<span class="token punctuation">,</span>    <span class="token comment">/* 18, Machine Check */</span>
  X86_TRAP_XF<span class="token punctuation">,</span>    <span class="token comment">/* 19, SIMD Floating-Point Exception */</span>
  X86_TRAP_IRET <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token comment">/* 32, IRET Exception */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们回到 trap_init 中，当前 32 个中断都用 set_intr_gate 设置完毕。在中断向量表 idt_table 中填完了之后，接下来的 for 循环，for (i = 0; i &lt; FIRST_EXTERNAL_VECTOR; i++)，将前 32 个中断都在 used_vectors 中标记为 1，表示这些都设置过中断处理函数了。</p><p>接下来，trap_init 单独调用 set_intr_gate 来设置 32 位系统调用的中断。IA32_SYSCALL_VECTOR，也即 128，单独将 used_vectors 中的第 128 位标记为 1。</p><p>在 trap_init 的最后，我们将 idt_table 放在一个固定的虚拟地址上。trap_init 结束后，中断向量表中已经填好了前 32 位，外加一位 32 位系统调用，其他的都是用于设备中断。</p><p>在 start_kernel 调用完毕 trap_init 之后，还会调用 init_IRQ() 来初始化其他的设备中断，最终会调用到 native_init_IRQ。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> __init <span class="token function">native_init_IRQ</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
  i <span class="token operator">=</span> FIRST_EXTERNAL_VECTOR<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CONFIG_X86_LOCAL_APIC</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">first_system_vector</span> <span class="token expression">NR_VECTORS</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token function">for_each_clear_bit_from</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> used_vectors<span class="token punctuation">,</span> first_system_vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* IA32_SYSCALL_VECTOR could be used in trap_init already. */</span>
    <span class="token function">set_intr_gate</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> irq_entries_start <span class="token operator">+</span>
        <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> FIRST_EXTERNAL_VECTOR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面从第 32 个中断开始，到最后 NR_VECTORS 为止，对于 used_vectors 中没有标记为 1 的位置，都会调用 set_intr_gate 设置中断向量表。</p><p>其实 used_vectors 中没有标记为 1 的，都是设备中断的部分。</p><p>也即所有的设备中断的中断处理函数，在中断向量表里面都会设置为从 irq_entries_start 开始，偏移量为 i - FIRST_EXTERNAL_VECTOR 的一项。</p><p>看来中断处理函数是定义在 irq_entries_start 这个表里面的，我们在 arch\\x86\\entry\\entry_32.S 和 arch\\x86\\entry\\entry_64.S 都能找到这个函数表的定义。</p><p>这又是汇编语言，不需要完全看懂，但是我们还是能看出来，这里面定义了 FIRST_SYSTEM_VECTOR - FIRST_EXTERNAL_VECTOR 项。每一项都是中断处理函数，会跳到 common_interrupt 去执行。这里会最终调用 do_IRQ，调用完毕后，就从中断返回。这里我们需要区分返回用户态还是内核态。这里会有一个机会触发抢占，咱们讲进程切换的时候讲过的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">ENTRY</span><span class="token punctuation">(</span>irq_entries_start<span class="token punctuation">)</span>
    vector<span class="token operator">=</span>FIRST_EXTERNAL_VECTOR
    <span class="token punctuation">.</span><span class="token function">rept</span> <span class="token punctuation">(</span>FIRST_SYSTEM_VECTOR <span class="token operator">-</span> FIRST_EXTERNAL_VECTOR<span class="token punctuation">)</span>
  pushl  $<span class="token punctuation">(</span><span class="token operator">~</span>vector<span class="token operator">+</span><span class="token number">0x80</span><span class="token punctuation">)</span>      <span class="token comment">/* Note: always in signed byte range */</span>
    vector<span class="token operator">=</span>vector<span class="token operator">+</span><span class="token number">1</span>
  jmp  common_interrupt <span class="token comment">/* 会调用到do_IRQ */</span>
  <span class="token punctuation">.</span>align  <span class="token number">8</span>
    <span class="token punctuation">.</span>endr
<span class="token function">END</span><span class="token punctuation">(</span>irq_entries_start<span class="token punctuation">)</span>


common_interrupt<span class="token operator">:</span>
  ASM_CLAC
  addq  $<span class="token operator">-</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">%</span>rsp<span class="token punctuation">)</span>      <span class="token comment">/* Adjust vector to [-256, -1] range */</span>
  interrupt do_IRQ
  <span class="token comment">/* 0(%rsp): old RSP */</span>
ret_from_intr<span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/* Interrupt came from user space */</span>
<span class="token function">GLOBAL</span><span class="token punctuation">(</span>retint_user<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">/* Returning to kernel space */</span>
retint_kernel<span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样任何一个中断向量到达任何一个 CPU，最终都会走到 do_IRQ。我们来看 do_IRQ 的实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * do_IRQ handles all normal device IRQ&#39;s (the special
 * SMP cross-CPU interrupts have their own specific
 * handlers).
 */</span>
__visible <span class="token keyword">unsigned</span> <span class="token keyword">int</span> __irq_entry <span class="token function">do_IRQ</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>regs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">pt_regs</span> <span class="token operator">*</span>old_regs <span class="token operator">=</span> <span class="token function">set_irq_regs</span><span class="token punctuation">(</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">irq_desc</span> <span class="token operator">*</span> desc<span class="token punctuation">;</span>
  <span class="token comment">/* high bit used in ret_from_ code  */</span>
  <span class="token keyword">unsigned</span> vector <span class="token operator">=</span> <span class="token operator">~</span>regs<span class="token operator">-&gt;</span>orig_ax<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  desc <span class="token operator">=</span> <span class="token function">__this_cpu_read</span><span class="token punctuation">(</span>vector_irq<span class="token punctuation">[</span>vector<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">handle_irq</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> regs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">set_irq_regs</span><span class="token punctuation">(</span>old_regs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里面，从 AX 寄存器里面拿到了中断向量 vector，但是别忘了中断控制器发送给每个 CPU 的中断向量都是每个 CPU 局部的，而抽象中断处理层的虚拟中断信号 irq 以及它对应的中断描述结构 irq_desc 是全局的，也即这个 CPU 的 200 号的中断向量和另一个 CPU 的 200 号中断向量对应的虚拟中断信号 irq 和中断描述结构 irq_desc 可能不一样，这就需要一个映射关系。这个映射关系放在 Per CPU 变量 vector_irq 里面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">DECLARE_PER_CPU</span><span class="token punctuation">(</span><span class="token class-name">vector_irq_t</span><span class="token punctuation">,</span> vector_irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在系统初始化的时候，我们会调用 __assign_irq_vector，将虚拟中断信号 irq 分配到某个 CPU 上的中断向量。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__assign_irq_vector</span><span class="token punctuation">(</span><span class="token keyword">int</span> irq<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">apic_chip_data</span> <span class="token operator">*</span>d<span class="token punctuation">,</span>
             <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cpumask</span> <span class="token operator">*</span>mask<span class="token punctuation">,</span>
             <span class="token keyword">struct</span> <span class="token class-name">irq_data</span> <span class="token operator">*</span>irqdata<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> current_vector <span class="token operator">=</span> FIRST_EXTERNAL_VECTOR <span class="token operator">+</span> VECTOR_OFFSET_START<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> current_offset <span class="token operator">=</span> VECTOR_OFFSET_START <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> cpu<span class="token punctuation">,</span> vector<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>cpu <span class="token operator">&lt;</span> nr_cpu_ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> new_cpu<span class="token punctuation">,</span> offset<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    vector <span class="token operator">=</span> current_vector<span class="token punctuation">;</span>
    offset <span class="token operator">=</span> current_offset<span class="token punctuation">;</span>
next<span class="token operator">:</span>
    vector <span class="token operator">+=</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vector <span class="token operator">&gt;=</span> first_system_vector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      offset <span class="token operator">=</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>
      vector <span class="token operator">=</span> FIRST_EXTERNAL_VECTOR <span class="token operator">+</span> offset<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">/* If the search wrapped around, try the next cpu */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>current_vector <span class="token operator">==</span> vector<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> next_cpu<span class="token punctuation">;</span>




    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">test_bit</span><span class="token punctuation">(</span>vector<span class="token punctuation">,</span> used_vectors<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> next<span class="token punctuation">;</span>


<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Found one! */</span>
    current_vector <span class="token operator">=</span> vector<span class="token punctuation">;</span>
    current_offset <span class="token operator">=</span> offset<span class="token punctuation">;</span>
    <span class="token comment">/* Schedule the old vector for cleanup on all cpus */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>cfg<span class="token punctuation">.</span>vector<span class="token punctuation">)</span>
      <span class="token function">cpumask_copy</span><span class="token punctuation">(</span>d<span class="token operator">-&gt;</span>old_domain<span class="token punctuation">,</span> d<span class="token operator">-&gt;</span>domain<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">for_each_cpu</span><span class="token punctuation">(</span>new_cpu<span class="token punctuation">,</span> vector_searchmask<span class="token punctuation">)</span>
      <span class="token function">per_cpu</span><span class="token punctuation">(</span>vector_irq<span class="token punctuation">,</span> new_cpu<span class="token punctuation">)</span><span class="token punctuation">[</span>vector<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">irq_to_desc</span><span class="token punctuation">(</span>irq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> update<span class="token punctuation">;</span>


next_cpu<span class="token operator">:</span>
    <span class="token function">cpumask_or</span><span class="token punctuation">(</span>searched_cpumask<span class="token punctuation">,</span> searched_cpumask<span class="token punctuation">,</span> vector_cpumask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">cpumask_andnot</span><span class="token punctuation">(</span>vector_cpumask<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> searched_cpumask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cpu <span class="token operator">=</span> <span class="token function">cpumask_first_and</span><span class="token punctuation">(</span>vector_cpumask<span class="token punctuation">,</span> cpu_online_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，一旦找到某个向量，就将 CPU 的此向量对应的向量描述结构 irq_desc，设置为虚拟中断信号 irq 对应的向量描述结构 irq_to_desc(irq)。</p><p>这样 do_IRQ 会根据中断向量 vector 得到对应的 irq_desc，然后调用 handle_irq。handle_irq 会调用 generic_handle_irq_desc，里面调用 irq_desc 的 handle_irq。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">generic_handle_irq_desc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">irq_desc</span> <span class="token operator">*</span>desc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  desc<span class="token operator">-&gt;</span><span class="token function">handle_irq</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 handle_irq，最终会调用 __handle_irq_event_percpu。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">irqreturn_t</span> <span class="token function">__handle_irq_event_percpu</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">irq_desc</span> <span class="token operator">*</span>desc<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">irqreturn_t</span> retval <span class="token operator">=</span> IRQ_NONE<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> irq <span class="token operator">=</span> desc<span class="token operator">-&gt;</span>irq_data<span class="token punctuation">.</span>irq<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">irqaction</span> <span class="token operator">*</span>action<span class="token punctuation">;</span>


  <span class="token function">record_irq_time</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token function">for_each_action_of_desc</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">irqreturn_t</span> res<span class="token punctuation">;</span>
    res <span class="token operator">=</span> action<span class="token operator">-&gt;</span><span class="token function">handler</span><span class="token punctuation">(</span>irq<span class="token punctuation">,</span> action<span class="token operator">-&gt;</span>dev_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> IRQ_WAKE_THREAD<span class="token operator">:</span>
      <span class="token function">__irq_wake_thread</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> IRQ_HANDLED<span class="token operator">:</span>
      <span class="token operator">*</span>flags <span class="token operator">|=</span> action<span class="token operator">-&gt;</span>flags<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    retval <span class="token operator">|=</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> retval<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__handle_irq_event_percpu 里面调用了 irq_desc 里每个 hander，这些 hander 是我们在所有 action 列表中注册的，这才是我们设置的那个中断处理函数。如果返回值是 IRQ_HANDLED，就说明处理完毕；如果返回值是 IRQ_WAKE_THREAD 就唤醒线程。</p><p>至此，中断的整个过程就结束了。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>这一节，我们讲了中断的整个处理过程。中断是从外部设备发起的，会形成外部中断。外部中断会到达中断控制器，中断控制器会发送中断向量 Interrupt Vector 给 CPU。</p><p>对于每一个 CPU，都要求有一个 idt_table，里面存放了不同的中断向量的处理函数。中断向量表中已经填好了前 32 位，外加一位 32 位系统调用，其他的都是用于设备中断。</p><p>硬件中断的处理函数是 do_IRQ 进行统一处理，在这里会让中断向量，通过 vector_irq 映射为 irq_desc。</p><p>irq_desc 是一个用于描述用户注册的中断处理函数的结构，为了能够根据中断向量得到 irq_desc 结构，会把这些结构放在一个基数树里面，方便查找。</p><p>irq_desc 里面有一个成员是 irqaction，指向设备驱动程序里面注册的中断处理函数。</p><blockquote><p>课代表在这里。</p><ul><li><p>设备中断处理</p></li><li><p>定义中断处理函数:irq_handler_t<br> - 函数入参<br> - int irq:中断信号<br> - void * dev_id:通用指针，主要用于区分同一个中断处理函数对于不同设备的处理<br> - 返回值<br> - IRQ_NONE:设备不是中断接收者<br> - IRQ_HANDLED:处理完了的中断<br> - IRQ_WAKE_THREAD:有一个进程正在等待这个中断，中断处理完了，应该唤醒它<br> - 很多中断处理程序将整个中断要做的事情分成两部分，称为上半部和下半部，或者成为关键处理部分和延迟处理部分。在中断处理函数中，仅仅处理关键部分，完成了就将中断信号打开，使得新的中断可以进来，需要比较长时间处理的部分，也即延迟部分，往往通过工作队列等方式慢慢处理。</p><ul><li>注册中断处理函数:request_irq</li><li>函数入参<br> - unsigned int irq 是中断信号<br> - irq_handler_t handler 是中断处理函数<br> - unsigned long flags 是一些标识位<br> - const char *name 是设备名称<br> - void *dev 这个通用指针应该和中断处理函数的 void *dev 相对应 <ul><li>初始化描述中断的结构体 irq_desc，其中 struct irqaction，用于表示处理这个中断的动作，irqaction 都有以下成员</li><li>中断处理函数 handler <ul><li>void *dev_id 为设备 id</li><li>irq 为中断信号</li><li>next 为指向下一个 action 的链表指针</li><li>如果中断处理函数在单独的线程运行，则有 thread_fn 是线程的执行函数，thread 是线程的 task_struct</li><li>irpaction 的存储数据结构通过宏 CONFIG_SPARSE_IRQ 配置</li><li>如果为连续下标则使用数组 <ul><li>如果为不连续下标则使用基数树</li></ul></li><li>irq 并不是真正的、物理的中断信号，而是一个抽象的、虚拟的中断信号</li></ul></li><li>内部调用 request_threaded_irq-&gt;__setup_irq</li><li>查找 irq_desc 是否已经有 irqaction <ul><li>irq 有一个 next 的参数，如果已经有同类的 action，则将其挂在链表末尾</li></ul></li><li>如果设定了以单独的线程运行中断处理函数，setup_irq_thread 就会创建这个内核线程，wake_up_process 会唤醒它</li></ul></li><li>中断处理流程</li><li>外部设备给中断控制器发送物理中断信号 <ul><li>中断控制器将物理中断信号转换成为中断向量 interrupt vector，发给各个 CPU</li><li>每个 CPU 都会有一个中断向量表，根据 interrupt vector 调用一个 IRQ 处理函数。注意这里的 IRQ 处理函数还不是咱们上面指定的 irq_handler_t，到这一层还是 CPU 硬件的要求</li><li>在 IRQ 处理函数中，将 interrupt vector 转化为抽象中断层的中断信号 irq，调用中断信号 irq 对应的中断描述结构里面的 irq_handler_t</li></ul></li></ul></li><li><p>硬件 中断处理</p></li><li><p>CPU 能够处理的中断总共 256 个，用宏 NR_VECTOR 或者 FIRST_SYSTEM_VECTOR 表示</p><ul><li>CPU 硬件要求每一个 CPU 都有一个中断向量表 idt_table，通过 load_idt 加载，里面记录着每一个中断对应的处理函数</li><li>中断被分为几个部分 <ul><li>0 到 31 的前 32 位是系统陷入或者系统异常，这些错误无法屏蔽，一定要处理；</li><li>中断向量表中已经填好了前 32 位，外加一位 32 位系统调用</li><li>其他的都是用于设备中断</li></ul></li><li>硬件中断的处理函数是 do_IRQ 进行统一处理，在这里会让中断向量，通过 vector_irq 映射为 irq_desc <ul><li>找到注册的中断处理 action 并执行</li></ul></li></ul></li></ul></blockquote><img src="`+p+'" alt="img" style="zoom:25%;"><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>你知道如何查看每个 CPU 都收到了哪些中断吗？</p><blockquote><p>cat /proc/interrupts</p></blockquote><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>总结下:<br> 系统有256个中断向量,定义在中断向量表中,其中前32位[0-31]用于系统自身的内部中断,第32位用于32位中断(?),剩余用以设备中断,这是硬件的中断向量表,表里面是中断信号与其对应的中断处理函数,最终都会走到do_irq<br> 对于每个cpu来说会有一层虚拟中断层,因为对于多核系统,多个中断处理器,每个cpu会有自己的中断映射表来讲硬件的中断向量对应于虚拟中断向量,其实就是将中断向量表中对应的中断向量描述结构设置为虚拟中断信号的中断描述结构.<br> 中断描述结构比较重要,其成员有中断处理的动作结构链表,设备的名字.<br> 中断处理的动作结构体其组成成员有 对应的中断处理函数 虚拟中断号 该中断处理函数是否放在单独的线程中执行,以及对应的线程等<br> 中断的流程:<br> 当系统收到中断物理信号,会由中断控制器将物理信号转化为中断向量,然后发送给各个cpu<br> 各个cpu通过硬件的中断向量表调用对应的中断处理函数,在中断处理函数中会把物理中断信号转化为虚拟中断信号,然后调用中断信号的中断处理函数(通过中断映射表里对应的中断描述结构来找到对应的中断处理函数)<br> 作者回复: 赞</p><p>老师，每个CPU的中断向量表只有256项，留给设备的只有剩下的223项，请问是最多能处理223个不同设备的中断吗？中断向量表中的每一项跟设备之间是什么关系呢？<br> 作者回复: 有中断的一节会讲这个</p><p>老师, system call, interrup和exception处理的相同点和不同点能讲一下吗？<br> 作者回复: system call原来是软中断，后来是特殊的指令了。interrupt是中断，exception往往会因为指令非法，以中断的形式中止指令运行，还是走中断的正常流程。</p><p>中断注册，中断处理，有点类似于rpc框架调用，具体的请求通过事先注册的函数查找，然后返回结果给调用方</p><p>这样 do_IRQ 会根据中断向量 vector 得到对应的irq_desc，然后调用 handle_irq。handle_irq 会调用 generic_handle_irq_desc，里面调用 irq_desc 的 handle_irq</p><p>老师这个地方绕不出来了。。。handle_irq最后又调用到handle_irq？<br> 作者回复: 两个handle_irq，名字一样而已</p><p>每一个cpu都会有一个中断向量表，都是一样的吗？如果一个控制器中断来了之后，他会把中断给哪个cpu呢?<br> 作者回复: 中断也有路由，哪个处理都行</p><p>每个CPU的前32个中断也会调用到do_IRQ吗？<br> 作者回复: 是的</p>',99),i=[o];function l(u,r){return s(),a("div",null,i)}const v=n(c,[["render",l],["__file","K33-字符设备（下）.html.vue"]]);export{v as default};
