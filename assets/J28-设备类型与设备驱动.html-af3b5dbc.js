import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,d as e}from"./app-cdabc73c.js";const p="/assets/2f7697d94bee25d4c036eb4bca16ee4c-5d426642.jpg",t="/assets/17d232bd17b0c328yyed37bab98baa9f-706809a8.jpg",c={},o=e('<h1 id="_28-部门分类-如何表示设备类型与设备驱动" tabindex="-1"><a class="header-anchor" href="#_28-部门分类-如何表示设备类型与设备驱动" aria-hidden="true">#</a> 28 | 部门分类：如何表示设备类型与设备驱动？</h1><p>你好，我是 LMOS。</p><p>小到公司，大到国家，都有各种下属部门，比如我们国家现在有教育部、科学技术部、外交部，财政部等，这些部门各自负责完成不同的职能工作，如教育部负责教育事业和语言文字工作，科学技术部负责推动解决经济社会发展的重大科技问题。</p><p>既然大道相通，那我们的 Cosmos 中是否也是类似这样的结构呢？</p><p>答案是肯定的，在前面的课中，我们搞定了内存管理和进程管理，它们是内核不可分隔的，但是计算机中还有各种类型的设备需要管理。</p><p>我们的 Cosmos 也会“成立各类部门”，用于管理众多设备，一个部门负责一类设备。具体要怎么管理设备呢？你不妨带着这个问题，正式开始今天的学习！</p><p>这节课的代码，你可以从这里下载。</p><h2 id="计算机的结构" tabindex="-1"><a class="header-anchor" href="#计算机的结构" aria-hidden="true">#</a> 计算机的结构</h2><p>不知道你是否和我一样，经常把计算机的机箱打开，看看 CPU，看看内存条，看看显卡，看看主板上的各种芯片。</p><p>其实，这些芯片并非独立存在，而是以总线为基础连接在一起的，各自完成自己的工作，又能互相打配合，共同实现用户要求的功能。</p><p>为了帮你理清它们的连接关系，我为你画了一幅图，如下所示。</p><img src="'+p+`" alt="img" style="zoom:15%;"><p>计算机结构示意图</p><p>上图是一个典型的桌面系统，你先不用管是物理上怎么样连接的，逻辑上就是这样的。实际可能比图中有更多或者更少的总线。但是总线有层级关系，各种设备通过总线相连。这里我们只需要记住，计算机中有很多种类的设备，脑中有刚才这幅图就行了。</p><h2 id="如何管理设备" tabindex="-1"><a class="header-anchor" href="#如何管理设备" aria-hidden="true">#</a> 如何管理设备</h2><p>在前面的课程中，我们实现了管理内存和进程，其实进程<strong>从正面看</strong>它是管理应用程序的，<strong>反过来看</strong>它也是管理 CPU 的，它能使 CPU 的使用率达到最高。</p><p>管理内存和管理 CPU 是操作系统最核心的部分，但是这还不够，因为计算机不止有 CPU，还有各种设备。</p><p>如果把计算机内部所有的设备和数据都描述成资源，操作系统内核无疑是这些资源的管理者。既然设备也是一种资源，如何高效管理它们，以便提供给应用进程使用和操作，就是操作系统内核的重要任务。</p><h2 id="分权而治-设备控制代码模块" tabindex="-1"><a class="header-anchor" href="#分权而治-设备控制代码模块" aria-hidden="true">#</a> 分权而治: 设备控制代码模块</h2><p>一个国家之所以有那么多部门，就是要把管理工作分开，专权专职专责，对于操作系统也是一样。</p><p>现代计算机早已不限于只处理计算任务，它还可以呈现图像、音频，和远程计算机通信，储存大量数据，以及和用户交互。所以，计算机内部需要处理图像、音频、网络、储存、交互的设备。这从上面的图中也可以看得出来。</p><p>操作系统内核要控制这些设备，就要包含每个设备的控制代码。如果操作系统内核被设计为通用可移植的内核，那是相当可怕的。试想一下，这个世界上有如此多的设备，操作系统内核代码得多庞大，越庞大就越危险，因为其中一行代码有问题，整个操作系统就崩溃了。</p><p>可是仅仅只有这些问题吗？当然不是，我们还要考虑到后面这几点。</p><p>\\1. 操作系统内核开发人员，不可能罗列世界上所有的设备，并为其写一套控制代码。</p><p>\\2. 为了商业目的，有很多设备厂商并不愿意公开设备的编程细节。就算内核开发人员想为其写控制代码，实际也不可行。</p><p>\\3. 如果设备更新换代，就要重写设备的控制代码，然后重新编译操作系统内核，这样的话操作很麻烦，操作系统内核开发人员和用户都可能受不了。</p><p>以上三点，足于证明这种方案根本不可取。</p><p>既然操作系统内核无法包含所有的设备控制代码，那就索性不包含，或者只包含<strong>最基本、最通用的设备控制代码</strong>。这样操作系统内核就可以非常通用，非常精巧。但是要控制设备就必须要有设备的相关控制代码才行，所以我们要<strong>把设备控制代码独立出来，与操作系统内核分开、独立开发，设备控制代码可由设备厂商人员开发</strong>。</p><p><strong>每个设备对应一个<mark>设备控制代码模块</mark>，操作系统内核要控制哪个设备，就加载相应的<mark>设备代码模块</mark>，以后不使用这个设备了，就可以删除对应的设备控制代码模块</strong>。</p><p>这种方式，给操作系统内核带来了<strong>巨大的灵活性</strong>。设备厂商在发布新设备时，只要随之发布一个与此相关的<mark>设备控制代码模块</mark>就行了。</p><h2 id="设备分类" tabindex="-1"><a class="header-anchor" href="#设备分类" aria-hidden="true">#</a> 设备分类</h2><p>要想管理设备，先要对其分门别类，在开始分类之前，你不妨先思考一个问题：操作系统内核所感知的设备，一定要与物理设备一一对应吗？</p><p>举个例子，储存设备，其实不管它是机械硬盘，还是 TF 卡，或者是一个设备控制代码模块，它向操作系统内核表明它是储存设备，但它完全有可能分配一块内存空间来储存数据，不必访问真正的储存设备。<strong>所以，操作系统内核所感知的设备，<code>并不需要和物理设备对应，这取决于</code>设备控制代码自身的行为。</strong></p><p>操作系统内核所定义的设备，可称为<mark>内核设备</mark>或者<mark>逻辑设备</mark>，其实这只是对物理计算平台中几种类型设备的一种抽象。下面，我们在 cosmos/include/knlinc/<code>krldevice_t.h</code> 文件中对设备进行分类定义，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NOT_DEVICE</span> <span class="token expression"><span class="token number">0</span>               </span><span class="token comment">//不表示任何设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BRIDGE_DEVICE</span> <span class="token expression"><span class="token number">4</span>            </span><span class="token comment">//总线桥接器设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CPUCORE_DEVICE</span> <span class="token expression"><span class="token number">5</span>           </span><span class="token comment">//CPU设备，CPU也是设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RAMCONTER_DEVICE</span> <span class="token expression"><span class="token number">6</span>        </span><span class="token comment">//内存控制器设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RAM_DEVICE</span> <span class="token expression"><span class="token number">7</span>              </span><span class="token comment">//内存设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USBHOSTCONTER_DEVICE</span> <span class="token expression"><span class="token number">8</span>    </span><span class="token comment">//USB主控制设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INTUPTCONTER_DEVICE</span> <span class="token expression"><span class="token number">9</span>     </span><span class="token comment">//中断控制器设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DMA_DEVICE</span> <span class="token expression"><span class="token number">10</span>             </span><span class="token comment">//DMA设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CLOCKPOWER_DEVICE</span> <span class="token expression"><span class="token number">11</span>      </span><span class="token comment">//时钟电源设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LCDCONTER_DEVICE</span> <span class="token expression"><span class="token number">12</span>        </span><span class="token comment">//LCD控制器设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NANDFLASH_DEVICE</span> <span class="token expression"><span class="token number">13</span>       </span><span class="token comment">//nandflash设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CAMERA_DEVICE</span> <span class="token expression"><span class="token number">14</span>          </span><span class="token comment">//摄像头设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UART_DEVICE</span> <span class="token expression"><span class="token number">15</span>             </span><span class="token comment">//串口设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TIMER_DEVICE</span> <span class="token expression"><span class="token number">16</span>            </span><span class="token comment">//定时器设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">USB_DEVICE</span> <span class="token expression"><span class="token number">17</span>              </span><span class="token comment">//USB设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WATCHDOG_DEVICE</span> <span class="token expression"><span class="token number">18</span>        </span><span class="token comment">//看门狗设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RTC_DEVICE</span> <span class="token expression"><span class="token number">22</span>              </span><span class="token comment">//实时时钟设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SD_DEVICE</span> <span class="token expression"><span class="token number">25</span>               </span><span class="token comment">//SD卡设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AUDIO_DEVICE</span> <span class="token expression"><span class="token number">26</span>            </span><span class="token comment">//音频设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TOUCH_DEVICE</span> <span class="token expression"><span class="token number">27</span>           </span><span class="token comment">//触控设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NETWORK_DEVICE</span> <span class="token expression"><span class="token number">28</span>         </span><span class="token comment">//网络设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VIR_DEVICE</span> <span class="token expression"><span class="token number">29</span>               </span><span class="token comment">//虚拟设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FILESYS_DEVICE</span> <span class="token expression"><span class="token number">30</span>            </span><span class="token comment">//文件系统设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SYSTICK_DEVICE</span> <span class="token expression"><span class="token number">31</span>           </span><span class="token comment">//系统TICK设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UNKNOWN_DEVICE</span> <span class="token expression"><span class="token number">32</span>        </span><span class="token comment">//未知设备，也是设备</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HD_DEVICE</span> <span class="token expression"><span class="token number">33</span>        </span><span class="token comment">//硬盘设备</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义的这些类型的设备，都是 Cosmos 内核抽象出来的逻辑设备，例如 NETWORK_DEVICE 网络设备，不管它是有线网卡还是无线网卡，或者是设备控制代码虚拟出来的虚拟网卡。Cosmos 内核都将认为它是一个网络设备，这就是设备的抽象，这样有利于我们灵活、简便管理设备。</p><h2 id="设备驱动系统" tabindex="-1"><a class="header-anchor" href="#设备驱动系统" aria-hidden="true">#</a> 设备驱动系统</h2><p>刚才我们解决了设备分类，下面我来研究如何实现分权而治，就是把操作每个设备的相关代码独立出来，这种方式在业界有一个更专业的名字——<strong>设备驱动程序</strong>。同时在下面的内容中，我们将不区分设备驱动程序和驱动程序。</p><p>这种“分权而治”的方式，给操作系统内核带了灵活性、可扩展性……可是也带来了新的问题，有哪些问题呢？</p><p>首先是操作系统内核如何表示多个设备与驱动的存在？然后，还有如何组织多个设备和多个驱动程序的问题，最后我们还得考虑应该让驱动程序提供一些什么支持。下面我们分别解决这些问题。</p><h3 id="_1-设备-数据结构" tabindex="-1"><a class="header-anchor" href="#_1-设备-数据结构" aria-hidden="true">#</a> 1 设备(数据结构)</h3><p>你能说说一个设备包含哪些信息吗？无非是<strong>设备类型，设备名称，设备状态，设备 id，设备的驱动程序等</strong>。</p><p>我们把这些信息归纳成一个数据结构，在操作系统内核建立这个数据结构的实例变量，这个设备数据结构的实例变量，一旦建立，就表示操作系统内核中存在一个逻辑设备了。</p><p>我们接下来就一起整理一下设备的信息，然后把它们变成一个数据结构，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_DEVID</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint_t</span>  dev_mtype<span class="token punctuation">;</span><span class="token comment">//设备类型号</span>
    <span class="token class-name">uint_t</span>  dev_stype<span class="token punctuation">;</span> <span class="token comment">//设备子类型号</span>
    <span class="token class-name">uint_t</span>  dev_nr<span class="token punctuation">;</span> <span class="token comment">//设备序号</span>
<span class="token punctuation">}</span><span class="token class-name">devid_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_DEVICE</span>
<span class="token punctuation">{</span>
    <span class="token class-name">list_h_t</span>    dev_list<span class="token punctuation">;</span><span class="token comment">//设备链表</span>
    <span class="token class-name">list_h_t</span>    dev_indrvlst<span class="token punctuation">;</span> <span class="token comment">//设备在驱动程序数据结构中对应的挂载链表</span>
    <span class="token class-name">list_h_t</span>    dev_intbllst<span class="token punctuation">;</span> <span class="token comment">//设备在设备表数据结构中对应的挂载链表</span>
    <span class="token class-name">spinlock_t</span>  dev_lock<span class="token punctuation">;</span> <span class="token comment">//设备自旋锁</span>
    <span class="token class-name">uint_t</span>      dev_count<span class="token punctuation">;</span> <span class="token comment">//设备计数</span>
    <span class="token class-name">sem_t</span>       dev_sem<span class="token punctuation">;</span> <span class="token comment">//设备信号量</span>
    <span class="token class-name">uint_t</span>      dev_stus<span class="token punctuation">;</span> <span class="token comment">//设备状态</span>
    <span class="token class-name">uint_t</span>      dev_flgs<span class="token punctuation">;</span> <span class="token comment">//设备标志</span>
    <span class="token class-name">devid_t</span>      dev_id<span class="token punctuation">;</span> <span class="token comment">//设备ID</span>
    <span class="token class-name">uint_t</span>      dev_intlnenr<span class="token punctuation">;</span> <span class="token comment">//设备中断服务例程的个数</span>
    <span class="token class-name">list_h_t</span>    dev_intserlst<span class="token punctuation">;</span> <span class="token comment">//设备中断服务例程的链表</span>
    <span class="token class-name">list_h_t</span>    dev_rqlist<span class="token punctuation">;</span> <span class="token comment">//对设备的请求服务链表</span>
    <span class="token class-name">uint_t</span>      dev_rqlnr<span class="token punctuation">;</span> <span class="token comment">//对设备的请求服务个数</span>
    <span class="token class-name">sem_t</span>       dev_waitints<span class="token punctuation">;</span> <span class="token comment">//用于等待设备的信号量</span>
    <span class="token keyword">struct</span> <span class="token class-name">s_DRIVER</span><span class="token operator">*</span> dev_drv<span class="token punctuation">;</span> <span class="token comment">//设备对应的驱动程序数据结构的指针</span>
    <span class="token keyword">void</span><span class="token operator">*</span> dev_attrb<span class="token punctuation">;</span> <span class="token comment">//设备属性指针</span>
    <span class="token keyword">void</span><span class="token operator">*</span> dev_privdata<span class="token punctuation">;</span> <span class="token comment">//设备私有数据指针</span>
    <span class="token keyword">void</span><span class="token operator">*</span> dev_userdata<span class="token punctuation">;</span><span class="token comment">//将来扩展所用</span>
    <span class="token keyword">void</span><span class="token operator">*</span> dev_extdata<span class="token punctuation">;</span><span class="token comment">//将来扩展所用</span>
    <span class="token class-name">char_t</span><span class="token operator">*</span> dev_name<span class="token punctuation">;</span> <span class="token comment">//设备名</span>
<span class="token punctuation">}</span><span class="token class-name">device_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设备的信息比较多，大多是用于组织设备的。这里的<strong>设备 ID 结构十分重要</strong>，它表示设备的类型、设备号，子设备号是为了解决多个相同设备的，还有一个指向设备驱动程序的指针，这是用于访问设备时调用设备驱动程序的，只要有人建立了一个设备结构的实例变量，内核就能感知到一个设备存在了。</p><p>至于是谁建立了设备结构的实例变量，这个问题我们接着探索。</p><h3 id="_2-驱动-数据结构" tabindex="-1"><a class="header-anchor" href="#_2-驱动-数据结构" aria-hidden="true">#</a> 2 驱动(数据结构)</h3><p>操作系统内核和应用程序都不会主动建立设备，那么谁来建立设备呢？当然是控制设备的代码，也就是我们常说的<strong>驱动程序</strong>。</p><p>那么驱动程序如何表示呢，换句话说，操作系统内核是如何感知到一个驱动程序的存在呢？</p><p>根据前面的经验，我们还是要定义一个数据结构来表示一个驱动程序，数据结构中应该包含驱动程序名，驱动程序 ID，驱动程序所管理的设备，最重要的是<strong>完成功能设备相关功能的函数</strong>，下面我们来定义它，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_DRIVER</span>
<span class="token punctuation">{</span>
    <span class="token class-name">spinlock_t</span> drv_lock<span class="token punctuation">;</span> <span class="token comment">//保护驱动程序数据结构的自旋锁</span>
    <span class="token class-name">list_h_t</span> drv_list<span class="token punctuation">;</span><span class="token comment">//挂载驱动程序数据结构的链表</span>
    <span class="token class-name">uint_t</span> drv_stuts<span class="token punctuation">;</span> <span class="token comment">//驱动程序的相关状态</span>
    <span class="token class-name">uint_t</span> drv_flg<span class="token punctuation">;</span> <span class="token comment">//驱动程序的相关标志</span>
    <span class="token class-name">uint_t</span> drv_id<span class="token punctuation">;</span> <span class="token comment">//驱动程序ID</span>
    <span class="token class-name">uint_t</span> drv_count<span class="token punctuation">;</span> <span class="token comment">//驱动程序的计数器</span>
    <span class="token class-name">sem_t</span> drv_sem<span class="token punctuation">;</span> <span class="token comment">//驱动程序的信号量</span>
    <span class="token keyword">void</span><span class="token operator">*</span> drv_safedsc<span class="token punctuation">;</span> <span class="token comment">//驱动程序的安全体</span>
    <span class="token keyword">void</span><span class="token operator">*</span> drv_attrb<span class="token punctuation">;</span> <span class="token comment">//LMOSEM内核要求的驱动程序属性体</span>
    <span class="token keyword">void</span><span class="token operator">*</span> drv_privdata<span class="token punctuation">;</span> <span class="token comment">//驱动程序私有数据的指针</span>
    <span class="token class-name">drivcallfun_t</span> drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//驱动程序功能派发函数指针数组</span>
    <span class="token class-name">list_h_t</span> drv_alldevlist<span class="token punctuation">;</span> <span class="token comment">//挂载驱动程序所管理的所有设备的链表</span>
    <span class="token class-name">drventyexit_t</span> drv_entry<span class="token punctuation">;</span> <span class="token comment">//驱动程序的入口函数指针</span>
    <span class="token class-name">drventyexit_t</span> drv_exit<span class="token punctuation">;</span> <span class="token comment">//驱动程序的退出函数指针</span>
    <span class="token keyword">void</span><span class="token operator">*</span> drv_userdata<span class="token punctuation">;</span><span class="token comment">//用于将来扩展</span>
    <span class="token keyword">void</span><span class="token operator">*</span> drv_extdata<span class="token punctuation">;</span> <span class="token comment">//用于将来扩展</span>
    <span class="token class-name">char_t</span><span class="token operator">*</span> drv_name<span class="token punctuation">;</span> <span class="token comment">//驱动程序的名字</span>
<span class="token punctuation">}</span><span class="token class-name">driver_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码，你应该很容易看懂。Cosmos 内核每加载一个驱动程序模块，就会自动分配一个驱动程序数据结构并且将其实例化。</p><p>而 Cosmos 内核在首次启动驱动程序时，就会调用这个驱动程序的入口点函数，在这个函数中驱动程序会分配一个设备数据结构，并用相关的信息将其实例化，比如填写正确的设备类型、设备 ID 号、设备名称等。</p><p>Cosmos 内核负责建立驱动数据结构，而驱动程序又建立了设备数据结构，这一来二去，就形成了一个驱动程序与 Cosmos 内核**“握手”**的动作。</p><h3 id="_3-设备驱动的组织" tabindex="-1"><a class="header-anchor" href="#_3-设备驱动的组织" aria-hidden="true">#</a> 3 设备驱动的组织</h3><p>有了设备、驱动，我们下面探索一下怎么合理的组织好它们。</p><p>组织它们要解决的问题，就是在哪里安放驱动。然后我们还要想好怎么找到它们，下面我们用一个叫做<strong>设备表</strong>的数据结构，来组织这些驱动程序数据结构和设备数据结构。</p><p>这个结构我已经帮你定义好了，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_MAX</span> <span class="token expression"><span class="token number">34</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_DEVTLST</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint_t</span> dtl_type<span class="token punctuation">;</span><span class="token comment">//设备类型</span>
    <span class="token class-name">uint_t</span> dtl_nr<span class="token punctuation">;</span><span class="token comment">//设备计数</span>
    <span class="token class-name">list_h_t</span> dtl_list<span class="token punctuation">;</span><span class="token comment">//挂载设备device_t结构的链表</span>
<span class="token punctuation">}</span><span class="token class-name">devtlst_t</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_DEVTABLE</span>
<span class="token punctuation">{</span>
    <span class="token class-name">list_h_t</span> devt_list<span class="token punctuation">;</span> <span class="token comment">//设备表自身的链表</span>
    <span class="token class-name">spinlock_t</span> devt_lock<span class="token punctuation">;</span> <span class="token comment">//设备表自旋锁</span>
    <span class="token class-name">list_h_t</span> devt_devlist<span class="token punctuation">;</span> <span class="token comment">//全局设备链表</span>
    <span class="token class-name">list_h_t</span> devt_drvlist<span class="token punctuation">;</span> <span class="token comment">//全局驱动程序链表，驱动程序不需要分类，一个链表就行</span>
    <span class="token class-name">uint_t</span>   devt_devnr<span class="token punctuation">;</span> <span class="token comment">//全局设备计数</span>
    <span class="token class-name">uint_t</span>   devt_drvnr<span class="token punctuation">;</span> <span class="token comment">//全局驱动程序计数</span>
    <span class="token class-name">devtlst_t</span> devt_devclsl<span class="token punctuation">[</span>DEVICE_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//分类存放设备数据结构的devtlst_t结构数组</span>
<span class="token punctuation">}</span><span class="token class-name">devtable_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码的 devtable_t 结构中，devtlst_t 是每个设备类型一个，表示一类设备，但每一类可能有多个设备，所以在 devtlst_t 结构中，有一个设备计数和设备链表。而你可能想到 Cosmos 中肯定要定义一个 devtable_t 结构的全局变量，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//在 cosmos/kernel/krlglobal.c文件中</span>
<span class="token function">KRL_DEFGLOB_VARIABLE</span><span class="token punctuation">(</span><span class="token class-name">devtable_t</span><span class="token punctuation">,</span>osdevtable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//在 cosmos/kernel/krldevice.c文件中</span>
<span class="token keyword">void</span> <span class="token function">devtlst_t_init</span><span class="token punctuation">(</span><span class="token class-name">devtlst_t</span> <span class="token operator">*</span>initp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> dtype<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    initp<span class="token operator">-&gt;</span>dtl_type <span class="token operator">=</span> dtype<span class="token punctuation">;</span><span class="token comment">//设置设备类型    initp-&gt;dtl_nr = 0;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>dtl_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">devtable_t_init</span><span class="token punctuation">(</span><span class="token class-name">devtable_t</span> <span class="token operator">*</span>initp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>devt_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">krlspinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>devt_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>devt_devlist<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>devt_drvlist<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>devt_devnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>devt_drvnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> DEVICE_MAX<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//初始化设备链表</span>
        <span class="token function">devtlst_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>devt_devclsl<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">init_krldevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">devtable_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>osdevtable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化系统全局设备表</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//在 cosmos/kernel/krlinit.c文件中</span>
<span class="token keyword">void</span> <span class="token function">init_krl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">init_krlmm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_krldevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//记住一定要在初始化调度器之前，初始化设备表</span>
    <span class="token function">init_krlsched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_krlcpuidle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结图" tabindex="-1"><a class="header-anchor" href="#小结图" aria-hidden="true">#</a> 小结图</h3><p>上面的设备表的初始化代码已经写好了，如果你大脑中没有设备驱动组织图，可能脑子里还是有点乱，所以我来帮你画一幅图，如下所示。</p><img src="`+t+`" alt="img" style="zoom:15%;"><p>设备表结构示意图</p><p>上图看似复杂，实则简单，我帮你理一下重点：首先 devtable_t 结构中能找到所有的设备和驱动，然后从设备能找到对应的驱动，从驱动也能找到其管理的所有设备 ，最后就能实现一个驱动管理多个设备。</p><h2 id="驱动程序功能-主要函数" tabindex="-1"><a class="header-anchor" href="#驱动程序功能-主要函数" aria-hidden="true">#</a> 驱动程序功能(主要函数)</h2><p>我们还有一个问题需要解决，那就是驱动程序，究竟要为操作系统内核提供哪些最基本的功能支持？</p><p>我们已经知道了，写驱动程序就是为了操控相应的设备，所以这得看大多数设备能完成什么功能了。现代计算机的设备无非就是可以输入数据、处理数据、输出数据，然后完成一些特殊的功能。</p><p>当然，现代计算机的设备很多，能耗是个严重的问题，所以操作系统内核应该能控制设备能耗。下面我来帮你归纳一下用来驱动程序的几种主要函数，如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//驱动程序入口和退出函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_entry</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span><span class="token operator">*</span> drvp<span class="token punctuation">,</span><span class="token class-name">uint_t</span> val<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_exit</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span><span class="token operator">*</span> drvp<span class="token punctuation">,</span><span class="token class-name">uint_t</span> val<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设备中断处理函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_handle</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> ift_nr<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> sframe<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//打开、关闭设备函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_open</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_close</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//读、写设备数据函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_read</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_write</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//调整读写设备数据位置函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_lseek</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//控制设备函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_ioctrl</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//开启、停止设备函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_dev_start</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_dev_stop</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置设备电源函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_set_powerstus</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//枚举设备函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_enum_dev</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//刷新设备缓存函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_flush</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设备关机函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">device_shutdown</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所述，我们可以把每一个操作定义成一个函数，让驱动程序实现这些函数。函数名你可以随便写，但是函数的形式却不能改变，这是操作系统内核与驱动程序沟通的桥梁。当然有很多设备本身并不支持这么多操作，例如时钟设备，驱动程序就不必实现相应的操作。</p><p>那么这些函数如何和操作系统内核关联起来呢？还记得 driver_t 结构中那个函数指针数组吗，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_OPEN</span> <span class="token expression"><span class="token number">0</span> </span><span class="token comment">//对应于open操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_CLOSE</span> <span class="token expression"><span class="token number">1</span> </span><span class="token comment">//对应于close操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_READ</span> <span class="token expression"><span class="token number">2</span> </span><span class="token comment">//对应于read操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_WRITE</span> <span class="token expression"><span class="token number">3</span> </span><span class="token comment">//对应于write操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_LSEEK</span> <span class="token expression"><span class="token number">4</span> </span><span class="token comment">//对应于lseek操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_IOCTRL</span> <span class="token expression"><span class="token number">5</span> </span><span class="token comment">//对应于ioctrl操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_DEV_START</span> <span class="token expression"><span class="token number">6</span> </span><span class="token comment">//对应于start操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_DEV_STOP</span> <span class="token expression"><span class="token number">7</span> </span><span class="token comment">//对应于stop操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_SET_POWERSTUS</span> <span class="token expression"><span class="token number">8</span> </span><span class="token comment">//对应于powerstus操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_ENUM_DEV</span> <span class="token expression"><span class="token number">9</span> </span><span class="token comment">//对应于enum操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_FLUSH</span> <span class="token expression"><span class="token number">10</span> </span><span class="token comment">//对应于flush操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_SHUTDOWN</span> <span class="token expression"><span class="token number">11</span> </span><span class="token comment">//对应于shutdown操作</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOIF_CODE_MAX</span> <span class="token expression"><span class="token number">12</span> </span><span class="token comment">//最大功能码</span></span>
<span class="token comment">//驱动程序分派函数指针类型</span>
<span class="token keyword">typedef</span> <span class="token class-name">drvstus_t</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">drivcallfun_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//驱动程序入口、退出函数指针类型</span>
<span class="token keyword">typedef</span> <span class="token class-name">drvstus_t</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">drventyexit_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">s_DRIVER</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token class-name">uint_t</span><span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_DRIVER</span>
<span class="token punctuation">{</span>
    <span class="token comment">//……</span>
    <span class="token class-name">drivcallfun_t</span> drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//驱动程序分派函数指针数组。</span>
    <span class="token class-name">list_h_t</span> drv_alldevlist<span class="token punctuation">;</span><span class="token comment">//驱动所管理的所有设备。</span>
    <span class="token class-name">drventyexit_t</span> drv_entry<span class="token punctuation">;</span>
    <span class="token class-name">drventyexit_t</span> drv_exit<span class="token punctuation">;</span>
    <span class="token comment">//……</span>
<span class="token punctuation">}</span><span class="token class-name">driver_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里，你是不是明白了？driver_t 结构中的 drv_dipfun 函数指针数组，正是存放上述那 12 个驱动程序函数的指针。这样操作系统内核就能通过 driver_t 结构，调用到对应的驱动程序函数操作对应的设备了。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>现在，我们搞明白了一个典型计算机的结构，里面有很多设备，需要操作系统合理地管理，而操作系统通过加载驱动程序来管理和使用设备，并为此提供了一系列的机制，这也是我们这节课的重点。</p><p>\\1. 计算机结构，我们通过了解一个典型的计算机系统结构，明白了设备的多样性。然后我们对设备做了抽象分类，采用分权而治的方式，<strong>让操作系统通过驱动程序来管理设备</strong>，同时又能保证操作系统和驱动程序分离，达到操作系统和设备解耦的目的。</p><p>\\2. 归纳整理设备和设备驱动的信息，抽象两个对应的数据结构，这两个数据结构在内存中的实例变量就代表<strong>一个设备 和 对应的驱动</strong>。然后，我们通过<mark>设备表</mark>结构组织了驱动和设备的数据结构。</p><p>\\3. 驱动程序最主要的工作是要操控设备，<strong>但这些个操作设备的动作是操作系统调用的</strong>，所以对驱动定义了必须要支持的 12 种标准方法，并对应到函数，这些函数的地址保存在驱动程序的数据结构中。</p><p>你可能在想，我们驱动程序是怎么加载的，设备又是怎么建立的呢？这是正是我们后面课程要解决的。不过你可以先开动脑筋，思考一下，提出你自己的见解，考虑一下这个问题的解决方案。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请你写出一个用来访问设备的接口函数，或者想一下访问一个设备需要什么参数。</p><p>欢迎你在留言区跟我交流互动，积极输出有助于更高效地理解这节课的内容。也欢迎你把这节课分享给同事、朋友。</p><p>好，我是 LMOS。我们下节课见！</p>`,86),l=[o];function i(r,k){return n(),a("div",null,l)}const m=s(c,[["render",i],["__file","J28-设备类型与设备驱动.html.vue"]]);export{m as default};
