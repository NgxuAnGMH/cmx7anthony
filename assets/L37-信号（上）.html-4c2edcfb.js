import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,e as p,d as l}from"./app-cdabc73c.js";const i="/assets/498199918340c55f59c91129ceb59f0c-e6635424.png",u="/assets/7cb86c73b9e73893e6b0e0433d476928-68c52e1a.png",r={},k=l('<h1 id="_37-信号-上-项目组a完成了-如何及时通知项目组b" tabindex="-1"><a class="header-anchor" href="#_37-信号-上-项目组a完成了-如何及时通知项目组b" aria-hidden="true">#</a> 37 | 信号（上）：项目组A完成了，如何及时通知项目组B？</h1><p>上一节最后，我们讲了信号的机制。在某些紧急情况下，我们需要给进程发送一个信号，紧急处理一些事情。</p><p>这种方式有点儿像咱们运维一个线上系统，为了应对一些突发事件，往往需要制定应急预案。就像下面的列表中一样。一旦发生了突发事件，马上能够找到负责人，根据处理步骤进行紧急响应，并且在限定的事件内搞定。</p><img src="'+i+`" alt="img" style="zoom:25%;"><p>我们现在就按照应急预案的设计思路，来看一看 Linux 信号系统的机制。</p><p>首先，第一件要做的事情就是，整个团队要想一下，线上到底能够产生哪些异常情况，越全越好。于是，我们就有了上面这个很长很长的列表。</p><p>在 Linux 操作系统中，为了响应各种各样的事件，也是定义了非常多的信号。我们可以通过 kill -l 命令，查看所有的信号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">kill</span> <span class="token expression"><span class="token operator">-</span>l</span></span>
 <span class="token number">1</span><span class="token punctuation">)</span> SIGHUP       <span class="token number">2</span><span class="token punctuation">)</span> SIGINT       <span class="token number">3</span><span class="token punctuation">)</span> SIGQUIT      <span class="token number">4</span><span class="token punctuation">)</span> SIGILL       <span class="token number">5</span><span class="token punctuation">)</span> SIGTRAP
 <span class="token number">6</span><span class="token punctuation">)</span> SIGABRT      <span class="token number">7</span><span class="token punctuation">)</span> SIGBUS       <span class="token number">8</span><span class="token punctuation">)</span> SIGFPE       <span class="token number">9</span><span class="token punctuation">)</span> SIGKILL     <span class="token number">10</span><span class="token punctuation">)</span> SIGUSR1
<span class="token number">11</span><span class="token punctuation">)</span> SIGSEGV     <span class="token number">12</span><span class="token punctuation">)</span> SIGUSR2     <span class="token number">13</span><span class="token punctuation">)</span> SIGPIPE     <span class="token number">14</span><span class="token punctuation">)</span> SIGALRM     <span class="token number">15</span><span class="token punctuation">)</span> SIGTERM
<span class="token number">16</span><span class="token punctuation">)</span> SIGSTKFLT   <span class="token number">17</span><span class="token punctuation">)</span> SIGCHLD     <span class="token number">18</span><span class="token punctuation">)</span> SIGCONT     <span class="token number">19</span><span class="token punctuation">)</span> SIGSTOP     <span class="token number">20</span><span class="token punctuation">)</span> SIGTSTP
<span class="token number">21</span><span class="token punctuation">)</span> SIGTTIN     <span class="token number">22</span><span class="token punctuation">)</span> SIGTTOU     <span class="token number">23</span><span class="token punctuation">)</span> SIGURG      <span class="token number">24</span><span class="token punctuation">)</span> SIGXCPU     <span class="token number">25</span><span class="token punctuation">)</span> SIGXFSZ
<span class="token number">26</span><span class="token punctuation">)</span> SIGVTALRM   <span class="token number">27</span><span class="token punctuation">)</span> SIGPROF     <span class="token number">28</span><span class="token punctuation">)</span> SIGWINCH    <span class="token number">29</span><span class="token punctuation">)</span> SIGIO       <span class="token number">30</span><span class="token punctuation">)</span> SIGPWR
<span class="token number">31</span><span class="token punctuation">)</span> SIGSYS      <span class="token number">34</span><span class="token punctuation">)</span> SIGRTMIN    <span class="token number">35</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">1</span>  <span class="token number">36</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">2</span>  <span class="token number">37</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">3</span>
<span class="token number">38</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">4</span>  <span class="token number">39</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">5</span>  <span class="token number">40</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">6</span>  <span class="token number">41</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">7</span>  <span class="token number">42</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">8</span>
<span class="token number">43</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">9</span>  <span class="token number">44</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">10</span> <span class="token number">45</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">11</span> <span class="token number">46</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">12</span> <span class="token number">47</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">13</span>
<span class="token number">48</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">14</span> <span class="token number">49</span><span class="token punctuation">)</span> SIGRTMIN<span class="token operator">+</span><span class="token number">15</span> <span class="token number">50</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">14</span> <span class="token number">51</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">13</span> <span class="token number">52</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">12</span>
<span class="token number">53</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">11</span> <span class="token number">54</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">10</span> <span class="token number">55</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">9</span>  <span class="token number">56</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">8</span>  <span class="token number">57</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">7</span>
<span class="token number">58</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">6</span>  <span class="token number">59</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">5</span>  <span class="token number">60</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">4</span>  <span class="token number">61</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">3</span>  <span class="token number">62</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">2</span>
<span class="token number">63</span><span class="token punctuation">)</span> SIGRTMAX<span class="token operator">-</span><span class="token number">1</span>  <span class="token number">64</span><span class="token punctuation">)</span> SIGRTMAX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些信号都是什么作用呢？我们可以通过 man 7 signal 命令查看，里面会有一个列表。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Signal     Value     Action   Comment
──────────────────────────────────────────────────────────────────────
SIGHUP        <span class="token number">1</span>       Term    Hangup detected on controlling terminal
                              or death of controlling process
SIGINT        <span class="token number">2</span>       Term    Interrupt from keyboard
SIGQUIT       <span class="token number">3</span>       Core    Quit from keyboard
SIGILL        <span class="token number">4</span>       Core    Illegal Instruction


SIGABRT       <span class="token number">6</span>       Core    Abort signal from <span class="token function">abort</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
SIGFPE        <span class="token number">8</span>       Core    Floating point exception
SIGKILL       <span class="token number">9</span>       Term    Kill signal
SIGSEGV      <span class="token number">11</span>       Core    Invalid memory reference
SIGPIPE      <span class="token number">13</span>       Term    Broken pipe<span class="token operator">:</span> write to pipe with no
                              readers
SIGALRM      <span class="token number">14</span>       Term    Timer signal from <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
SIGTERM      <span class="token number">15</span>       Term    Termination signal
SIGUSR1   <span class="token number">30</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">16</span>    Term    User<span class="token operator">-</span>defined signal <span class="token number">1</span>
SIGUSR2   <span class="token number">31</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span>    Term    User<span class="token operator">-</span>defined signal <span class="token number">2</span>
……
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像应急预案里面给出的一样，每个信号都有一个唯一的 ID，还有遇到这个信号的时候的默认操作。</p><p>一旦有信号产生，我们就有下面这几种，用户进程对信号的处理方式。</p><p>1.<strong><code>执行默认操作</code></strong>。Linux 对每种信号都规定了默认操作，例如，上面列表中的 Term，就是终止进程的意思。Core 的意思是 Core Dump，也即终止进程后，通过 Core Dump 将当前进程的运行状态保存在文件里面，方便程序员事后进行分析问题在哪里。</p><p>2.<strong><code>捕捉信号</code></strong>。我们可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数。</p><p>3.<strong><code>忽略信号</code></strong>。当我们不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。有两个信号是应用进程无法捕捉和忽略的，即 SIGKILL 和 SEGSTOP，它们用于在任何时候中断或结束某一进程。</p><p>接下来，我们来看一下信号处理最常见的流程。这个过程主要是分成两步，第一步是注册信号处理函数。第二步是发送信号。这一节我们主要看第一步。</p><p>如果我们不想让某个信号执行默认操作，一种方法就是对特定的信号注册相应的信号处理函数，设置信号处理方式的是 <strong>signal 函数</strong>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token class-name">sighandler_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">sighandler_t</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token class-name">sighandler_t</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这其实就是定义一个方法，并且将这个方法和某个信号关联起来。当这个进程遇到这个信号的时候，就执行这个方法。</p><p>如果我们在 Linux 下面执行 man signal 的话，会发现 Linux 不建议我们直接用这个方法，而是改用 sigaction。定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> signum<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>act<span class="token punctuation">,</span>
                     <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>oldact<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两者的区别在哪里呢？其实它还是将信号和一个动作进行关联，只不过这个动作由一个结构 struct sigaction 表示了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token punctuation">{</span>
  __sighandler_t sa_handler<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sa_flags<span class="token punctuation">;</span>
  __sigrestore_t sa_restorer<span class="token punctuation">;</span>
  <span class="token class-name">sigset_t</span> sa_mask<span class="token punctuation">;</span>    <span class="token comment">/* mask last for extensibility */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 signal 类似的是，这里面还是有 __sighandler_t。但是，其他成员变量可以让你更加细致地控制信号处理的行为。而 signal 函数没有给你机会设置这些。这里需要注意的是，signal 不是系统调用，而是 glibc 封装的一个函数。这样就像 man signal 里面写的一样，不同的实现方式，设置的参数会不同，会导致行为的不同。</p><p>例如，我们在 glibc 里面会看到了这样一个实现：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">define</span> <span class="token macro-name">signal</span> <span class="token expression">__sysv_signal</span></span>
__sighandler_t
<span class="token function">__sysv_signal</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> __sighandler_t handler<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act<span class="token punctuation">,</span> oact<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  act<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
  <span class="token function">__sigemptyset</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
  act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_ONESHOT <span class="token operator">|</span> SA_NOMASK <span class="token operator">|</span> SA_INTERRUPT<span class="token punctuation">;</span>
  act<span class="token punctuation">.</span>sa_flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>SA_RESTART<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__sigaction</span> <span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oact<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> SIG_ERR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> oact<span class="token punctuation">.</span>sa_handler<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">weak_alias</span> <span class="token punctuation">(</span>__sysv_signal<span class="token punctuation">,</span> sysv_signal<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里面，sa_flags 进行了默认的设置。SA_ONESHOT 是什么意思呢？意思就是，这里设置的信号处理函数，仅仅起作用一次。用完了一次后，就设置回默认行为。这其实并不是我们想看到的。毕竟我们一旦安装了一个信号处理函数，肯定希望它一直起作用，直到我显式地关闭它。</p><p>另外一个设置就是 <strong>SA_NOMASK</strong>。我们通过 __sigemptyset，将 sa_mask 设置为空。这样的设置表示在这个信号处理函数执行过程中，如果再有其他信号，哪怕相同的信号到来的时候，这个信号处理函数会被中断。如果一个信号处理函数真的被其他信号中断，其实问题也不大，因为当处理完了其他的信号处理函数后，还会回来接着处理这个信号处理函数的，但是对于相同的信号就有点尴尬了，这就需要这个信号处理函数写得比较有技巧了。</p><p>例如，对于这个信号的处理过程中，要操作某个数据结构，因为是相同的信号，很可能操作的是同一个实例，这样的话，同步、死锁这些都要想好。其实一般的思路应该是，当某一个信号的信号处理函数运行的时候，我们暂时屏蔽这个信号。后面我们还会仔细分析屏蔽这个动作，屏蔽并不意味着信号一定丢失，而是暂存，这样能够做到信号处理函数对于相同的信号，处理完一个再处理下一个，这样信号处理函数的逻辑要简单得多。</p><p>还有一个设置就是设置了 <strong>SA_INTERRUPT，清除了 SA_RESTART</strong>。这是什么意思呢？我们知道，信号的到来时间是不可预期的，有可能程序正在调用某个漫长的系统调用的时候（你可以在一台 Linux 机器上运行 man 7 signal 命令，在这里找 Interruption of system calls and library functions by signal handlers 的部分，里面说得非常详细），这个时候一个信号来了，会中断这个系统调用，去执行信号处理函数，那执行完了以后呢？系统调用怎么办呢？</p><p>这时候有两种处理方法，一种就是 SA_INTERRUPT，也即系统调用被中断了，就不再重试这个系统调用了，而是直接返回一个 -EINTR 常量，告诉调用方，这个系统调用被信号中断了，但是怎么处理你看着办。如果是这样的话，调用方可以根据自己的逻辑，重新调用或者直接返回，这会使得我们的代码非常复杂，在所有系统调用的返回值判断里面，都要特殊判断一下这个值。</p><p>另外一种处理方法是 SA_RESTART。这个时候系统调用会被自动重新启动，不需要调用方自己写代码。当然也可能存在问题，例如从终端读入一个字符，这个时候用户在终端输入一个&#39;a&#39;字符，在处理&#39;a&#39;字符的时候被信号中断了，等信号处理完毕，再次读入一个字符的时候，如果用户不再输入，就停在那里了，需要用户再次输入同一个字符。</p><p>因此，建议你使用 sigaction 函数，根据自己的需要定制参数。</p><p>接下来，我们来看 sigaction 具体做了些什么。</p><p>还记得在学习系统调用那一节的时候，我们知道，glibc 里面有个文件 syscalls.list。这里面定义了库函数调用哪些系统调用，在这里我们找到了 sigaction。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sigaction    <span class="token operator">-</span>       sigaction       i<span class="token operator">:</span>ipp   __sigaction     sigaction
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，在 glibc 中，__sigaction 会调用 __libc_sigaction，并最终调用的系统调用是 rt_sigaction。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span>
<span class="token function">__sigaction</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>oact<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token function">__libc_sigaction</span> <span class="token punctuation">(</span>sig<span class="token punctuation">,</span> act<span class="token punctuation">,</span> oact<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span>
<span class="token function">__libc_sigaction</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>oact<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> result<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kernel_sigaction</span> kact<span class="token punctuation">,</span> koact<span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span>act<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      kact<span class="token punctuation">.</span>k_sa_handler <span class="token operator">=</span> act<span class="token operator">-&gt;</span>sa_handler<span class="token punctuation">;</span>
      <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>kact<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token operator">-&gt;</span>sa_mask<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token class-name">sigset_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      kact<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> act<span class="token operator">-&gt;</span>sa_flags <span class="token operator">|</span> SA_RESTORER<span class="token punctuation">;</span>


      kact<span class="token punctuation">.</span>sa_restorer <span class="token operator">=</span> <span class="token operator">&amp;</span>restore_rt<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


  result <span class="token operator">=</span> <span class="token function">INLINE_SYSCALL</span> <span class="token punctuation">(</span>rt_sigaction<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>
                           sig<span class="token punctuation">,</span> act <span class="token operator">?</span> <span class="token operator">&amp;</span>kact <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                           oact <span class="token operator">?</span> <span class="token operator">&amp;</span>koact <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> _NSIG <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oact <span class="token operator">&amp;&amp;</span> result <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      oact<span class="token operator">-&gt;</span>sa_handler <span class="token operator">=</span> koact<span class="token punctuation">.</span>k_sa_handler<span class="token punctuation">;</span>
      <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>oact<span class="token operator">-&gt;</span>sa_mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>koact<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token class-name">sigset_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      oact<span class="token operator">-&gt;</span>sa_flags <span class="token operator">=</span> koact<span class="token punctuation">.</span>sa_flags<span class="token punctuation">;</span>
      oact<span class="token operator">-&gt;</span>sa_restorer <span class="token operator">=</span> koact<span class="token punctuation">.</span>sa_restorer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也是很多人看信号处理的内核实现的时候，比较困惑的地方。例如，内核代码注释里面会说，系统调用 signal 是为了兼容过去，系统调用 sigaction 也是为了兼容过去，连参数都变成了 struct compat_old_sigaction，所以说，我们的库函数虽然调用的是 sigaction，到了系统调用层，调用的可不是系统调用 sigaction，而是系统调用 rt_sigaction。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE4</span><span class="token punctuation">(</span>rt_sigaction<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> sig<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> act<span class="token punctuation">,</span>
    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> oact<span class="token punctuation">,</span>
    <span class="token class-name">size_t</span><span class="token punctuation">,</span> sigsetsize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">k_sigaction</span> new_sa<span class="token punctuation">,</span> old_sa<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>act<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>new_sa<span class="token punctuation">.</span>sa<span class="token punctuation">,</span> act<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>new_sa<span class="token punctuation">.</span>sa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  ret <span class="token operator">=</span> <span class="token function">do_sigaction</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> act <span class="token operator">?</span> <span class="token operator">&amp;</span>new_sa <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> oact <span class="token operator">?</span> <span class="token operator">&amp;</span>old_sa <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret <span class="token operator">&amp;&amp;</span> oact<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>oact<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old_sa<span class="token punctuation">.</span>sa<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>old_sa<span class="token punctuation">.</span>sa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
out<span class="token operator">:</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 rt_sigaction 里面，我们将用户态的 struct sigaction 结构，拷贝为内核态的 k_sigaction，然后调用 do_sigaction。do_sigaction 也很简单，还记得进程内核的数据结构里，struct task_struct 里面有一个成员 sighand，里面有一个 action。这是一个数组，下标是信号，内容就是信号处理函数，do_sigaction 就是设置 sighand 里的信号处理函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">k_sigaction</span> <span class="token operator">*</span>act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">k_sigaction</span> <span class="token operator">*</span>oact<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">,</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">k_sigaction</span> <span class="token operator">*</span>k<span class="token punctuation">;</span>
  <span class="token class-name">sigset_t</span> mask<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  k <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>sighand<span class="token operator">-&gt;</span>action<span class="token punctuation">[</span>sig<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


  <span class="token function">spin_lock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>sighand<span class="token operator">-&gt;</span>siglock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oact<span class="token punctuation">)</span>
    <span class="token operator">*</span>oact <span class="token operator">=</span> <span class="token operator">*</span>k<span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span>act<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sigdelsetmask</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token operator">-&gt;</span>sa<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span>
            <span class="token function">sigmask</span><span class="token punctuation">(</span>SIGKILL<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">sigmask</span><span class="token punctuation">(</span>SIGSTOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>k <span class="token operator">=</span> <span class="token operator">*</span>act<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>


  <span class="token function">spin_unlock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>sighand<span class="token operator">-&gt;</span>siglock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，信号处理函数的注册已经完成了。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> <strong>总结时刻</strong></h2><p>这一节讲了如何通过 API 注册一个信号处理函数，整个过程如下图所示。</p><p>在用户程序里面，有两个函数可以调用，一个是 signal，一个是 sigaction，推荐使用 sigaction。</p><p>用户程序调用的是 Glibc 里面的函数，signal 调用的是 <code>__sysv_signal</code>，里面默认设置了一些参数，使得 signal 的功能受到了限制，sigaction 调用的是 <code>__sigaction</code>，参数用户可以任意设定。</p><p>无论是 <code>__sysv_signal</code> 还是 <code>__sigaction</code>，调用的都是统一的一个系统调用 rt_sigaction。</p><p>在内核中，rt_sigaction 调用的是 do_sigaction 设置信号处理函数。在每一个进程的 task_struct 里面，都有一个 sighand 指向 struct sighand_struct，里面是一个数组，下标是信号，里面的内容是信号处理函数。</p><figure><img src="`+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> <strong>课堂练习</strong></h2><p>你可以试着写一个程序，调用 sigaction 为某个信号设置一个信号处理函数，在信号处理函数中，如果收到信号则打印一些字符串，然后用命令 kill 发送信号，看是否字符串被正常输出。</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>信号类似内核里面的中断，只不过是在用户态的<br> 作者回复: 是的</p>',55),d=n("br",null,null,-1),m={href:"https://www.cnblogs.com/wblyuyang/archive/2012/11/13/2768923.html",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),b={href:"https://www.runoob.com/linux/linux-comm-kill.html",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,[s("c语言开发者路过，表示以前从来不知道signal不是系统调用"),n("br"),s(" 作者回复: strace一下")],-1),_=n("p",null,[s("关于SA_ONESHOT，为什么我平时用signal的时候，处理函数可以被重复调用呢"),n("br"),s(" 作者回复: 使用的库不一样？"),n("br"),s(" 网友回复：新版本内核【4.19有测试】对signal系统代码已经做了改变，不再存在信号注册函数只有第一次生效而后续信号处理按照默认处理的问题。")],-1);function I(S,y){const a=e("ExternalLinkIcon");return o(),c("div",null,[k,n("p",null,[s("课后练习，参考文档："),d,n("a",m,[s("https://www.cnblogs.com/wblyuyang/archive/2012/11/13/2768923.html"),p(a)]),v,n("a",b,[s("https://www.runoob.com/linux/linux-comm-kill.html"),p(a)])]),g,_])}const T=t(r,[["render",I],["__file","L37-信号（上）.html.vue"]]);export{T as default};
