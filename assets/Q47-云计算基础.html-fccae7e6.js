import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as d,c as l,a as e,b as a,e as t,d as r}from"./app-cdabc73c.js";const o="/assets/d3d01c2416bda3010a3ff235336066d3-bff52b4f.png",c="/assets/5e761d20e4715629yyb1fac2c87d533c-4482e1a5.jpg",p="/assets/c7a72156acaf836e57fff0fa94a7a44c-4cd1b454.jpg",u="/assets/7ab4187b8269ebcf97e41052b7926e9d-485217eb.jpg",m="/assets/7fb35e63ac2b2838aaaf1325ed4eddb9-70268258.jpg",v="/assets/4615a7e5a804e64a134d3e497f904a83-99365328.jpg",b="/assets/9yy57f3bfa3ac9759502e85dec94a2cc-1f6de929.jpg",h="/assets/1b759df4db2cab2e82246718b198305c-76ec5d23.jpg",g="/assets/b2b5182f6a389ea583182996bb41d285-fb20db53.jpg",_="/assets/564f0aae8d1ae887c3805ec6c01aa519-00914bf5.jpg",f={},S=e("h1",{id:"加餐01-云计算基础-自己动手搭建一款iaas虚拟化平台",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#加餐01-云计算基础-自己动手搭建一款iaas虚拟化平台","aria-hidden":"true"},"#"),a(" 加餐01｜云计算基础：自己动手搭建一款IAAS虚拟化平台")],-1),x=e("p",null,"你好，我是 LMOS。",-1),k=e("p",null,"必学内容已经更新结束，不知道这一个月以来，你是否跟上了大部队的步伐，有什么样的学习收获？在你学习追更期间，我也在为你精心准备技术雷达专题的加餐。",-1),I=e("p",null,"这节课，我会带你一起了解 KVM，并带你动手搭建一套私有化的 IAAS 平台，这其实是一个既有趣又有价值的事情。首先，让我们从全局的角度来看一下，目前业界常用的云计算平台，它的架构分层是什么样子。",-1),A=e("h2",{id:"名词解释woc",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#名词解释woc","aria-hidden":"true"},"#"),a(" 名词解释woc")],-1),w={href:"https://www.intel.cn/content/www/cn/zh/cloud-computing/as-a-service.html",target:"_blank",rel:"noopener noreferrer"},P=e("p",null,"基础设施即服务 (IaaS) / 平台即服务 (PaaS) / 软件即服务 (SaaS)",-1),V={href:"https://www.intel.cn/content/www/cn/zh/cloud-computing/overview.html",target:"_blank",rel:"noopener noreferrer"},C=e("em",null,"即服务",-1),M=e("em",null,"一切皆服务",-1),q=e("p",null,[a("首先，你需要对为您的应用程序或工作负载提供支持的最佳方法进行评估。您需要考虑各种因素，例如"),e("mark",null,"应用程序的可移动性"),a("、"),e("mark",null,"数据的可移动性、安全性和合规性"),a("。这些因素将会决定您"),e("em",null,"在本地还是远端"),a("构建服务。")],-1),y=e("strong",null,"本地服务",-1),z={href:"https://www.intel.cn/content/www/cn/zh/cloud-computing/private-cloud/overview.html",target:"_blank",rel:"noopener noreferrer"},W=e("p",null,[a("最近，云服务提供商已开始提供"),e("strong",null,"本地“私有云”服务"),a("。例如，IBM Cloud Private 提供了一个应用程序平台，用于开发和管理本地的容器化应用程序。这些新服务有助于减少与本地云架构相关的管理和资本支出。")],-1),B=e("strong",null,"远端服务",-1),T={href:"https://www.intel.cn/content/www/cn/zh/cloud-computing/public-cloud/overview.html",target:"_blank",rel:"noopener noreferrer"},K=r('<blockquote><p>选择 IaaS、PaaS、SaaS 还是其它云服务模型<br> 取决于您可用的基础设施、IT 人力资源、成本考虑和云安全需求。</p></blockquote><h3 id="_1-基础设施即服务-iaas" tabindex="-1"><a class="header-anchor" href="#_1-基础设施即服务-iaas" aria-hidden="true">#</a> 1 基础设施即服务 (IaaS)</h3><blockquote><p>提供可以运行代码的硬件。（代码 = 软件堆栈）</p></blockquote><p>利用基础设施即服务 (IaaS)，云服务提供商可以拥有并管理<em>那些<u>运行您的软件堆栈的</u>硬件</em>。它包括服务器、网络和存储。如果您不想购买和维护基础设施，这便是一个可以大大降低成本的战略。</p><p>但是您的 IT 团队仍有大量工作要做。在 IaaS 模型下，<strong>您的 IT 团队需要管理操作系统 、数据库、应用程序、功能 和 您的组织的所有数据</strong>。因此，与其它服务模型相比，您的 IT 团队将具有更大的控制力和灵活性。</p><p>IaaS 是自助服务，您的 IT 团队可以通过 API 或仪表板获取所需资源。它的常见示例包括亚马逊 AWS、谷歌计算引擎和微软 Azure，您可以通过它们购买自己所需的容量。也就是说，它几乎不涉及约定，如果您认为自己的需求在不久以后会有变化，它就会体现出优势。如果您属于一个大型组织，您也可以通过您的企业的另一个部分访问 IaaS。</p><h3 id="caas" tabindex="-1"><a class="header-anchor" href="#caas" aria-hidden="true">#</a> ##CaaS</h3><p>CaaS 通常被认为是 IaaS 的一种以容器为载体的子集，CaaS 介于 IaaS 和 PaaS 之间，它起到了屏蔽底层系统 IaaS，支撑并丰富上层应用平台 PaaS 的作用。</p><ol><li>可移植性强、用容器开发的应用可移植性强，足够灵活，可以轻松在不同的CaaS供应商之间移动工作负载。</li><li>可扩展性好、能根据实际需求扩展或缩减容器数量。</li><li>更高的资源利用率、容器不需要单的操作系统，所需资料也比虚拟机少，成本也更低。</li><li>安全性高、由于容器之间是彼此隔离的，所以当一个容器遭到破坏的时候，其他容器并不会受到影像。</li><li>速度快、容器自主性更强，启动和停止只要几秒钟就足够，这给运维和开发人员带来了更快更流畅的使用体验。</li></ol><h3 id="_2-平台即服务-paas" tabindex="-1"><a class="header-anchor" href="#_2-平台即服务-paas" aria-hidden="true">#</a> 2 平台即服务 (PaaS)</h3><blockquote><p>提供可以运行代码的硬件。（代码 = 软件堆栈）<br> ++ 操作系统 &amp; 数据库<br> = 一个平台，可以部署自己的应用程序、自己实现各种功能，并自己存储数据。</p></blockquote><p>下一级服务是平台即服务 (PaaS)。PaaS 与 IaaS 相似，区别在于您的云服务提供商*（除了那些<u>运行您的软件堆栈的</u>硬件外）还提供了<mark>操作系统 和 数据库</mark>*。这意味着您的 IT 团队的工作量较少， <strong>但您的组织仍然要负责应用程序、功能 和 数据</strong>。</p><p>PaaS 为您的开发者提供了一个简单、可扩展的应用程序构建平台。它与 IaaS 非常相似，您可以根据需要购买更多资源。由于多个用户可以访问开发应用程序，因此 PaaS 可以简化工作流程并加强协调。PaaS 的示例包括 AWS Elastic Beanstalk 和谷歌应用程序引擎。</p><h3 id="_3-软件即服务-saas" tabindex="-1"><a class="header-anchor" href="#_3-软件即服务-saas" aria-hidden="true">#</a> 3 软件即服务 (SaaS)</h3><blockquote><p>提供可以运行代码的硬件。（代码 = 软件堆栈）<br> ++ 操作系统 &amp; 数据库<br> ++ 应用程序功能<br> = 一个软件，一个应用程序，已经实现了需要的对应功能，只需负责数据。</p></blockquote><p>最后，软件即服务 (SaaS) 为最终用户提供了最多的支持，是所有交付模型中最简单的一种。您可能已经在您的组织中使用过它。</p><p>SaaS 可以在多租户架构中运行，<em>软件的一个实例可以为多个用户提供服务</em>。一般来说， <em>SaaS 产品不需要下载或安装，您的最终用户不需要管理软件更新</em>。<strong>他们只需要负责自己的数据</strong>。SaaS 的常见示例包括 <mark>CRM 软件</mark>、<mark>基于云的文件存储和电子邮件</mark>。</p><h3 id="其它服务" tabindex="-1"><a class="header-anchor" href="#其它服务" aria-hidden="true">#</a> ##其它服务</h3><p>除了 IaaS、PaaS 和 SaaS 之外，您还需要了解几种其它类型的云服务模型。</p>',19),U=e("li",null,[e("p",null,[e("strong",null,"功能即服务 (FaaS)"),a(" - 提供更深层次的服务。使用 FaaS，您的用户只需管理功能和数据。云服务提供商则管理您使用的应用程序。这种选项在开发者中特别常见，因为您无需在代码未运行时为服务付费。常见功能包括"),e("em",null,"数据处理、数据验证或分类，以及移动和物联网应用程序的后端"),a("。FaaS 供应商包括 AWS* Lambda、Azure Functions 和谷歌云 Functions。")])],-1),j=e("li",null,[e("p",null,[e("strong",null,"裸机即服务 (BMaaS)"),a(" - 一些企业不喜欢将工作负载迁移到"),e("em",null,"与其他客户共享的虚拟化云环境中 X"),a("， 便用裸机即服务 (BMaaS) 方案来替代 IaaS 和 PaaS。它为企业提供了专用服务器环境来补充虚拟化云服务，且该专用服务器环境与云具有相同的敏捷性、可扩展性和效率。特别是，对于需要在没有延迟或延时开销的情况下*执行短期数据密集型处理（例如媒体编码或渲染农场）*的企业来说，BMaaS 是一个不错的选择。")])],-1),L=e("strong",null,"数据库即服务 (DBaaS)",-1),N=e("em",null,"提供数据库访问权限的 PaaS",-1),D={href:"https://www.intel.cn/content/www/cn/zh/cloud-computing/hybrid-cloud/overview.html",target:"_blank",rel:"noopener noreferrer"},E=e("h2",{id:"云计算的分层架构",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#云计算的分层架构","aria-hidden":"true"},"#"),a(" 云计算的分层架构")],-1),F=e("p",null,"业界一般会把云计算分为三层，分层模型图如下所示：",-1),O=e("img",{src:o,alt:"img",style:{zoom:"33%"}},null,-1),G={href:"https://www.intel.cn/content/www/cn/zh/cloud-computing/as-a-service.html",target:"_blank",rel:"noopener noreferrer"},H=r('<p>从架构分层上，我们看得出 IAAS 是整个云计算的基础，而 <mark>KVM 虚拟化技术</mark>则又是 <mark>IAAS 平台</mark>的基础，堪称云计算大厦的地基。如果 IAAS 层离开了虚拟化技术，<u>软件系统就会在一定程度上失去屏蔽硬件差异和弹性伸缩迁移的能力</u>。</p><p>另外，从产品发展历史的角度来看，不论是国外的 Amazon 云还是国内的腾讯云、阿里云，早期最先上线开始售卖的产品，其实都是<mark>弹性云虚拟机</mark>。</p><p>我们可以脑补一个场景，如果你的老板发现公司业务发展得不错，但是一直把核心业务数据放在公有云上，会有一定的风险。<em>这时候需要你来搭建一套私有化的 IAAS 平台，你能做得到么</em>？</p><p>如果我们想要在虚拟化领域做出<mark>一款 IAAS 平台</mark>，仅仅只了解核心原理远远不够。因为要想实现一个工业级的 IAAS，我们直接操作底层 API，就会导致上层和底层的强耦合，这不利于提高通用性。</p><h2 id="kvm-虚拟化的基础能力" tabindex="-1"><a class="header-anchor" href="#kvm-虚拟化的基础能力" aria-hidden="true">#</a> KVM 虚拟化的基础能力</h2><p>所以我们不妨结合软件工程思想分析一下，如果我们想解除耦合，需要怎么办呢？</p><p>没错，<strong>我们可以统一抽象出上层 API</strong>。</p><p>而接下来我们要讲的 <mark>libvirt</mark>，就是一套主流的 <mark>KVM 虚拟机管理程序接口 和 工具</mark>。</p><h3 id="初识-libvirt" tabindex="-1"><a class="header-anchor" href="#初识-libvirt" aria-hidden="true">#</a> 初识 libvirt</h3><p>libvirt 主要包含 3 个部分，分别是：<mark>命令行管理工具 virsh</mark>、<mark>API 接口库</mark>、<mark>守护进程 libvirtd</mark>。其中 libvirtd 进程主要负责<em>执行对虚拟机的各种管理工作</em>，在后面我们会展开讲解。</p><p>libvirt 的核心概念包括<mark>节点</mark>（Node）、<mark>虚拟机监控器</mark> (VMM/Hypervisor)、<mark>域</mark>（Domain）。</p><ol><li><mark>节点</mark>就是<strong>一台具体的物理机</strong>；</li><li><mark>虚拟机监控器</mark>是指用来<strong>管理<u>物理机上多个虚拟机的</u>软件</strong>；</li><li>而<mark>域</mark>指的是**<u>具体运行在物理机上的</u>一台虚拟机**，<br> 有些云计算平台也把它称作客户机 / 实例，但其实表达的是同一个意思。</li></ol><p>具体的概念逻辑关系图如下所示：</p><img src="'+c+`" alt="img" style="zoom:25%;"><p>libvirtd 主要负责<em>执行其他管理工具发送过来的虚拟化管理指令</em>。</p><p><strong>各种客户端</strong>（比如 <code>virsh</code>）可以通过链接<mark>远程或者本地的 libvirtd 进程</mark>来执行虚拟机的开关机、重启迁移等操作，还可以收集物理机和虚拟机各种资源的使用状况和运行状态。</p><p>如果我们想要通过 libvirt 管理<mark>远程或者本地的 Node</mark>，就必须安装 <code>libvirtd</code>。</p><h3 id="libvirt-核心-api" tabindex="-1"><a class="header-anchor" href="#libvirt-核心-api" aria-hidden="true">#</a> libvirt 核心 API</h3><p>如果想要理解 libvirt 的功能，效率最高的方式也许就是先看一下它的核心 API。libvirt API 主要包含 8 个部分，我们分别来看看。</p><ol><li>想要管理虚拟机，<strong>首先要和 VMM/Hypervisor 建立连接</strong>。<br> 这就需要用到连接 VMM/Hypervisor 的相关 API，<br> 其命名方式一般是以 <code>virtConnect</code> 为前缀的函数。</li><li>第二部分是<strong>节点管理</strong>相关的 API，命名方式一般是以 <code>virNode</code> 为前缀的函数。<br> 这部分 API 用于管理运行着域的物理节点，<br> 具体可以用来查询物理节点上的 CPU、内存等基本信息，也可以控制物理节点暂停 / 启动等操作。</li><li>第三部分是<strong>域管理</strong>相关的 API，命名方式一般是以 <code>virDomain</code> 为前缀的函数。<br> 这部分 API 主要用于对各个节点上的域进行管理操作，包括控制域的生命周期、查询域的信息等操作。</li><li>第四、五部分是<strong>存储</strong>相关的 API。<br><strong>存储卷管理</strong>相关的 API，命名方式一般是以 <code>virStoreVol</code> 为前缀的函数。<br> 这类 API 用来<em>管理虚拟机镜像</em>，虚拟机镜像一般是 qed、vmdk、raw、qcow2 等格式；<br><strong>而存储池管理</strong>相关的 API，命名方式一般是以 <code>virStorePool</code> 为前缀的函数。<br> 存储池管理的是(<em>各种文件系统</em>)网络共享文件系统、本地文件系统、iSCSI 共享文件系统、LVM 分区等等。</li><li>第六部分是<strong>网络管理</strong>相关的 API，命名方式一般是以 <code>virNetwork</code>、<code>virtInterface</code> 为前缀的函数。<br> 这些函数可以用于创建、释放网络接口、查询网络接口的相关状态以及管理网桥。</li><li>第七部分是<strong>数据流管理</strong>相关的 API，命名方式一般是以 <code>virStream</code> 为前缀的函数。<br> 这些函数可以用于数据流的传输管理。</li><li>最后是第八部分，<strong>事件管理</strong>相关的 API，命名方式一般是以 <code>virEvent</code> 为前缀的函数。<br><mark>libvirt 的事件管理机制</mark>可以让我们注册<strong>自定义的事件处理逻辑</strong>，当某些事件（比如虚拟机暂停、恢复、启停等）发生的时候，我们可以根据这些事件发生后的通知信息来处理后续逻辑。</li></ol><h3 id="怎么使用-virah-工具" tabindex="-1"><a class="header-anchor" href="#怎么使用-virah-工具" aria-hidden="true">#</a> 怎么使用 virah 工具？</h3><p>其实实际工作中并不是所有场景都要写个程序去调用 libvirt API 的，我们可以通过 KVM 系统提供的 virah 工具来进行命令行管理，这样可以省去一些开发工作量。</p><p>virsh 程序是一个用来管理虚拟机的命令行客户端，在我们日常运维、debug 排查问题的时候使用这个工具会比较方便。大多数 virsh 命令的用法是这样的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>virsh [选项] … &lt; 命令 &gt; &lt; 域 &gt; [参数] …
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我把常用命令用表格做了梳理，供你参考：</p><img src="`+p+'" alt="img" style="zoom:25%;">',26),Q={href:"https://www.libvirt.org/manpages/virsh.html",target:"_blank",rel:"noopener noreferrer"},X=r(`<h2 id="动手搭建一款自己的-iaas-虚拟化平台" tabindex="-1"><a class="header-anchor" href="#动手搭建一款自己的-iaas-虚拟化平台" aria-hidden="true">#</a> 动手搭建一款自己的 IAAS 虚拟化平台</h2><p>网上有很多讲 IAAS 平台的教程。上来就拿 OpenStack、Ovirt、ProxmoxVE 之类的商用软件开始讲，这其实存在一定的问题。</p><p>首先，这些软件是商业用途，对外提供服务需要额外的授权费用。</p><p>其次，这些软件为了兼容太多的业务场景做了很多复杂的设计，<u>这并不利于新手学习</u>。</p><p>最关键的是，这些商用软件针对自己的理解，对很多底层 API 做了封装。这样虽然简化了使用开发、优化了使用体验，<u>但也让我们失去了对底层细节的直接操纵能力，容易导致学习理解不够透彻</u>。</p><p>所以，我们选择了基于<em>更加轻量级的 KVM Web 管理系统——WebVirtCloud</em>，用它来搭建我们的学习和实验环境。</p><h3 id="硬件配置-操作系统版本" tabindex="-1"><a class="header-anchor" href="#硬件配置-操作系统版本" aria-hidden="true">#</a> 硬件配置 &amp; 操作系统版本</h3><p>KVM 是一种依赖于<em>硬件虚拟化扩展</em>支持的技术，因此我们首先要选择一款支持 Intel VT/AMD-V 指令集的 CPU。</p><p>这里我选择的是 Intel® Xeon® CPU E5-2680 v4 这款 CPU 的服务器，你可以使用下面的命令查看你的 CPU 是否支持虚拟化：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cat /proc/cpuinfo | grep vmx  ## Intel的CPU
cat /proc/cpuinfo | grep svm  ## Intel的CPU
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果出现类似下图中的显示，则说明这款 CPU 是支持硬件虚拟化指令集的。</p><img src="`+u+`" alt="img" style="zoom:25%;"><p>当然，有一些电脑的 CPU 虽然支持硬件虚拟化，<em>但是有可能默认并未启用</em>，这时候就需要我们<em>在 BIOS 设置中</em>开启硬件虚拟化功能，才可以使用（具体操作你可以自行 Google）。</p><p>其次，因为后续可能需要开多个虚拟机，内存占用可能会略高，建议你选择 RAM 大于 8GB 的电脑，这里我选择了 128GB 的内存。</p><p>除了了硬件配置，我们还得约定一下操作系统版本。这里我选择的是 <code>Ubuntu 20.04 LTS</code> 版本（LTS 版本支持的更久，基础库也更稳定），关于 Ubuntu 系统的安装，网上有很多教程，相信你有能力搞定它。</p><h3 id="安装依赖并修改配置" tabindex="-1"><a class="header-anchor" href="#安装依赖并修改配置" aria-hidden="true">#</a> 安装依赖并修改配置</h3><p>硬件配置要求和操作系统版本我们约定好了，我们还要通过执行下面的命令来安装必要的依赖：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo apt-get install vim libvirt-daemon-system libvirt-clients
sudo apt-get install sasl2-bin libsasl2-modules bridge-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们需要修改 <code>vim /etc/default/libvirtd</code> 的配置，找到 <code>libvirtd_opts</code>，修改为 <code>libvirtd_opts=“-l”</code>。</p><p>为了暴露远程调用能力，我们需要修改 <code>vim /etc/libvirt/libvirtd.conf</code> 配置文件，从而开启 <code>tcp、sasl</code>。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 允许tcp监听
listen_tcp = 1
listen_tls = 0

# 开放tcp端口
tcp_port = &quot;16509&quot;

# 监听地址修改为 0.0.0.0，或者 127.0.0.1
listen_addr = &quot;0.0.0.0&quot;

# 配置tcp通过sasl认证
auth_tcp = sasl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，我们需要开启 vnc 端口监听，编辑 <code>vim /etc/libvirt/qemu.conf</code>，找到 “<code># vnc_listen = …</code>” ，将前面的 <code>#</code> 注释修改为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vnc_listen = &quot;0.0.0.0&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了用户组下的用户能够使用 libvirt，我们需要继续修改上面的配置文件，找到 <code>user</code> 和 <code>group</code> 这两个选项，<em>取消注释</em>，修改为 <code>libvirt-qemu</code>，具体命令是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>user = &quot;libvirt-qemu&quot;
group = &quot;libvirt-qemu&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们需要重启一下服务，命令是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo service libvirtd restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启之后，我们可以通过下面的命令来查看服务状态。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo service libvirtd status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果出现下图这样的效果，就说明配置成功了。</p><figure><img src="`+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="创建管理员账号" tabindex="-1"><a class="header-anchor" href="#创建管理员账号" aria-hidden="true">#</a> 创建管理员账号</h3><p>为了方便管理，我们需要创建管理员账号。在创建管理员账号之前，我们需要先确认一下 <code>/etc/sasl2/libvirt.conf</code> 文件的最后一行是不是 <code>sasldb_path: /etc/libvirt/passwd.db</code>，以及 <code>mech_list</code> 的值是不是 <code>digest-md5</code>。</p><p>我机器上的运行效果如下图所示：</p><figure><img src="'+v+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，我们就可以为 libvirtd 创建用户名和密码了，客户端连接时需要用到它们。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo saslpasswd2 -a libvirt virtadmin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，如果你想要查询已经创建好的用户，就可以使用这条命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo sasldblistusers2 -f /etc/libvirt/passwd.db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们需要重启 libvirtd 服务，让刚刚创建的用户生效。重启命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo service libvirtd restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="安装-webvirtcloud" tabindex="-1"><a class="header-anchor" href="#安装-webvirtcloud" aria-hidden="true">#</a> 安装 WebVirtCloud</h3><p>安装好了 libvirt 之后，你可能会觉得通过命令行管理 KVM 虚拟机会比较繁琐，那么能不能像使用云主机那样，通过 <code>Web UI</code> 来可视化的管理虚拟机呢？当然是可以的，这时候我们就需要安装一下 <code>WebVirtCloud</code> 了。</p>`,43),R=e("em",null,"开源的轻量级 Web 客户端",-1),J={href:"https://github.com/retspen/webvirtcloud",target:"_blank",rel:"noopener noreferrer"},Y=r(`<p>它不像 OpenStack 之类的开源项目那样太过复杂，<u>非常适合刚入门虚拟化 IAAS 平台开发的工程师学习和使用</u>。</p><p>为了节约安装时间，我们可以使用官方提供的快速安装脚本一键安装：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>wget https://raw.githubusercontent.com/retspen/webvirtcloud/master/install.sh
chmod 744 install.sh
# 需要在root权限下运行
sudo ./install.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装完毕后，我们可以使用下面的命令，重启 Nginx 和 supervisor：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo service nginx restart
sudo service supervisor restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们来看看 WebVirtCloud 是正确启动了，查看命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo supervisorctl status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 WebVirtCloud 的进程处于运行状态，则说明安装成功了。</p><h3 id="创建虚拟机" tabindex="-1"><a class="header-anchor" href="#创建虚拟机" aria-hidden="true">#</a> 创建虚拟机</h3><p>安装好 WebVirtCloud，我们继续实验，一起完成创建虚拟机的操作。</p>`,10),Z={href:"http://127.0.0.1/",target:"_blank",rel:"noopener noreferrer"},$=r('<p>要想基于当前物理机创建虚拟机，我们先要点击计算节点菜单，把前面创建好的账号添加到计算节点，如下图所示：</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，我们需要点击刚刚创建成功的计算节点上的眼睛图标，进入存储菜单添加存储资源池：</p><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>现在，我们就可以点击实例菜单的加号，创建新实例（虚拟机）啦：</p><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>创建好虚拟机之后，你就可以选择安装自己喜欢的操作系统了，下图就是我安装的 AlmaLinux 操作系统的运行状态：</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>好了，到目前为止，你已经成功地搭建了一套自己的 IAAS 平台，并在上面运行起了 AlmaLinux 操作系统，这说明<em>这套 IAAS 已经拥有了和主流云虚拟机平台类似的基础能力</em>。</p><p>如果是家用的场景，我们还可以在此基础上搭建自己的 <mark>NAS 存储</mark>、<mark>软路由</mark>、<mark>家庭影院</mark>等常用软件。如果用在公司，我们可以用它搭建<mark>开发环境</mark>、<mark>测试环境</mark>、<mark>生产环境</mark>等等。更多用途，等待着你的探索和发掘。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>这节课，我们使用 KVM、libvirt 和 WebVirtCloud 从零开始搭建了一套自己的 IAAS 平台。</p><p>首先，我带你了解了云计算的分层架构。从架构分层上就能看出，IAAS 是整个云计算的基础。IAAS 层离不开虚拟化技术的支撑。</p><p>接着我为你介绍了主流的 <mark>KVM 虚拟机管理程序接口和工具</mark>——<mark>libvirt</mark>，带你了解了它的核心 API。最后是动手搭建的实操环节，推荐你跟着课程里的讲解亲自动手实验一下，这样才会有更深的体会。</p><p>另外，在第一季专栏《操作系统实战 45 讲》中，我曾经给你分享了 KVM 的核心原理和部分核心代码逻辑，如果感兴趣，可以去看看《43 | 虚拟机内核：KVM 是什么？》。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请你思考一下：WebVirtCloud 是如何把页面上创建虚拟机的操作传递给 libvirt，并找出对应的关键代码的呢？</p>',17);function ee(ae,ie){const i=s("ExternalLinkIcon");return d(),l("div",null,[S,x,k,I,A,e("blockquote",null,[e("p",null,[a("具体定义你可以看 Intel "),e("a",w,[a("的这篇文章"),t(i)]),a("。")]),P]),e("p",null,[e("a",V,[a("云计算"),t(i)]),a("已成为企业技术不可或缺的组成部分，可帮助您方便、高效地为最终用户提供应用程序和 IT 即服务 (ITaaS)。如今，云战略最重要的一个部分就是为您的组织选择合适的云服务模型。在查看不同的选项时，您会看到 IaaS、PaaS、SaaS 等类似术语。这些都是“"),C,a("”模型，是“"),M,a("”（也称为 “XaaS”）这个大趋势的一部分。您选择的服务类型取决于您可用的基础设施、IT 人力资源、成本考虑和云安全需求。")]),q,e("p",null,[y,a("需要最高的管理水平以及最大的资本支出，但长期而言可能是成本效率最高的方式。所有内容都由您的 IT 团队在"),e("a",z,[a("私有云"),t(i)]),a("中、在属于您组织的硬件上运行。")]),W,e("p",null,[B,a("（也称为“"),e("a",T,[a("公有云"),t(i)]),a("服务”）一般由云服务提供商提供，有多种服务模型类型。")]),K,e("ul",null,[U,j,e("li",null,[e("p",null,[L,a(" - 这是一种"),N,a("。DBaaS 是一种很好的启用"),e("a",D,[a("混合云"),t(i)]),a("的方法，因为应用程序可以在本地和云基础设施之间移动，但对最终用户没有任何影响。通过 DBaaS 集成新技术也简单得多，因为应用程序开发者不需要任何额外资源（或额外的改动）即可使用新技术。DBaaS 的一个示例是微软 Azure SQL 数据库。")])])]),E,F,O,e("p",null,[a("具体定义你可以看 Intel "),e("a",G,[a("的这篇文章"),t(i)]),a("，这里就不展开了。")]),H,e("p",null,[a("更多指令操作也和上表列出的类似，"),e("a",Q,[a("你可以参考官方文档进一步了解"),t(i)]),a("。")]),X,e("p",null,[a("WebVirtCloud 是一个基于 libvirt 的"),R,a("，它是基于 Python 的 Django 框架进行开发的，整体代码结构比较清晰，代码量虽然不多，但已经包含了一个生产可用的 IAAS 平台所需的大部分功能了。这个项目的 GitHub 地址，"),e("a",J,[a("你可以点这里查看"),t(i)]),a("。")]),Y,e("p",null,[a("首先我们需要在浏览器访问 "),e("a",Z,[a("http://127.0.0.1/"),t(i)]),a(" 这个地址，然后填写用户名密码“admin/admin”，就可以进入到 Web 控制台。")]),$])}const ne=n(f,[["render",ee],["__file","Q47-云计算基础.html.vue"]]);export{ne as default};
