import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a as s,b as n,e as l,d as a}from"./app-cdabc73c.js";const u="/assets/727431ce8a824f12541ea00a6863355f-bba492e9.jpg",r="/assets/856yy7f373d45a5de8e5881b46bc030d-9572f614.jpg",i="/assets/867b43606a4e52777003f20cbcb61cab-fdc1bc2f.jpg",k="/assets/9407395b0d8dc0eef24878c1a9978353-48323cad.jpg",d={},m=a('<h1 id="_09-手写cpu-四-如何实现cpu流水线的访存阶段" tabindex="-1"><a class="header-anchor" href="#_09-手写cpu-四-如何实现cpu流水线的访存阶段" aria-hidden="true">#</a> 09｜手写CPU（四）：如何实现CPU流水线的访存阶段？</h1><p>你好，我是 LMOS。</p><p>先简单回顾一下上一节课，我们设计了 MiniCPU 流水线的执行相关模块。其中包括<mark>执行控制模块</mark>、<mark>通用寄存器模块</mark>，以及可以进行加减法运算、大小比较、移位操作的 <mark>ALU 模块</mark>。</p><p>指令执行之后就到了流水线的下一级——<em>访存</em>。这节课我们就重点聊聊怎么设计实现访存的相关模块。在你的设想里，访存模块必要的组成部分有哪些呢？</p><p>如果你的第一反应是访存控制模块，我只能说你只答对了一部分。访存控制模块虽然是流水线的主线，但你可能忽略了流水线中的数据相关性问题。因此，今天我们先想办法解决流水线的数据冒险问题，然后再完成流水线访存阶段相关模块的设计。</p>',5),b={href:"https://gitee.com/lmos/Geek-time-computer-foundation/tree/master/lesson06~11/mini_cpu",target:"_blank",rel:"noopener noreferrer"},v=a(`<h2 id="流水线数据冒险" tabindex="-1"><a class="header-anchor" href="#流水线数据冒险" aria-hidden="true">#</a> 流水线数据冒险</h2><p>在开始设计访存模块之前，我们得先解决一个问题，即流水线的数据冒险。</p><p>在 CPU 流水线里，执行不同的指令时会发生这样的情况：一条指令 B，它依赖于前面还在流水线中的指令 A 的执行结果。当指令 B 到达执行阶段时，因为指令 A 还在访存阶段，所以这时候就无法提供指令 B 执行所需要的数据。这就导致指令 B 无法在预期的时钟周期内执行。</p><p><strong>当指令在流水线中重叠执行时，后面的指令需要用到前面的指令的执行结果，而前面的指令结果尚未写回，由此导致的冲突就叫数据冒险</strong>。</p><p>我再举个更具体些的例子。比如，有一条减法指令，它需要用到前面一条加法指令的运算结果作为被减数：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code>add  x2<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>x1
sub x6<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>x3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结合下面的示意图，我们可以看到，在不做任何干预的情况下，sub 依赖于 add 的执行结果，这导致 sub 指令要等到 add 指令走到流水线的第五个阶段，把结果写回之后才能执行，这就浪费了三个时钟周期。</p><figure><img src="`+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这种数据冒险将会严重地阻碍 CPU 的流水线，设置流水线目的就是为了提升效率，让某个时间点上有多条指令可以同时执行，这种让指令“干等”的状态显然不是最佳选项。那我们怎么解决这样的问题呢？方法其实不止一种，让我带你分析分析。</p><p>结合前的例子，我们最直接的处理办法就是通过编译器调整一些指令顺序。不过指令存在依赖关系的情况经常发生，用编译器调整的方式会导致延迟太长，处理的结果无法让我们满意。</p><p>别灰心，我们再另寻出路。把前面的加法指令 add 放到流水线中，通过观察整个运算过程，我们不难发现，其实 add 加法运算的结果，经过流水线的执行阶段（也就是第三个模块 EX）之后就已经出来了，只是还没把结果写回到 x2 寄存器而已。</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所以，另一种解决办法也就有了头绪，能不能通过向内部资源添加额外的硬件，来尽快找到缺少的运算项呢？</p><p>这当然可以。对于上述的指令序列，一旦 ALU 计算出加法指令的结果，就可以将其作为减法指令执行的数据输入，不需要等待指令完成，就可以解决数据冒险的问题。</p><p>如上图所示，将 add 指令执行阶段运算的结果 x2 中的值，直接传递给 sub 指令作为执行阶段的输入，替换 sub 指令在译码阶段读出的寄存器 x2 的值。这种硬件上解决数据冒险的方法称为前递（forwarding）。</p><p>好，思路既然理清楚了，我们就把它落地到实际设计里。</p><h2 id="数据前递模块的设计" tabindex="-1"><a class="header-anchor" href="#数据前递模块的设计" aria-hidden="true">#</a> 数据前递模块的设计</h2><p>通过上节课执行模块的设计，我们知道了 ALU 的逻辑运算需要两个操作数，一个来自于通用寄存器，另一个来自于通用寄存器或者指令自带的立即数。</p><p>但是当需要读取的通用寄存器的值，依赖于前面第一条或者第二条指令的运算结果时，就出现了刚才我们提到的数据冒险问题。为了解决这个问题，就需要我们专门设计一个数据前递模块（forwarding），它在流水线中的位置如下图所示：</p><figure><img src="'+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>所谓前递，顾名思义，就是把流水线中后面阶段产生的数据向前传递的过程。</strong></p><p>正如上图中的 forwarding 模块，可以看到它的数据来自于流水线中的执行模块 EX、访存模块 MEM、写回模块 WB 的输出，经过 forwarding 模块处理后，把数据传递到执行模块的输入。</p><p>然后，流水线根据当前指令的译码信号，选择读取通用寄存器的数据作为执行模块的操作数，或者选择来自前递模块的数据作为执行模块的操作数。</p><p>那么具体是如何选择前递数据作为执行模块的操作数呢？让我们结合下面 forwarding 模块的代码来寻找答案：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token keyword">module</span> forwarding <span class="token punctuation">(</span>
  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rs1<span class="token punctuation">,</span>
  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rs2<span class="token punctuation">,</span>
  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> exMemRd<span class="token punctuation">,</span>
  <span class="token keyword">input</span>       exMemRw<span class="token punctuation">,</span>
  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> memWBRd<span class="token punctuation">,</span>
  <span class="token keyword">input</span>       memWBRw<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        mem_wb_ctrl_data_toReg<span class="token punctuation">,</span>
  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> mem_wb_readData<span class="token punctuation">,</span>
  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> mem_wb_data_result<span class="token punctuation">,</span>
  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> id_ex_data_regRData1<span class="token punctuation">,</span>
  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> id_ex_data_regRData2<span class="token punctuation">,</span>
  <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ex_mem_data_result<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> forward_rs1_data<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> forward_rs2_data
<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//检查是否发生数据冒险</span>
  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> forward_rs1_sel <span class="token operator">=</span> <span class="token punctuation">(</span>exMemRw <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rs1 <span class="token operator">==</span> exMemRd<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>exMemRd <span class="token operator">!=</span> <span class="token number">5&#39;b0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2&#39;b01</span>
                              <span class="token punctuation">:</span><span class="token punctuation">(</span>memWBRw <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rs1 <span class="token operator">==</span> memWBRd<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>memWBRd <span class="token operator">!=</span> <span class="token number">5&#39;b0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2&#39;b10</span>
                              <span class="token punctuation">:</span> <span class="token number">2&#39;b00</span><span class="token punctuation">;</span>
                  
  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> forward_rs2_sel <span class="token operator">=</span> <span class="token punctuation">(</span>exMemRw <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rs2 <span class="token operator">==</span> exMemRd<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>exMemRd <span class="token operator">!=</span> <span class="token number">5&#39;b0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2&#39;b01</span>
                              <span class="token punctuation">:</span><span class="token punctuation">(</span>memWBRw <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rs2 <span class="token operator">==</span> memWBRd<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>memWBRd <span class="token operator">!=</span> <span class="token number">5&#39;b0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2&#39;b10</span>
                              <span class="token punctuation">:</span> <span class="token number">2&#39;b00</span><span class="token punctuation">;</span>
  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> regWData <span class="token operator">=</span> mem_wb_ctrl_data_toReg <span class="token operator">?</span> mem_wb_readData <span class="token punctuation">:</span> mem_wb_data_result<span class="token punctuation">;</span> 
  <span class="token comment">//根据数据冒险的类型选择前递的数据</span>
  <span class="token keyword">assign</span> forward_rs1_data <span class="token operator">=</span> <span class="token punctuation">(</span>forward_rs1_sel <span class="token operator">==</span> <span class="token number">2&#39;b00</span><span class="token punctuation">)</span> <span class="token operator">?</span> id_ex_data_regRData1 <span class="token punctuation">:</span>
                            <span class="token punctuation">(</span>forward_rs1_sel <span class="token operator">==</span> <span class="token number">2&#39;b01</span><span class="token punctuation">)</span> <span class="token operator">?</span> ex_mem_data_result   <span class="token punctuation">:</span>
                            <span class="token punctuation">(</span>forward_rs1_sel <span class="token operator">==</span> <span class="token number">2&#39;b10</span><span class="token punctuation">)</span> <span class="token operator">?</span> regWData <span class="token punctuation">:</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> forward_rs2_data <span class="token operator">=</span> <span class="token punctuation">(</span>forward_rs2_sel <span class="token operator">==</span> <span class="token number">2&#39;b00</span><span class="token punctuation">)</span> <span class="token operator">?</span> id_ex_data_regRData2 <span class="token punctuation">:</span>
                            <span class="token punctuation">(</span>forward_rs2_sel <span class="token operator">==</span> <span class="token number">2&#39;b01</span><span class="token punctuation">)</span> <span class="token operator">?</span> ex_mem_data_result   <span class="token punctuation">:</span>
                            <span class="token punctuation">(</span>forward_rs2_sel <span class="token operator">==</span> <span class="token number">2&#39;b10</span><span class="token punctuation">)</span> <span class="token operator">?</span> regWData <span class="token punctuation">:</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span> 
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们分别看看代码中的各种信号。前递模块输入的端口信号 rs1 和 rs2，来自于指令译码后得到的两个通用寄存器索引。exMemRd 信号是来自访存模块的对通用寄存器的访问地址。exMemRw 是流水线访存阶段对通用寄存器的写使能控制信号。memWBRd 和 memWBRw 分别是写回模块对通用寄存器的地址和写使能控制信号。</p><p>利用这些信号就可以判断是否发生数据冒险，我们结合下面这段代码继续分析分析：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token comment">//检查是否发生数据冒险</span>
  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> forward_rs1_sel <span class="token operator">=</span> <span class="token punctuation">(</span>exMemRw <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rs1 <span class="token operator">==</span> exMemRd<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>exMemRd <span class="token operator">!=</span> <span class="token number">5&#39;b0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2&#39;b01</span>
                              <span class="token punctuation">:</span><span class="token punctuation">(</span>memWBRw <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rs1 <span class="token operator">==</span> memWBRd<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>memWBRd <span class="token operator">!=</span> <span class="token number">5&#39;b0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2&#39;b10</span>
                              <span class="token punctuation">:</span> <span class="token number">2&#39;b00</span><span class="token punctuation">;</span>
                  
  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> forward_rs2_sel <span class="token operator">=</span> <span class="token punctuation">(</span>exMemRw <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rs2 <span class="token operator">==</span> exMemRd<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>exMemRd <span class="token operator">!=</span> <span class="token number">5&#39;b0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2&#39;b01</span>
                              <span class="token punctuation">:</span><span class="token punctuation">(</span>memWBRw <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rs2 <span class="token operator">==</span> memWBRd<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>memWBRd <span class="token operator">!=</span> <span class="token number">5&#39;b0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2&#39;b10</span>
                              <span class="token punctuation">:</span> <span class="token number">2&#39;b00</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当需要读取的通用寄存器的地址等于访存，或者写回阶段要访问通用寄存器地址时（也就是 rs1 == exMemRd 和 rs1 == memWBRd），就判断为将要发生数据冒险。</strong></p><p>当然，由于通用寄存器中的零寄存器的值永远为“0”，所以不会发生数据冒险，需要排除掉这种特殊情况（也就是 exMemRd != 5’b0 和 memWBRd != 5’b0）。根据这样的判断结果，就会产生前递数据的两个选择信号 forward_rs1_sel 和 forward_rs2_sel。</p><p>发生数据冒险的情况就是这样，那不发生数据冒险又是什么情况呢？下面是选择前递的数据对应的代码段，我们结合这段代码继续分析。</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code>  <span class="token comment">//根据数据冒险的类型选择前递的数据</span>
  <span class="token keyword">assign</span> forward_rs1_data <span class="token operator">=</span> <span class="token punctuation">(</span>forward_rs1_sel <span class="token operator">==</span> <span class="token number">2&#39;b00</span><span class="token punctuation">)</span> <span class="token operator">?</span> id_ex_data_regRData1 <span class="token punctuation">:</span>
                            <span class="token punctuation">(</span>forward_rs1_sel <span class="token operator">==</span> <span class="token number">2&#39;b01</span><span class="token punctuation">)</span> <span class="token operator">?</span> ex_mem_data_result   <span class="token punctuation">:</span>
                            <span class="token punctuation">(</span>forward_rs1_sel <span class="token operator">==</span> <span class="token number">2&#39;b10</span><span class="token punctuation">)</span> <span class="token operator">?</span> regWData <span class="token punctuation">:</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> forward_rs2_data <span class="token operator">=</span> <span class="token punctuation">(</span>forward_rs2_sel <span class="token operator">==</span> <span class="token number">2&#39;b00</span><span class="token punctuation">)</span> <span class="token operator">?</span> id_ex_data_regRData2 <span class="token punctuation">:</span>
                            <span class="token punctuation">(</span>forward_rs2_sel <span class="token operator">==</span> <span class="token number">2&#39;b01</span><span class="token punctuation">)</span> <span class="token operator">?</span> ex_mem_data_result   <span class="token punctuation">:</span>
                            <span class="token punctuation">(</span>forward_rs2_sel <span class="token operator">==</span> <span class="token number">2&#39;b10</span><span class="token punctuation">)</span> <span class="token operator">?</span> regWData <span class="token punctuation">:</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先把目光聚焦到 id_ex_data_regRData1 和 id_ex_data_regRData2 这两个信号上。它们来自于指令译码之后读出通用寄存器的两个操作数，这是流水线不发生数据冒险时，流水线正常选择的数据通路。</p><p>而 ex_mem_data_result 信号是访存阶段需要写到通用寄存器的数据，regWData 是回写阶段需要更新到通用寄存器的数据。这样，通过判断将要发生数据冒险的位置，前递模块选择性地把处于流水线中的数据前递，就可以巧妙地解决流水线中的数据冒险问题了。</p><h2 id="访存控制模块设计" tabindex="-1"><a class="header-anchor" href="#访存控制模块设计" aria-hidden="true">#</a> 访存控制模块设计</h2><p>好了，解决了流水线的数据冒险问题，让我们回到流水线设计的主线来，继续完成流水线的第四级——访存相关模块的设计。</p><p>在第六节课讲 CPU 流水线的时候我们提到过，流水线中一条指令的生命周期分为五个阶段。流水线的访存阶段就是指，将数据从存储器中读出或写入存储器的过程。这个阶段会出现由 LOAD / STORE 指令产生的内存访问。</p><p>因为访存阶段的功能就是对存储器读写，所以访存控制信号中，最重要的两个信号就是<strong>存储器读控制信号 memRead</strong> 和<strong>写控制信号 memWrite</strong>。当然，访存的控制信号通路也会受流水线冲刷等流水线管理信号的控制，具体的代码如下：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token keyword">module</span> <span class="token function">ex_mem_ctrl</span><span class="token punctuation">(</span>
  <span class="token keyword">input</span>        clk<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        reset<span class="token punctuation">,</span>
  <span class="token keyword">input</span>        in_mem_ctrl_memRead<span class="token punctuation">,</span>   <span class="token comment">//memory读控制信号</span>
  <span class="token keyword">input</span>        in_mem_ctrl_memWrite<span class="token punctuation">,</span>  <span class="token comment">//memory写控制信号</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_mem_ctrl_maskMode<span class="token punctuation">,</span>  <span class="token comment">//mask模式选择</span>
  <span class="token keyword">input</span>        in_mem_ctrl_sext<span class="token punctuation">,</span>      <span class="token comment">//符合扩展</span>
  <span class="token keyword">input</span>        in_wb_ctrl_toReg<span class="token punctuation">,</span>      <span class="token comment">//写回寄存器的数据选择，“1”时为mem读取的数据</span>
  <span class="token keyword">input</span>        in_wb_ctrl_regWrite<span class="token punctuation">,</span>   <span class="token comment">//寄存器写控制信号</span>
  <span class="token keyword">input</span>        flush<span class="token punctuation">,</span>                 <span class="token comment">//流水线数据冲刷信号</span>
  <span class="token keyword">output</span>       out_mem_ctrl_memRead<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_mem_ctrl_memWrite<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out_mem_ctrl_maskMode<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_mem_ctrl_sext<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_wb_ctrl_toReg<span class="token punctuation">,</span>
  <span class="token keyword">output</span>       out_wb_ctrl_regWrite
<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">reg</span>  reg_mem_ctrl_memRead<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_mem_ctrl_memWrite<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_mem_ctrl_maskMode<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_mem_ctrl_sext<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_wb_ctrl_toReg<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span>  reg_wb_ctrl_regWrite<span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> out_mem_ctrl_memRead <span class="token operator">=</span> reg_mem_ctrl_memRead<span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> out_mem_ctrl_memWrite <span class="token operator">=</span> reg_mem_ctrl_memWrite<span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> out_mem_ctrl_maskMode <span class="token operator">=</span> reg_mem_ctrl_maskMode<span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> out_mem_ctrl_sext <span class="token operator">=</span> reg_mem_ctrl_sext<span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> out_wb_ctrl_toReg <span class="token operator">=</span> reg_wb_ctrl_toReg<span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> out_wb_ctrl_regWrite <span class="token operator">=</span> reg_wb_ctrl_regWrite<span class="token punctuation">;</span> 
  
  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_mem_ctrl_memRead <span class="token operator">&lt;=</span> <span class="token number">1&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_mem_ctrl_memRead <span class="token operator">&lt;=</span> <span class="token number">1&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span> 
      reg_mem_ctrl_memRead <span class="token operator">&lt;=</span> in_mem_ctrl_memRead<span class="token punctuation">;</span> 
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_mem_ctrl_memWrite <span class="token operator">&lt;=</span> <span class="token number">1&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_mem_ctrl_memWrite <span class="token operator">&lt;=</span> <span class="token number">1&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span> 
      reg_mem_ctrl_memWrite <span class="token operator">&lt;=</span> in_mem_ctrl_memWrite<span class="token punctuation">;</span> 
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
  
  …………  <span class="token comment">//由于代码较长，结构相似，这里省略了一部分，完整代码你可以从Gitee上获取</span>
  
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然代码有几十行，但过程还是很容易理解的。首先要根据流水线的冲刷控制信号 flush，判断访存阶段的控制信号是否需要清零。</p><p>如果 flush 等于“0”，就把上一阶段送过来的控制信号（比如存储器读控制信号 memRead、存储器写控制信号 memWrite……等），通过寄存器保存下来，然后发送给存储器读写控制模块（dmem_rw.v）或者流水线的下一级使用。</p><h2 id="访存数据通路模块设计" tabindex="-1"><a class="header-anchor" href="#访存数据通路模块设计" aria-hidden="true">#</a> 访存数据通路模块设计</h2><p>接下来，我们继续完成访存数据通路模块的设计。访存数据通路就是把访存阶段读取到的存储器数据，或者是指令执行产生的结果发送流水线的下一级处理。</p><p>由于下一级也就是流水线的最后一级——写回，所以访存的数据通路主要包括要写回的通用寄存器地址 regWAddr、访问存储器读取的数据 regRData2、指令运算的结果 result 等。</p><p>访存的数据通路也会受流水线冲刷等流水线管理信号的控制，具体代码如下：</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code><span class="token keyword">module</span> <span class="token function">ex_mem</span><span class="token punctuation">(</span>
  <span class="token keyword">input</span>         clk<span class="token punctuation">,</span>
  <span class="token keyword">input</span>         reset<span class="token punctuation">,</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  in_regWAddr<span class="token punctuation">,</span>    <span class="token comment">//写回寄存器的地址</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_regRData2<span class="token punctuation">,</span>   <span class="token comment">//读存储器的数据</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  ex_result_sel<span class="token punctuation">,</span>  <span class="token comment">//执行结果选择</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> id_ex_data_imm<span class="token punctuation">,</span> <span class="token comment">//指令立即数</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> alu_result<span class="token punctuation">,</span>     <span class="token comment">//ALU运算结果</span>
  <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in_pc<span class="token punctuation">,</span>          <span class="token comment">//当前PC值</span>
  <span class="token keyword">input</span>         flush<span class="token punctuation">,</span>          <span class="token comment">//流水线数据冲刷控制信号</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  data_regWAddr<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data_regRData2<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data_result<span class="token punctuation">,</span>
  <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data_pc
<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_regWAddr<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_regRData2<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_result<span class="token punctuation">;</span> 
  <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_pc<span class="token punctuation">;</span> 
  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> resulet_w <span class="token operator">=</span> <span class="token punctuation">(</span>ex_result_sel <span class="token operator">==</span> <span class="token number">2&#39;h0</span><span class="token punctuation">)</span> <span class="token operator">?</span> alu_result <span class="token punctuation">:</span>
                          <span class="token punctuation">(</span>ex_result_sel <span class="token operator">==</span> <span class="token number">2&#39;h1</span><span class="token punctuation">)</span> <span class="token operator">?</span> id_ex_data_imm <span class="token punctuation">:</span>
                          <span class="token punctuation">(</span>ex_result_sel <span class="token operator">==</span> <span class="token number">2&#39;h2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>in_pc <span class="token operator">+</span><span class="token number">32&#39;h4</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span>
  <span class="token keyword">assign</span> data_regWAddr <span class="token operator">=</span> reg_regWAddr<span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> data_regRData2 <span class="token operator">=</span> reg_regRData2<span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> data_result <span class="token operator">=</span> reg_result<span class="token punctuation">;</span> 
  <span class="token keyword">assign</span> data_pc <span class="token operator">=</span> reg_pc<span class="token punctuation">;</span> 
  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_regWAddr <span class="token operator">&lt;=</span> <span class="token number">5&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_regWAddr <span class="token operator">&lt;=</span> <span class="token number">5&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span> 
      reg_regWAddr <span class="token operator">&lt;=</span> in_regWAddr<span class="token punctuation">;</span> 
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_regRData2 <span class="token operator">&lt;=</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_regRData2 <span class="token operator">&lt;=</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span> 
      reg_regRData2 <span class="token operator">&lt;=</span> in_regRData2<span class="token punctuation">;</span> 
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_result <span class="token operator">&lt;=</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_result <span class="token operator">&lt;=</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span> 
      reg_result <span class="token operator">&lt;=</span> resulet_w<span class="token punctuation">;</span> 
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
  
  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span> <span class="token keyword">begin</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_pc <span class="token operator">&lt;=</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
      reg_pc <span class="token operator">&lt;=</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span> 
      reg_pc <span class="token operator">&lt;=</span> in_pc<span class="token punctuation">;</span> 
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">endmodule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和上面的访存控制模块类似，访存数据通路模块也是根据流水线的冲刷控制信号 flush，判断访存阶段的数据是否需要清零。如果不需要清零，就把上一阶段送过来的数据通过寄存器保存下来。</p><p>对于代码的第 21 到第 23 行代码，我为你单独解释一下。</p><p>ex_result_sel 就是对流水线执行阶段的结果进行选择。当（ex_result_sel == 2’h0）时，就选择 ALU 的运算结果；当（ex_result_sel == 2’h1）时，就会选择指令解码得到的立即数（其实就是对应 LUI 指令）；当（ex_result_sel == 2’h2）时，选择 PC 加 4 的值，也就是下一个 PC 的值。</p><div class="language-verilog line-numbers-mode" data-ext="verilog"><pre class="language-verilog"><code>  <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> resulet_w <span class="token operator">=</span> <span class="token punctuation">(</span>ex_result_sel <span class="token operator">==</span> <span class="token number">2&#39;h0</span><span class="token punctuation">)</span> <span class="token operator">?</span> alu_result <span class="token punctuation">:</span>
                          <span class="token punctuation">(</span>ex_result_sel <span class="token operator">==</span> <span class="token number">2&#39;h1</span><span class="token punctuation">)</span> <span class="token operator">?</span> id_ex_data_imm <span class="token punctuation">:</span>
                          <span class="token punctuation">(</span>ex_result_sel <span class="token operator">==</span> <span class="token number">2&#39;h2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>in_pc <span class="token operator">+</span><span class="token number">32&#39;h4</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">32&#39;h0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>这节课的内容到这里就告一段落了，我给你做个总结吧。</p><p>今天我们在设计访存模块之前，先探讨了流水线中的数据冒险问题。在执行指令时，<em>如果发生了数据冒险</em>，就可能使流水线停顿，等待前面的指令执行完成后才能继续执行后续的指令，严重影响了指令在 CPU 流水线中并行执行。因此，我们设计了<strong>数据前递模块</strong>来解决数据冒险的问题。</p><p>但是，添加前递模块并不能避免所有的流水线停顿。比如，当一条读存储器指令（LOAD）之后紧跟一条需要使用其结果的 R 型指令时，就算使用前递也需要流水线停顿。<em>因为读存储器的数据必须要在访存之后才能用</em>，但 load 指令正在访存时，后一条指令已经在执行。所以，在这种情况下，流水线必须停顿，通常的说法是<strong>在两条指令之间插入气泡</strong>。</p><p>最后，我们根据流水线的控制信号，完成了访存控制信号通路和访存数据通路的模块设计。这节课的要点你可以参考下面的导图。</p><figure><img src="`+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通过课程的讲解，CPU 流水线中访存阶段的设计实现的思路，相信你已经心中有数了，别忘了课后结合配套代码再找找“手感”。下节课，我们将会介绍流水线的最后一级——写回模块的设计，敬请期待。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>除了数据冒险，我们的 CPU 流水线是否还存在其它的冲突问题，你想到解决方法了么？</p><p>欢迎你在留言区和我交流，踊跃提问或者记录笔记对我们加深理解有很大的帮助。如果你觉得这节课还不错，别忘了分享给更多朋友，和他一起手写 CPU。</p><blockquote><p>在硬件层面，为提高流水线效率。按照同时钟周期原则，假如ac为一组指令，c的运算必须依赖a的结果，那可以把同样周期的bd插入ac中组为abcd指令，a指令下去运算，紧接着b指令也下去运算，这样表面上c需要a的等待时间，但等待时间途中b指令也忙着，相当于cpu核没有空闲，利用指令b指令的时间间隙，a指令完成执行，结果返回给c，c执行差不多，b指令完成执行结果就可以立马返回给d指令执行了<br> cpu核执行指令没有空闲时间，乱序执行，这是通过增加晶体管来完成的！<br> 这可以和今天的流水线执行方式进行互补的啊<br> 作者回复: 是的</p><p>cpu流水线下，软硬件中断导致须停下手头工作来处理中断问题，频繁的软硬件中断会降低cpu工作效率（比如正在运行的数据需要来回存取读写），在明面上如用户一下打开多个app容易卡住，或者浏览器打开多个网页……<br> 解决方法，如浏览器给定同时允许打开网页的最大数，或者app中也设软件cache，减少因网络即时数据存储问题导致的中断量加大，比如，优化软件结构。能就近找到的数据不要让cpu遍历去找！<br> 在cpu层面，尽量将宽度一致的数据/指令列为一组，减少内存不该有的缺页异常（该有的还得有）！<br> 作者回复: 是的</p><p>空泡是什么指令呢？这个时候流水线是也处于忙状态吗？<br> 作者回复: 是的</p></blockquote>',61);function _(g,w){const e=t("ExternalLinkIcon");return o(),c("div",null,[m,s("p",null,[n("这节课的代码你可以"),s("a",b,[n("从这里获取"),l(e)]),n("。")]),v])}const f=p(d,[["render",_],["__file","F09-手写CPU（四）.html.vue"]]);export{f as default};
