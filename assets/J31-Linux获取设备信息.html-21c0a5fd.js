import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/567588d1ca461ed56c4cd3447d9dff28-688ca953.jpg",e="/assets/bcd9216d04b1f2ec6yy67ddf18052fda-b784489f.jpg",o="/assets/a4104a41c67d94f6c9a7de94a05c6a79-dfb492e1.jpg",c="/assets/93a929ea1218c7f934713fbf03ba643b-45a5f37d.jpg",l="/assets/29e4b5f1a05d114423b3e69b796ccc1c-efce2421.jpg",i={},u=p('<h1 id="_31-瞧一瞧linux-如何获取所有设备信息" tabindex="-1"><a class="header-anchor" href="#_31-瞧一瞧linux-如何获取所有设备信息" aria-hidden="true">#</a> 31 | 瞧一瞧Linux：如何获取所有设备信息？</h1><p>你好，我是 LMOS。</p><p>前面我们已经完成了 Cosmos 的驱动设备的建立，还写好了一个真实的设备驱动。</p><p>今天，我们就来看看 Linux 是如何管理设备的。我们将从 Linux 如何组织设备开始，然后研究设备驱动相关的数据结构，最后我们还是要一起写一个 Linux 设备驱动实例，这样才能真正理解它。</p><h2 id="感受一下-linux-下的设备信息" tabindex="-1"><a class="header-anchor" href="#感受一下-linux-下的设备信息" aria-hidden="true">#</a> 感受一下 Linux 下的设备信息</h2><p>Linux 的设计哲学就是一切皆文件，各种设备在 Linux 系统下自然也是一个个文件。不过这个文件并不对应磁盘上的数据文件，而是对应着存在内存当中的设备文件。实际上，我们对设备文件进行操作，就等同于操作具体的设备。</p><p>既然我们了解万事万物，都是从最直观的感受开始的，想要理解 Linux 对设备的管理，自然也是同样的道理。那么 Linux 设备文件在哪个目录下呢？其实现在我们在 /sys/bus 目录下，就可以查看所有的设备了。</p><p>Linux 用 BUS（总线）组织设备和驱动，我们在 <code>/sys/bus</code> 目录下输入 <code>tree</code> 命令，就可以看到所有总线下的所有设备了，如下图所示。</p><img src="'+t+`" alt="img" style="zoom:50%;"><p>Linux设备文件</p><p>上图中，显示了部分 Linux 设备文件，有些设备文件是链接到其它目录下文件，这不是重点，重点是你要在心中有这个目录层次结构，即<strong>总线目录下有设备目录，设备目录下是设备文件</strong>。</p><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><p>我们接着刚才的图往下说，我们能感觉到 Linux 的驱动模型至少有三个核心数据结构，分别是总线、设备和驱动，但是要像上图那样有层次化地组织它们，只有总线、设备、驱动这三个数据结构是不够的，还得有两个数据结构来组织它们，那就是 kobject 和 kset，下面我们就去研究它们。</p><h3 id="kobject-与-kset" tabindex="-1"><a class="header-anchor" href="#kobject-与-kset" aria-hidden="true">#</a> kobject 与 kset</h3><p>kobject 和 kset 是构成 /sys 目录下的目录节点和文件节点的核心，也是层次化组织总线、设备、驱动的核心数据结构，kobject、kset 数据结构都能表示一个目录或者文件节点。下面我们先来研究一下 kobject 数据结构，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">kobject</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span>      <span class="token operator">*</span>name<span class="token punctuation">;</span>           <span class="token comment">//名称，反映在sysfs中</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span>    entry<span class="token punctuation">;</span>       <span class="token comment">//挂入kset结构的链表</span>
    <span class="token keyword">struct</span> <span class="token class-name">kobject</span>      <span class="token operator">*</span>parent<span class="token punctuation">;</span>     <span class="token comment">//指向父结构 </span>
    <span class="token keyword">struct</span> <span class="token class-name">kset</span>     <span class="token operator">*</span>kset<span class="token punctuation">;</span>           <span class="token comment">//指向所属的kset</span>
    <span class="token keyword">struct</span> <span class="token class-name">kobj_type</span>    <span class="token operator">*</span>ktype<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kernfs_node</span>  <span class="token operator">*</span>sd<span class="token punctuation">;</span>         <span class="token comment">//指向sysfs文件系统目录项 </span>
    <span class="token keyword">struct</span> <span class="token class-name">kref</span>     kref<span class="token punctuation">;</span>            <span class="token comment">//引用计数器结构</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> state_initialized<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化状态</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> state_in_sysfs<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//是否在sysfs中</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> state_add_uevent_sent<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> state_remove_uevent_sent<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> uevent_suppress<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个 kobject，都对应着 /sys 目录下（其实是 sysfs 文件系统挂载在 /sys 目录下） 的一个目录或者文件，目录或者文件的名字就是 kobject 结构中的 name。</p><p>我们从 kobject 结构中可以看出，它挂载在 kset 下，并且指向了 kset，那 kset 是什么呢？我们来分析分析，它是 kobject 结构的容器吗？</p><p>其实是也不是，因为 kset 结构中本身又包含一个 kobject 结构，所以它既是 kobject 的容器，同时本身还是一个 kobject。kset 结构代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">kset</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> list<span class="token punctuation">;</span> <span class="token comment">//挂载kobject结构的链表</span>
    <span class="token class-name">spinlock_t</span> list_lock<span class="token punctuation">;</span> <span class="token comment">//自旋锁</span>
    <span class="token keyword">struct</span> <span class="token class-name">kobject</span> kobj<span class="token punctuation">;</span><span class="token comment">//自身包含一个kobject结构</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">kset_uevent_ops</span> <span class="token operator">*</span>uevent_ops<span class="token punctuation">;</span><span class="token comment">//暂时不关注</span>
<span class="token punctuation">}</span> __randomize_layout<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里你应该知道了，kset 不仅仅自己是个 kobject，还能挂载多个 kobject，这说明 kset 是 kobject 的集合容器。在 Linux 内核中，至少有两个顶层 kset，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">kset</span> <span class="token operator">*</span>devices_kset<span class="token punctuation">;</span><span class="token comment">//管理所有设备</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">kset</span> <span class="token operator">*</span>bus_kset<span class="token punctuation">;</span><span class="token comment">//管理所有总线</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">kset</span> <span class="token operator">*</span>system_kset<span class="token punctuation">;</span>
<span class="token keyword">int</span> __init <span class="token function">devices_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    devices_kset <span class="token operator">=</span> <span class="token function">kset_create_and_add</span><span class="token punctuation">(</span><span class="token string">&quot;devices&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>device_uevent_ops<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立设备kset</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> __init <span class="token function">buses_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    bus_kset <span class="token operator">=</span> <span class="token function">kset_create_and_add</span><span class="token punctuation">(</span><span class="token string">&quot;bus&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bus_uevent_ops<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立总线kset</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bus_kset<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
    system_kset <span class="token operator">=</span> <span class="token function">kset_create_and_add</span><span class="token punctuation">(</span><span class="token string">&quot;system&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>devices_kset<span class="token operator">-&gt;</span>kobj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在设备kset之下建立system的kset</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>system_kset<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我知道，你可能很难想象许多个 kset 和 kobject 在逻辑上形成的层次结构，所以我为你画了一幅图，你可以结合这张示意图理解这个结构。</p><img src="`+e+`" alt="img" style="zoom:25%;"><p>kset与kobject</p><p>上图中展示了一个类似文件目录的结构，这正是 kset 与 kobject 设计的目标之一。kset 与 kobject 结构只是基础数据结构，但是仅仅只有它的话，也就只能实现这个层次结构，其它的什么也不能干，根据我们以往的经验可以猜出，kset 与 kobject 结构肯定是嵌入到更高级的数据结构之中使用，下面我们继续探索。</p><h3 id="总线-bus-type" tabindex="-1"><a class="header-anchor" href="#总线-bus-type" aria-hidden="true">#</a> 总线: bus_type</h3><p>kset、kobject 结构只是开胃菜，这个基础了解了，我们还要回到研究 Linux 设备与驱动的正题上。我们之前说过了，Linux 用总线组织设备和驱动，由此可见总线是 Linux 设备的基础，它可以表示 CPU 与设备的连接，那么总线的数据结构是什么样呢？我们一起来看看。</p><p>Linux 把总线抽象成 bus_type 结构，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">bus_type</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span>      <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token comment">//总线名称</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span>      <span class="token operator">*</span>dev_name<span class="token punctuation">;</span><span class="token comment">//用于列举设备，如（&quot;foo%u&quot;, dev-&gt;id）</span>
    <span class="token keyword">struct</span> <span class="token class-name">device</span>       <span class="token operator">*</span>dev_root<span class="token punctuation">;</span><span class="token comment">//父设备</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">attribute_group</span> <span class="token operator">*</span><span class="token operator">*</span>bus_groups<span class="token punctuation">;</span><span class="token comment">//总线的默认属性</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">attribute_group</span> <span class="token operator">*</span><span class="token operator">*</span>dev_groups<span class="token punctuation">;</span><span class="token comment">//总线上设备的默认属性</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">attribute_group</span> <span class="token operator">*</span><span class="token operator">*</span>drv_groups<span class="token punctuation">;</span><span class="token comment">//总线上驱动的默认属性</span>
    <span class="token comment">//每当有新的设备或驱动程序被添加到这个总线上时调用</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">device_driver</span> <span class="token operator">*</span>drv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当一个设备被添加、移除或其他一些事情时被调用产生uevent来添加环境变量。</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>uevent<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">kobj_uevent_env</span> <span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当一个新的设备或驱动程序添加到这个总线时被调用，并回调特定驱动程序探查函数，以初始化匹配的设备</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>probe<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将设备状态同步到软件状态时调用</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sync_state<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当一个设备从这个总线上删除时被调用</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>remove<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当系统关闭时被调用</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>shutdown<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用以使设备重新上线（在下线后）</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>online<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用以使设备离线，以便热移除。可能会失败。</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>offline<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当这个总线上的设备想进入睡眠模式时调用</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>suspend<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">pm_message_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用以使该总线上的一个设备脱离睡眠模式</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>resume<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用以找出该总线上的一个设备支持多少个虚拟设备功能</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>num_vf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用以在该总线上的设备配置DMA</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>dma_configure<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//该总线的电源管理操作，回调特定的设备驱动的pm-ops</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">dev_pm_ops</span> <span class="token operator">*</span>pm<span class="token punctuation">;</span>
    <span class="token comment">//此总线的IOMMU具体操作，用于将IOMMU驱动程序实现到总线上</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iommu_ops</span> <span class="token operator">*</span>iommu_ops<span class="token punctuation">;</span>
    <span class="token comment">//驱动核心的私有数据，只有驱动核心能够接触这个</span>
    <span class="token keyword">struct</span> <span class="token class-name">subsys_private</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">lock_class_key</span> lock_key<span class="token punctuation">;</span>
    <span class="token comment">//当探测或移除该总线上的一个设备时，设备驱动核心应该锁定该设备</span>
    bool need_parent_lock<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，上面代码的 bus_type 结构中，包括总线名字、总线属性，还有操作该总线下所有设备通用操作函数的指针，其各个函数的功能我在代码注释中已经写清楚了。</p><p>从这一点可以发现，**总线不仅仅是组织设备和驱动的容器，还是同类设备的共有功能的抽象层。**下面我们来看看 subsys_private，它是总线的驱动核心的私有数据，其中有我们想知道的秘密，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//通过kobject找到对应的subsys_private</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">to_subsys_private</span><span class="token expression"><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token function">container_of</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">subsys_private</span><span class="token punctuation">,</span> subsys<span class="token punctuation">.</span>kobj<span class="token punctuation">)</span></span></span>
<span class="token keyword">struct</span> <span class="token class-name">subsys_private</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kset</span> subsys<span class="token punctuation">;</span><span class="token comment">//定义这个子系统结构的kset</span>
    <span class="token keyword">struct</span> <span class="token class-name">kset</span> <span class="token operator">*</span>devices_kset<span class="token punctuation">;</span><span class="token comment">//该总线的&quot;设备&quot;目录，包含所有的设备</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> interfaces<span class="token punctuation">;</span><span class="token comment">//总线相关接口的列表</span>
    <span class="token keyword">struct</span> <span class="token class-name">mutex</span> mutex<span class="token punctuation">;</span><span class="token comment">//保护设备，和接口列表</span>
    <span class="token keyword">struct</span> <span class="token class-name">kset</span> <span class="token operator">*</span>drivers_kset<span class="token punctuation">;</span><span class="token comment">//该总线的&quot;驱动&quot;目录，包含所有的驱动</span>
    <span class="token keyword">struct</span> <span class="token class-name">klist</span> klist_devices<span class="token punctuation">;</span><span class="token comment">//挂载总线上所有设备的可迭代链表</span>
    <span class="token keyword">struct</span> <span class="token class-name">klist</span> klist_drivers<span class="token punctuation">;</span><span class="token comment">//挂载总线上所有驱动的可迭代链表</span>
    <span class="token keyword">struct</span> <span class="token class-name">blocking_notifier_head</span> bus_notifier<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> drivers_autoprobe<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">bus_type</span> <span class="token operator">*</span>bus<span class="token punctuation">;</span>   <span class="token comment">//指向所属总线</span>
    <span class="token keyword">struct</span> <span class="token class-name">kset</span> glue_dirs<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">class</span> <span class="token operator">*</span>class<span class="token punctuation">;</span><span class="token comment">//指向这个结构所关联类结构的指针</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里，你应该明白 kset 的作用了，我们通过 bus_kset 可以找到所有的 kset，通过 kset 又能找到 subsys_private，再通过 subsys_private 就可以找到总线了，也可以找到该总线上所有的设备与驱动。</p><h3 id="设备-device" tabindex="-1"><a class="header-anchor" href="#设备-device" aria-hidden="true">#</a> 设备: device</h3><p>虽然 Linux 抽象出了总线结构，但是 Linux 还需要表示一个设备，下面我们来探索 Linux 是如何表示一个设备的。</p><p>其实，在 Linux 系统中设备也是一个数据结构，里面包含了一个设备的所有信息。代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kobject</span> kobj<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">device</span>       <span class="token operator">*</span>parent<span class="token punctuation">;</span><span class="token comment">//指向父设备</span>
    <span class="token keyword">struct</span> <span class="token class-name">device_private</span>   <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//设备的私有数据</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span>      <span class="token operator">*</span>init_name<span class="token punctuation">;</span> <span class="token comment">//设备初始化名字</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">device_type</span> <span class="token operator">*</span>type<span class="token punctuation">;</span><span class="token comment">//设备类型</span>
    <span class="token keyword">struct</span> <span class="token class-name">bus_type</span> <span class="token operator">*</span>bus<span class="token punctuation">;</span>  <span class="token comment">//指向设备所属总线</span>
    <span class="token keyword">struct</span> <span class="token class-name">device_driver</span> <span class="token operator">*</span>driver<span class="token punctuation">;</span><span class="token comment">//指向设备的驱动</span>
    <span class="token keyword">void</span>        <span class="token operator">*</span>platform_data<span class="token punctuation">;</span><span class="token comment">//设备平台数据</span>
    <span class="token keyword">void</span>        <span class="token operator">*</span>driver_data<span class="token punctuation">;</span><span class="token comment">//设备驱动的私有数据</span>
    <span class="token keyword">struct</span> <span class="token class-name">dev_links_info</span>   links<span class="token punctuation">;</span><span class="token comment">//设备供应商链接</span>
    <span class="token keyword">struct</span> <span class="token class-name">dev_pm_info</span>  power<span class="token punctuation">;</span><span class="token comment">//用于设备的电源管理</span>
    <span class="token keyword">struct</span> <span class="token class-name">dev_pm_domain</span>    <span class="token operator">*</span>pm_domain<span class="token punctuation">;</span><span class="token comment">//提供在系统暂停时执行调用</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_GENERIC_MSI_IRQ</span></span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span>    msi_list<span class="token punctuation">;</span><span class="token comment">//主机的MSI描述符链表</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token keyword">struct</span> <span class="token class-name">dev_archdata</span> archdata<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">device_node</span>  <span class="token operator">*</span>of_node<span class="token punctuation">;</span> <span class="token comment">//用访问设备树节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">fwnode_handle</span>    <span class="token operator">*</span>fwnode<span class="token punctuation">;</span> <span class="token comment">//设备固件节点</span>
    <span class="token class-name">dev_t</span>           devt<span class="token punctuation">;</span>   <span class="token comment">//用于创建sysfs &quot;dev&quot;</span>
    u32         id<span class="token punctuation">;</span> <span class="token comment">//设备实例id</span>
    <span class="token class-name">spinlock_t</span>      devres_lock<span class="token punctuation">;</span><span class="token comment">//设备资源链表锁</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span>    devres_head<span class="token punctuation">;</span><span class="token comment">//设备资源链表</span>
    <span class="token keyword">struct</span> <span class="token class-name">class</span>        <span class="token operator">*</span>class<span class="token punctuation">;</span><span class="token comment">//设备的类</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">attribute_group</span> <span class="token operator">*</span><span class="token operator">*</span>groups<span class="token punctuation">;</span>  <span class="token comment">//可选的属性组</span>
    <span class="token keyword">void</span>    <span class="token punctuation">(</span><span class="token operator">*</span>release<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在所有引用结束后释放设备</span>
    <span class="token keyword">struct</span> <span class="token class-name">iommu_group</span>  <span class="token operator">*</span>iommu_group<span class="token punctuation">;</span><span class="token comment">//该设备属于的IOMMU组</span>
    <span class="token keyword">struct</span> <span class="token class-name">dev_iommu</span>    <span class="token operator">*</span>iommu<span class="token punctuation">;</span><span class="token comment">//每个设备的通用IOMMU运行时数据</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>device 结构很大，这里删除了我们不需要关心的内容。另外，我们看到 device 结构中同样包含了 kobject 结构，这使得设备可以加入 kset 和 kobject 组建的层次结构中。device 结构中有总线和驱动指针，这能帮助设备找到自己的驱动程序和总线。</p><h3 id="驱动-device-driver" tabindex="-1"><a class="header-anchor" href="#驱动-device-driver" aria-hidden="true">#</a> 驱动: device_driver</h3><p>有了设备结构，还需要有设备对应的驱动，Linux 是如何表示一个驱动的呢？同样也是一个数据结构，其中包含了驱动程序的相关信息。其实在 device 结构中我们就看到了，就是 device_driver 结构，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">device_driver</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span>      <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token comment">//驱动名称</span>
    <span class="token keyword">struct</span> <span class="token class-name">bus_type</span>     <span class="token operator">*</span>bus<span class="token punctuation">;</span><span class="token comment">//指向总线</span>
    <span class="token keyword">struct</span> <span class="token class-name">module</span>       <span class="token operator">*</span>owner<span class="token punctuation">;</span><span class="token comment">//模块持有者</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span>      <span class="token operator">*</span>mod_name<span class="token punctuation">;</span><span class="token comment">//用于内置模块</span>
    bool suppress_bind_attrs<span class="token punctuation">;</span><span class="token comment">//禁用通过sysfs的绑定/解绑</span>
    <span class="token keyword">enum</span> <span class="token class-name">probe_type</span> probe_type<span class="token punctuation">;</span><span class="token comment">//要使用的探查类型（同步或异步）</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">of_device_id</span>   <span class="token operator">*</span>of_match_table<span class="token punctuation">;</span><span class="token comment">//开放固件表</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">acpi_device_id</span> <span class="token operator">*</span>acpi_match_table<span class="token punctuation">;</span><span class="token comment">//ACPI匹配表</span>
    <span class="token comment">//被调用来查询一个特定设备的存在</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>probe<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将设备状态同步到软件状态时调用</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sync_state<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当设备被从系统中移除时被调用，以便解除设备与该驱动的绑定</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>remove<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//关机时调用，使设备停止</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>shutdown<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用以使设备进入睡眠模式，通常是进入一个低功率状态</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>suspend<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">pm_message_t</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用以使设备从睡眠模式中恢复</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>resume<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//默认属性</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">attribute_group</span> <span class="token operator">*</span><span class="token operator">*</span>groups<span class="token punctuation">;</span>
    <span class="token comment">//绑定设备的属性</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">attribute_group</span> <span class="token operator">*</span><span class="token operator">*</span>dev_groups<span class="token punctuation">;</span>
    <span class="token comment">//设备电源操作</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">dev_pm_ops</span> <span class="token operator">*</span>pm<span class="token punctuation">;</span>
    <span class="token comment">//当sysfs目录被写入时被调用</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>coredump<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//驱动程序私有数据</span>
    <span class="token keyword">struct</span> <span class="token class-name">driver_private</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">driver_private</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kobject</span> kobj<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">klist</span> klist_devices<span class="token punctuation">;</span><span class="token comment">//驱动管理的所有设备的链表</span>
    <span class="token keyword">struct</span> <span class="token class-name">klist_node</span> knode_bus<span class="token punctuation">;</span><span class="token comment">//加入bus链表的节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">module_kobject</span> <span class="token operator">*</span>mkobj<span class="token punctuation">;</span><span class="token comment">//指向用kobject管理模块节点</span>
    <span class="token keyword">struct</span> <span class="token class-name">device_driver</span> <span class="token operator">*</span>driver<span class="token punctuation">;</span><span class="token comment">//指向驱动本身</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 device_driver 结构中，包含了驱动程序的名字、驱动程序所在模块、设备探查和电源相关的回调函数的指针。在 driver_private 结构中同样包含了 kobject 结构，用于组织所有的驱动，还指向了驱动本身，你发现没有，bus_type 中的 subsys_private 结构的机制如出一辙。</p><h2 id="文件操作函数" tabindex="-1"><a class="header-anchor" href="#文件操作函数" aria-hidden="true">#</a> 文件操作函数</h2><p>前面我们学习的都是 Linux 驱动程序的核心数据结构，我们很少用到，只是为了让你了解最基础的原理。</p><p>其实，在 Linux 系统中提供了更为高级的封装，Linux 将设备分成几类分别是：<mark>字符设备</mark>、<mark>块设备</mark>、<mark>网络设备</mark>以及<mark>杂项设备</mark>。具体情况你可以参考我后面梳理的图表。</p><img src="`+o+`" alt="img" style="zoom:33%;"><p>设备类型一览表</p><p>这些类型的设备的数据结构，都会直接或者间接包含基础的 device 结构，我们以杂项设备为例子研究一下，Linux 用 miscdevice 结构表示一个杂项设备，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">miscdevice</span>  <span class="token punctuation">{</span>
    <span class="token keyword">int</span> minor<span class="token punctuation">;</span><span class="token comment">//设备号</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token comment">//设备名称</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token operator">*</span>fops<span class="token punctuation">;</span><span class="token comment">//文件操作函数结构</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> list<span class="token punctuation">;</span><span class="token comment">//链表</span>
    <span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span><span class="token comment">//指向父设备的device结构</span>
    <span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>this_device<span class="token punctuation">;</span><span class="token comment">//指向本设备的device结构</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">attribute_group</span> <span class="token operator">*</span><span class="token operator">*</span>groups<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nodename<span class="token punctuation">;</span><span class="token comment">//节点名字</span>
    <span class="token class-name">umode_t</span> mode<span class="token punctuation">;</span><span class="token comment">//访问权限</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>miscdevice 结构就是一个杂项设备，它一般在驱动程序代码文件中静态定义。我们清楚地看见有个 this_device 指针，它指向下层的、属于这个杂项设备的 device 结构。</p><p>但是这里重点是 <strong>file_operations 结构</strong>，设备一经注册，就会在 sys 相关的目录下建立设备对应的文件结点，对这个文件结点打开、读写等操作，最终会调用到驱动程序对应的函数，而对应的函数指针就保存在 file_operations 结构中，我们现在来看看这个结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>owner<span class="token punctuation">;</span><span class="token comment">//所在的模块</span>
    <span class="token class-name">loff_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>llseek<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调整读写偏移</span>
    <span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>read<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读</span>
    <span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>write<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>mmap<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//映射</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>open<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>flush<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">fl_owner_t</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>release<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭</span>
<span class="token punctuation">}</span> __randomize_layout<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>file_operations 结构中的函数指针有 31 个，我删除了我们不熟悉的函数指针，我们了解原理，不需要搞清楚所有函数指针的功能。</p><p>那么，Linux 如何调用到这个 file_operations 结构中的函数呢？我以打开操作为例给你讲讲，Linux 的打开系统调用接口会调用 filp_open 函数，filp_open 函数的调用路径如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//filp_open</span>
<span class="token comment">//file_open_name</span>
<span class="token comment">//do_filp_open</span>
<span class="token comment">//path_openat</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">do_o_path</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">nameidata</span> <span class="token operator">*</span>nd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> flags<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">path</span> path<span class="token punctuation">;</span>
    <span class="token keyword">int</span> error <span class="token operator">=</span> <span class="token function">path_lookupat</span><span class="token punctuation">(</span>nd<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解析文件路径得到文件inode节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">audit_inode</span><span class="token punctuation">(</span>nd<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> path<span class="token punctuation">.</span>dentry<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        error <span class="token operator">=</span> <span class="token function">vfs_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vfs层打开文件接口</span>
        <span class="token function">path_put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> error<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">vfs_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">path</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    file<span class="token operator">-&gt;</span>f_path <span class="token operator">=</span> <span class="token operator">*</span>path<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">do_dentry_open</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token function">d_backing_inode</span><span class="token punctuation">(</span>path<span class="token operator">-&gt;</span>dentry<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">do_dentry_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//略过我们不想看的代码</span>
    f<span class="token operator">-&gt;</span>f_op <span class="token operator">=</span> <span class="token function">fops_get</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_fop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取文件节点的file_operations</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>open<span class="token punctuation">)</span><span class="token comment">//如果open为空则调用file_operations结构中的open函数</span>
        open <span class="token operator">=</span> f<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>open<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>open<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        error <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//略过我们不想看的代码</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里，我们就知道了，file_operations 结构的地址存在一个文件的 inode 结构中。在 Linux 系统中，都是用 inode 结构表示一个文件，不管它是数据文件还是设备文件。</p><p>到这里，我们已经清楚了文件操作函数以及它的调用流程。</p><h2 id="驱动程序实例" tabindex="-1"><a class="header-anchor" href="#驱动程序实例" aria-hidden="true">#</a> 驱动程序实例</h2><p>我们想要真正理解 Linux 设备驱动，最好的方案就是写一个真实的驱动程序实例。下面我们一起应用前面的基础，结合 Linux 提供的驱动程序开发接口，一起实现一个真实驱动程序。</p><p>这个驱动程序的主要工作，就是获取所有总线和其下所有设备的名字。为此我们需要先了解驱动程序的整体框架，接着建立我们总线和设备，然后实现驱动程序的打开、关闭，读写操作函数，最后我们写个应用程序，来测试我们的驱动程序。</p><h2 id="驱动程序框架" tabindex="-1"><a class="header-anchor" href="#驱动程序框架" aria-hidden="true">#</a> 驱动程序框架</h2><p>Linux 内核的驱动程序是在一个可加载的内核模块中实现，可加载的内核模块只需要两个函数和模块信息就行，但是我们要在模块中实现总线和设备驱动，所以需要更多的函数和数据结构，它们的代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEV_NAME</span>  <span class="token string">&quot;devicesinfo&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BUS_DEV_NAME</span>  <span class="token string">&quot;devicesinfobus&quot;</span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">misc_find_match</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;device name is:%s\\n&quot;</span><span class="token punctuation">,</span> dev<span class="token operator">-&gt;</span>kobj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//对应于设备文件的读操作函数</span>
<span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">misc_read</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>pfile<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>buff<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>off<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;line:%d,%s is call\\n&quot;</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//对应于设备文件的写操作函数</span>
<span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">misc_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>pfile<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>buff<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>off<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;line:%d,%s is call\\n&quot;</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//对应于设备文件的打开操作函数</span>
<span class="token keyword">static</span> <span class="token keyword">int</span>  <span class="token function">misc_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>pinode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>pfile<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;line:%d,%s is call\\n&quot;</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token comment">//对应于设备文件的关闭操作函数</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">misc_release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>pinode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>pfile<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;line:%d,%s is call\\n&quot;</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">devicesinfo_bus_match</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">device_driver</span> <span class="token operator">*</span>driver<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>dev<span class="token operator">-&gt;</span>kobj<span class="token punctuation">.</span>name<span class="token punctuation">,</span> driver<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>driver<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//对应于设备文件的操作函数结构</span>
<span class="token keyword">static</span> <span class="token keyword">const</span>  <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> misc_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>read     <span class="token operator">=</span> misc_read<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write    <span class="token operator">=</span> misc_write<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>release  <span class="token operator">=</span> misc_release<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>open     <span class="token operator">=</span> misc_open<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//misc设备的结构</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">miscdevice</span>  misc_dev <span class="token operator">=</span>  <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>fops  <span class="token operator">=</span>  <span class="token operator">&amp;</span>misc_fops<span class="token punctuation">,</span>         <span class="token comment">//设备文件操作方法</span>
    <span class="token punctuation">.</span>minor <span class="token operator">=</span>  <span class="token number">255</span><span class="token punctuation">,</span>                <span class="token comment">//次设备号</span>
    <span class="token punctuation">.</span>name  <span class="token operator">=</span>  DEV_NAME<span class="token punctuation">,</span>           <span class="token comment">//设备名/dev/下的设备节点名</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//总线结构</span>
<span class="token keyword">struct</span> <span class="token class-name">bus_type</span> devicesinfo_bus <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>name <span class="token operator">=</span> BUS_DEV_NAME<span class="token punctuation">,</span> <span class="token comment">//总线名字</span>
        <span class="token punctuation">.</span>match <span class="token operator">=</span> devicesinfo_bus_match<span class="token punctuation">,</span> <span class="token comment">//总线match函数指针</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//内核模块入口函数</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">miscdrv_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;INIT misc\\n&quot;</span><span class="token punctuation">)</span>；
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//内核模块退出函数</span>
<span class="token keyword">static</span> <span class="token keyword">void</span>  __exit <span class="token function">miscdrv_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;EXIT,misc\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">module_init</span><span class="token punctuation">(</span>miscdrv_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申明内核模块入口函数</span>
<span class="token function">module_exit</span><span class="token punctuation">(</span>miscdrv_exit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申明内核模块退出函数</span>
<span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">&quot;GPL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//模块许可</span>
<span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span><span class="token string">&quot;LMOS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//模块开发者</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个最简单的驱动程序框架的内核模块就写好了，该有的函数和数据结构都有了，那些数据结构都是静态定义的，它们的内部字段我们在前面也已经了解了。这个模块一旦加载就会执行 miscdrv_init 函数，卸载时就会执行 miscdrv_exit 函数。</p><h2 id="建立设备" tabindex="-1"><a class="header-anchor" href="#建立设备" aria-hidden="true">#</a> 建立设备</h2><p>Linux 系统也提供了很多专用接口函数，用来建立总线和设备。下面我们先来建立一个总线，然后在总线下建立一个设备。</p><p>首先来说说建立一个总线，Linux 系统提供了一个 bus_register 函数向内核注册一个总线，相当于建立了一个总线，我们需要在 miscdrv_init 函数中调用它，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">miscdrv_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;INIT misc\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    busok <span class="token operator">=</span> <span class="token function">bus_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>devicesinfo_bus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册总线</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bus_register 函数会在系统中注册一个总线，所需参数就是总线结构的地址 (&amp;devicesinfo_bus)，返回非 0 表示注册失败。现在我们来看看，在 bus_register 函数中都做了些什么事情，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">miscdrv_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;INIT misc\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    busok <span class="token operator">=</span> <span class="token function">bus_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>devicesinfo_bus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册总线</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bus_register 函数会在系统中注册一个总线，所需参数就是总线结构的地址 (&amp;devicesinfo_bus)，返回非 0 表示注册失败。现在我们来看看，在 bus_register 函数中都做了些什么事情，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bus_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bus_type</span> <span class="token operator">*</span>bus<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> retval<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">subsys_private</span> <span class="token operator">*</span>priv<span class="token punctuation">;</span>
    <span class="token comment">//分配一个subsys_private结构</span>
    priv <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">subsys_private</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//bus_type和subsys_private结构互相指向</span>
    priv<span class="token operator">-&gt;</span>bus <span class="token operator">=</span> bus<span class="token punctuation">;</span>
    bus<span class="token operator">-&gt;</span>p <span class="token operator">=</span> priv<span class="token punctuation">;</span>
    <span class="token comment">//把总线的名称加入subsys_private的kobject中</span>
    retval <span class="token operator">=</span> <span class="token function">kobject_set_name</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>priv<span class="token operator">-&gt;</span>subsys<span class="token punctuation">.</span>kobj<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> bus<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    priv<span class="token operator">-&gt;</span>subsys<span class="token punctuation">.</span>kobj<span class="token punctuation">.</span>kset <span class="token operator">=</span> bus_kset<span class="token punctuation">;</span><span class="token comment">//指向bus_kset</span>
    <span class="token comment">//把subsys_private中的kset注册到系统中</span>
    retval <span class="token operator">=</span> <span class="token function">kset_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>priv<span class="token operator">-&gt;</span>subsys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//建立总线的文件结构在sysfs中</span>
    retval <span class="token operator">=</span> <span class="token function">bus_create_file</span><span class="token punctuation">(</span>bus<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bus_attr_uevent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//建立subsys_private中的devices和drivers的kset</span>
    priv<span class="token operator">-&gt;</span>devices_kset <span class="token operator">=</span> <span class="token function">kset_create_and_add</span><span class="token punctuation">(</span><span class="token string">&quot;devices&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                         <span class="token operator">&amp;</span>priv<span class="token operator">-&gt;</span>subsys<span class="token punctuation">.</span>kobj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    priv<span class="token operator">-&gt;</span>drivers_kset <span class="token operator">=</span> <span class="token function">kset_create_and_add</span><span class="token punctuation">(</span><span class="token string">&quot;drivers&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                         <span class="token operator">&amp;</span>priv<span class="token operator">-&gt;</span>subsys<span class="token punctuation">.</span>kobj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//建立subsys_private中的devices和drivers链表，用于属于总线的设备和驱动</span>
    <span class="token function">klist_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>priv<span class="token operator">-&gt;</span>klist_devices<span class="token punctuation">,</span> klist_devices_get<span class="token punctuation">,</span> klist_devices_put<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">klist_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>priv<span class="token operator">-&gt;</span>klist_drivers<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我删除了很多你不用关注的代码，看到这里，你应该知道总线是怎么通过 subsys_private 把设备和驱动关联起来的（通过 bus_type 和 subsys_private 结构互相指向），下面我们看看怎么建立设备。我们这里建立一个 misc 杂项设备。misc 杂项设备需要定一个数据结构，然后调用 misc 杂项设备注册接口函数，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEV_NAME</span>  <span class="token string">&quot;devicesinfo&quot;</span></span>
<span class="token keyword">static</span> <span class="token keyword">const</span>  <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> misc_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>read     <span class="token operator">=</span> misc_read<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>write    <span class="token operator">=</span> misc_write<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>release  <span class="token operator">=</span> misc_release<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>open     <span class="token operator">=</span> misc_open<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">miscdevice</span>  misc_dev <span class="token operator">=</span>  <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>fops  <span class="token operator">=</span>  <span class="token operator">&amp;</span>misc_fops<span class="token punctuation">,</span>         <span class="token comment">//设备文件操作方法</span>
    <span class="token punctuation">.</span>minor <span class="token operator">=</span>  <span class="token number">255</span><span class="token punctuation">,</span>                <span class="token comment">//次设备号</span>
    <span class="token punctuation">.</span>name  <span class="token operator">=</span>  DEV_NAME<span class="token punctuation">,</span>           <span class="token comment">//设备名/dev/下的设备节点名</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">miscdrv_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">misc_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>misc_dev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册misc杂项设备</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;INIT misc busok\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    busok <span class="token operator">=</span> <span class="token function">bus_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>devicesinfo_bus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册总线</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，静态定义了 miscdevice 结构的变量 misc_dev，miscdevice 结构我们在前面已经了解过了，最后调用 misc_register 函数注册了 misc 杂项设备。</p><p>misc_register 函数到底做了什么，我们一起来看看，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">misc_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">miscdevice</span> <span class="token operator">*</span>misc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">dev_t</span> dev<span class="token punctuation">;</span>
    <span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    bool is_dynamic <span class="token operator">=</span> <span class="token punctuation">(</span>misc<span class="token operator">-&gt;</span>minor <span class="token operator">==</span> MISC_DYNAMIC_MINOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>misc<span class="token operator">-&gt;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>misc_mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_dynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//minor次设备号如果等于255就自动分配次设备</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">find_first_zero_bit</span><span class="token punctuation">(</span>misc_minors<span class="token punctuation">,</span> DYNAMIC_MINORS<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> DYNAMIC_MINORS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            err <span class="token operator">=</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>
            <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        misc<span class="token operator">-&gt;</span>minor <span class="token operator">=</span> DYNAMIC_MINORS <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">set_bit</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> misc_minors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//否则检查次设备号是否已经被占有</span>
        <span class="token keyword">struct</span> <span class="token class-name">miscdevice</span> <span class="token operator">*</span>c<span class="token punctuation">;</span>
        <span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>misc_list<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>minor <span class="token operator">==</span> misc<span class="token operator">-&gt;</span>minor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                err <span class="token operator">=</span> <span class="token operator">-</span>EBUSY<span class="token punctuation">;</span>
                <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    dev <span class="token operator">=</span> <span class="token function">MKDEV</span><span class="token punctuation">(</span>MISC_MAJOR<span class="token punctuation">,</span> misc<span class="token operator">-&gt;</span>minor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并主、次设备号</span>
    <span class="token comment">//建立设备</span>
    misc<span class="token operator">-&gt;</span>this_device <span class="token operator">=</span>
        <span class="token function">device_create_with_groups</span><span class="token punctuation">(</span>misc_class<span class="token punctuation">,</span> misc<span class="token operator">-&gt;</span>parent<span class="token punctuation">,</span> dev<span class="token punctuation">,</span>
                      misc<span class="token punctuation">,</span> misc<span class="token operator">-&gt;</span>groups<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> misc<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把这个misc加入到全局misc_list链表</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>misc<span class="token operator">-&gt;</span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>misc_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
 out<span class="token operator">:</span>
    <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>misc_mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，misc_register 函数只是负责分配设备号，以及把 miscdev 加入链表，真正的核心工作由 device_create_with_groups 函数来完成，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span><span class="token function">device_create_with_groups</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">class</span> <span class="token operator">*</span>class<span class="token punctuation">,</span>
                     <span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token class-name">dev_t</span> devt<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>drvdata<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">attribute_group</span> <span class="token operator">*</span><span class="token operator">*</span>groups<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    va_list vargs<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">;</span>
    <span class="token function">va_start</span><span class="token punctuation">(</span>vargs<span class="token punctuation">,</span> fmt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    dev <span class="token operator">=</span> <span class="token function">device_create_groups_vargs</span><span class="token punctuation">(</span>class<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> devt<span class="token punctuation">,</span> drvdata<span class="token punctuation">,</span> groups<span class="token punctuation">,</span>fmt<span class="token punctuation">,</span> vargs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">va_end</span><span class="token punctuation">(</span>vargs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span><span class="token function">device_create_groups_vargs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">class</span> <span class="token operator">*</span>class<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token class-name">dev_t</span> devt<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>drvdata<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">attribute_group</span> <span class="token operator">*</span><span class="token operator">*</span>groups<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>fmt<span class="token punctuation">,</span> va_list args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> retval <span class="token operator">=</span> <span class="token operator">-</span>ENODEV<span class="token punctuation">;</span>
    dev <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配设备结构的内存空间</span>
    <span class="token function">device_initialize</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化设备结构</span>
    dev<span class="token operator">-&gt;</span>devt <span class="token operator">=</span> devt<span class="token punctuation">;</span><span class="token comment">//设置设备号</span>
    dev<span class="token operator">-&gt;</span>class <span class="token operator">=</span> class<span class="token punctuation">;</span><span class="token comment">//设置设备类</span>
    dev<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token comment">//设置设备的父设备</span>
    dev<span class="token operator">-&gt;</span>groups <span class="token operator">=</span> groups<span class="token punctuation">;</span><span class="token comment">////设置设备属性</span>
    dev<span class="token operator">-&gt;</span>release <span class="token operator">=</span> device_create_release<span class="token punctuation">;</span>
    <span class="token function">dev_set_drvdata</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> drvdata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置miscdev的地址到设备结构中</span>
    retval <span class="token operator">=</span> <span class="token function">kobject_set_name_vargs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dev<span class="token operator">-&gt;</span>kobj<span class="token punctuation">,</span> fmt<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把名称设置到设备的kobjext中去</span>
    retval <span class="token operator">=</span> <span class="token function">device_add</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把设备加入到系统中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>retval<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> error<span class="token punctuation">;</span>
    <span class="token keyword">return</span> dev<span class="token punctuation">;</span><span class="token comment">//返回设备</span>
error<span class="token operator">:</span>
    <span class="token function">put_device</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">ERR_PTR</span><span class="token punctuation">(</span>retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，misc 设备的注册就搞清楚了，下面我们来测试一下看看结果，看看 Linux 系统是不是多了一个总线和设备。</p><p>你可以在本课程的代码目录中，执行 make 指令，就会产生一个 miscdvrv.ko 内核模块文件，我们把这个模块文件加载到 Linux 系统中就行了。</p><p>为了看到效果，我们还必须要做另一件事情。 在终端中用 sudo cat /proc/kmsg 指令读取 /proc/kmsg 文件，该文件是内核 prink 函数输出信息的文件。指令如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>#第一步在终端中执行如下指令
sudo cat <span class="token operator">/</span>proc<span class="token operator">/</span>kmsg
#第二步在另一个终端中执行如下指令
make
sudo insmod miscdrv<span class="token punctuation">.</span>ko
#不用这个模块了可以用以下指令卸载
sudo rmmod miscdrv<span class="token punctuation">.</span>ko
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>insmod 指令是加载一个内核模块，一旦加载成功就会执行 miscdrv_init 函数。如果不出意外，你在终端中会看到如下图所示的情况。</p><img src="`+c+`" alt="img" style="zoom:50%;"><p>驱动测试</p><p>这说明我们设备已经建立了，你应该可以在 /dev 目录看到一个 devicesinfo 文件，同时你在 /sys/bus/ 目录下也可以看到一个 devicesinfobus 文件。这就是我们建立的设备和总线的文件节点的名称。</p><h2 id="打开、关闭、读写函数" tabindex="-1"><a class="header-anchor" href="#打开、关闭、读写函数" aria-hidden="true">#</a> 打开、关闭、读写函数</h2><p>建立了设备和总线，有了设备文件节点，应用程序就可以打开、关闭以及读写这个设备文件了。</p><p>虽然现在确实可以操作设备文件了，只不过还不能完成任何实际功能，因为我们只是写好了框架函数，所以我们下面就去写好并填充这些框架函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//打开</span>
<span class="token keyword">static</span> <span class="token keyword">int</span>  <span class="token function">misc_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>pinode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>pfile<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;line:%d,%s is call\\n&quot;</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印这个函数所在文件的行号和名称</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//关闭 </span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">misc_release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>pinode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>pfile<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;line:%d,%s is call\\n&quot;</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印这个函数所在文件的行号和名称</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//写</span>
<span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">misc_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>pfile<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>buff<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>off<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;line:%d,%s is call\\n&quot;</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印这个函数所在文件的行号和名称    </span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上三个函数，仍然没干什么实际工作，就是打印该函数所在文件的行号和名称，然后返回 0 就完事了。回到前面，我们的目的是要获取 Linux 中所有总线上的所有设备，所以在读函数中来实现是合理的。</p><p>具体实现的代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">to_subsys_private</span><span class="token expression"><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token function">container_of</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">subsys_private</span><span class="token punctuation">,</span> subsys<span class="token punctuation">.</span>kobj<span class="token punctuation">)</span></span><span class="token comment">//从kobject上获取subsys_private的地址</span></span>
<span class="token keyword">struct</span> <span class="token class-name">kset</span> <span class="token operator">*</span><span class="token function">ret_buskset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">subsys_private</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>busok<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>devicesinfo_bus<span class="token punctuation">.</span>p<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> devicesinfo_bus<span class="token punctuation">.</span>p<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">-&gt;</span>subsys<span class="token punctuation">.</span>kobj<span class="token punctuation">.</span>kset<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//返回devicesinfo_bus总线上的kset，正是bus_kset</span>
    <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>subsys<span class="token punctuation">.</span>kobj<span class="token punctuation">.</span>kset<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">misc_find_match</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">bus_type</span><span class="token operator">*</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bus_type</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;%s----&gt;device name is:%s\\n&quot;</span><span class="token punctuation">,</span> b<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> dev<span class="token operator">-&gt;</span>kobj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印总线名称和设备名称</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">misc_read</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>pfile<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>buff<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>off<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kobject</span><span class="token operator">*</span> kobj<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kset</span><span class="token operator">*</span> kset<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">subsys_private</span><span class="token operator">*</span> p<span class="token punctuation">;</span>
    kset <span class="token operator">=</span> <span class="token function">ret_buskset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取bus_kset的地址</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>kset<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;line:%d,%s is call\\n&quot;</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span><span class="token punctuation">,</span>__FUNCTION__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印这个函数所在文件的行号和名称</span>
    <span class="token comment">//扫描所有总线的kobject</span>
    <span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>kobj<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kset<span class="token operator">-&gt;</span>list<span class="token punctuation">,</span> entry<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        p <span class="token operator">=</span> <span class="token function">to_subsys_private</span><span class="token punctuation">(</span>kobj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printk</span><span class="token punctuation">(</span>KERN_EMERG <span class="token string">&quot;Bus name is:%s\\n&quot;</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>bus<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//遍历具体总线上的所有设备</span>
        <span class="token function">bus_for_each_dev</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>bus<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>bus<span class="token punctuation">,</span> misc_find_match<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常情况下，我们是不能获取 bus_kset 地址的，它是所有总线的根，包含了所有总线的 kobject，Linux 为了保护 bus_kset，并没有在 bus_type 结构中直接包含 kobject，而是让总线指向一个 subsys_private 结构，在其中包含了 kobject 结构。</p><p>所以，我们要注册一个总线，这样就能拔出萝卜带出泥，得到 bus_kset，根据它又能找到所有 subsys_private 结构中的 kobject，接着找到 subsys_private 结构，反向查询到 bus_type 结构的地址。</p><p>然后调用 Linux 提供的 bus_for_each_dev 函数，就可以遍历一个总线上的所有设备，它每遍历到一个设备，就调用一个函数，这个函数是用参数的方式传给它的，在我们代码中就是 misc_find_match 函数。</p><p>在调用 misc_find_match 函数时，会把一个设备结构的地址和另一个指针作为参数传递进来。最后就能打印每个设备的名称了。</p><h2 id="测试驱动" tabindex="-1"><a class="header-anchor" href="#测试驱动" aria-hidden="true">#</a> 测试驱动</h2><p>驱动程序已经写好，加载之后会自动建立设备文件，但是驱动程序不会主动工作，我们还需要写一个应用程序，对设备文件进行读写，才能测试驱动。我们这里这个驱动对打开、关闭、写操作没有什么实际的响应，但是只要一读就会打印所有设备的信息了。</p><p>下面我们来写好这个应用，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEV_NAME</span> <span class="token string">&quot;/dev/devicesinfo&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
    <span class="token comment">//打开设备文件</span>
    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>DEV_NAME<span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;打开 :%s 失败!\\n&quot;</span><span class="token punctuation">,</span> DEV_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//写数据到内核空间</span>
    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从内核空间中读取数据</span>
    <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//关闭设备,也可以不调用，程序关闭时系统自动调用</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以这样操作：切换到本课程的代码目录 make 一下，然后加载 miscdrv.ko 模块，最后在终端中执行 sudo ./app，就能在另一个已经执行了 sudo cat /proc/kmsg 的终端中，看到后面图片这样形式的数据。</p><figure><img src="`+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>获取设备名称</p><p>上图是我系统中总线名和设备名，你的计算机上可能略有差异，因为我们的计算机硬件可能不同，所以有差异是正常的，不必奇怪。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>尽管 Linux 驱动模型异常复杂，我们还是以最小的成本，领会了 Linux 驱动模型设计的要点，还动手写了个小小的驱动程序。现在我来为你梳理一下这节课的重点。</p><ol><li><p>首先，我们通过查看 sys 目录下的文件层次结构，直观感受了一下 Linux 系统的<strong>总线、设备、驱动</strong>是什么情况。</p></li><li><p>然后，我们了解一些<strong>重要的数据结构</strong>，它们分别是<strong>总线、驱动、设备、文件操作函数结构</strong>，还有非常关键的 <strong>kset 和 kobject</strong>，这两个结构一起组织了总线、设备、驱动，最终形成了类目录文件这样的层次结构。</p></li><li><p>最后，我们建立<strong>一个驱动程序实例</strong>，从驱动程序框架开始，我们了解如何建立一个总线和设备，编写了对应的文件操作函数，在读操作函数中实现扫描了所有总线上的所有设备，并打印总线名称和设备名称，还写了个应用程序进行了测试，检查有没有达到预期的功能。</p></li></ol><p>如果你对 Linux 是怎么在总线上注册设备和驱动，又对驱动和设备怎么进行匹配感兴趣的话，也可以自己阅读 Linux 内核代码，其中有很多驱动实例，你可以研究和实验，动手和动脑相结合，我相信你一定可以搞清楚的。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>为什么无论是我们加载 miscdrv.ko 内核模块，还是运行 app 测试，都要在前面加上 sudo 呢？</p><p>欢迎你在留言区记录你的学习收获，也欢迎你把这节课分享给你身边的小伙伴，一起拿下 Linux 设备驱动的内容。</p><p>我是 LMOS，我们下节课见！</p>',115),k=[u];function r(d,m){return n(),a("div",null,k)}const _=s(i,[["render",r],["__file","J31-Linux获取设备信息.html.vue"]]);export{_ as default};
