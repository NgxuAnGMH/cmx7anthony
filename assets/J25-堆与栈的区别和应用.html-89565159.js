import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,e as p,d as t}from"./app-cdabc73c.js";const l="/assets/8c9e14c740965f366082a3e1ea83ae01-c34cbe04.jpg",r="/assets/7db4a086408e8b50dbcc2a5833f5f17d-95696466.jpg",u="/assets/229fb6b67777465bbe8548ca5cdbde02-5cd300ca.jpg",d="/assets/29b699733aa2756ee42a702838a5eafc-33bd1d67.jpg",k="/assets/d480764f8133647eb02c689db135a5a0-9ad71750.jpg",m="/assets/5f2a4f50721198c8b2df286d4a291947-5e55d9ef.jpg",b="/assets/584080cb0699541b20a0b770ca7d2574-fd8e8db1.jpg",v={},g=n("h1",{id:"_25-堆-栈-堆与栈的区别和应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_25-堆-栈-堆与栈的区别和应用","aria-hidden":"true"},"#"),s(" 25｜堆&栈：堆与栈的区别和应用")],-1),f=n("p",null,"你好，我是 LMOS。",-1),h=n("p",null,"在上一课中，我们讲了虚拟内存和物理内存，明白了虚拟内存是一个假想的地址空间，想要真正工作运行起来，就必须要经过 MMU 把虚拟地址转换成物理地址，寻址索引到真正的 DRAM。",-1),_=n("p",null,"今天，我们继续深入到应用程序的虚拟内存地址空间中，弄清楚一个常规应用程序的虚拟内存地址空间中都有哪些东西。首先，我们看看里面的整体布局，然后看看里面的堆与栈，最后我还会重点带你了解一下堆与栈的区别和应用场景。",-1),x={href:"https://gitee.com/lmos/Geek-time-computer-foundation/tree/master/lesson25",target:"_blank",rel:"noopener noreferrer"},y=t(`<h3 id="应用程序的虚拟内存布局" tabindex="-1"><a class="header-anchor" href="#应用程序的虚拟内存布局" aria-hidden="true">#</a> 应用程序的虚拟内存布局</h3><p>你可以把应用程序的虚拟内存，想成一个房子。房子自然要有个合理的布局，有卧室、客厅、厨房这些不同的房间。同样地，应用程序的虚拟内存，承载着应用程序的指令、数据、资源等各种信息。</p><p>既然我们想要观察应用程序的虚拟内存布局，首先得有一个应用程序。当然，你也可以观察系统正在运行的应用程序，但是这些应用往往是很复杂的。</p><p>为了找到一个足够简单、又能说明问题的观察对象，我们还是自己动手写一个应用，代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;unistd.h&quot;</span></span>
<span class="token comment">//下面变量来自于链接器</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> __executable_start<span class="token punctuation">,</span>etext<span class="token punctuation">,</span> edata<span class="token punctuation">,</span> __bss_start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Text段，程序运行时指令数据开始:%p,结束:%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>__executable_start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>etext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Data段，程序运行时初始化全局变量和静态变量的数据开始:%p,结束:%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>etext<span class="token punctuation">,</span> <span class="token operator">&amp;</span>edata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Bss段，程序运行时未初始化全局变量和静态变量的数据开始:%p,结束:%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>__bss_start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;(pid:%d)应用程序正在运行，请输入:c,退出\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;应用程序退出\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我来给你解释一下这个简单的应用程序，开始的三个 printf 函数会输出该应用程序自身的三大段，即 Text 段、Data 段、Bss 段的开始、结束地址，这些地址由链接器产生，都在应用程序的虚拟内存空间中。Text 段、Data 段、Bss 段中包含了什么，在代码里我已经做了说明，只是 Bss 段并不在应用程序文件中占有空间，而是操作系统加载应用程序时，动态分配空间并将其初始化为 0。</p><p>由于我们要观察应用程序在运行中的虚拟内存布局，这就需要人为地控制应用程序退出，而不是不直接运行完就退出，导致我们没办法观察。所以，我们要在一个死循环中，输出应用程序对应进程的 id 和提示信息，然后等待我们下一步的输入。如果输入 c 则退出，否则输出信息，继续循环。</p><p>你现在需要把这个应用程序编译并运行起来。其实这个工作并不复杂，只需要进入对应的工程目录，make 一下，再 make run 就可以把程序运行起来了。</p><p>要如何才能观察到应用程序的虚拟内存布局呢？这在 Windows 下非常困难，但是 Linux 对开发人员很友好，它提供了一个 proc 文件系统，这个目录下有所有应用程序进程的相关信息，每个进程一个文件夹，文件夹的名称就是进程的 id，这就是上述代码中要打印进程的 pid 的原因。</p><p>每个进程目录下，包括一个 maps 和 smaps 文件，后者更为详细，我们只要用后面的命令读取它们就行了。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo cat /proc/59916/maps &gt; main.map
#或者
sudo cat /proc/59916/smaps &gt; main.map
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述命令是我机器上的情况，59916 是我运行程序后给出的 pid，上述命令就是把 /proc/59916/maps 或者 smaps 读取输出到 main.map 文件中，我们打开 main.map 文件，看到的情况如下图所示：</p><figure><img src="`+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>对照截图我们可以看到，每一行都表示一个应用进程虚拟内存中的一个区段。第一列表示该区间的起始、结束虚拟地址。第二列是该区段的属性，r 代表读、w 代表写、x 代表执行、p 代表私有。最后一列是该区段的内容属于哪个文件。</p><p>我们发现，一个应用程序运行之后，它的虚拟内存中不仅仅有它自身的指令和数据，main.elf 一共有 5 个区段，包含了 text、data、bss，还有其它的文件内容，比如共享动态链接库。共享动态链接库也是一种程序，可以通过应用调用其功能接口。</p><p>同时，我们也注意到了后面要详细探索的堆、栈，我为你画幅图总结一下，如下所示：</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>应用程序自身的段，取决于编译器和链接器的操作，堆段、内存映射段、栈段、环境变量和命令行参数段，这取决于操作系统的定义。需要注意的是，**堆段和栈段的大小都是动态增加和减少的、且增长方向相反。**堆是向高地址方向增长，栈是向低地址方向增长。这就是一个应用程序被操作系统加载运行后的虚拟内存布局。</p><h3 id="堆" tabindex="-1"><a class="header-anchor" href="#堆" aria-hidden="true">#</a> 堆</h3><p>下面我们将重点关注堆和栈。我们经常把堆栈作为一个名词，连在一起说，但这其实并不准确。因为堆是堆而栈是栈，这是两个不同的概念，不可以混为一谈。</p><p>在计算机学科里，堆（heap）是一类特殊的数据结构的统称，我们通常把堆看作一棵树的数组对象。堆具备这样两个性质：一是堆中某个结点的值总是不大于或不小于其父结点的值；二是堆总是一棵完全二叉树。</p><p>不过，我们今天要关注的重点，是操作系统为应用程序建立的堆。所以这节课要探讨的“堆”，不具有数据结构中对堆定义的完整特性，你可以只把它看作一个可以动态增加和减少大小的数组对象。</p><p>简单点说，堆就是<strong>应用程序在运行时刻调用 malloc 函数时，动态分配的一块儿内存区域</strong>，有了它，就能满足应用程序在运行时动态分配内存空间，从而<strong>存放数据</strong>的需求了。</p><p>你可以结合后面的示意图来理解。</p><figure><img src="'+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由上图可以看出，堆其实是虚拟内存空间中一个段，由堆的开始地址和结束地址控制其大小，有一个堆指针指向未分配的第一个字节。所以，堆在本质上是指应用程序在运行过程中进行动态分配的内存区域，堆的管理通常在库函数中完成。</p><p>之所以叫做堆，是因为通常会使用堆这种数据结构来管理分配出来的这块内存，但也可以使用更简单的方法来管理，下面让我们看看 Linux 是如何对堆区进行操作的。</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>关于如何得到上图右边的 map 文件，可以参考前面应用程序虚拟内存布局的那部分内容。</p><p>上图代码中的 sbrk 函数是库函数，它会调用 Linux 内核中的 brk 系统调用。这个 brk 系统调用，用于增加或者减少进程的 mm_struct 中的堆区指针 brk。</p><p>由于堆区指针始终指向未分配的堆区空间，brk 系统调用会首先保存当前的 brk 到临时的 tmpbrk，然后让当前 brk 加上传进来的大小，赋给 brk，最后返回 tmpbrk，这样就实现了堆区内存的分配。你可以看到图中三次调用 sbrk 函数返回的地址，确实落在应用程序的堆区内。</p>',31),q={href:"https://elixir.bootlin.com/linux/v4.15/source/mm/mmap.c#L239",target:"_blank",rel:"noopener noreferrer"},w=t('<p>堆也有界限，虽然可以调整，但却不能无限增加其大小。堆到底可以“占多大面积”，这取决于虚拟地址空间的大小和操作系统的定义。</p><p>在堆区分配内存速度很快，为什么呢？根据前面的信息可知，在堆区分配内存，只需要增加堆指针就行了，因此分配速度很快。由于实现分配的大小与请求分配大小是相同的、且地址也是连续的，所以它不会有内存碎片的情况。</p><p>但这个分配方式有一个致命的缺点，释放堆区中的内存不会立即见效。比如上述代码中，分配了 alloc2 之后，释放 alloc，虽然这时 currheap 与 alloc2 之间有空闲内存，这时也是不能分配的，由此产生了内存空洞，只有等 alloc2 也释放了，内存空洞才会消失。</p><p>现在我们已经知道了操作系统为应用程序建立的堆，不同于数据结构中的堆。应用程序的堆区，不过是一个动态增加或减少的内存空间，用于应用程序动态分配内存，它的分配性能很好，但会产生内存空洞。</p><p>好，堆就说到这里，我们接下来去研究栈。</p><h3 id="栈" tabindex="-1"><a class="header-anchor" href="#栈" aria-hidden="true">#</a> 栈</h3><p>说到栈，你应该想到存储货物的仓库或者供旅客歇脚住宿的客栈，那么引入到计算机领域里，就是指数据<strong>暂时存储</strong>的地方，所以才有了后面的压栈、出栈的说法。</p><p>虽然应用程序的堆区和数据结构中的堆不是一回事儿，但应用程序的栈区确实就是数据结构的那个栈。栈是支持程序运行的基本数据结构，它跟计算机硬件，比如 CPU 的栈指针寄存器、操作系统息息相关，还跟编译器关系密切。</p><p>我们先来看看栈的本质是什么，再分析它怎么用。</p><p>栈作为一种数据结构，相当于<strong>只能在一端进行插入和删除操作的特殊线性表</strong>。它按照<strong>后进先出</strong>的原则存储数据，先进入的数据被压入栈底，最后进入的数据在栈顶，需要读数据的时候从栈顶开始弹出数据，最后进入的数据会被首先读出来。</p><p>你可以把栈想象成一个桶，你往桶里压入东西就是压栈，你从桶里拿出东西就是出栈。但是要记住，你只能从桶的最上面开始拿，这就是栈。如下图所示：</p><figure><img src="'+k+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于 CPU 的硬件特性，导致栈是从内存高地址向内存低地址增长的，所以实际应用程序中的栈更像是一个倒立的桶，栈其实也像一个反过来的堆。</p><p>栈有两个基本的操作：压栈和出栈，有时也称为压入和弹出。压入操作就是栈指针减去一个栈中对象的大小，然后将对象写入栈指针对应的内存空间中；而弹出是将栈指针指向的对象读出，然后将栈指针加上一个栈中对象的大小，从而指向栈中的前一个对象。</p><p>前面我们说过栈是和计算机硬件相关的，那是因为 CPU 很多指令都依赖于栈，例如 x86 CPU 的 call、ret、push、pop 等指令，push 和 pop 是栈的压入和弹出指令，call 是函数调用指令，它把下一条指令的地址压入栈中，而 ret 指令则将 call 指令压入栈中的地址弹出，实现函数返回。</p><p>栈还和编译器，特别跟 C 语言编译器有关，这是因为我们在函数中定义的局部变量，就是放在栈中的。C 语言编译器会生成额外的代码，来为局部变量在栈中分配和释放空间，自动处理各个变量的生命周期，不需要程序员手动维护，更不用担心局部变量导致内存泄漏，因为 C 函数返回时会自己从栈中弹出变量。栈的先进后出的特性，能保证被调用函数可以使用调用者函数的数据，反过来就不行了。</p><p>另一个重点是函数的调用和返回，也是依赖于栈，所以 C 语言想要正常工作，必须要有栈才行。下面我们写代码验证一下。</p><p>我们来写两个函数，主要就是打印自身的三个局部变量的地址，stacktest2 函数被 stacktest1 函数调用，而 stacktest1 函数最终会被 main 函数所调用。打印这些局部变量的地址，是为了方便我们查看这些变量放在了内存的什么地方。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">stacktest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> val1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> val2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> val3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;stacktest2运行时val1地址:%p val2地址:%p val3地址:%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">stacktest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> val1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> val2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> val3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;stacktest1运行时val1地址:%p val2地址:%p val3地址:%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">stacktest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照前面的描述，C 函数的局部变量是放在栈中的，现在我们运行这个程序看一看，运行截图如下所示：</p><figure><img src="`+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由上图可以看出，两个函数的三个变量都落在了应用程序的栈区，我们可以用课程开头的命令得到图中的 map 文件，就可以看到应用程序栈区的地址区间的范围了。</p><p>再结合前面说的栈区空间是从高地址向低地址方向增长继续分析。我们首先看到的是 stacktest1 函数的三个变量，其地址从高到低每次会下降 8 个字节，这就是因为 long 类型在 64 位系统上占用 8 字节的空间。然后是 stacktest2 函数的三个变量，它们的地址要远低于 stacktest1 函数的三个变量的地址，这是因为 stacktest2 函数是被 stacktest1 函数调用的。</p><p>现在我们已经知道了，栈是现代计算机运行不可缺少的基础数据结构。本质上，栈就是动态增长的内存空间，它遵守先进后出的原则，在此基础上就定义了两个操作：压入和弹出。</p><h3 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h3><p>今天我们学习了应用虚拟内存布局。需要区分清楚的是，堆是堆、栈是栈，它们之间区别很大。理解了这节课，相信你也能清晰地把堆和栈的本质讲给身边的同学了。</p><p>现在我们来回顾一下这节课的重点内容。首先，我们从应用程序的虚拟内存空间布局出发，了解了应用程序虚拟内存空间中都有什么。除了程序自身的指令和数据，虚拟内存空间里包括有堆区、内存映射区、栈区、环境变量与命令行参数区。</p><p>然后，我们重点研究了堆，发现应用程序虚拟内存空间的堆区，跟数据结构里的堆并不是一回事儿，它只是<strong>一个可以从低地址向高地址动态增长的内存空间，用于应用程序动态分配内存</strong>。</p><p>最后，我们探讨了栈。硬件、应用程序、高级语言编译器，都需要栈。它是一种地址由高向低动态增长的内存空间，并且定义了压栈、出栈两个操作，遵守<strong>先进后出</strong>的原则。C 语言的运行环境必须要有栈，栈是现代计算机运行的基础数据结构。</p><p>这节课的导图如下，供你参考回顾。</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h3><p>你觉得堆、栈空间是虚拟内存空间吗？如果是，请问是在什么时候分配的物理内存呢？</p><p>期待你在留言区记录自己的思考或疑问，积极参与是提升学习效果的秘诀。如果觉得这节课不错，别忘了分享给更多朋友。</p><blockquote><p>堆，栈由编译器分配，应为虚拟空间！栈是一类数据结构，先入后出！cpu采用时钟轮换制，应对不同的应用软件！取栈入栈由cpu的栈指针决定，栈对c的好处，不仅仅理清数据结构，当cpu遇到中断时 ，可将运行的数据压入栈内存中，先应对中断问题，应对完毕，再从栈内存中取数据（这是栈好处之一）<br> 还有模拟数据的原子化（要么都执行，要么都不执行），在dos模式下，栈最大量为64kb（不知保护模式最大量是多少）<br> 虚拟内存数据是在mmu加载在物理内存上，才正式被cpu运算！不管是栈结构还是堆结构，都是连续的内存空间，但实际物理内存没那么理想，也就是在虚拟内存上连续的栈结构，但通过mmu加载到内存上，可能相邻的两个指令分配在不同的内存页上的<br> 作者回复: 对的 正确</p><hr><p>堆、栈空间是虚拟内存空间，当然是需要用到内存的时候分配物理空间啦<br> 作者回复: 是的</p><hr><p>请教老师几个问题：<br> Q1：main.elf包含的五个段，就是文中第二个图所示的五个段吗？<br> 文中第二个图，就是那个竖直条形图。<br> Q2：“把堆看作一棵树的数组对象”，这句话怎么理解？<br> 堆用树来表示，树中有很多节点，所有节点放在数组里，是这样理解吗？<br> Q3：文中main.map的图中，中间的inode =0 表示什么？<br> 文中第一个图，是main.map的图，文件inode列，共有四个0，第一个0是heap，最后两个0是stack，那中间的0表示什么？<br> Q4：堆测试的图中，图中打印的结果是：alloc = 0x684000, alloc2 =0x684001，<br> 但按照sbrk的功能，alloc应该是0x684001，alloc2应该是0x685001。 为什么会是<br> 不同的值？<br> Q5：本课中所讲的5个段，对于C程序来说是这样。C++程序也是这样吗？<br> 作者回复: Q1 是的<br> Q2 是的 你理解的对</p></blockquote>',35);function C(L,j){const a=o("ExternalLinkIcon");return c(),i("div",null,[g,f,h,_,n("p",null,[n("a",x,[s("课程的配套代码你可以从这里下载"),p(a)]),s("。")]),y,n("p",null,[s("分配的地址也是从低到高，这也验证了我们之前所说的堆的增长方向。你也可以自行阅读 Linux 内核中，"),n("a",q,[s("brk 系统调用函数"),p(a)]),s("的代码进行考证，尽管内核代码中的细节很多，但核心逻辑和我们这里描述的相差无几。")]),w])}const Q=e(v,[["render",C],["__file","J25-堆与栈的区别和应用.html.vue"]]);export{Q as default};
