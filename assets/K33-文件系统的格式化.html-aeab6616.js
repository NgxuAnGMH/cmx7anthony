import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/a3cb6f6d31d2f5faaf77d2fbb3010fa4-de7e7706.jpg",e="/assets/718af93fc57342571df213c5c3989bf6-413d38d5.jpg",o="/assets/f98f2035948514bdf5ffcc3a50b9061a-c165ba24.jpg",c={},l=p(`<h1 id="_33-仓库划分-文件系统的格式化操作" tabindex="-1"><a class="header-anchor" href="#_33-仓库划分-文件系统的格式化操作" aria-hidden="true">#</a> 33 | 仓库划分：文件系统的格式化操作</h1><p>你好，我是 LMOS。</p><p>上一节课中，我们已经设计好了文件系统数据结构，相当于建好了仓库的基本结构。</p><p>今天，我将和你一起探索仓库的划分，即什么地方存放仓库的管理信息，什么地方存放进程的“劳动成果”（也就是文件），对应于文件系统就是文件系统的格式化操作。</p><p>具体我是这样安排的，我们先来实现文件系统设备驱动，接着建立文件系统超级块，然后建立根目录，最后建立文件系统的位图。下面，我们先从建立文件系统设备开始。</p><p>这节课的配套代码，你可以从这里获取。</p><h2 id="文件系统设备" tabindex="-1"><a class="header-anchor" href="#文件系统设备" aria-hidden="true">#</a> 文件系统设备</h2><p>根据我们前面的设计，文件系统并不是 Cosmos 的一部分，它只是 Cosmos 下的一个设备。</p><p>既然是设备，那就要编写相应的设备驱动程序。我们首先得编写文件系统设备的驱动程序。由于前面已经写过驱动程序了，你应该对驱动程序框架已经很熟悉了。</p><p>我们先在 cosmos/drivers/ 目录下建立一个 drvrfs.c 文件，在里面写下文件系统驱动程序框架代码，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">drvstus_t</span> <span class="token function">rfs_entry</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span><span class="token operator">*</span> drvp<span class="token punctuation">,</span><span class="token class-name">uint_t</span> val<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_exit</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span><span class="token operator">*</span> drvp<span class="token punctuation">,</span><span class="token class-name">uint_t</span> val<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_open</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_close</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_read</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_write</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_lseek</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_ioctrl</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_dev_start</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_dev_stop</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_set_powerstus</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_enum_dev</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_flush</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_shutdown</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个框架代码我们已经写好了，是不是感觉特别熟悉？这就是我们开发驱动程序的规范操作。下面，我们来建立文件系统设备。</p><p>按照之前的设计（如果不熟悉可以回顾第 32 课），我们将使用 4MB 内存空间来模拟真实的储存设备，在建立文件系统设备的时候分配一块 4MB 大小的内存空间，这个内存空间我们用一个数据结构来描述，这个数据结构的分配内存空间的代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_RFSDEVEXT</span>
<span class="token punctuation">{</span>
    <span class="token class-name">spinlock_t</span> rde_lock<span class="token punctuation">;</span><span class="token comment">//自旋锁</span>
    <span class="token class-name">list_h_t</span> rde_list<span class="token punctuation">;</span><span class="token comment">//链表</span>
    <span class="token class-name">uint_t</span> rde_flg<span class="token punctuation">;</span><span class="token comment">//标志    </span>
    <span class="token class-name">uint_t</span> rde_stus<span class="token punctuation">;</span><span class="token comment">//状态</span>
    <span class="token keyword">void</span><span class="token operator">*</span> rde_mstart<span class="token punctuation">;</span><span class="token comment">//用于模拟储存介质的内存块的开始地址</span>
    <span class="token class-name">size_t</span> rde_msize<span class="token punctuation">;</span><span class="token comment">//内存块的大小</span>
    <span class="token keyword">void</span><span class="token operator">*</span> rde_ext<span class="token punctuation">;</span><span class="token comment">//扩展所用</span>
<span class="token punctuation">}</span><span class="token class-name">rfsdevext_t</span><span class="token punctuation">;</span>
<span class="token class-name">drvstus_t</span> <span class="token function">new_rfsdevext_mmblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token class-name">size_t</span> blksz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//分配模拟储存介质的内存空间，大小为4MB</span>
    <span class="token class-name">adr_t</span> blkp<span class="token operator">=</span> <span class="token function">krlnew</span><span class="token punctuation">(</span>blksz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分配rfsdevext_t结构实例的内存空间</span>
    <span class="token class-name">rfsdevext_t</span><span class="token operator">*</span> rfsexp<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">rfsdevext_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">krlnew</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">rfsdevext_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化rfsdevext_t结构</span>
    <span class="token function">rfsdevext_t_init</span><span class="token punctuation">(</span>rfsexp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rfsexp<span class="token operator">-&gt;</span>rde_mstart<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>blkp<span class="token punctuation">;</span>
    rfsexp<span class="token operator">-&gt;</span>rde_msize<span class="token operator">=</span>blksz<span class="token punctuation">;</span>
    <span class="token comment">//把rfsdevext_t结构的地址放入device_t 结构的dev_extdata字段中，这里dev_extdata字段就起作用了</span>
    devp<span class="token operator">-&gt;</span>dev_extdata<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>rfsexp<span class="token punctuation">;</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，new_rfsdevext_mmblk 函数分配了一个内存空间和一个 rfsdevext_t 结构实例变量，rfsdevext_t 结构中保存了内存空间的地址和大小。而 rfsdevext_t 结构的地址放在了 device_t 结构的 dev_extdata 字段中。</p><p>剩下的就是建立文件系统设备了，我们在文件系统驱动程序的 rfs_entry 函数中，通过后面这段代码完成这个功能。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">rfs_set_device</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token class-name">driver_t</span><span class="token operator">*</span> drvp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//设备类型为文件系统类型</span>
    devp<span class="token operator">-&gt;</span>dev_id<span class="token punctuation">.</span>dev_mtype <span class="token operator">=</span> FILESYS_DEVICE<span class="token punctuation">;</span> 
    devp<span class="token operator">-&gt;</span>dev_id<span class="token punctuation">.</span>dev_stype <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    devp<span class="token operator">-&gt;</span>dev_id<span class="token punctuation">.</span>dev_nr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//设备名称为rfs</span>
    devp<span class="token operator">-&gt;</span>dev_name <span class="token operator">=</span> <span class="token string">&quot;rfs&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_entry</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span><span class="token operator">*</span> drvp<span class="token punctuation">,</span><span class="token class-name">uint_t</span> val<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//分配device_t结构并对其进行初级初始化</span>
    <span class="token class-name">device_t</span><span class="token operator">*</span> devp <span class="token operator">=</span> <span class="token function">new_device_dsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rfs_set_driver</span><span class="token punctuation">(</span>drvp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rfs_set_device</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>drvp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分配模拟储存设备的内存空间</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">new_rfsdevext_mmblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>FSMM_BLK<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
    <span class="token comment">//把设备加入到驱动程序之中</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">krldev_add_driver</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>drvp<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
    <span class="token comment">//向内核注册设备</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">krlnew_device</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token operator">==</span>DFCERRSTUS<span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这和我们之前的写 systick 驱动程序的套路差不多，只不过这里需要分配一个模拟储存设备的空间，并把它放在 device_t 结构相关的字段中。<strong>还有很重要的一点是，这个设备类型我们要在 rfs_set_device 函数把它设置好，设置成文件系统类型。</strong></p><p>需要注意的是要把 rfs_entry 函数放在驱动表中，文件系统程序才可以运行，下面我们就把这个 rfs_entry 函数，放入驱动表中，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//cosmos/kernel/krlglobal.c</span>
<span class="token function">KRL_DEFGLOB_VARIABLE</span><span class="token punctuation">(</span><span class="token class-name">drventyexit_t</span><span class="token punctuation">,</span>osdrvetytabl<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>systick_entry<span class="token punctuation">,</span>rfs_entry<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有了上述代码，Cosmos 在启动的时候，在 init_krldriver 函数中就会运行 rfs_entry 函数。从名字就能看出 rfs_entry 函数的功能，这是 rfs 文件系统设备驱动程序的入口函数，它一旦执行，就会建立文件系统设备。</p><h2 id="文件系统系统格式化" tabindex="-1"><a class="header-anchor" href="#文件系统系统格式化" aria-hidden="true">#</a> 文件系统系统格式化</h2><p>我们经常听说格式化硬盘、格式化 U 盘，可以把设备上的数据全部清空，事实是格式化操作并不是把设备上所有的空间都清零，而是在这个设备上重建了文件系统用于管理文件的那一整套数据结构。这也解释了为什么格式化后的设备，还能通过一些反删除软件找回一些文件。</p><p>在储存设备上创建文件系统，其实就是执行这个格式化操作，即重建文件系统的数据结构。</p><p>那么接下来，我们就从建立文件系统的超级块开始，然后建立用于管理储存设备空间的位图，最后建立根目录，这样才能最终实现在储存设备上创建文件系统。</p><h3 id="建立超级块" tabindex="-1"><a class="header-anchor" href="#建立超级块" aria-hidden="true">#</a> 建立超级块</h3><p>我们首先来建立文件系统的超级块。建立超级块其实非常简单，就是初始化超级块的数据结构，然后把它写入到储存设备中的第一块逻辑储存块。</p><p>下面我们一起写代码来实现，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">new_buf</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> bufsz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">krlnew</span><span class="token punctuation">(</span>bufsz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配缓冲区</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">del_buf</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> bufsz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">krldelete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> bufsz<span class="token punctuation">)</span><span class="token comment">//释放缓冲区</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">rfssublk_t_init</span><span class="token punctuation">(</span><span class="token class-name">rfssublk_t</span><span class="token operator">*</span> initp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">krlspinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>rsb_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>rsb_mgic <span class="token operator">=</span> <span class="token number">0x142422</span><span class="token punctuation">;</span><span class="token comment">//标志就是一个数字而已，无其它意义</span>
    initp<span class="token operator">-&gt;</span>rsb_vec <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//文件系统版本为1</span>
    initp<span class="token operator">-&gt;</span>rsb_flg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>rsb_stus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>rsb_sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">rfssublk_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//超级块本身的大小</span>
    initp<span class="token operator">-&gt;</span>rsb_sblksz <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//超级块占用多少个逻辑储存块</span>
    initp<span class="token operator">-&gt;</span>rsb_dblksz <span class="token operator">=</span> FSYS_ALCBLKSZ<span class="token punctuation">;</span><span class="token comment">//逻辑储存块的大小为4KB</span>
    <span class="token comment">//位图块从第1个逻辑储存块开始，超级块占用第0个逻辑储存块</span>
    initp<span class="token operator">-&gt;</span>rsb_bmpbks <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>rsb_bmpbknr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>rsb_fsysallblk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">rfsdir_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>rsb_rootdir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化根目录</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">bool_t</span> <span class="token function">create_superblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配4KB大小的缓冲区，清零</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//使rfssublk_t结构的指针指向缓冲区并进行初始化</span>
    <span class="token class-name">rfssublk_t</span> <span class="token operator">*</span>sbp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">rfssublk_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>
    <span class="token function">rfssublk_t_init</span><span class="token punctuation">(</span>sbp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取储存设备的逻辑储存块数并保存到超级块中</span>
    sbp<span class="token operator">-&gt;</span>rsb_fsysallblk <span class="token operator">=</span> <span class="token function">ret_rfsdevmaxblknr</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把缓冲区中超级块的数据写入到储存设备的第0个逻辑储存块中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放缓冲区</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的意思是，我们先在内存缓冲区中建立文件系统的超级块，最后会调用 write_rfsdevblk 函数，把内存缓冲区的数据写入到储存设备中。</p><p>下面我们来实现这个 write_rfsdevblk 函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//返回设备扩展数据结构</span>
<span class="token class-name">rfsdevext_t</span><span class="token operator">*</span> <span class="token function">ret_rfsdevext</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">rfsdevext_t</span><span class="token operator">*</span><span class="token punctuation">)</span>devp<span class="token operator">-&gt;</span>dev_extdata<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//根据块号返回储存设备的块地址</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">ret_rfsdevblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token class-name">uint_t</span> blknr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">rfsdevext_t</span><span class="token operator">*</span> rfsexp <span class="token operator">=</span> <span class="token function">ret_rfsdevext</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//块号乘于块大小的结果再加上开始地址（用于模拟储存设备的内存空间的开始地址）</span>
    <span class="token keyword">void</span><span class="token operator">*</span> blkp <span class="token operator">=</span> rfsexp<span class="token operator">-&gt;</span>rde_mstart <span class="token operator">+</span> <span class="token punctuation">(</span>blknr<span class="token operator">*</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//如果该地址没有落在储存入设备的空间中，就返回NULL表示出错</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>blkp <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>rfsexp<span class="token operator">-&gt;</span>rde_mstart<span class="token operator">+</span>rfsexp<span class="token operator">-&gt;</span>rde_msize<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//返回块地址</span>
    <span class="token keyword">return</span> blkp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//把4KB大小的缓冲区中的内容，写入到储存设备的某个逻辑储存块中</span>
<span class="token class-name">drvstus_t</span> <span class="token function">write_rfsdevblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> weadr<span class="token punctuation">,</span><span class="token class-name">uint_t</span> blknr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//返回储存设备中第blknr块的逻辑存储块的地址</span>
    <span class="token keyword">void</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">ret_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>blknr<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">//复制数据到逻辑储存块中</span>
    <span class="token function">hal_memcpy</span><span class="token punctuation">(</span>weadr<span class="token punctuation">,</span>p<span class="token punctuation">,</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面我们一下子写了三个函数，由于我们用内存模拟储存设备，我们要写一个 ret_rfsdevext 函数返回设备扩展数据结构，这个函数和 ret_rfsdevblk 函数将会一起根据块号，计算出内存地址。然后，我们把缓冲区的内容复制到这个地址开始的内存空间就行了。</p><h3 id="建立位图" tabindex="-1"><a class="header-anchor" href="#建立位图" aria-hidden="true">#</a> 建立位图</h3><p>接下来，我们要建立文件系统的位图了。</p><p>延续我们文件系统的设计思路，储存设备被分成了许多同等大小的逻辑储存块，位图就是为了能准确地知道储存设备中，哪些逻辑储存块空闲、哪些是被占用的。</p><p>我们使用一个逻辑储存块空间中的所有字节，来管理逻辑储存块的状态。建立位图无非就是把储存设备中的位图块清零，因为开始文件系统刚创建时，所有的逻辑储存块都是空闲的。下面我们来写好代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//把逻辑储存块中的数据，读取到4KB大小的缓冲区中</span>
<span class="token class-name">drvstus_t</span> <span class="token function">read_rfsdevblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> rdadr<span class="token punctuation">,</span><span class="token class-name">uint_t</span> blknr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取逻辑储存块地址</span>
    <span class="token keyword">void</span><span class="token operator">*</span> p<span class="token operator">=</span><span class="token function">ret_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>blknr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把逻辑储存块中的数据复制到缓冲区中</span>
    <span class="token function">hal_memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>rdadr<span class="token punctuation">,</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//获取超级块</span>
<span class="token class-name">rfssublk_t</span><span class="token operator">*</span> <span class="token function">get_superblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//分配4KB大小的缓冲区</span>
    <span class="token keyword">void</span><span class="token operator">*</span> buf<span class="token operator">=</span><span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//清零缓冲区</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>FSYS_ALCBLKSZ<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//读取第0个逻辑储存块中的数据到缓冲区中，如果读取失败则释放缓冲区</span>
    <span class="token function">read_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//返回超级块数据结构的地址，即缓冲区的首地址</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">rfssublk_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//释放超级块</span>
<span class="token keyword">void</span> <span class="token function">del_superblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token class-name">rfssublk_t</span><span class="token operator">*</span> sbp<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">//回写超级块，因为超级块中的数据可能已经发生了改变，如果出错则死机</span>
    <span class="token function">write_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>sbp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放先前分配的4KB大小的缓冲区</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>sbp<span class="token punctuation">,</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//建立位图</span>
<span class="token class-name">bool_t</span> <span class="token function">create_bitmap</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">bool_t</span> rets<span class="token operator">=</span>FALSE<span class="token punctuation">;</span>
    <span class="token comment">//获取超级块，失败则返回FALSE</span>
    <span class="token class-name">rfssublk_t</span><span class="token operator">*</span> sbp <span class="token operator">=</span> <span class="token function">get_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分配4KB大小的缓冲区</span>
    <span class="token keyword">void</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token comment">//获取超级块中位图块的开始块号</span>
    <span class="token class-name">uint_t</span> bitmapblk<span class="token operator">=</span>sbp<span class="token operator">-&gt;</span>rsb_bmpbks<span class="token punctuation">;</span>
    <span class="token comment">//获取超级块中储存介质的逻辑储存块总数</span>
    <span class="token class-name">uint_t</span> devmaxblk<span class="token operator">=</span>sbp<span class="token operator">-&gt;</span>rsb_fsysallblk<span class="token punctuation">;</span>
    <span class="token comment">//如果逻辑储存块总数大于4096，就认为出错了</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>devmaxblk<span class="token operator">&gt;</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rets<span class="token operator">=</span>FALSE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> errlable<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//把缓冲区中每个字节都置成1</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>FSYS_ALCBLKSZ<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">u8_t</span><span class="token operator">*</span> bitmap<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">u8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>
    <span class="token comment">//把缓冲区中的第3个字节到第devmaxblk个字节都置成0</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> bi<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>bi<span class="token operator">&lt;</span>devmaxblk<span class="token punctuation">;</span>bi<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        bitmap<span class="token punctuation">[</span>bi<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//把缓冲区中的数据写入到储存介质中的第bitmapblk个逻辑储存块中，即位图块中</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">write_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>buf<span class="token punctuation">,</span>bitmapblk<span class="token punctuation">)</span><span class="token operator">==</span>DFCERRSTUS<span class="token punctuation">)</span><span class="token punctuation">{</span>
        rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> errlable<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//设置返回状态</span>
    rets<span class="token operator">=</span>TRUE<span class="token punctuation">;</span>
errlable<span class="token operator">:</span>
<span class="token comment">//释放超级块</span>
    <span class="token function">del_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>sbp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//释放缓冲区</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里为什么又多了几个辅助函数呢？这是因为，位图块的块号和储存介质的逻辑储存块总数，都保存在超级块中，所以要实现获取、释放超级块的函数，还需要一个读取逻辑储存块的函数，写入逻辑储存块的函数前面已经写过了。</p><p>因为第 0 块是超级块，第 1 块是位图块本身，所以代码从缓冲区中的第 3 个字节开始清零，一直到 devmaxblk 个字节，devmaxblk 就是储存介质的逻辑储存块总数。缓冲区中有 4096 个字节，但 devmaxblk 肯定是小于 4096 的，所以 devmaxblk 后面的字节全部为 1，这样就不会影响到后面分配逻辑储存块代码的正确性了。</p><p>最后，我们把这个缓冲区中的数据写入到储存介质中的第 bitmapblk 个逻辑储存块中，就完成了位图的建立。</p><p>建立好了管理逻辑储存块状态的位图，下面就去接着建立根目录吧！</p><h3 id="建立根目录" tabindex="-1"><a class="header-anchor" href="#建立根目录" aria-hidden="true">#</a> 建立根目录</h3><p>一切目录和文件都是存放在根目录下的，查询目录和文件也是从这里开始的，所以文件系统创建的最后一步就是创建根目录。</p><p>根目录也是一种文件，所以要为其分配相应的逻辑储存块，因为根目录下的文件和目录对应的 rfsdir_t 结构，就是保存在这个逻辑储存块中的。</p><p>因为根目录是文件，所以要在这个逻辑储存块的首个 512 字节空间中建立 fimgrhd_t 结构，即文件管理头数据结构。最后，我们要把这个逻辑储存块的块号，储存在超级块中的 rfsdir_t 结构中，同时修改该 rfsdir_t 结构中的文件名称为“/”。</p><p>要达到上述功能要求，就需要操作文件系统的超级块和位图，所以我们要先写好这些辅助功能函数，实现获取 / 释放位图块的代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//获取位图块</span>
<span class="token class-name">u8_t</span><span class="token operator">*</span> <span class="token function">get_bitmapblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取超级块</span>
    <span class="token class-name">rfssublk_t</span><span class="token operator">*</span> sbp <span class="token operator">=</span> <span class="token function">get_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分配4KB大小的缓冲区</span>
    <span class="token keyword">void</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//缓冲区清零</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//读取sbp-&gt;rsb_bmpbks块（位图块），到缓冲区中</span>
    <span class="token function">read_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_bmpbks<span class="token punctuation">)</span>
    <span class="token comment">//释放超级块</span>
    <span class="token function">del_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> sbp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//返回缓冲区的首地址</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">u8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//释放位图块</span>
<span class="token keyword">void</span> <span class="token function">del_bitmapblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token class-name">u8_t</span><span class="token operator">*</span> bitmap<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取超级块</span>
    <span class="token class-name">rfssublk_t</span><span class="token operator">*</span> sbp <span class="token operator">=</span> <span class="token function">get_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//回写位图块，因为位图块中的数据可能已经发生改变</span>
    <span class="token function">write_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>bitmap<span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_bmpbks<span class="token punctuation">)</span>
    <span class="token comment">//释放超级块和存放位图块的缓冲区</span>
    <span class="token function">del_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> sbp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>bitmap<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取 / 释放位图块非常简单，就是根据超级块中的位图块号，把储存设备中的位图数据块读取到缓冲区中，而释放位图块则需要把缓冲区的数据写入到储存设备对应的逻辑块中。获取 / 释放超级块的函数，我们建立位图时已经写好了。</p><p>建立根目录需要分配新的逻辑储存块，分配新的逻辑储存块其实就是扫描位图数据，从中找出一个空闲的逻辑储存块，下面我们来写代码实现这个函数，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//分配新的空闲逻辑储存块</span>
<span class="token class-name">uint_t</span> <span class="token function">rfs_new_blk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token class-name">uint_t</span> retblk<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//获取位图块</span>
    <span class="token class-name">u8_t</span><span class="token operator">*</span> bitmap <span class="token operator">=</span> <span class="token function">get_bitmapblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token keyword">if</span><span class="token punctuation">(</span>bitmap <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>    
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> blknr <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> blknr <span class="token operator">&lt;</span> FSYS_ALCBLKSZ<span class="token punctuation">;</span> blknr<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//找到一个为0的字节就置为1，并返回该字节对应的空闲块号</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">[</span>blknr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            bitmap<span class="token punctuation">[</span>blknr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            retblk <span class="token operator">=</span> blknr<span class="token punctuation">;</span>
            <span class="token keyword">goto</span> retl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果到这里就说明没有空闲块了，所以返回0</span>
    retblk<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
retl<span class="token operator">:</span>
    <span class="token comment">//释放位图块</span>
    <span class="token function">del_bitmapblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> retblk<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rfs_new_blk 函数会返回新分配的逻辑储存块号，如果没有空闲的逻辑储存块了，就会返回 0。下面我们就可以建立根目录了，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//建立根目录</span>
<span class="token class-name">bool_t</span> <span class="token function">create_rootdir</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token comment">//获取超级块</span>
    <span class="token class-name">rfssublk_t</span><span class="token operator">*</span> sbp <span class="token operator">=</span> <span class="token function">get_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分配4KB大小的缓冲区</span>
    <span class="token keyword">void</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//缓冲区清零</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>FSYS_ALCBLKSZ<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分配一个空闲的逻辑储存块</span>
    <span class="token class-name">uint_t</span> blk <span class="token operator">=</span> <span class="token function">rfs_new_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>blk <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> errlable<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//设置超级块中的rfsdir_t结构中的名称为“/”</span>
    sbp<span class="token operator">-&gt;</span>rsb_rootdir<span class="token punctuation">.</span>rdr_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">//设置超级块中的rfsdir_t结构中的类型为目录类型</span>
    sbp<span class="token operator">-&gt;</span>rsb_rootdir<span class="token punctuation">.</span>rdr_type <span class="token operator">=</span> RDR_DIR_TYPE<span class="token punctuation">;</span>
    <span class="token comment">//设置超级块中的rfsdir_t结构中的块号为新分配的空闲逻辑储存块的块号</span>
    sbp<span class="token operator">-&gt;</span>rsb_rootdir<span class="token punctuation">.</span>rdr_blknr <span class="token operator">=</span> blk<span class="token punctuation">;</span>
    <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> fmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>
    <span class="token comment">//初始化fimgrhd_t结构</span>
    <span class="token function">fimgrhd_t_init</span><span class="token punctuation">(</span>fmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//因为这是目录文件所以fimgrhd_t结构的类型设置为目录类型</span>
    fmp<span class="token operator">-&gt;</span>fmd_type <span class="token operator">=</span> FMD_DIR_TYPE<span class="token punctuation">;</span>
    <span class="token comment">//fimgrhd_t结构自身所在的块设置为新分配的空闲逻辑储存块</span>
    fmp<span class="token operator">-&gt;</span>fmd_sfblk <span class="token operator">=</span> blk<span class="token punctuation">;</span>
    <span class="token comment">//fimgrhd_t结构中正在写入的块设置为新分配的空闲逻辑储存块</span>
    fmp<span class="token operator">-&gt;</span>fmd_curfwritebk <span class="token operator">=</span> blk<span class="token punctuation">;</span>
    <span class="token comment">//fimgrhd_t结构中正在写入的块的偏移设置为512字节</span>
    fmp<span class="token operator">-&gt;</span>fmd_curfinwbkoff <span class="token operator">=</span> <span class="token number">0x200</span><span class="token punctuation">;</span>
    <span class="token comment">//设置文件数据占有块数组的第0个元素</span>
    fmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blkstart <span class="token operator">=</span> blk<span class="token punctuation">;</span>
    fmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blknr <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//把缓冲区中的数据写入到新分配的空闲逻辑储存块中，其中包含已经设置好的      fimgrhd_t结构</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">write_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> blk<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> errlable<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rets <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
errlable<span class="token operator">:</span>
    <span class="token comment">//释放缓冲区</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
errlable1<span class="token operator">:</span>
    <span class="token comment">//释放超级块</span>
    <span class="token function">del_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> sbp<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的注释已经很清楚了，虽然代码有点长，但总体流程还是挺清晰的。首先，分配一块新的逻辑储存块。接着，设置超级块中的 rfsdir_t 结构中的名称以及类型和块号。然后设置文件管理头，由于根目录是目录文件，所以文件管理头的类型为 FMD_DIR_TYPE，表示文件数据存放的是目录结构。最后，回写对应的逻辑储存块即可。</p><h3 id="串联" tabindex="-1"><a class="header-anchor" href="#串联" aria-hidden="true">#</a> # 串联</h3><p>建立超级块、建立位图、建立根目录的代码已经写好了。</p><p>现在我们来写一个 rfs_fmat 函数，把刚才这三个操作包装起来，调用它们完成文件系统格式化这一流程。顺便，我们还可以把 init_rfs 函数也实现了，让它调用 rfs_fmat 函数，随后 init_rfs 函数本身会在 rfs_entry 函数的最后被调用，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//rfs初始化</span>
<span class="token keyword">void</span> <span class="token function">init_rfs</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//格式化rfs</span>
    <span class="token function">rfs_fmat</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//rfs格式化</span>
<span class="token keyword">void</span> <span class="token function">rfs_fmat</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//建立超级块</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">create_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;create superblk err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//建立位图</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">create_bitmap</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;create bitmap err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//建立根目录</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">create_rootdir</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;create rootdir err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//rfs驱动程序入口</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_entry</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span> <span class="token operator">*</span>drvp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> val<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//……</span>
    <span class="token function">init_rfs</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化rfs</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，init_rfs 函数会在 rfs 驱动程序入口函数的最后被调用，到这里我们 rfs 文件系统的格式化操作就完成了，这是实现文件系统的重要一步。</p><h2 id="测试文件系统" tabindex="-1"><a class="header-anchor" href="#测试文件系统" aria-hidden="true">#</a> 测试文件系统</h2><p>尽管我们的文件系统还有很多其它操作，如打开、关闭，读写文件，这些文件相关的操作我们放在下一节课中来实现。这里我们先对文件系统格式化的功能进行测试，确认一下我们的格式化代码没有问题，再进行下一步的开发。</p><h3 id="测试文件系统超级块" tabindex="-1"><a class="header-anchor" href="#测试文件系统超级块" aria-hidden="true">#</a> 测试文件系统超级块</h3><p>之前我们文件系统格式化操作的第一步，就是建立文件系统的超级块。</p><p>所以我们首先来测试一下建立文件系统超级块的代码，测试方法非常简单，我们只要把超级块读取到一个缓冲区中，然后把其中一些重要的数据，打印出来看一看就知道了，我们写个函数完成这个功能，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//测试文件系统超级块</span>
<span class="token keyword">void</span> <span class="token function">test_rfs_superblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;开始文件系统超级块测试\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">rfssublk_t</span> <span class="token operator">*</span>sbp <span class="token operator">=</span> <span class="token function">get_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;文件系统标识:%d,版本:%d\\n&quot;</span><span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_mgic<span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_vec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;文件系统超级块占用的块数:%d,逻辑储存块大小:%d\\n&quot;</span><span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_sblksz<span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_dblksz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;文件系统位图块号:%d,文件系统整个逻辑储存块数:%d\\n&quot;</span><span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_bmpbks<span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_fsysallblk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;文件系统根目录块号:%d 类型:%d\\n&quot;</span><span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_rootdir<span class="token punctuation">.</span>rdr_blknr<span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_rootdir<span class="token punctuation">.</span>rdr_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;文件系统根目录名称:%s\\n&quot;</span><span class="token punctuation">,</span> sbp<span class="token operator">-&gt;</span>rsb_rootdir<span class="token punctuation">.</span>rdr_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">del_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> sbp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;结束文件系统超级块测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//死机用于观察测试结果</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//rfs驱动程序入口</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_entry</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span> <span class="token operator">*</span>drvp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> val<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">init_rfs</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化rfs</span>
    <span class="token function">test_rfs_superblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试文件系统超级块</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码我们已经写好了，下面我们打开终端，切换到 Cosmos 目录下执行 make vboxtest，Cosmos 加载 rfs 驱动程序运行后的结果，如下所示。</p><img src="`+t+`" alt="img" style="zoom:50%;"><p>文件系统超级块测试.</p><p>上图中我们可以看到，文件系统的标识、版本和最初定义的是相同的，逻辑储存块的大小为 4KB。位图占用的是第 1 个逻辑储存块，因为第 0 个逻辑储存块被超级块占用了。</p><p>同时，我们还可以看到储存设备上共有 1024 个逻辑储存块，根目录文件的逻辑储存块为第 2 块，名称为“/”，这些正确的数据证明了建立超级块的代码是没有问题的。</p><h3 id="测试文件系统位图" tabindex="-1"><a class="header-anchor" href="#测试文件系统位图" aria-hidden="true">#</a> 测试文件系统位图</h3><p>测试完了文件系统超级块，我们接着来测试文件系统位图。测试方法很简单，先读取位图块到一个缓冲区中，然后循环扫描这个缓冲区，看看里面有多少个为 0 的字节，即表明储存介质上有多少个空闲的逻辑储存块。</p><p>我们一起来写好这个测试函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">test_rfs_bitmap</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;开始文件系统位图测试\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">read_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//读取位图块</span>
    <span class="token class-name">u8_t</span> <span class="token operator">*</span>bmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//扫描位图块</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> FSYS_ALCBLKSZ<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//记录空闲块</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;文件系统空闲块数:%d\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;结束文件系统位图测试\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//死机用于观察测试结果</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test_rfs_bitmap 函数我们已经写好了，别忘了<strong>在 rfs_entry 函数的末尾调用它</strong>，随后我们在终端下执行 make vboxtest，就可以看到 Cosmos 加载 rfs 驱动程序运行后的结果，如下所示。</p><img src="`+e+`" alt="img" style="zoom:50%;"><p>文件系统位图测试</p><p>上图中的空闲块数为 1021，表示储存介质上已经分配了 3 块逻辑储存块了。这就证明了我们建立文件系统位图的代码是没有问题的。</p><h3 id="测试文件系统根目录" tabindex="-1"><a class="header-anchor" href="#测试文件系统根目录" aria-hidden="true">#</a> 测试文件系统根目录</h3><p>最后我们来测试文件系统的根目录文件建立的对不对，测试方法就是先得到根目录文件的 rfsdir_t 结构，然后读取其中指向的逻辑储存块到缓冲区中，最后把它们的数据打印出来。</p><p>这个函数很简单，我们来写好它，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">test_rfs_rootdir</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;开始文件系统根目录测试\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">rfsdir_t</span> <span class="token operator">*</span>dr <span class="token operator">=</span> <span class="token function">get_rootdir</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">read_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> dr<span class="token operator">-&gt;</span>rdr_blknr<span class="token punctuation">)</span>
    <span class="token class-name">fimgrhd_t</span> <span class="token operator">*</span>fmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;文件管理头类型:%d 文件数据大小:%d 文件在开始块中偏移:%d 文件在结束块中的偏移:%d\\n&quot;</span><span class="token punctuation">,</span>
            fmp<span class="token operator">-&gt;</span>fmd_type<span class="token punctuation">,</span> fmp<span class="token operator">-&gt;</span>fmd_filesz<span class="token punctuation">,</span> fmp<span class="token operator">-&gt;</span>fmd_fileifstbkoff<span class="token punctuation">,</span> fmp<span class="token operator">-&gt;</span>fmd_fileiendbkoff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;文件第一组开始块号:%d 块数:%d\\n&quot;</span><span class="token punctuation">,</span> fmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blkstart<span class="token punctuation">,</span> fmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blknr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">del_rootdir</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> dr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;结束文件系统根目录测试\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//死机用于观察测试结果</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>test_rfs_rootdir 函数同样要在 rfs_entry 函数的末尾调用，然后我们在终端下执行 make vboxtest，就可以看到 cosmos 加载 rfs 驱动程序运行后的结果了。</p><img src="`+o+'" alt="img" style="zoom:50%;"><p>文件系统根目录测试</p><p>从上图我们可以看到，根目录文件的类型为目录文件类型。因为根目录文件才刚建立，所以文件大小为 0，文件数据的存放位置从文件占用的第 1 块逻辑储存块的 512 字节处开始。因为第 0、1 块逻辑储存块被超级块和位图块占用了，所以根目录文件占用的逻辑储存块，就是第 2 块逻辑储存块，只占用了 1 块。</p><p>好了，上面一系列的测试结果，表明我们的文件系统格式化的代码正确无误，文件系统格式化操作的内容我们就告一段落了</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>今天的课程就到这里了，今天我们继续推进了文件系统的进度，实现了文件系统的格式化操作，我来为你把今天的课程重点梳理一下。</p><ol><li><p>首先实现了文件系统设备驱动程序框架，这是因为我们之前的架构设计，把文件系统作为 Cosmos 系统下的一个设备，这有利于<strong>扩展不同的文件系统。</strong></p></li><li><p>然后我们实现了文件系统格式化操作，包括建立文件系统超级块、位图、根目录操作，并且将它们串联在一起完成文件系统格式化。</p></li><li><p>最后是对文件系统测试，我们通过打印出文件系统超级块、位图还有根目录的相关数据来验证，最终确认了我们文件系统格式化操作的代码是正确的。</p></li></ol><p>虽然我们实现了文件系统的格式化，也对其进行了测试，但是我们的文件系统还是不能存放文件，因为我们还没有实现操作文件相关的功能，下一节课我们继续探索。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请问，建立文件系统的超级块、位图、根目录的三大函数的调用顺序可以随意调换吗，原因是什么？</p><p>欢迎你在留言区记录你的疑问或者收获，积极输出有利于你深入理解这节课的内容。同时，也欢迎你把这节课转给身边的同事、朋友。</p><p>好，我是 LMOS，我们下节课见！</p>',95),i=[l];function u(k,r){return s(),a("div",null,i)}const m=n(c,[["render",u],["__file","K33-文件系统的格式化.html.vue"]]);export{m as default};
