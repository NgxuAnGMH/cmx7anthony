import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-063765ff.js";const e="/assets/53d57c8c7645d8e2292a08ee97557b0e-a84cea15.png",t="/assets/90eb47e4c9b202c45804ef7383a9d6cc-ecfc99f5.png",o="/assets/d997a7ea02b7f85136974a54dce7589a-82973996.png",c="/assets/2c13a1af8632a2bbf77338e57c957b77-6e58180e.png",l="/assets/ef02474d3474e96c6f55b07493652fb6-6bc362c7.png",i="/assets/53e470037dd49d3d27695a5174fc3dbe-744429d5.png",u={},r=p(`<h1 id="_17-即时编译-下" tabindex="-1"><a class="header-anchor" href="#_17-即时编译-下" aria-hidden="true">#</a> 17 | 即时编译（下）</h1><p>今天我们来继续讲解 Java 虚拟机中的即时编译。</p><p><strong>Profiling</strong></p><p>上篇提到，分层编译中的 0 层、2 层和 3 层都会进行 profiling，收集能够反映程序执行状态的数据。其中，最为基础的便是方法的调用次数以及循环回边的执行次数。它们被用于触发即时编译。</p><p>此外，0 层和 3 层还会收集用于 4 层 C2 编译的数据，比如说分支跳转字节码的分支 profile（branch profile），包括跳转次数和不跳转次数，以及非私有实例方法调用指令、强制类型转换 checkcast 指令、类型测试 instanceof 指令，和引用类型的数组存储 aastore 指令的类型 profile（receiver type profile）。</p><p>分支 profile 和类型 profile 的收集将给应用程序带来不少的性能开销。据统计，正是因为这部分额外的 profiling，使得 3 层 C1 代码的性能比 2 层 C1 代码的低 30%。</p><p>在通常情况下，我们不会在解释执行过程中收集分支 profile 以及类型 profile。只有在方法触发 C1 编译后，Java 虚拟机认为该方法有可能被 C2 编译，方才在该方法的 C1 代码中收集这些 profile。</p><p>只要在比较极端的情况下，例如等待 C1 编译的方法数目太多时，Java 虚拟机才会开始在解释执行过程中收集这些 profile。</p><p>那么这些耗费巨大代价收集而来的 profile 具体有什么作用呢？</p><p>答案是，C2 可以根据收集得到的数据进行猜测，假设接下来的执行同样会按照所收集的 profile 进行，从而作出比较激进的优化。</p><p><strong>基于分支 profile 的优化</strong></p><p>举个例子，下面这段代码中包含两个条件判断。第一个条件判断将测试所输入的 boolean 值。</p><p>如果为 true，则将局部变量 v 设置为所输入的 int 值。如果为 false，则将所输入的 int 值经过一番运算之后，再存入局部变量 v 之中。</p><p>第二个条件判断则测试局部变量 v 是否和所输入的 int 值相等。如果相等，则返回 0。如果不等，则将局部变量 v 经过一番运算之后，再将之返回。显然，当所输入的 boolean 值为 true 的情况下，这段代码将返回 0。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> v<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v <span class="token operator">=</span> in<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 编译而成的字节码：</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Code</span><span class="token operator">:</span>
     <span class="token number">0</span><span class="token operator">:</span> iload_0
     <span class="token number">1</span><span class="token operator">:</span> ifeq          <span class="token number">9</span>
     <span class="token number">4</span><span class="token operator">:</span> iload_1
     <span class="token number">5</span><span class="token operator">:</span> istore_2
     <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">16</span>
     <span class="token number">9</span><span class="token operator">:</span> iload_1
    <span class="token number">10</span><span class="token operator">:</span> i2d
    <span class="token number">11</span><span class="token operator">:</span> invokestatic  java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Math</span><span class="token punctuation">.</span>sin<span class="token operator">:</span><span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">)</span><span class="token class-name">D</span>
    <span class="token number">14</span><span class="token operator">:</span> d2i
    <span class="token number">15</span><span class="token operator">:</span> istore_2
    <span class="token number">16</span><span class="token operator">:</span> iload_2
    <span class="token number">17</span><span class="token operator">:</span> iload_1
    <span class="token number">18</span><span class="token operator">:</span> if_icmpne     <span class="token number">23</span>
    <span class="token number">21</span><span class="token operator">:</span> iconst_0
    <span class="token number">22</span><span class="token operator">:</span> ireturn
    <span class="token number">23</span><span class="token operator">:</span> iload_2
    <span class="token number">24</span><span class="token operator">:</span> i2d
    <span class="token number">25</span><span class="token operator">:</span> invokestatic java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Math</span><span class="token punctuation">.</span>cos<span class="token operator">:</span><span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">)</span><span class="token class-name">D</span>
    <span class="token number">28</span><span class="token operator">:</span> d2i
    <span class="token number">29</span><span class="token operator">:</span> ireturn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>假设应用程序调用该方法时，所传入的 boolean 值皆为 true。那么，偏移量为 1 以及偏移量为 18 的条件跳转指令所对应的分支 profile 中，跳转的次数都为 0。</p><figure><img src="'+t+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>C2 可以根据这两个分支 profile 作出假设，在接下来的执行过程中，这两个条件跳转指令仍旧不会发生跳转。基于这个假设，C2 便不再编译这两个条件跳转语句所对应的 false 分支了。</p><p>我们暂且不管当假设错误的时候会发生什么，先来看一看剩下来的代码。经过“剪枝”之后，在第二个条件跳转处，v 的值只有可能为所输入的 int 值。因此，该条件跳转可以进一步被优化掉。最终的结果是，在第一个条件跳转之后，C2 代码将直接返回 0。</p><figure><img src="'+o+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里我打印了 C2 的编译结果。可以看到，在地址为 2cee 的指令处进行过一次比较之后，该机器码便直接返回 0。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Compiled</span> method <span class="token punctuation">(</span>c2<span class="token punctuation">)</span>      <span class="token number">95</span>   <span class="token number">16</span>       <span class="token number">4</span>       <span class="token class-name">CompilationTest</span><span class="token operator">::</span><span class="token function">foo</span> <span class="token punctuation">(</span><span class="token number">30</span> bytes<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">CompilationTest</span><span class="token punctuation">.</span>foo  <span class="token punctuation">[</span><span class="token number">0x0000000104fb2ce0</span><span class="token punctuation">,</span> <span class="token number">0x0000000104fb2d38</span><span class="token punctuation">]</span>  <span class="token number">88</span> bytes
<span class="token punctuation">[</span><span class="token class-name">Entry</span> <span class="token class-name">Point</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token class-name">Verified</span> <span class="token class-name">Entry</span> <span class="token class-name">Point</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token class-name">Constants</span><span class="token punctuation">]</span>
  # <span class="token punctuation">{</span>method<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">0x000000012629e380</span><span class="token punctuation">}</span> <span class="token char">&#39;foo&#39;</span> <span class="token char">&#39;(ZI)I&#39;</span> in &#39;<span class="token class-name">CompilationTest</span>&#39;
  # parm0<span class="token operator">:</span>    rsi       <span class="token operator">=</span> <span class="token keyword">boolean</span>
  # parm1<span class="token operator">:</span>    rdx       <span class="token operator">=</span> <span class="token keyword">int</span>
  #           <span class="token punctuation">[</span>sp<span class="token operator">+</span><span class="token number">0x30</span><span class="token punctuation">]</span>  <span class="token punctuation">(</span>sp of caller<span class="token punctuation">)</span>
  <span class="token number">0x0000000104fb2ce0</span><span class="token operator">:</span> mov    <span class="token constant">DWORD</span> <span class="token constant">PTR</span> <span class="token punctuation">[</span>rsp<span class="token operator">-</span><span class="token number">0x14000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>eax
  <span class="token number">0x0000000104fb2ce7</span><span class="token operator">:</span> push   rbp
  <span class="token number">0x0000000104fb2ce8</span><span class="token operator">:</span> sub    rsp<span class="token punctuation">,</span><span class="token number">0x20</span>
  <span class="token number">0x0000000104fb2cec</span><span class="token operator">:</span> test   esi<span class="token punctuation">,</span>esi
  <span class="token number">0x0000000104fb2cee</span><span class="token operator">:</span> je     <span class="token number">0x0000000104fb2cfe</span> <span class="token comment">// 跳转至?</span>
  <span class="token number">0x0000000104fb2cf0</span><span class="token operator">:</span> xor    eax<span class="token punctuation">,</span>eax            <span class="token comment">// 将返回值设置为0</span>
  <span class="token number">0x0000000104fb2cf2</span><span class="token operator">:</span> add    rsp<span class="token punctuation">,</span><span class="token number">0x20</span>
  <span class="token number">0x0000000104fb2cf6</span><span class="token operator">:</span> pop    rbp
  <span class="token number">0x0000000104fb2cf7</span><span class="token operator">:</span> test   <span class="token constant">DWORD</span> <span class="token constant">PTR</span> <span class="token punctuation">[</span>rip<span class="token operator">+</span><span class="token number">0xfffffffffca32303</span><span class="token punctuation">]</span><span class="token punctuation">,</span>eax <span class="token comment">// safepoint</span>
  <span class="token number">0x0000000104fb2cfd</span><span class="token operator">:</span> ret    
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结一下，根据条件跳转指令的分支 profile，即时编译器可以将从未执行过的分支剪掉，以避免编译这些很有可能不会用到的代码，从而节省编译时间以及部署代码所要消耗的内存空间。此外，“剪枝”将精简程序的数据流，从而触发更多的优化。</p><p>在现实中，分支 profile 出现仅跳转或者仅不跳转的情况并不多见。当然，即时编译器对分支 profile 的利用也不仅限于“剪枝”。它还会根据分支 profile，计算每一条程序执行路径的概率，以便某些编译器优化优先处理概率较高的路径。</p><p><strong>基于类型 profile 的优化</strong></p><p>另外一个例子则是关于 instanceof 以及方法调用的类型 profile。下面这段代码将测试所传入的对象是否为 Exception 的实例，如果是，则返回它的系统哈希值；如果不是，则返回它的哈希值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token keyword">instanceof</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 编译而成的字节码：</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Code</span><span class="token operator">:</span>
     <span class="token number">0</span><span class="token operator">:</span> aload_0
     <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">instanceof</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span>
     <span class="token number">4</span><span class="token operator">:</span> ifeq          <span class="token number">12</span>
     <span class="token number">7</span><span class="token operator">:</span> aload_0
     <span class="token number">8</span><span class="token operator">:</span> invokestatic java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">System</span><span class="token punctuation">.</span>identityHashCode<span class="token operator">:</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">I</span>
    <span class="token number">11</span><span class="token operator">:</span> ireturn
    <span class="token number">12</span><span class="token operator">:</span> aload_0
    <span class="token number">13</span><span class="token operator">:</span> invokevirtual java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">.</span>hashCode<span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">I</span>
    <span class="token number">16</span><span class="token operator">:</span> ireturn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设应用程序调用该方法时，所传入的 Object 皆为 Integer 实例。那么，偏移量为 1 的 instanceof 指令的类型 profile 仅包含 Integer，偏移量为 4 的分支跳转语句的分支 profile 中不跳转的次数为 0，偏移量为 13 的方法调用指令的类型 profile 仅包含 Integer。</p><figure><img src="`+c+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在 Java 虚拟机中，instanceof 测试并不简单。如果 instanceof 的目标类型是 final 类型，那么 Java 虚拟机仅需比较测试对象的动态类型是否为该 final 类型。</p><p>在讲解对象的内存分布那一篇中，我曾经提到过，对象头存有该对象的动态类型。因此，获取对象的动态类型仅为单一的内存读指令。</p><p>如果目标类型不是 final 类型，比如说我们例子中的 Exception，那么 Java 虚拟机需要从测试对象的动态类型开始，依次测试该类，该类的父类、祖先类，该类所直接实现或者间接实现的接口是否与目标类型一致。</p><p>不过，在我们的例子中，instanceof 指令的类型 profile 仅包含 Integer。根据这个信息，即时编译器可以假设，在接下来的执行过程中，所输入的 Object 对象仍为 Integer 实例。</p><p>因此，生成的代码将测试所输入的对象的动态类型是否为 Integer。如果是的话，则继续执行接下来的代码。（该优化源自 Graal，采用 C2 可能无法复现。）</p><p>然后，即时编译器会采用和第一个例子中一致的针对分支 profile 的优化，以及对方法调用的条件去虚化内联。</p><p>我会在接下来的篇章中详细介绍内联，这里先说结果：生成的代码将测试所输入的对象动态类型是否为 Integer。如果是的话，则执行 Integer.hashCode() 方法的实质内容，也就是返回该 Integer 实例的 value 字段。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>和第一个例子一样，根据数据流分析，上述代码可以最终优化为极其简单的形式。</p><figure><img src="'+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里我打印了 Graal 的编译结果。可以看到，在地址为 1ab7 的指令处进行过一次比较之后，该机器码便直接返回所传入的 Integer 对象的 value 字段。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Compiled</span> method <span class="token punctuation">(</span><span class="token constant">JVMCI</span><span class="token punctuation">)</span>     <span class="token number">600</span>   <span class="token number">23</span>       <span class="token number">4</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token class-name">CompilationTest</span><span class="token punctuation">.</span>hash <span class="token punctuation">(</span><span class="token class-name">CompilationTest</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token number">0x000000011d811aa0</span><span class="token punctuation">,</span> <span class="token number">0x000000011d811b00</span><span class="token punctuation">]</span>  <span class="token number">96</span> bytes
<span class="token punctuation">[</span><span class="token class-name">Entry</span> <span class="token class-name">Point</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token class-name">Verified</span> <span class="token class-name">Entry</span> <span class="token class-name">Point</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token class-name">Constants</span><span class="token punctuation">]</span>
  # <span class="token punctuation">{</span>method<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token number">0x00000001157053c8</span><span class="token punctuation">}</span> <span class="token char">&#39;hash&#39;</span> &#39;<span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">I</span><span class="token char">&#39; in &#39;</span><span class="token class-name">CompilationTest</span>&#39;
  # parm0<span class="token operator">:</span>    rsi<span class="token operator">:</span>rsi   <span class="token operator">=</span> &#39;java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span>&#39;
  #           <span class="token punctuation">[</span>sp<span class="token operator">+</span><span class="token number">0x20</span><span class="token punctuation">]</span>  <span class="token punctuation">(</span>sp of caller<span class="token punctuation">)</span>
  <span class="token number">0x000000011d811aa0</span><span class="token operator">:</span> mov    <span class="token constant">DWORD</span> <span class="token constant">PTR</span> <span class="token punctuation">[</span>rsp<span class="token operator">-</span><span class="token number">0x14000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>eax
  <span class="token number">0x000000011d811aa7</span><span class="token operator">:</span> sub    rsp<span class="token punctuation">,</span><span class="token number">0x18</span>
  <span class="token number">0x000000011d811aab</span><span class="token operator">:</span> mov    <span class="token constant">QWORD</span> <span class="token constant">PTR</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rbp
  <span class="token comment">// 比较[rsi+0x8]，也就是所传入的Object参数的动态类型，是否为Integer。这里0xf80022ad是Integer类的内存地址。</span>
  <span class="token number">0x000000011d811ab0</span><span class="token operator">:</span> cmp    <span class="token constant">DWORD</span> <span class="token constant">PTR</span> <span class="token punctuation">[</span>rsi<span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0xf80022ad</span>
  <span class="token comment">// 如果不是，跳转至？</span>
  <span class="token number">0x000000011d811ab7</span><span class="token operator">:</span> jne    <span class="token number">0x000000011d811ad3</span>
  <span class="token comment">// 加载Integer.value。在启用压缩指针时，该字段的偏移量为12，也就是0xc</span>
  <span class="token number">0x000000011d811abd</span><span class="token operator">:</span> mov    eax<span class="token punctuation">,</span><span class="token constant">DWORD</span> <span class="token constant">PTR</span> <span class="token punctuation">[</span>rsi<span class="token operator">+</span><span class="token number">0xc</span><span class="token punctuation">]</span>
  <span class="token number">0x000000011d811ac0</span><span class="token operator">:</span> mov    rbp<span class="token punctuation">,</span><span class="token constant">QWORD</span> <span class="token constant">PTR</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">]</span>
  <span class="token number">0x000000011d811ac5</span><span class="token operator">:</span> add    rsp<span class="token punctuation">,</span><span class="token number">0x18</span>
  <span class="token number">0x000000011d811ac9</span><span class="token operator">:</span> test   <span class="token constant">DWORD</span> <span class="token constant">PTR</span> <span class="token punctuation">[</span>rip<span class="token operator">+</span><span class="token number">0xfffffffff272f537</span><span class="token punctuation">]</span><span class="token punctuation">,</span>eax        
  <span class="token number">0x000000011d811acf</span><span class="token operator">:</span> vzeroupper 
  <span class="token number">0x000000011d811ad2</span><span class="token operator">:</span> ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和基于分支 profile 的优化一样，基于类型 profile 的优化同样也是作出假设，从而精简控制流以及数据流。这两者的核心都是假设。</p><p>对于分支 profile，即时编译器假设的是仅执行某一分支；对于类型 profile，即时编译器假设的是对象的动态类型仅为类型 profile 中的那几个。</p><p>那么，当假设失败的情况下，程序将何去何从？我们继续往下看。</p><p><strong>去优化</strong></p><p>Java 虚拟机给出的解决方案便是去优化，即从执行即时编译生成的机器码切换回解释执行。</p><p>在生成的机器码中，即时编译器将在假设失败的位置上插入一个陷阱（trap）。该陷阱实际上是一条 call 指令，调用至 Java 虚拟机里专门负责去优化的方法。与普通的 call 指令不一样的是，去优化方法将更改栈上的返回地址，并不再返回即时编译器生成的机器码中。</p><p>在上面的程序控制流图中，我画了很多红色方框的问号。这些问号便代表着一个个的陷阱。一旦踏入这些陷阱，便将发生去优化，并切换至解释执行。</p><p>去优化的过程相当复杂。由于即时编译器采用了许多优化方式，其生成的代码和原本的字节码的差异非常之大。</p><p>在去优化的过程中，需要将当前机器码的执行状态转换至某一字节码之前的执行状态，并从该字节码开始执行。这便要求即时编译器在编译过程中记录好这两种执行状态的映射。</p><p>举例来说，经过逃逸分析之后，机器码可能并没有实际分配对象，而是在各个寄存器中存储该对象的各个字段（标量替换，具体我会在之后的篇章中进行介绍）。在去优化过程中，Java 虚拟机需要还原出这个对象，以便解释执行时能够使用该对象。</p><p>当根据映射关系创建好对应的解释执行栈桢后，Java 虚拟机便会采用 OSR 技术，动态替换栈上的内容，并在目标字节码处开始解释执行。</p><p>此外，在调用 Java 虚拟机的去优化方法时，即时编译器生成的机器码可以根据产生去优化的原因来决定是否保留这一份机器码，以及何时重新编译对应的 Java 方法。</p><p>如果去优化的原因与优化无关，即使重新编译也不会改变生成的机器码，那么生成的机器码可以在调用去优化方法时传入 Action_None，表示保留这一份机器码，在下一次调用该方法时重新进入这一份机器码。</p><p>如果去优化的原因与静态分析的结果有关，例如类层次分析，那么生成的机器码可以在调用去优化方法时传入 Action_Recompile，表示不保留这一份机器码，但是可以不经过重新 profile，直接重新编译。</p><p>如果去优化的原因与基于 profile 的激进优化有关，那么生成的机器码需要在调用去优化方法时传入 Action_Reinterpret，表示不保留这一份机器码，而且需要重新收集程序的 profile。</p><p>这是因为基于 profile 的优化失败的时候，往往代表这程序的执行状态发生改变，因此需要更正已收集的 profile，以更好地反映新的程序执行状态。</p><p><strong>总结与实践</strong></p><p>今天我介绍了 Java 虚拟机的 profiling 以及基于所收集的数据的优化和去优化。</p><p>通常情况下，解释执行过程中仅收集方法的调用次数以及循环回边的执行次数。</p><p>当方法被 3 层 C1 所编译时，生成的 C1 代码将收集条件跳转指令的分支 profile，以及类型相关指令的类型 profile。在部分极端情况下，Java 虚拟机也会在解释执行过程中收集这些 profile。</p><p>基于分支 profile 的优化以及基于类型 profile 的优化都将对程序今后的执行作出假设。这些假设将精简所要编译的代码的控制流以及数据流。在假设失败的情况下，Java 虚拟机将采取去优化，退回至解释执行并重新收集相关的 profile。</p><p>今天的实践环节，你可以使用参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">CompileCommand</span><span class="token operator">=</span>&#39;print<span class="token punctuation">,</span><span class="token operator">*</span><span class="token class-name">ClassName</span><span class="token punctuation">.</span>methodName&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来打印程序运行过程中即时编译器生成的机器码。官方的 JDK 可能不包含反汇编器动态链接库，如 hsdis-amd64.dylib。你可能需要另外下载。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java -XX:CompileCommand=&#39;print,CompilationTest.foo&#39; CompilationTestjava -XX:CompileCommand=&#39;print,CompilationTest.foo&#39; CompilationTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompilationTest</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> f<span class="token punctuation">,</span> <span class="token keyword">int</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      v <span class="token operator">=</span> in<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">foo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// java -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler -XX:CompileCommand=&#39;print,CompilationTest2.hash&#39; CompilationTest2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompilationTest2</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token keyword">instanceof</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">hash</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,68),k=[r];function d(m,v){return s(),a("div",null,k)}const g=n(u,[["render",d],["__file","J17-即时编译2.html.vue"]]);export{g as default};
