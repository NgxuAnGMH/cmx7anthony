import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as h,c as s,a as p,b as r,e as o,d as e}from"./app-cdabc73c.js";const d="/assets/d68f8a262c1582f04377476f9ed9yyd9-d3a5c28a.jpg",c="/assets/5fbeyy963478d11db45da0dd3e8effcf-dd79661c.jpg",i="/assets/2c6abcd035e5c83cdd7d356eca26b9bd-6553a894.jpg",b={},m=e('<h1 id="开篇词-为什么要学写一个操作系统" tabindex="-1"><a class="header-anchor" href="#开篇词-为什么要学写一个操作系统" aria-hidden="true">#</a> 开篇词 | 为什么要学写一个操作系统？</h1><p>你好，我是彭东，网名 LMOS，欢迎加入我的专栏，跟我一起开启操作系统的修炼之路。</p><p>先来介绍一下我自己。我是 Intel 傲腾项目开发者之一，也是<code>《深度探索嵌入式操作系统》</code>这本书的作者。</p><p>我曾经为 Intel 做过内核层面的开发工作，也对 Linux、BSD、SunOS 等开源操作系统，还有 Windows 的 NT 内核很熟悉。这十几年来，我一直专注于操作系统内核研发。</p><p>LMOS（基于 x86 平台支持<code>多进程、多 CPU、虚拟化等</code>技术的全 64 位操作系统内核）跟 LMOSEM（基于 ARM 处理器平台的嵌入式操作系统内核）是我独立开发的两套全新的操作系统内核，其中 LMOS 的代码规模达到了数十万行，两个系统现在仍在更新。</p><p>当时是基于兴趣和学习的目的开始了这两套操作系统，在这个过程中，我遇到了各种各样的技术问题，解决了诸多疑难杂症，总结了大量的开发操作系统的方法和经验。非常希望能在这个专栏与你一起交流。</p><h2 id="每个工程师都有必要学好操作系统吗" tabindex="-1"><a class="header-anchor" href="#每个工程师都有必要学好操作系统吗" aria-hidden="true">#</a> 每个工程师都有必要学好操作系统吗？</h2><p>经常会有同学问我这样一些问题：我是一个做应用层开发的工程师，有必要学习操作系统吗？我的日常工作中，好像用不到什么深奥的操作系统内核知识，而且大学时已经学过了操作系统课程，还有必要再学吗？</p><p>对于这些问题，我的答案当然是**“有必要”**。至于理由么，请听我慢慢为你道来。</p><p>你是否也跟我一样，曾经在一个数千万行代码的大项目中茫然失措？<em>一次次徘徊在内存为什么会泄漏、服务进程为什么会 dang 掉、文件为什么打不开等一系列“基础”问题的漩涡中</em>？</p><p>你是否惊叹于 Nginx 的高并发性？是不是感觉 Golang 的垃圾回收器真的很垃圾？除了这样的感叹，你也许还好奇过这样一些问题：MySQL 的 I/O 性能还能不能再提升？网络服务为什么会掉线？Redis 中经典的 Reactor 设计模式靠什么技术支撑？Node.js 的 I/O 模型长什么模样……</p><p>如果你也追问过上面的这些问题，那这会儿我也差不多可以给充满求知欲的你指一条“明路”了。这些都将在后面的学习中，找到答案。</p><h2 id="为什么说操作系统很重要" tabindex="-1"><a class="header-anchor" href="#为什么说操作系统很重要" aria-hidden="true">#</a> 为什么说操作系统很重要？</h2><p>首先我们都知道，<strong>操作系统是所有软件的基础</strong>，所有上层软件都要依赖于操作系统提供的各种机制，才能运行。</p><p>而我在工作中也认识了很多技术大牛，根据我的观察，他们的基本功往往十分扎实，这对他们的架构视野、技术成长都十分有帮助。</p><p>如果你是后端工程师，在做高性能服务端编程的时候，<code>内存、进程、线程、I/O 相关的知识</code>就会经常用到。还有，在做一些前端层面的性能调优时，操作系统相关的一些知识更是必不可少。</p><p>除了 Web 开发，做高性能计算超级计算机的时候，操作系统内核相关的开发能力也至关重要。其实，即使单纯的操作系统内核相关的开发能力，对于工程师来说也是绕不过的基本功。</p><p>对于运维、测试同学，你要维护和测试的任何产品，其实是基于操作系统的。比如给服务配置多大的内存、多大的缓存空间？怎样根据操作系统给出的信息，判断服务器的问题出现在哪里。<code>随着你对操作系统的深入理解和掌握，你才能透过现象看本质，排查监控思路也会更开阔。</code></p><p>除了工作，操作系统离我们的生活也并不遥远，甚至可以说是息息相关。要知道，操作系统其实不仅仅局限于手机和电脑，你的智能手表、机顶盒、路由器，甚至各种家电中都运行着各种各样的操作系统。</p><p>可以说，操作系统作为计算机的灵魂，眼前的工作、日常的生活，甚至这个行业未来的“<strong>诗与远方</strong>”都离不开它。</p><h2 id="操作系统很难-我能学得会么" tabindex="-1"><a class="header-anchor" href="#操作系统很难-我能学得会么" aria-hidden="true">#</a> 操作系统很难，我能学得会么？</h2><p>但即使是大学时期就学过操作系统的同学，也可能会感觉学得云里雾里。更别说非科班的一些人，难度更甚，甚至高不可攀。那为什么我这么有信心，给你讲好操作系统这门课呢？这还要从我自己的学习经历说起。</p><p>跟许多人一样，我看的第一本 C 教程就是那本“<em>老谭 C</em>”。看了之后，除了能写出那个家喻户晓的“hello world”程序，其它什么也干不了。接着我又开始折腾 C++、Java，结果如出一辙，还是只能写个“hello world”程序。</p><p>还好我有互联网，它让我发现了<em>数据结构与算法</em>，经过一番学习，后来我总算可以写一些小功能的软件了，但或许那根本就称不上功能。既然如此，我就继续折腾，继续学习<em>微机原理</em>、<em>汇编语言</em>这些内容。</p><p>最后我终于发现，**操作系统才是我最想写的软件。**我像着了魔一样，一切操作系统、硬件层相关的书籍都找来看。</p><p>有了这么多的“输入”，我就想啊，既然是写操作系统，<strong>为什么不能把这些想法用代码实现出来，放在真正的计算机上验证一下呢？</strong></p><p>LMOS 的雏形至此诞生。从第一行引导代码开始，一次又一次代码重构，一次又一次地面对莫名的死机而绝望，倒逼我不断改进，最终才有了现在的 LMOS。因为一个人从零开始，独立开发操作系统这种行为有点疯狂，我索性就用 LMOS（liberty，madness，operating，system）来命名了我的操作系统。</p><p>经过我这几年的独立开发，现在 LMOS 已经发布了 <strong>8 个测试版本</strong>。先后从 32 位单 CPU 架构发展到 64 位多 CPU 架构，现在的 LMOS 已经是多进程、多线程、多 CPU、支持虚拟内存的 x86_64 体系下的全 64 位操作系统内核，代码量已经有 <strong>10 万多行了</strong>。</p><p>后来，我又没忍住自己的好奇心，写了个嵌入式操作系统——LMOSEM。由于有了先前的功底，加上 ARM 体系很简单，所以我再学习和实现嵌入式操作系统时，就感觉驾轻就熟了。</p><p>经过跋山涉水，我再回头来看，很容易就发现了为什么操作系统很难学。</p><p><u>操作系统需要你有大量的知识储备</u>，但是现在大多的课程、学习资料，往往都是根据目前已有的一些操作系统，做局部解读。所以，我们学的时候，<u>前后的知识是无法串联在一起的</u>。结果就会越看越迷惑，不去查吧，看不懂，再去搜索又加重了学习负担，最后只能遗憾放弃。</p><p>那怎样学习操作系统才是最高效的呢？理论基础是要补充的，但相对来说，实践更为重要。我认为，千里之行还得始于足下。</p><p>所以，通过这个专栏，<u>我会带你从无到有实现一个自己的操作系统</u>。</p><p>我会使用大量的插图代码和风趣幽默的段子，来帮助你更好地理解操作系统内核的本质。同时在介绍每个内核组件实现时，都会先给你说明白为什么，带着你基于设计理解去动手实现；然后，再给你详细描述 Linux 内核对应的实现，做前后对比。这样既能让你边学边练，又能帮你从“上帝视角”审视 Linux 内核。</p><h2 id="我们课程怎么安排的" tabindex="-1"><a class="header-anchor" href="#我们课程怎么安排的" aria-hidden="true">#</a> 我们课程怎么安排的？</h2><p>操作系统作为计算机王国的权力中枢，我们的课程就是讲解如何实现它。</p><p>为此，我们将从了解计算机王国的资源开始，如 <mark>CPU</mark>、<mark>MMU</mark>、<mark>内存</mark>和 <mark>Cache</mark>。其次要为这个权力中枢设计基本法，即各种<mark>同步机制</mark>，如<mark>信号量</mark>与<mark>自旋锁</mark>。接着进行夺权，从固件程序的手中抢过计算机并进行初始化，其中包含<em>初始化 CPU、内存、中断、显示等</em>。</p><p>然后，开始建设中枢的各级部门，它们分别是内存管理部门、进程管理部门、I/O 管理部门、文件管理部门、通信管理部门。最后将这些部门组合在一起，就形成了计算机王国的权力中枢——操作系统。</p><img src="'+d+'" alt="img" style="zoom:20%;"><p>操作系统课程图解</p>',40),l={href:"https://gitee.com/lmos/cosmos",target:"_blank",rel:"noopener noreferrer"},u=p("strong",null,"Cosmos",-1),_=e('<img src="'+c+'" alt="img" style="zoom:15%;"><p>操作系统核心子部门</p><h2 id="你能获得什么" tabindex="-1"><a class="header-anchor" href="#你能获得什么" aria-hidden="true">#</a> 你能获得什么？</h2><p>走这样一条“明路”，一步一个脚印，最终你会到达这样一个目的地：拥有一个属于自己的操作系统内核，同时收获对 Linux 内核更深入的理解。</p><p><em>学完这门课，你会明显提升操作系统架构设计能力，并且可以学会系统级别的软件编程技巧。我相信，这对你拓展技术深度和广度是大有裨益的</em>。之后你在日常开发中遇到问题的时候，就可以尝试用更多维度的能力去解决问题了。</p><p>同时，由于操作系统内核是有核心竞争力的高技术含量软件，这能给你职业生涯的成长带来长远的帮助。如今，在任何一家中大型互联网公司都使用大量的 Linux 服务器。</p><p>操作系统相关的内容，已经成为你涨薪、晋升的必考项，比如 Linux 内核相关的技术，<code>中断、I/O、网络、多线程、并发、性能、内存管理、系统稳定性、文件系统、容器和虚拟化等等</code>，<u>这些核心知识都来源于操作系统</u>。</p><p>而跳出个人，从大局观出发的话，计算机作为 20 世纪以来人类最伟大的发明之一，已经深入人们生活的方方面面，而计算机系统作为国家级战略基础软件，却受制于人，这关系到整个国家的信息安全，也关系到互联网信息行业以及其它相关基础行业的前途和未来。</p><p>而要改变这一困局，就要从培养技术人才开始。对于我们工程师来说，树高叶茂，系于根深，只有不断升级自己的认知，才能让你的技术之路行稳致远。</p><p>下面，我给出一个简化的操作系统知识体系图，也是后面课程涉及到的所有知识点。尽管图中只是最简短的一些词汇，但随着课程的展开，你会发现图中的每一小块，都犹如一片汪洋。</p><img src="'+i+'" alt="img" style="zoom:10%;"><p>现在让我们一起带着好奇，带着梦想，向星辰大海进发！</p>',12),x={href:"https://jinshuju.net/f/I4XbfK",target:"_blank",rel:"noopener noreferrer"},f=e('<h2 id="评论区" tabindex="-1"><a class="header-anchor" href="#评论区" aria-hidden="true">#</a> 评论区</h2><blockquote><p>这是基于x86架构的吧，x86体系结构相关的不熟影响大吗？<br> 从事嵌入式领域，接触的都是arm riscv这些。<br> 谢谢。<br> 作者回复: 影响不大<br> 其他网友：我也是想学RTOS，但是感觉arm架构下没有什么优秀的教程..所以来看看这个触类旁通一下..</p><hr><p>上车了，哈哈，老师能推荐点教材或学习资料吗？<br> 编辑回复: 欢迎加入学习，跟着课程循序渐进学习就好，也欢迎多多留言活动。</p><p>如果有余力，资料还可以参考这些。<br> 1 王爽老师的《汇编语言》<br> 2 李忠老师的《X86汇编语言：从实模式到保护模式》<br> 3《计算机组成与设计：软硬件接口》<br> 4 《UNIX传奇：历史与回忆》（兴趣拓展向）</p><hr><p>个人觉得这种动手实践的小OS内核特别有助于知其所以然，而单纯分析现有OS，很容易陷入知其然。还是要从设计的角度去理解，不然就像逆向工程，从代码倒推设计意图，效率低下且痛苦<br> 作者回复: 是的 你说的非常正确，这种痛苦我就经历过<br> 其他网友：光看书就是空中楼阁，我看了几周还是一脸懵逼</p><hr><p>之前读过XV6，也用C做过相关的lab，操作系统绝对是软件的集大成者，太他妈期待了！<br> 作者回复: 哈哈 感谢支持和认同，希望我们一起折腾OS</p><hr><p>只有java基础可以吗，好害怕<br> 作者回复: 学点C和汇编 很容易的</p><hr><p>作为一个90年出生15年入行的程序员，开发也过了5个多年头，回顾自己这5年的开发经验，给自己打个标签：肤浅。好多知识点都是一知半解，乍一看都知道一点，仔细一问，细节方面完全不懂。很多基础原理，实现逻辑都是懵懵懂懂，没有成熟且全面的知识体系。都说程序员35岁是个坎，但其实明白，有坎的是我这种不上不下的程序员，所以下定决心补充下基础，希望可以和老师真正的学到一些有用的东西<br> 作者回复: 我们一起努力 加油</p><hr><p>哈哈哈哈，最近就在学linux内核，萌生出想搞一个操作系统，立马有专栏了！<br> 作者回复: 你好，这门课程刚好能帮助你实现一个操作系统 ，同时帮你加深对Linux的理解</p><hr><p>请问这个可以作为考研复试的小项目吗？大概学完要多长时间？一个月够吗？只有c语言跟408基础可以吗<br> 编辑回复: 编辑回复：<br> 你好，感谢你的留言。对于你的三个问题，回复如下。<br> 1.课程里的操作系统项目可不算小项目，考研复试前要准备的事项不少。如果你复试已经稳了，可以来学习了解。<br> 2.学完时间要根据每个人投入时间和理解程度估计，不好估计。<br> 3.课程代码C语言为主，初始化之前有少量汇编。你可以通过试读判断自己情况。</p><hr><p>二刷打卡，痴迷与Linux内核的学习，前面有跟零声课堂的vico老师系统学习Linux内核源码分析，但是在看内核源码的时候还是感觉很吃力，第一遍学习《操作系统实战》的时候停留在理论学习，本轮学习一定要理论联系实际，动手实践，这轮刷完就奖励自己去学习彭东老师新出的《计算机基础实战课程》，做到手撕操作系统，脚踩CPU；<br> 作者回复: 加油 加油</p><hr><p>老师有没有操作系统比较好的书籍推荐！谢谢<br> 作者回复: 有，《操作系统设计与实现》，这本非常经典</p><hr><p>确实市面上的操作系统相关的书籍，大部分晦涩难懂，让人望而生畏，看了一知半解，根本没法坚持；希望老师的这个课程能真正带领大家走进操作系统，了解操作系统。<br> 作者回复: 是的 ，我也有这种体会 所以才出个课程</p><hr><p>说来惭愧，几年前有幸拜读《深度探索嵌入式操作系统》一书，至今仍未看完。这次必须跟着彭大的步伐，逼自己突破一下。上帝给你关掉了一扇门，必定为你打开一扇窗，彭大就是一个活生生的例子。期待专栏后续更新。<br> 作者回复: 感谢 支持</p><hr><p>确实在期待一门能从零开始教我写操作系统的课程，作为外行准备转后台开发甚至是分布式开发在学习的阶段十分迷茫，按照网上的学习路线总觉得书里讲的看了又忘，项目也不知道从何入手，期待这门课能给我在转行的迷茫路上带来一些启发<br> 作者回复: 欢迎和我一起折腾学习操作系统</p><hr><p>请问是不是与MIT6.828的 lab 水平差不多呢？<br> 编辑回复: 衡量水平有很多维度，比较这门课和其他课程并不重要，探索和实践更加重要。不过无论是这门课还是你说的那个，出了实践成果都很有成就感。</p><hr><p>请问研究生阶段研究OS，以后可以找什么对口的岗位呢<br> 作者回复: Linux 服务器 云 嵌入式</p><hr><p>一个从底层重新认识计算机软件的机会，赞<br> 编辑回复: 欢迎你加入学习，一起研究OS。</p><hr><p>我能说，我是来学习 C 语言的嘛，哈哈<br> 作者回复: 哈哈 操作系统内核 绝对是学习C语言最好的项目</p><hr><p>原来真的是那个彭东，感慨万千....<br> 作者回复: 你好，搞操作系统的就一个彭东 哈哈</p><hr><p>从事电子工程师裸机编程 学习操作系统是否对所学的更有深度呢<br> 作者回复: 当然 有</p><hr><p>请问零基础可以上手么?<br> 编辑回复: 编辑回复：需要掌握C语言，或者搭配LMOS第二季《计算机基础实战课》食用，后者更基础。</p><hr><p>老师，我是做嵌入式Linux软件开发的，不知道这门课是不是和我？<br> 作者回复: 适合的 基础性的</p><hr><p>必须要有c或者c++作为前置基础吗？只会java编程，不会c或者c++是否也可以学这个<br> 作者回复: 要有C java和CPP很像</p><hr><p>哈哈，当初跟着实验室学长折腾了一个malloc函数的实现。写完之后感觉对内存直接熟悉了<br> 作者回复: 内存管理 非常复杂</p><hr><p>不知道对web渗透测试工程师有帮助没<br> 作者回复: 当然 有</p><hr><p>你好，想问一下学习该专栏需要掌握什么基础知识才可以。我自己是java开发，大学学过点计算机网络和计算机硬件<br> 作者回复: C和汇编 计组</p><hr><p>希望通过该课程，自己能写一个小的操作系统。<br> 掌握内核，驱动，中断，并发，锁，线程进程这些经常听，但又很陌生的知识。<br> 作者回复: 可以的 这个课程完全能满足你这个要求</p><hr><p>好迷茫。嵌入式应用层开发，我也要向底层进发，冲冲冲<br> 作者回复: 加油</p><hr><p>什么时候出个基于ARM的<br> 作者回复: 我以前有一本书 《深度探索嵌入式操作系统》 这是基于ARM的</p><hr><p>老师我想从事分布式这个有帮助吗<br> 作者回复: 有的</p><hr><p>Java后端开发路过，因为一直在做上层开发，总觉得不懂底层心慌慌<br> 作者回复: 不要慌 这不可以学了吗</p><hr><p>非科班的学生，从事java开发4年了。计算机基础是我的心病，就是操作系统的学习让我很枯燥。没有c基础，不知道能否学习此课程，也想体会一把跟着老师自己开发能跑的os🤭<br> 编辑回复: 没有C基础的话你可能要慢慢来，跟着学的同学里也有JAVA出身的。</p><hr><p>学这门课的话需要先去学一下汇编再来看吗，我汇编还没学<br> 作者回复: 汇编只占很小比例，必须知道的课里会讲。</p><hr><p>刚好明年要教操作系统了，可以买来提前学一下😂<br> 编辑回复: 欢迎，跟下来你一定颇有收获！</p><hr><p>这个开发环境是什么？有搭建的教程吗？<br> 编辑回复: 可以用虚拟机软件的方式建立一台虚拟电脑。为此你需要在Ubuntu上使用sudo apt-get install virtualbox-6.1安装一个virtualbox虚拟机软件，用它建立我们的计算机。后面用到时，还会介绍。</p><hr><p>毕业3年，写了3年业务代码，还是觉得操作系统，尤其linux很重要<br> 作者回复: 哈哈 操作系统是底层内功</p><hr><p>看到介绍里有老师研究windows内核，能讲讲研究方法吗？谢谢！<br> 作者回复: 写NT内核驱动 调试NT内核</p><hr><p>编程环境只能是Linux下吗<br> 作者回复: 最好是LINUX win10下也可以的</p><hr><p>是用C语言实现吗？学Java的实现起来会不会很难啊？<br> 作者回复: C语言 非常简单 不会很难的</p><hr></blockquote>',2);function g(L,C){const a=t("ExternalLinkIcon");return h(),s("div",null,[m,p("p",null,[r("我们的课程就是按照上述逻辑，依次为你讲解这些部门的实现过程和细节。每节课都配有可以工作的代码，让你能跟着课程一步步实现。你也可以直接使用我提供的"),p("a",l,[r("代码"),o(a)]),r("一步步调试，直到最终实现一个基于 x86 平台的 64 位多进程的操作系统——"),u,r("。")]),_,p("p",null,[r("课程交流群点"),p("a",x,[r("这里"),o(a)]),r("加入。")]),f])}const S=n(b,[["render",g],["__file","A01-开篇词.html.vue"]]);export{S as default};
