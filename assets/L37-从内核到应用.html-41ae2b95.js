import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/dcb38fc1c0eef666eb1496cbf97a82bc-32a65c80.jpg",e="/assets/8a726909f0a19ff1683e541d3712b4dd-ce959e0d.jpg",o="/assets/ba5f483d0f1a6a5d241bde9c25e6d160-cc7749d1.jpg",c="/assets/b31c19ff5c0f89729f0a3d2a42a2452c-a96e183b.jpg",l="/assets/d3e0530bb72990da0b56784a73e8ecef-19353749.jpg",i="/assets/51791a1817fca811aaa1c0240c4135ff-bae1e7ce.jpg",u={},r=p('<h1 id="_37-从内核到应用-网络数据在内核中如何流转" tabindex="-1"><a class="header-anchor" href="#_37-从内核到应用-网络数据在内核中如何流转" aria-hidden="true">#</a> 37 | 从内核到应用：网络数据在内核中如何流转</h1><p>你好，我是 LMOS。</p><p>上节课我们对一次请求到响应的过程积累了一些宏观认识，相信你已经对整个网络架构有了一个整体蓝图。这节课，让我们来仔细研究一下网络数据是如何在内核中流转的，让你开阔视野，真正理解底层工程的实现思路。</p><p>凡事先问目的，在网络数据在内核中的流转，最终要服务于<strong>网络收发功能</strong>。所以，我会先带你了解一次具体的网络发收过程，然后带你了解 lwIP 的网络数据收发。有了这些基础，我还会示范一下如何实现协议栈移植，你可以在课后自行动手拓展。</p><p>好，让我们正式开始今天的学习吧。课程配套代码，你可以点击这里获取。</p><h2 id="先看看一次具体的网络发收过程" tabindex="-1"><a class="header-anchor" href="#先看看一次具体的网络发收过程" aria-hidden="true">#</a> 先看看一次具体的网络发收过程</h2><p>理解软件的设计思想，最重要的是先要理解需求。而内核中的数据流转也只是为了满足网络收发的需求而进行的设计。</p><h3 id="发送过程总览" tabindex="-1"><a class="header-anchor" href="#发送过程总览" aria-hidden="true">#</a> 发送过程总览</h3><p>下面我们一起来看看应用程序通过网络发送数据的全过程。</p><ul><li><p>应用程序首先会准备好数据，调用<mark>用户态下的<strong>库函数</strong></mark>。接着调用<mark>系统 API 接口函数</mark>，进入到<mark>内核态</mark>。</p></li><li><p><mark>内核态对应的<strong>系统服务函数</strong><mark>会复制</mark>应用程序的数据</mark>到<mark>内核的内存空间</mark>中，然后将<mark>数据</mark>移交给<mark>网络协议栈</mark>，在网络协议栈中<strong>将数据层层打包</strong>。</p></li><li><p>最后，包装好的数据会交给<mark>网卡驱动</mark>，网卡驱动程序负责将打包好的数据<strong>写入网卡 并 让其发送出去</strong>。</p></li></ul><p>我为你准备了一张流程图供你参考，如下所示。</p><img src="'+t+'" alt="img" style="zoom:15%;"><p>发送过程总览</p><p>上图中，只是展示了大致流程，其中还有 <strong>DMA 处理、CRC 校验、出错处理等细节</strong>，但对于我们理解梳理发送流程，这些就够了。</p><h3 id="接收过程总览" tabindex="-1"><a class="header-anchor" href="#接收过程总览" aria-hidden="true">#</a> 接收过程总览</h3><p>了解了发送数据的过程以后，掌握接收数据的过程就更容易了，因为它就是<strong>发送数据的逆过程</strong>。</p><p>首先，<mark>网卡</mark>接收到数据，通过 <mark>DMA</mark> 复制到<mark>指定的内存</mark>，接着发送<mark>中断</mark>，以便通知<mark>网卡驱动</mark>，由网卡驱动来 <strong>处理中断 + 复制数据</strong>。然后<mark>网络协议栈</mark>收到网卡驱动传过来的数据，<strong>层层解包</strong>，获取真正的有效数据。最后，这个数据会发送给<mark>用户态<strong>监听对应端口的</strong>应用进程</mark>。</p><p>为了让你更加直观地了解这一过程，我特意准备了一张流程图供你参考，如下所示。</p><img src="'+e+'" alt="img" style="zoom:15%;"><p>接收过程总览</p><p>前面只是帮你梳理一下数据的发送与接收的流程，其实我们真正要关注的是网络协议。可是我们若手动实现一个完整的网络协议，不太现实，网络协议的复杂度大到也许要重新开一门课程，才可以完全解决，所以下面我们借用一下 <mark>lwIP 项目</mark>，以这个为基础来讨论网络协议。</p><h2 id="认识一下-lwip-架构" tabindex="-1"><a class="header-anchor" href="#认识一下-lwip-架构" aria-hidden="true">#</a> 认识一下 lwIP 架构</h2><p>现在我们清楚了一次具体网络发收过程是怎么回事，那怎么让 Cosmos 实现网络通信呢？这里我们选择 lwIP 这个 TCP/IP 协议的轻量级开源项目，让它成为 Cosmos 的网络部的战略合作伙伴。</p><p>lwIP 是由瑞典计算机科学研究院（SICS）的 Adam Dunkels 开发的小型开源 TCP/IP 协议栈。它是一个用 C 语言实现的软件组件，一共有两套接口层，向下是操作系统要提供的，向上是提供给应用程序的。这样 lwIP 就能嵌入到任何操作系统之中工作，并为这个操作系统上的应用软件提供网络功能支持了。</p><p>为啥说 lwIP 是轻量级的呢？很简单，跟 Linux 比，从代码行数上就能看得出。lwIP 的设计目标就是尽量用少量资源消耗，实现一个相对完整的 TCP/IP 协议栈。</p><p>这里的“完整性”主要是指 TCP 协议的完整性，实现的关键点就是**在保持 TCP 协议主要功能的基础上减少对 RAM 的占用。**同时，lwIP 还支持 IPv6 的标准实现，这也让我们与现代交换设备的对接变得非常方便。</p><p>这里额外提供你一份扩展阅读资料，lwIP 的项目主页链接，这里包含了大量相关资料，感兴趣的同学可以课后深入了解。另外，lwIP 既可以移植到操作系统上运行，也可以在没有操作系统的情况下独立运行。</p><p>lwIP 在结构上可分为四层：<strong>OS 层、API 层、核心层、硬件驱动层</strong>，如下图所示。</p><img src="'+o+'" alt="img" style="zoom:15%;"><p>lwIP架构图副本</p><h3 id="第一层" tabindex="-1"><a class="header-anchor" href="#第一层" aria-hidden="true">#</a> 第一层</h3><p><mark>MCU 的业务层</mark>是 lwIP 的服务对象，也是其自身代码使用 lwIP 的地方。大部分时候我们都是从这里入手，通过 netconn 或 lwip_api 使用 lwIP 的各种功能函数。</p><p>在典型的 TCP 通信的客户端应用程序中，一般先要通过 netconn_new 创建一个 struct netconn 对象，然后调用 netconn_connect 连接到服务器，并返回成功或失败。成功后，可以调用 netconn_write 向服务器发送数据，也可以调用 netconn_recv 接收数据。最后，关闭连接并通过 netconn_close 释放资源。</p><h3 id="第二层" tabindex="-1"><a class="header-anchor" href="#第二层" aria-hidden="true">#</a> 第二层</h3><p>lwIP 的 api 层是 netconn 的<mark>功能代码</mark>所在的层，负责为上层代码提供 netconn 的 api。习惯使用 socket 的同学也可以使用 lwip_socket 等函数，以标准的 socket 方式调用 lwIP。新版本增加了 http、mqtt 等应用的代码，这些额外的应用对<code>目前的物联网通信</code>来说确实很方便。</p><h3 id="第三层" tabindex="-1"><a class="header-anchor" href="#第三层" aria-hidden="true">#</a> 第三层</h3><p>lwIP 的核心层存放了 <mark>TCP/IP 协议栈的核心代码</mark>，它不仅实现了大部分的 <strong>TCP 和 UDP 功能</strong>，还实现了 <strong>DNS、ICMP、IGMP 等协议</strong>，同时也实现了<mark>内存管理</mark>和<mark>网络接口功能</mark>。</p><p>该层提供了 sys_arch 模块设计，便于将 lwIP 移植到不同的操作系统，如线程创建、信号量、消息队列等功能。和操作系统相关的真正定义写在了 lwip/include/sys.h 文件中。</p><h3 id="第四层" tabindex="-1"><a class="header-anchor" href="#第四层" aria-hidden="true">#</a> 第四层</h3><p><mark>硬件驱动层</mark>提供 PHY 芯片驱动，用来匹配 lwIP 的使用。lwIP 会调用该层的代码将组装好的数据包发送到网络，同时从网络接收数据包并进行分析，实现通信功能。</p><h2 id="lwip-的三套应用程序编程接口" tabindex="-1"><a class="header-anchor" href="#lwip-的三套应用程序编程接口" aria-hidden="true">#</a> lwIP 的三套应用程序编程接口</h2><p>理清了架构，我们再说一说 lwIP 的应用程序编程接口，一共有三套。</p><ol><li><p><strong>原始 API</strong>：原始的 lwIP API。它通过事件回调机制开发应用程序。</p><p>该应用编程接口提供了最佳的性能和优化的代码长度，但它增加了应用程序开发的复杂性。</p></li><li><p><strong>Netconn API</strong>：是高级的有序 API、需要<code>实时操作系统（RTOS）</code>的支持（提供<code>进程间通信</code>的方法）。Netconn API 支持多线程。</p></li><li><p><strong>BSD 套接字 API</strong>：类似伯克利的套接字 API（在 Netconn API 上开发，需要注意 NETCONN API 即为 Sequential API）。</p></li></ol><p>对于以上三种接口，<strong>前者只需要裸机调用，后两种需要操作系统调用</strong>。因此，移植 lwIP 有两种方法，</p><ol><li>一种是只移植<mark>内核</mark>，不过这样之后只能基于 [原始 API] RAW/Callback API 编写应用程序。</li><li>第二种是移植<mark>内核 和 上层 API</mark>。这时应用程序编程可以使用三种 API，即 RAW/Callback API、顺序 API 和 Socket API。</li></ol><h2 id="lwip-执行流程" tabindex="-1"><a class="header-anchor" href="#lwip-执行流程" aria-hidden="true">#</a> lwIP 执行流程</h2><p>现在，想必聪明的你已经理解了前文中的网络收发过程。</p><p>接下来，让我们顺着之前的思路来对应到 lwIP 在收发过程中的核心函数，具体过程我同样梳理了流程图。你可以结合图里关键的函数名以及步骤顺序，按这个顺序在 IwIP 代码中检索阅读。</p><h3 id="数据发送" tabindex="-1"><a class="header-anchor" href="#数据发送" aria-hidden="true">#</a> 数据发送</h3><p>首先要说的是数据发送过程。</p><p>由于我们把 lwIP 作为 Cosmos 的一个内核组件来工作，自然要由 lwIP 接收来自内核上层发来的数据。内核上层首先会调用 lwIP 的 netconn 层的接口函数 <strong>netconn_write</strong>，通过这个函数，数据正式流进 <mark>lwIP 组件层</mark>。</p><p>接着，netconn 层调用 lwIP 组件的 TCP 层的接口函数 tcp_write，在 <mark>TCP 层</mark>对数据首次进行打包。然后，TCP 层将打包好的数据通过调用 io_output 函数，向下传递给 lwIP 组件的 <mark>IP 层</mark>，进行打包。</p><p>最后，IP 层将打包好的数据发送给<mark>网卡驱动接口层</mark> netif，这里调用了实际的<mark>网卡驱动程序</mark>，将数据发送出去。</p><img src="'+c+'" alt="img" style="zoom:15%;"><p>数据发送逻辑</p><h3 id="数据接收" tabindex="-1"><a class="header-anchor" href="#数据接收" aria-hidden="true">#</a> 数据接收</h3><p>数据接收的步骤相比数据发送稍微多一些，但也不用害怕，跟住我的讲解思路一定可以理清这个过程。</p><p>数据接收需要应用程序首先调用 lwIP 的 netconn 层的 netconn_recv 接口。然后由 netconn 层调用 sys_arch_mbox_fetch 函数，进入监听等待相关的 mbox。</p><p>接着，数据会进入<mark>网卡</mark>，<mark>驱动程序相关的函数</mark>负责把它复制到内存。再然后是调用 ethernet_input 函数，进入 <mark>ethernet 层</mark>。完成相关处理后，调用 ip4_input 函数，数据在 lwIP 组件的 <mark>IP 层</mark>对数据解包，进行相应处理之后，还会调用 tcp_input 函数，进入 lwIP 组件的 <mark>TCP 层</mark>对数据解包。</p><p>最后，调用 sys_mbox_trypost 函数把数据放入特定的 mbox，也就是消息盒子里，这样<mark>等待监听的应用程序</mark>就能得到数据了。</p><img src="'+l+'" alt="img" style="zoom:15%;"><p>数据接收逻辑</p><p>在了解了 lwIP 组件收发数据的过程之后，就可以进行移植的相关工作了。lwIP 的结构设计非常优秀，这让移植工作变得很容易。我们这里只要了解 lwIP 组件的 <strong>sys_arch 层的接口函数</strong>即可。</p><p>下面我们一起了解 lwIP 的移植细节。</p><h2 id="协议栈移植-sys-h-sys-arch-c" tabindex="-1"><a class="header-anchor" href="#协议栈移植-sys-h-sys-arch-c" aria-hidden="true">#</a> 协议栈移植: sys.h sys_arch.c</h2><p>lwIP 有两种移植模式，一种是 NO_SYS，无操作系统模式，一种是有操作系统模式。<strong>用 NO_SYS 模式比较简单，你可以自行探索</strong>。</p><p>操作系统模式主要需要基于操作系统的 IPC 机制，对网络连接进行了抽象（信号量、邮箱 / 队列、互斥体等机制），从而保证内核与应用层 API 的通讯，这样做的好处是 <strong>lwIP 内核线程可以只负责数据包的 TCP/IP 封装和拆封，而不用进行数据的应用层处理，从而极大地提高系统对网络数据包的处理效率。</strong></p><p>而这些操作系统模拟层的函数主要是在 <code>sys.h</code> 中声明的，我们一般在 <code>sys_arch.c</code> 文件中完成其定义。所以，我们很清楚，带操作系统的移植就是在无操作系统的基础上添加操作系统模拟层。</p><p>再接下来我们就看看操作系统模拟层的编写。</p><h3 id="有操作系统模式" tabindex="-1"><a class="header-anchor" href="#有操作系统模式" aria-hidden="true">#</a> 有操作系统模式</h3><p>在之前的课程里我们已经正确实现了 Cosmos 操作系统了，现在我们就可以在 Cosmos 系统提供的 IPC 等机制基础之上，对照 sys.h 文件中声明的函数一一去实现了。</p><p>实际工程中完整移植网络栈，需要将后面表格里的这 30 多个函数全部实现。我会带你完成邮箱和系统线程相关的关键部分移植，其他函数的移植思路也大同小异，这里就不一一演示了。</p><img src="'+i+`" alt="img" style="zoom:50%;"><p>函数表格</p><p>从上表中我们可以发现，这些变量和函数主要面向信号量、互斥体和邮箱，包括创建、删除、释放和获取等各种操作，所以我们需要根据操作系统的规定来实现这些函数。</p><p>突然看到这么多功能，是不是有点慌？其实不用怕，因为这些功能的实现起来非常简单。首先，我们通过一个例子来看看邮箱功能的实现。</p><p>在 lwIP 中，用户代码通过邮箱与协议栈内部交互。邮箱本质上是指向数据的指针。API 将指针传递给内核，内核通过这个指针访问数据，然后进行处理。相反，内核也是通过邮箱将数据传递给用户代码的。</p><p>具体代码如下，关键内容我都做了详细注释。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*创建一个空的邮箱。*/</span>
<span class="token class-name">err_t</span> <span class="token function">sys_mbox_new</span><span class="token punctuation">(</span><span class="token class-name">sys_mbox_t</span> <span class="token operator">*</span>mbox<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">osMessageQDef</span><span class="token punctuation">(</span>QUEUE<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>mbox <span class="token operator">=</span> <span class="token function">osMessageCreate</span><span class="token punctuation">(</span><span class="token function">osMessageQ</span><span class="token punctuation">(</span>QUEUE<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SYS_STATS</span></span>
<span class="token operator">++</span>lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>mbox<span class="token punctuation">.</span>used<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>mbox<span class="token punctuation">.</span>max <span class="token operator">&lt;</span> lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>mbox<span class="token punctuation">.</span>used<span class="token punctuation">)</span> <span class="token punctuation">{</span>
lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>mbox<span class="token punctuation">.</span>max <span class="token operator">=</span> lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>mbox<span class="token punctuation">.</span>used<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* SYS_STATS */</span></span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>mbox <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> ERR_MEM<span class="token punctuation">;</span>
<span class="token keyword">return</span> ERR_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*重新分配一个邮箱。如果邮箱被释放时，邮箱中仍有消息，在lwIP中这是出现编码错误的指示，并通知开发人员。*/</span>
<span class="token keyword">void</span> <span class="token function">sys_mbox_free</span><span class="token punctuation">(</span><span class="token class-name">sys_mbox_t</span> <span class="token operator">*</span>mbox<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">osMessageWaiting</span><span class="token punctuation">(</span><span class="token operator">*</span>mbox<span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">portNOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SYS_STATS</span></span>
lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>mbox<span class="token punctuation">.</span>err<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* SYS_STATS */</span></span>
<span class="token punctuation">}</span>
<span class="token function">osMessageDelete</span><span class="token punctuation">(</span><span class="token operator">*</span>mbox<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SYS_STATS</span></span>
<span class="token operator">--</span>lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>mbox<span class="token punctuation">.</span>used<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* SYS_STATS */</span></span>
<span class="token punctuation">}</span>
<span class="token comment">/*发送消息到邮箱*/</span>
<span class="token keyword">void</span> <span class="token function">sys_mbox_post</span><span class="token punctuation">(</span><span class="token class-name">sys_mbox_t</span> <span class="token operator">*</span>mbox<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">osMessagePut</span><span class="token punctuation">(</span><span class="token operator">*</span>mbox<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> osWaitForever<span class="token punctuation">)</span> <span class="token operator">!=</span> osOK<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*尝试将消息发送到邮箱*/</span>
<span class="token class-name">err_t</span> <span class="token function">sys_mbox_trypost</span><span class="token punctuation">(</span><span class="token class-name">sys_mbox_t</span> <span class="token operator">*</span>mbox<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token class-name">err_t</span> result<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">osMessagePut</span><span class="token punctuation">(</span><span class="token operator">*</span>mbox<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> osOK<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
result <span class="token operator">=</span> ERR_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
result <span class="token operator">=</span> ERR_MEM<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SYS_STATS</span></span>
lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>mbox<span class="token punctuation">.</span>err<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* SYS_STATS */</span></span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*阻塞进程从邮箱获取消息*/</span>
<span class="token class-name">u32_t</span> <span class="token function">sys_arch_mbox_fetch</span><span class="token punctuation">(</span><span class="token class-name">sys_mbox_t</span> <span class="token operator">*</span>mbox<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token class-name">u32_t</span> timeout<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
osEvent event<span class="token punctuation">;</span>
<span class="token class-name">uint32_t</span> starttime <span class="token operator">=</span> <span class="token function">osKernelSysTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>timeout <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
event <span class="token operator">=</span> <span class="token function">osMessageGet</span> <span class="token punctuation">(</span><span class="token operator">*</span>mbox<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>status <span class="token operator">==</span> osEventMessage<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">.</span>value<span class="token punctuation">.</span>v<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">osKernelSysTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> starttime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
<span class="token keyword">return</span> SYS_ARCH_TIMEOUT<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
event <span class="token operator">=</span> <span class="token function">osMessageGet</span> <span class="token punctuation">(</span><span class="token operator">*</span>mbox<span class="token punctuation">,</span> osWaitForever<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">.</span>value<span class="token punctuation">.</span>v<span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">osKernelSysTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> starttime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*尝试从邮箱获取消息*/</span>
<span class="token class-name">u32_t</span> <span class="token function">sys_arch_mbox_tryfetch</span><span class="token punctuation">(</span><span class="token class-name">sys_mbox_t</span> <span class="token operator">*</span>mbox<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>msg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
osEvent event<span class="token punctuation">;</span>
event <span class="token operator">=</span> <span class="token function">osMessageGet</span> <span class="token punctuation">(</span><span class="token operator">*</span>mbox<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>status <span class="token operator">==</span> osEventMessage<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">.</span>value<span class="token punctuation">.</span>v<span class="token punctuation">;</span>
<span class="token keyword">return</span> ERR_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
<span class="token keyword">return</span> SYS_MBOX_EMPTY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*判断一个邮箱是否有效*/</span>
<span class="token keyword">int</span> <span class="token function">sys_mbox_valid</span><span class="token punctuation">(</span><span class="token class-name">sys_mbox_t</span> <span class="token operator">*</span>mbox<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>mbox <span class="token operator">==</span> SYS_MBOX_NULL<span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*设置一个邮箱无效*/</span>
<span class="token keyword">void</span> <span class="token function">sys_mbox_set_invalid</span><span class="token punctuation">(</span><span class="token class-name">sys_mbox_t</span> <span class="token operator">*</span>mbox<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token operator">*</span>mbox <span class="token operator">=</span> SYS_MBOX_NULL<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 创建一个新的信号量。而 &quot;count&quot;参数指示该信号量的初始状态</span>
<span class="token class-name">err_t</span> <span class="token function">sys_sem_new</span><span class="token punctuation">(</span><span class="token class-name">sys_sem_t</span> <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token class-name">u8_t</span> count<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token function">osSemaphoreDef</span><span class="token punctuation">(</span>SEM<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">*</span>sem <span class="token operator">=</span> <span class="token function">osSemaphoreCreate</span> <span class="token punctuation">(</span><span class="token function">osSemaphore</span><span class="token punctuation">(</span>SEM<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>sem <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SYS_STATS</span></span>
<span class="token operator">++</span>lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>sem<span class="token punctuation">.</span>err<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* SYS_STATS */</span></span>
<span class="token keyword">return</span> ERR_MEM<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// Means it can&#39;t be taken</span>
<span class="token punctuation">{</span>
<span class="token function">osSemaphoreWait</span><span class="token punctuation">(</span><span class="token operator">*</span>sem<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">SYS_STATS</span></span>
<span class="token operator">++</span>lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>sem<span class="token punctuation">.</span>used<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>sem<span class="token punctuation">.</span>max <span class="token operator">&lt;</span> lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>sem<span class="token punctuation">.</span>used<span class="token punctuation">)</span> <span class="token punctuation">{</span>
lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>sem<span class="token punctuation">.</span>max <span class="token operator">=</span> lwip_stats<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>sem<span class="token punctuation">.</span>used<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* SYS_STATS */</span></span>
<span class="token keyword">return</span> ERR_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外还有一些函数也是协议栈需要的函数，特别是 sys_thread_new 函数，不但协议栈在初始化时需要用到，在后续我们实现各类基于 lwIP 的应用时也会用得到，它的具体实现如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">sys_thread_t</span> <span class="token function">sys_thread_new</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> lwip_thread_fn thread <span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token keyword">int</span> stacksize<span class="token punctuation">,</span> <span class="token keyword">int</span> prio<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">const</span> <span class="token class-name">osThreadDef_t</span> os_thread_def <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>os_pthread<span class="token punctuation">)</span>thread<span class="token punctuation">,</span> <span class="token punctuation">(</span>osPriority<span class="token punctuation">)</span>prio<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> stacksize<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token function">osThreadCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>os_thread_def<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
osThreadId <span class="token function">osThreadCreate</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">osThreadDef_t</span> <span class="token operator">*</span>thread_def<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>argument<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
TaskHandle_t handle<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span><span class="token expression"><span class="token punctuation">(</span> configSUPPORT_STATIC_ALLOCATION <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> configSUPPORT_DYNAMIC_ALLOCATION <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span></span></span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>thread_def<span class="token operator">-&gt;</span>buffer <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>thread_def<span class="token operator">-&gt;</span>controlblock <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
handle <span class="token operator">=</span> <span class="token function">xTaskCreateStatic</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t<span class="token punctuation">)</span>thread_def<span class="token operator">-&gt;</span>pthread<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">const</span> portCHAR <span class="token operator">*</span><span class="token punctuation">)</span>thread_def<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>
thread_def<span class="token operator">-&gt;</span>stacksize<span class="token punctuation">,</span> argument<span class="token punctuation">,</span> <span class="token function">makeFreeRtosPriority</span><span class="token punctuation">(</span>thread_def<span class="token operator">-&gt;</span>tpriority<span class="token punctuation">)</span><span class="token punctuation">,</span>
thread_def<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span> thread_def<span class="token operator">-&gt;</span>controlblock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t<span class="token punctuation">)</span>thread_def<span class="token operator">-&gt;</span>pthread<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">const</span> portCHAR <span class="token operator">*</span><span class="token punctuation">)</span>thread_def<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>
thread_def<span class="token operator">-&gt;</span>stacksize<span class="token punctuation">,</span> argument<span class="token punctuation">,</span> <span class="token function">makeFreeRtosPriority</span><span class="token punctuation">(</span>thread_def<span class="token operator">-&gt;</span>tpriority<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token operator">&amp;</span>handle<span class="token punctuation">)</span> <span class="token operator">!=</span> pdPASS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span><span class="token expression"><span class="token punctuation">(</span> configSUPPORT_STATIC_ALLOCATION <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span></span></span>
handle <span class="token operator">=</span> <span class="token function">xTaskCreateStatic</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t<span class="token punctuation">)</span>thread_def<span class="token operator">-&gt;</span>pthread<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">const</span> portCHAR <span class="token operator">*</span><span class="token punctuation">)</span>thread_def<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>
thread_def<span class="token operator">-&gt;</span>stacksize<span class="token punctuation">,</span> argument<span class="token punctuation">,</span> <span class="token function">makeFreeRtosPriority</span><span class="token punctuation">(</span>thread_def<span class="token operator">-&gt;</span>tpriority<span class="token punctuation">)</span><span class="token punctuation">,</span>
thread_def<span class="token operator">-&gt;</span>buffer<span class="token punctuation">,</span> thread_def<span class="token operator">-&gt;</span>controlblock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">xTaskCreate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TaskFunction_t<span class="token punctuation">)</span>thread_def<span class="token operator">-&gt;</span>pthread<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">const</span> portCHAR <span class="token operator">*</span><span class="token punctuation">)</span>thread_def<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>
thread_def<span class="token operator">-&gt;</span>stacksize<span class="token punctuation">,</span> argument<span class="token punctuation">,</span> <span class="token function">makeFreeRtosPriority</span><span class="token punctuation">(</span>thread_def<span class="token operator">-&gt;</span>tpriority<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token operator">&amp;</span>handle<span class="token punctuation">)</span> <span class="token operator">!=</span> pdPASS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token keyword">return</span> handle<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，基于 Cosmos 操作系统移植 lwIP 协议栈的关键部分就算完成了。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>好，这节课的内容告一段落了，我来给你做个总结。</p><ul><li><p>我们首先从数据发送接收的视角，观察了数据从用户态到内核态，再从内核态到流动到用户态的全过程。</p></li><li><p>接着，我们发现网络协议栈移植与 DMA、内核的 IPC、信号量、DMA 等机制密切相关。理解网络栈移植的关键步骤，能够让我们更好地理解内核特性在工程中是如何应用的。</p></li><li><p>最后，我们实现了将 lwIP 网络协议栈的关键部分移植到 Cosmos 操作系统下。不过这节课我带你实现了邮箱和系统线程相关的关键部分，其他函数移植道理相通，感兴趣的同学可以自行探索。</p></li></ul><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>我们已经了解到了操作系统内核和网络协议栈的关系，可是网络协议栈真的一定只能放在内核态实现么？</p><p>欢迎你在留言区跟我交流探讨。也欢迎你把这节课分享给自己的朋友、同事。</p><p>我是 LMOS，我们下节课见！</p>`,89),k=[r];function d(m,v){return s(),a("div",null,k)}const _=n(u,[["render",d],["__file","L37-从内核到应用.html.vue"]]);export{_ as default};
