import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/f6982eb85dc66bd04200474efb3a050e-16528716080577-ba69dd23.png",e="/assets/3f0a99cf1c47afcd0bd740c4b7802511-bfb9a710.png",o="/assets/6b2ea7148a8e04138a2228c5dbc7182b-ee8a3488.png",c="/assets/75c8257049eed99499e802fcc2eacf4d-4815fe0c.png",l="/assets/765e5431fe4b17f62b1b5712cc82abda-fa705ab6.png",i="/assets/ab6af2f9e1a64868636080a05cfde0d9-8cb3f5ce.png",u="/assets/79cc42f3163d159a66e163c006d9f36f-fe335fd7.png",k={},r=p(`<h1 id="_46-发送网络包-下-如何表达我们想让合作伙伴做什么" tabindex="-1"><a class="header-anchor" href="#_46-发送网络包-下-如何表达我们想让合作伙伴做什么" aria-hidden="true">#</a> 46 | 发送网络包（下）：如何表达我们想让合作伙伴做什么？</h1><p>上一节我们讲网络包的发送，讲了上半部分，也即从 VFS 层一直到 IP 层，这一节我们接着看下去，看 IP 层和 MAC 层是如何发送数据的。</p><h2 id="解析-ip-queue-xmit-函数" tabindex="-1"><a class="header-anchor" href="#解析-ip-queue-xmit-函数" aria-hidden="true">#</a> <strong>解析 ip_queue_xmit 函数</strong></h2><p>从 ip_queue_xmit 函数开始，我们就要进入 IP 层的发送逻辑了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ip_queue_xmit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">flowi</span> <span class="token operator">*</span>fl<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">inet_sock</span> <span class="token operator">*</span>inet <span class="token operator">=</span> <span class="token function">inet_sk</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net <span class="token operator">=</span> <span class="token function">sock_net</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">ip_options_rcu</span> <span class="token operator">*</span>inet_opt<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">flowi4</span> <span class="token operator">*</span>fl4<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rtable</span> <span class="token operator">*</span>rt<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">iphdr</span> <span class="token operator">*</span>iph<span class="token punctuation">;</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>

    inet_opt <span class="token operator">=</span> <span class="token function">rcu_dereference</span><span class="token punctuation">(</span>inet<span class="token operator">-&gt;</span>inet_opt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fl4 <span class="token operator">=</span> <span class="token operator">&amp;</span>fl<span class="token operator">-&gt;</span>u<span class="token punctuation">.</span>ip4<span class="token punctuation">;</span>
    rt <span class="token operator">=</span> <span class="token function">skb_rtable</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* Make sure we can route this packet. */</span>
    rt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rtable</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">__sk_dst_check</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        __be32 daddr<span class="token punctuation">;</span>
        <span class="token comment">/* Use correct destination address if we have options. */</span>
        daddr <span class="token operator">=</span> inet<span class="token operator">-&gt;</span>inet_daddr<span class="token punctuation">;</span>
 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        rt <span class="token operator">=</span> <span class="token function">ip_route_output_ports</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> fl4<span class="token punctuation">,</span> sk<span class="token punctuation">,</span>
                       daddr<span class="token punctuation">,</span> inet<span class="token operator">-&gt;</span>inet_saddr<span class="token punctuation">,</span>
                       inet<span class="token operator">-&gt;</span>inet_dport<span class="token punctuation">,</span>
                       inet<span class="token operator">-&gt;</span>inet_sport<span class="token punctuation">,</span>
                       sk<span class="token operator">-&gt;</span>sk_protocol<span class="token punctuation">,</span>
                       <span class="token function">RT_CONN_FLAGS</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">,</span>
                       sk<span class="token operator">-&gt;</span>sk_bound_dev_if<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>rt<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> no_route<span class="token punctuation">;</span>
        <span class="token function">sk_setup_caps</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rt<span class="token operator">-&gt;</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">skb_dst_set_noref</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rt<span class="token operator">-&gt;</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>

packet_routed<span class="token operator">:</span>
    <span class="token comment">/* OK, we know where to send it, allocate and build IP header. */</span>
    <span class="token function">skb_push</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">iphdr</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>inet_opt <span class="token operator">?</span> inet_opt<span class="token operator">-&gt;</span>opt<span class="token punctuation">.</span>optlen <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">skb_reset_network_header</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    iph <span class="token operator">=</span> <span class="token function">ip_hdr</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__be16 <span class="token operator">*</span><span class="token punctuation">)</span>iph<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>inet<span class="token operator">-&gt;</span>tos <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ip_dont_fragment</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rt<span class="token operator">-&gt;</span>dst<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>skb<span class="token operator">-&gt;</span>ignore_df<span class="token punctuation">)</span>
        iph<span class="token operator">-&gt;</span>frag_off <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>IP_DF<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        iph<span class="token operator">-&gt;</span>frag_off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    iph<span class="token operator">-&gt;</span>ttl      <span class="token operator">=</span> <span class="token function">ip_select_ttl</span><span class="token punctuation">(</span>inet<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rt<span class="token operator">-&gt;</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    iph<span class="token operator">-&gt;</span>protocol <span class="token operator">=</span> sk<span class="token operator">-&gt;</span>sk_protocol<span class="token punctuation">;</span>
    <span class="token function">ip_copy_addrs</span><span class="token punctuation">(</span>iph<span class="token punctuation">,</span> fl4<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Transport layer set skb-&gt;h.foo itself. */</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>inet_opt <span class="token operator">&amp;&amp;</span> inet_opt<span class="token operator">-&gt;</span>opt<span class="token punctuation">.</span>optlen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        iph<span class="token operator">-&gt;</span>ihl <span class="token operator">+=</span> inet_opt<span class="token operator">-&gt;</span>opt<span class="token punctuation">.</span>optlen <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token function">ip_options_build</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>inet_opt<span class="token operator">-&gt;</span>opt<span class="token punctuation">,</span> inet<span class="token operator">-&gt;</span>inet_daddr<span class="token punctuation">,</span> rt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">ip_select_ident_segs</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> sk<span class="token punctuation">,</span>
                 <span class="token function">skb_shinfo</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>gso_segs <span class="token operator">?</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* TODO : should we use skb-&gt;sk here instead of sk ? */</span>
    skb<span class="token operator">-&gt;</span>priority <span class="token operator">=</span> sk<span class="token operator">-&gt;</span>sk_priority<span class="token punctuation">;</span>
    skb<span class="token operator">-&gt;</span>mark <span class="token operator">=</span> sk<span class="token operator">-&gt;</span>sk_mark<span class="token punctuation">;</span>

    res <span class="token operator">=</span> <span class="token function">ip_local_out</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> sk<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ip_queue_xmit 中，也即 IP 层的发送函数里面，有三部分逻辑。</p><p>第一部分，选取路由，也即我要发送这个包应该从哪个网卡出去。</p><p>这件事情主要由 ip_route_output_ports 函数完成。接下来的调用链为：ip_route_output_ports-&gt;ip_route_output_flow-&gt;__ip_route_output_key-&gt;ip_route_output_key_hash-&gt;ip_route_output_key_hash_rcu。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">rtable</span> <span class="token operator">*</span><span class="token function">ip_route_output_key_hash_rcu</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">flowi4</span> <span class="token operator">*</span>fl4<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">fib_result</span> <span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev_out <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> orig_oif <span class="token operator">=</span> fl4<span class="token operator">-&gt;</span>flowi4_oif<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">rtable</span> <span class="token operator">*</span>rth<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    err <span class="token operator">=</span> <span class="token function">fib_lookup</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> fl4<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
make_route<span class="token operator">:</span>
  rth <span class="token operator">=</span> <span class="token function">__mkroute_output</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> fl4<span class="token punctuation">,</span> orig_oif<span class="token punctuation">,</span> dev_out<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ip_route_output_key_hash_rcu 先会调用 fib_lookup。</p><p><strong>FIB</strong> 全称是 Forwarding Information Base，**转发信息表。**其实就是咱们常说的路由表。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">fib_lookup</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">flowi4</span> <span class="token operator">*</span>flp<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">fib_result</span> <span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>  <span class="token keyword">struct</span> <span class="token class-name">fib_table</span> <span class="token operator">*</span>tb<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  tb <span class="token operator">=</span> <span class="token function">fib_get_table</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> RT_TABLE_MAIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tb<span class="token punctuation">)</span>
    err <span class="token operator">=</span> <span class="token function">fib_table_lookup</span><span class="token punctuation">(</span>tb<span class="token punctuation">,</span> flp<span class="token punctuation">,</span> res<span class="token punctuation">,</span> flags <span class="token operator">|</span> FIB_LOOKUP_NOREF<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由表可以有多个，一般会有一个主表，RT_TABLE_MAIN。然后 fib_table_lookup 函数在这个表里面进行查找。</p><p>路由表是一个什么样的结构呢？</p><p>路由就是在 Linux 服务器上的路由表里面配置的一条一条规则。这些规则大概是这样的：想访问某个网段，从某个网卡出去，下一跳是某个 IP。</p><p>之前我们讲过一个简单的拓扑图，里面的三台 Linux 机器的路由表都可以通过 ip route 命令查看。</p><img src="`+t+`" alt="img" style="zoom:15%;"><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Linux服务器A</span></span>
<span class="token keyword">default</span> via <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span> dev eth0
<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> dev eth0 proto kernel scope link src <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.100</span> metric <span class="token number">100</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Linux服务器B</span></span>
<span class="token keyword">default</span> via <span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.1</span> dev eth0
<span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> dev eth0 proto kernel scope link src <span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.100</span> metric <span class="token number">100</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Linux服务器做路由器</span></span>
<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> dev eth0 proto kernel scope link src <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span>  
<span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> dev eth1 proto kernel scope link src <span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.1</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，对于两端的服务器来讲，我们没有太多路由可以选，但是对于中间的 Linux 服务器做路由器来讲，这里有两条路可以选，一个是往左面转发，一个是往右面转发，就需要路由表的查找。</p><p>fib_table_lookup 的代码逻辑比较复杂，好在注释比较清楚。因为路由表要按照前缀进行查询，希望找到最长匹配的那一个，例如 192.168.2.0/24 和 192.168.0.0/16 都能匹配 192.168.2.100/24。但是，我们应该使用 192.168.2.0/24 的这一条。</p><p>为了更方面的做这个事情，我们使用了 Trie 树这种结构。比如我们有一系列的字符串：{bcs#, badge#, baby#, back#, badger#, badness#}。之所以每个字符串都加上 #，是希望不要一个字符串成为另外一个字符串的前缀。然后我们把它们放在 Trie 树中，如下图所示：</p><img src="`+e+`" alt="img" style="zoom:25%;"><p>对于将 IP 地址转成二进制放入 trie 树，也是同样的道理，可以很快进行路由的查询。</p><p>找到了路由，就知道了应该从哪个网卡发出去。</p><p>然后，ip_route_output_key_hash_rcu 会调用 __mkroute_output，创建一个 struct rtable，表示找到的路由表项。这个结构是由 rt_dst_alloc 函数分配的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">rtable</span> <span class="token operator">*</span><span class="token function">rt_dst_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span>
          <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> u16 type<span class="token punctuation">,</span>
          bool nopolicy<span class="token punctuation">,</span> bool noxfrm<span class="token punctuation">,</span> bool will_cache<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">rtable</span> <span class="token operator">*</span>rt<span class="token punctuation">;</span>

  rt <span class="token operator">=</span> <span class="token function">dst_alloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ipv4_dst_ops<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> DST_OBSOLETE_FORCE_CHK<span class="token punctuation">,</span>
           <span class="token punctuation">(</span>will_cache <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> DST_HOST<span class="token punctuation">)</span> <span class="token operator">|</span>
           <span class="token punctuation">(</span>nopolicy <span class="token operator">?</span> DST_NOPOLICY <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span>
           <span class="token punctuation">(</span>noxfrm <span class="token operator">?</span> DST_NOXFRM <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>rt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rt<span class="token operator">-&gt;</span>rt_genid <span class="token operator">=</span> <span class="token function">rt_genid_ipv4</span><span class="token punctuation">(</span><span class="token function">dev_net</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rt<span class="token operator">-&gt;</span>rt_flags <span class="token operator">=</span> flags<span class="token punctuation">;</span>
    rt<span class="token operator">-&gt;</span>rt_type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    rt<span class="token operator">-&gt;</span>rt_is_input <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rt<span class="token operator">-&gt;</span>rt_iif <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rt<span class="token operator">-&gt;</span>rt_pmtu <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rt<span class="token operator">-&gt;</span>rt_gateway <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rt<span class="token operator">-&gt;</span>rt_uses_gateway <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rt<span class="token operator">-&gt;</span>rt_table_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rt<span class="token operator">-&gt;</span>rt_uncached<span class="token punctuation">)</span><span class="token punctuation">;</span>

    rt<span class="token operator">-&gt;</span>dst<span class="token punctuation">.</span>output <span class="token operator">=</span> ip_output<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> RTCF_LOCAL<span class="token punctuation">)</span>
      rt<span class="token operator">-&gt;</span>dst<span class="token punctuation">.</span>input <span class="token operator">=</span> ip_local_deliver<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> rt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终返回 struct rtable 实例，第一部分也就完成了。</p><p>第二部分，就是准备 IP 层的头，往里面填充内容。这就要对着 IP 层的头的格式进行理解。</p><img src="`+o+`" alt="img" style="zoom:25%;"><p>在这里面，服务类型设置为 tos，标识位里面设置是否允许分片 frag_off。如果不允许，而遇到 MTU 太小过不去的情况，就发送 ICMP 报错。TTL 是这个包的存活时间，为了防止一个 IP 包迷路以后一直存活下去，每经过一个路由器 TTL 都减一，减为零则“死去”。设置 protocol，指的是更上层的协议，这里是 TCP。源地址和目标地址由 ip_copy_addrs 设置。最后，设置 options。</p><p>第三部分，就是调用 ip_local_out 发送 IP 包。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ip_local_out</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>

  err <span class="token operator">=</span> <span class="token function">__ip_local_out</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> sk<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    err <span class="token operator">=</span> <span class="token function">dst_output</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> sk<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">__ip_local_out</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">iphdr</span> <span class="token operator">*</span>iph <span class="token operator">=</span> <span class="token function">ip_hdr</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
  iph<span class="token operator">-&gt;</span>tot_len <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>skb<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  skb<span class="token operator">-&gt;</span>protocol <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>ETH_P_IP<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">nf_hook</span><span class="token punctuation">(</span>NFPROTO_IPV4<span class="token punctuation">,</span> NF_INET_LOCAL_OUT<span class="token punctuation">,</span>
           net<span class="token punctuation">,</span> sk<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token function">skb_dst</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev<span class="token punctuation">,</span>
           dst_output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ip_local_out 先是调用 __ip_local_out，然后里面调用了 nf_hook。这是什么呢？nf 的意思是 Netfilter，这是 Linux 内核的一个机制，用于在网络发送和转发的关键节点上加上 hook 函数，这些函数可以截获数据包，对数据包进行干预。</p><p>一个著名的实现，就是内核模块 ip_tables。在用户态，还有一个客户端程序 iptables，用命令行来干预内核的规则。</p><img src="`+c+'" alt="img" style="zoom:25%;"><p>iptables 有表和链的概念，最终要的是两个表。</p><p>filter 表处理过滤功能，主要包含以下三个链。</p><ul><li>INPUT 链：过滤所有目标地址是本机的数据包</li><li>FORWARD 链：过滤所有路过本机的数据包</li><li>OUTPUT 链：过滤所有由本机产生的数据包</li></ul><p>nat 表主要处理网络地址转换，可以进行 SNAT（改变源地址）、DNAT（改变目标地址），包含以下三个链。</p><ul><li>PREROUTING 链：可以在数据包到达时改变目标地址</li><li>OUTPUT 链：可以改变本地产生的数据包的目标地址</li><li>POSTROUTING 链：在数据包离开时改变数据包的源地址</li></ul><img src="'+l+`" alt="img" style="zoom:25%;"><p>在这里，网络包马上就要发出去了，因而是 NF_INET_LOCAL_OUT，也即 ouput 链，如果用户曾经在 iptables 里面写过某些规则，就会在 nf_hook 这个函数里面起作用。</p><p>ip_local_out 再调用 dst_output，就是真正的发送数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* Output packet to network from transport.  */</span>
<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">dst_output</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">skb_dst</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> sk<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里调用的就是 struct rtable 成员 dst 的 ouput 函数。在 rt_dst_alloc 中，我们可以看到，output 函数指向的是 ip_output。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ip_output</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev <span class="token operator">=</span> <span class="token function">skb_dst</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev<span class="token punctuation">;</span>
  skb<span class="token operator">-&gt;</span>dev <span class="token operator">=</span> dev<span class="token punctuation">;</span>
  skb<span class="token operator">-&gt;</span>protocol <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>ETH_P_IP<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">NF_HOOK_COND</span><span class="token punctuation">(</span>NFPROTO_IPV4<span class="token punctuation">,</span> NF_INET_POST_ROUTING<span class="token punctuation">,</span>
          net<span class="token punctuation">,</span> sk<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> dev<span class="token punctuation">,</span>
          ip_finish_output<span class="token punctuation">,</span>
          <span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">IPCB</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> IPSKB_REROUTED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ip_output 里面，我们又看到了熟悉的 NF_HOOK。这一次是 NF_INET_POST_ROUTING，也即 POSTROUTING 链，处理完之后，调用 ip_finish_output。</p><h2 id="解析-ip-finish-output-函数" tabindex="-1"><a class="header-anchor" href="#解析-ip-finish-output-函数" aria-hidden="true">#</a> <strong>解析 ip_finish_output 函数</strong></h2><p>从 ip_finish_output 函数开始，发送网络包的逻辑由第三层到达第二层。ip_finish_output 最终调用 ip_finish_output2。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ip_finish_output2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">dst_entry</span> <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token function">skb_dst</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">rtable</span> <span class="token operator">*</span>rt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rtable</span> <span class="token operator">*</span><span class="token punctuation">)</span>dst<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev <span class="token operator">=</span> dst<span class="token operator">-&gt;</span>dev<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> hh_len <span class="token operator">=</span> <span class="token function">LL_RESERVED_SPACE</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span>neigh<span class="token punctuation">;</span>
  u32 nexthop<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  nexthop <span class="token operator">=</span> <span class="token punctuation">(</span>__force u32<span class="token punctuation">)</span> <span class="token function">rt_nexthop</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> <span class="token function">ip_hdr</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>daddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  neigh <span class="token operator">=</span> <span class="token function">__ipv4_neigh_lookup_noref</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> nexthop<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>neigh<span class="token punctuation">)</span><span class="token punctuation">)</span>
    neigh <span class="token operator">=</span> <span class="token function">__neigh_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arp_tbl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>nexthop<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>neigh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>
    <span class="token function">sock_confirm_neigh</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> neigh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> <span class="token function">neigh_output</span><span class="token punctuation">(</span>neigh<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ip_finish_output2 中，先找到 struct rtable 路由表里面的下一跳，下一跳一定和本机在同一个局域网中，可以通过二层进行通信，因而通过 __ipv4_neigh_lookup_noref，查找如何通过二层访问下一跳。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span><span class="token function">__ipv4_neigh_lookup_noref</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> u32 key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">___neigh_lookup_noref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arp_tbl<span class="token punctuation">,</span> neigh_key_eq32<span class="token punctuation">,</span> arp_hashfn<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__ipv4_neigh_lookup_noref 是从本地的 ARP 表中查找下一跳的 MAC 地址。ARP 表的定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">neigh_table</span> arp_tbl <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>family     <span class="token operator">=</span> AF_INET<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>key_len    <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>    
    <span class="token punctuation">.</span>protocol   <span class="token operator">=</span> <span class="token function">cpu_to_be16</span><span class="token punctuation">(</span>ETH_P_IP<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>hash       <span class="token operator">=</span> arp_hash<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>key_eq     <span class="token operator">=</span> arp_key_eq<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>constructor    <span class="token operator">=</span> arp_constructor<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>proxy_redo <span class="token operator">=</span> parp_redo<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>id     <span class="token operator">=</span> <span class="token string">&quot;arp_cache&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">.</span>gc_interval    <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> HZ<span class="token punctuation">,</span> 
    <span class="token punctuation">.</span>gc_thresh1 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>  
    <span class="token punctuation">.</span>gc_thresh2 <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span>  
    <span class="token punctuation">.</span>gc_thresh3 <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在 ARP 表中没有找到相应的项，则调用 __neigh_create 进行创建。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span><span class="token function">__neigh_create</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">neigh_table</span> <span class="token operator">*</span>tbl<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>pkey<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> bool want_ref<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    u32 hash_val<span class="token punctuation">;</span>
    <span class="token keyword">int</span> key_len <span class="token operator">=</span> tbl<span class="token operator">-&gt;</span>key_len<span class="token punctuation">;</span>
    <span class="token keyword">int</span> error<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span>n1<span class="token punctuation">,</span> <span class="token operator">*</span>rc<span class="token punctuation">,</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token function">neigh_alloc</span><span class="token punctuation">(</span>tbl<span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">neigh_hash_table</span> <span class="token operator">*</span>nht<span class="token punctuation">;</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>primary_key<span class="token punctuation">,</span> pkey<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">-&gt;</span>dev <span class="token operator">=</span> dev<span class="token punctuation">;</span>
    <span class="token function">dev_hold</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Protocol specific setup. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tbl<span class="token operator">-&gt;</span>constructor <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>error <span class="token operator">=</span> tbl<span class="token operator">-&gt;</span><span class="token function">constructor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">atomic_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tbl<span class="token operator">-&gt;</span>entries<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> nht<span class="token operator">-&gt;</span>hash_shift<span class="token punctuation">)</span><span class="token punctuation">)</span>
        nht <span class="token operator">=</span> <span class="token function">neigh_hash_grow</span><span class="token punctuation">(</span>tbl<span class="token punctuation">,</span> nht<span class="token operator">-&gt;</span>hash_shift <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    hash_val <span class="token operator">=</span> tbl<span class="token operator">-&gt;</span><span class="token function">hash</span><span class="token punctuation">(</span>pkey<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> nht<span class="token operator">-&gt;</span>hash_rnd<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> nht<span class="token operator">-&gt;</span>hash_shift<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>n1 <span class="token operator">=</span> <span class="token function">rcu_dereference_protected</span><span class="token punctuation">(</span>nht<span class="token operator">-&gt;</span>hash_buckets<span class="token punctuation">[</span>hash_val<span class="token punctuation">]</span><span class="token punctuation">,</span>
                        <span class="token function">lockdep_is_held</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tbl<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         n1 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
         n1 <span class="token operator">=</span> <span class="token function">rcu_dereference_protected</span><span class="token punctuation">(</span>n1<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span>
            <span class="token function">lockdep_is_held</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tbl<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">==</span> n1<span class="token operator">-&gt;</span>dev <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">memcmp</span><span class="token punctuation">(</span>n1<span class="token operator">-&gt;</span>primary_key<span class="token punctuation">,</span> pkey<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>want_ref<span class="token punctuation">)</span>
                <span class="token function">neigh_hold</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rc <span class="token operator">=</span> n1<span class="token punctuation">;</span>
            <span class="token keyword">goto</span> out_tbl_unlock<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">rcu_assign_pointer</span><span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>next<span class="token punctuation">,</span>
               <span class="token function">rcu_dereference_protected</span><span class="token punctuation">(</span>nht<span class="token operator">-&gt;</span>hash_buckets<span class="token punctuation">[</span>hash_val<span class="token punctuation">]</span><span class="token punctuation">,</span>
                             <span class="token function">lockdep_is_held</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tbl<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rcu_assign_pointer</span><span class="token punctuation">(</span>nht<span class="token operator">-&gt;</span>hash_buckets<span class="token punctuation">[</span>hash_val<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__neigh_create 先调用 neigh_alloc，创建一个 struct neighbour 结构，用于维护 MAC 地址和 ARP 相关的信息。这个名字也很好理解，大家都是在一个局域网里面，可以通过 MAC 地址访问到，当然是邻居了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span><span class="token function">neigh_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">neigh_table</span> <span class="token operator">*</span>tbl<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> now <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>
  <span class="token keyword">int</span> entries<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  n <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span>tbl<span class="token operator">-&gt;</span>entry_size <span class="token operator">+</span> dev<span class="token operator">-&gt;</span>neigh_priv_len<span class="token punctuation">,</span> GFP_ATOMIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span>
    <span class="token keyword">goto</span> out_entries<span class="token punctuation">;</span>

  <span class="token function">__skb_queue_head_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>arp_queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">rwlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">seqlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>ha_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  n<span class="token operator">-&gt;</span>updated    <span class="token operator">=</span> n<span class="token operator">-&gt;</span>used <span class="token operator">=</span> now<span class="token punctuation">;</span>
  n<span class="token operator">-&gt;</span>nud_state    <span class="token operator">=</span> NUD_NONE<span class="token punctuation">;</span>
  n<span class="token operator">-&gt;</span>output    <span class="token operator">=</span> neigh_blackhole<span class="token punctuation">;</span>
  <span class="token function">seqlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>hh<span class="token punctuation">.</span>hh_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  n<span class="token operator">-&gt;</span>parms    <span class="token operator">=</span> <span class="token function">neigh_parms_clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tbl<span class="token operator">-&gt;</span>parms<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setup_timer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>timer<span class="token punctuation">,</span> neigh_timer_handler<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">NEIGH_CACHE_STAT_INC</span><span class="token punctuation">(</span>tbl<span class="token punctuation">,</span> allocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  n<span class="token operator">-&gt;</span>tbl      <span class="token operator">=</span> tbl<span class="token punctuation">;</span>
  <span class="token function">refcount_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>refcnt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  n<span class="token operator">-&gt;</span>dead      <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 neigh_alloc 中，我们先分配一个 struct neighbour 结构并且初始化。这里面比较重要的有两个成员，一个是 arp_queue，所以上层想通过 ARP 获取 MAC 地址的任务，都放在这个队列里面。另一个是 timer 定时器，我们设置成，过一段时间就调用 neigh_timer_handler，来处理这些 ARP 任务。</p><p>__neigh_create 然后调用了 arp_tbl 的 constructor 函数，也即调用了 arp_constructor，在这里面定义了 ARP 的操作 arp_hh_ops。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">arp_constructor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span>neigh<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  __be32 addr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>__be32 <span class="token operator">*</span><span class="token punctuation">)</span>neigh<span class="token operator">-&gt;</span>primary_key<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev <span class="token operator">=</span> neigh<span class="token operator">-&gt;</span>dev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">in_device</span> <span class="token operator">*</span>in_dev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">neigh_parms</span> <span class="token operator">*</span>parms<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  neigh<span class="token operator">-&gt;</span>type <span class="token operator">=</span> <span class="token function">inet_addr_type_dev_table</span><span class="token punctuation">(</span><span class="token function">dev_net</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">,</span> dev<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

  parms <span class="token operator">=</span> in_dev<span class="token operator">-&gt;</span>arp_parms<span class="token punctuation">;</span>
  <span class="token function">__neigh_parms_put</span><span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>parms<span class="token punctuation">)</span><span class="token punctuation">;</span>
  neigh<span class="token operator">-&gt;</span>parms <span class="token operator">=</span> <span class="token function">neigh_parms_clone</span><span class="token punctuation">(</span>parms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  neigh<span class="token operator">-&gt;</span>ops <span class="token operator">=</span> <span class="token operator">&amp;</span>arp_hh_ops<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  neigh<span class="token operator">-&gt;</span>output <span class="token operator">=</span> neigh<span class="token operator">-&gt;</span>ops<span class="token operator">-&gt;</span>output<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">neigh_ops</span> arp_hh_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>family <span class="token operator">=</span>    AF_INET<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>solicit <span class="token operator">=</span>    arp_solicit<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>error_report <span class="token operator">=</span>    arp_error_report<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>output <span class="token operator">=</span>    neigh_resolve_output<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>connected_output <span class="token operator">=</span>  neigh_resolve_output<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__neigh_create 最后是将创建的 struct neighbour 结构放入一个哈希表，从里面的代码逻辑比较容易看出，这是一个数组加链表的链式哈希表，先计算出哈希值 hash_val，得到相应的链表，然后循环这个链表找到对应的项，如果找不到就在最后插入一项。</p><p>我们回到 ip_finish_output2，在 __neigh_create 之后，会调用 neigh_output 发送网络包。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">neigh_output</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span>n<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> n<span class="token operator">-&gt;</span><span class="token function">output</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照上面对于 struct neighbour 的操作函数 arp_hh_ops 的定义，output 调用的是 neigh_resolve_output。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">neigh_resolve_output</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span>neigh<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">neigh_event_send</span><span class="token punctuation">(</span>neigh<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    rc <span class="token operator">=</span> <span class="token function">dev_queue_xmit</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 neigh_resolve_output 里面，首先 neigh_event_send 触发一个事件，看能否激活 ARP。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">__neigh_event_send</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span>neigh<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> rc<span class="token punctuation">;</span>
  bool immediate_probe <span class="token operator">=</span> false<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>nud_state <span class="token operator">&amp;</span> <span class="token punctuation">(</span>NUD_STALE <span class="token operator">|</span> NUD_INCOMPLETE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">NEIGH_VAR</span><span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>parms<span class="token punctuation">,</span> MCAST_PROBES<span class="token punctuation">)</span> <span class="token operator">+</span>
        <span class="token function">NEIGH_VAR</span><span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>parms<span class="token punctuation">,</span> APP_PROBES<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">unsigned</span> <span class="token keyword">long</span> next<span class="token punctuation">,</span> now <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>

      <span class="token function">atomic_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>neigh<span class="token operator">-&gt;</span>probes<span class="token punctuation">,</span>
           <span class="token function">NEIGH_VAR</span><span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>parms<span class="token punctuation">,</span> UCAST_PROBES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      neigh<span class="token operator">-&gt;</span>nud_state     <span class="token operator">=</span> NUD_INCOMPLETE<span class="token punctuation">;</span>
      neigh<span class="token operator">-&gt;</span>updated <span class="token operator">=</span> now<span class="token punctuation">;</span>
      next <span class="token operator">=</span> now <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">NEIGH_VAR</span><span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>parms<span class="token punctuation">,</span> RETRANS_TIME<span class="token punctuation">)</span><span class="token punctuation">,</span>
           HZ<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">neigh_add_timer</span><span class="token punctuation">(</span>neigh<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
      immediate_probe <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>nud_state <span class="token operator">&amp;</span> NUD_STALE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">neigh_dbg</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;neigh %p is delayed\\n&quot;</span><span class="token punctuation">,</span> neigh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    neigh<span class="token operator">-&gt;</span>nud_state <span class="token operator">=</span> NUD_DELAY<span class="token punctuation">;</span>
    neigh<span class="token operator">-&gt;</span>updated <span class="token operator">=</span> jiffies<span class="token punctuation">;</span>
    <span class="token function">neigh_add_timer</span><span class="token punctuation">(</span>neigh<span class="token punctuation">,</span> jiffies <span class="token operator">+</span>
        <span class="token function">NEIGH_VAR</span><span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>parms<span class="token punctuation">,</span> DELAY_PROBE_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>nud_state <span class="token operator">==</span> NUD_INCOMPLETE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>skb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token function">__skb_queue_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>neigh<span class="token operator">-&gt;</span>arp_queue<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
      neigh<span class="token operator">-&gt;</span>arp_queue_len_Bytes <span class="token operator">+=</span> skb<span class="token operator">-&gt;</span>truesize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
out_unlock_bh<span class="token operator">:</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate_probe<span class="token punctuation">)</span>
    <span class="token function">neigh_probe</span><span class="token punctuation">(</span>neigh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 __neigh_event_send 中，激活 ARP 分两种情况，第一种情况是马上激活，也即 immediate_probe。另一种情况是延迟激活则仅仅设置一个 timer。然后将 ARP 包放在 arp_queue 上。如果马上激活，就直接调用 neigh_probe；如果延迟激活，则定时器到了就会触发 neigh_timer_handler，在这里面还是会调用 neigh_probe。</p><p>我们就来看 neigh_probe 的实现，在这里面会从 arp_queue 中拿出 ARP 包来，然后调用 struct neighbour 的 solicit 操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">neigh_probe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">neighbour</span> <span class="token operator">*</span>neigh<span class="token punctuation">)</span>
        <span class="token function">__releases</span><span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>lock<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb <span class="token operator">=</span> <span class="token function">skb_peek_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>neigh<span class="token operator">-&gt;</span>arp_queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>neigh<span class="token operator">-&gt;</span>ops<span class="token operator">-&gt;</span>solicit<span class="token punctuation">)</span>
                neigh<span class="token operator">-&gt;</span>ops<span class="token operator">-&gt;</span><span class="token function">solicit</span><span class="token punctuation">(</span>neigh<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照上面对于 struct neighbour 的操作函数 arp_hh_ops 的定义，solicit 调用的是 arp_solicit，在这里我们可以找到对于 arp_send_dst 的调用，创建并发送一个 arp 包，得到结果放在 struct dst_entry 里面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arp_send_dst</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> ptype<span class="token punctuation">,</span> __be32 dest_ip<span class="token punctuation">,</span>
                         <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> __be32 src_ip<span class="token punctuation">,</span>
                         <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>dest_hw<span class="token punctuation">,</span>
                         <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>src_hw<span class="token punctuation">,</span>
                         <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>target_hw<span class="token punctuation">,</span>
                         <span class="token keyword">struct</span> <span class="token class-name">dst_entry</span> <span class="token operator">*</span>dst<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        skb <span class="token operator">=</span> <span class="token function">arp_create</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> ptype<span class="token punctuation">,</span> dest_ip<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> src_ip<span class="token punctuation">,</span>
                         dest_hw<span class="token punctuation">,</span> src_hw<span class="token punctuation">,</span> target_hw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token function">skb_dst_set</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token function">dst_clone</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">arp_xmit</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们回到 neigh_resolve_output 中，当 ARP 发送完毕，就可以调用 dev_queue_xmit 发送二层网络包了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 *  __dev_queue_xmit - transmit a buffer
 *  @skb: buffer to transmit
 *  @accel_priv: private data used for L2 forwarding offload
 *
 *  Queue a buffer for transmission to a network device. 
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__dev_queue_xmit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>accel_priv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev <span class="token operator">=</span> skb<span class="token operator">-&gt;</span>dev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">netdev_queue</span> <span class="token operator">*</span>txq<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">Qdisc</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  txq <span class="token operator">=</span> <span class="token function">netdev_pick_tx</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> accel_priv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  q <span class="token operator">=</span> <span class="token function">rcu_dereference_bh</span><span class="token punctuation">(</span>txq<span class="token operator">-&gt;</span>qdisc<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>enqueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rc <span class="token operator">=</span> <span class="token function">__dev_xmit_skb</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> q<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> txq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像咱们在讲述硬盘块设备的时候讲过，每个块设备都有队列，用于将内核的数据放到队列里面，然后设备驱动从队列里面取出后，将数据根据具体设备的特性发送给设备。</p><p>网络设备也是类似的，对于发送来说，有一个发送队列 struct netdev_queue *txq。</p><p>这里还有另一个变量叫做 struct Qdisc，这个是什么呢？如果我们在一台 Linux 机器上运行 ip addr，我们能看到对于一个网卡，都有下面的输出。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ip</span> <span class="token expression">addr</span></span>
<span class="token number">1</span><span class="token operator">:</span> lo<span class="token operator">:</span> <span class="token operator">&lt;</span>LOOPBACK<span class="token punctuation">,</span>UP<span class="token punctuation">,</span>LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group <span class="token keyword">default</span> qlen <span class="token number">1000</span>
    link<span class="token operator">/</span>loopback <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> brd <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>
    inet <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">8</span> scope host lo
       valid_lft forever preferred_lft forever
    inet6 <span class="token operator">::</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">128</span> scope host 
       valid_lft forever preferred_lft forever
<span class="token number">2</span><span class="token operator">:</span> eth0<span class="token operator">:</span> <span class="token operator">&lt;</span>BROADCAST<span class="token punctuation">,</span>MULTICAST<span class="token punctuation">,</span>UP<span class="token punctuation">,</span>LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1400</span> qdisc pfifo_fast state UP group <span class="token keyword">default</span> qlen <span class="token number">1000</span>
    link<span class="token operator">/</span>ether fa<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">3</span>e<span class="token operator">:</span><span class="token number">75</span><span class="token operator">:</span><span class="token number">99</span><span class="token operator">:</span><span class="token number">08</span> brd ff<span class="token operator">:</span>ff<span class="token operator">:</span>ff<span class="token operator">:</span>ff<span class="token operator">:</span>ff<span class="token operator">:</span>ff
    inet <span class="token number">10.173</span><span class="token number">.32</span><span class="token number">.47</span><span class="token operator">/</span><span class="token number">21</span> brd <span class="token number">10.173</span><span class="token number">.39</span><span class="token number">.255</span> scope global noprefixroute dynamic eth0
       valid_lft <span class="token number">67104</span>sec preferred_lft <span class="token number">67104</span>sec
    inet6 fe80<span class="token operator">::</span>f816<span class="token operator">:</span><span class="token number">3</span>eff<span class="token operator">:</span>fe75<span class="token operator">:</span><span class="token number">9908</span><span class="token operator">/</span><span class="token number">64</span> scope link 
       valid_lft forever preferred_lft forever
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面有个关键字 qdisc pfifo_fast 是什么意思呢？qdisc 全称是 queueing discipline，中文叫排队规则。内核如果需要通过某个网络接口发送数据包，都需要按照为这个接口配置的 qdisc（排队规则）把数据包加入队列。</p><p>最简单的 qdisc 是 pfifo，它不对进入的数据包做任何的处理，数据包采用先入先出的方式通过队列。pfifo_fast 稍微复杂一些，它的队列包括三个波段（band）。在每个波段里面，使用先进先出规则。</p><p>三个波段的优先级也不相同。band 0 的优先级最高，band 2 的最低。如果 band 0 里面有数据包，系统就不会处理 band 1 里面的数据包，band 1 和 band 2 之间也是一样。</p><p>数据包是按照服务类型（Type of Service，TOS）被分配到三个波段里面的。TOS 是 IP 头里面的一个字段，代表了当前的包是高优先级的，还是低优先级的。</p><p>pfifo_fast 分为三个先入先出的队列，我们能称为三个 Band。根据网络包里面的 TOS，看这个包到底应该进入哪个队列。TOS 总共四位，每一位表示的意思不同，总共十六种类型。</p><img src="`+i+`" alt="img" style="zoom:33%;"><p>通过命令行 tc qdisc show dev eth0，我们可以输出结果 priomap，也是十六个数字。在 0 到 2 之间，和 TOS 的十六种类型对应起来。不同的 TOS 对应不同的队列。其中 Band 0 优先级最高，发送完毕后才轮到 Band 1 发送，最后才是 Band 2。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">tc</span> <span class="token expression">qdisc show dev eth0</span></span>
qdisc pfifo_fast <span class="token number">0</span><span class="token operator">:</span> root refcnt <span class="token number">2</span> bands <span class="token number">3</span> priomap  <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，__dev_xmit_skb 开始进行网络包发送。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">__dev_xmit_skb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">Qdisc</span> <span class="token operator">*</span>q<span class="token punctuation">,</span>
                 <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span>
                 <span class="token keyword">struct</span> <span class="token class-name">netdev_queue</span> <span class="token operator">*</span>txq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    rc <span class="token operator">=</span> q<span class="token operator">-&gt;</span><span class="token function">enqueue</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>to_free<span class="token punctuation">)</span> <span class="token operator">&amp;</span> NET_XMIT_MASK<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qdisc_run_begin</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token function">__qdisc_run</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">__qdisc_run</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Qdisc</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> quota <span class="token operator">=</span> dev_tx_weight<span class="token punctuation">;</span>
    <span class="token keyword">int</span> packets<span class="token punctuation">;</span>
     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">qdisc_restart</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>packets<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*
         * Ordered by possible occurrence: Postpone processing if
         * 1. we&#39;ve exceeded packet quota
         * 2. another process needs the CPU;
         */</span>
        quota <span class="token operator">-=</span> packets<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>quota <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">need_resched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">__netif_schedule</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token function">qdisc_run_end</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__dev_xmit_skb</code> 会将请求放入队列，然后调用 <code>__qdisc_run</code> 处理队列中的数据。<code>qdisc_restart</code> 用于数据的发送。根据注释中的说法，qdisc 的另一个功能是用于控制网络包的发送速度，因而如果超过速度，就需要重新调度，则会调用 <code>__netif_schedule</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">__netif_reschedule</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Qdisc</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">softnet_data</span> <span class="token operator">*</span>sd<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">;</span>
    <span class="token function">local_irq_save</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sd <span class="token operator">=</span> <span class="token function">this_cpu_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>softnet_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>next_sched <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>sd<span class="token operator">-&gt;</span>output_queue_tailp <span class="token operator">=</span> q<span class="token punctuation">;</span>
    sd<span class="token operator">-&gt;</span>output_queue_tailp <span class="token operator">=</span> <span class="token operator">&amp;</span>q<span class="token operator">-&gt;</span>next_sched<span class="token punctuation">;</span>
    <span class="token function">raise_softirq_irqoff</span><span class="token punctuation">(</span>NET_TX_SOFTIRQ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">local_irq_restore</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__netif_schedule</code> 会调用 <code>__netif_reschedule</code>，发起一个软中断 NET_TX_SOFTIRQ。咱们讲设备驱动程序的时候讲过，设备驱动程序处理中断，分两个过程，一个是屏蔽中断的关键处理逻辑，一个是延迟处理逻辑。当时说工作队列是延迟处理逻辑的处理方案，软中断也是一种方案。</p><p>在系统初始化的时候，我们会定义软中断的处理函数。例如，NET_TX_SOFTIRQ 的处理函数是 net_tx_action，用于发送网络包。还有一个 NET_RX_SOFTIRQ 的处理函数是 net_rx_action，用于接收网络包。接收网络包的过程咱们下一节解析。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">open_softirq</span><span class="token punctuation">(</span>NET_TX_SOFTIRQ<span class="token punctuation">,</span> net_tx_action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">open_softirq</span><span class="token punctuation">(</span>NET_RX_SOFTIRQ<span class="token punctuation">,</span> net_rx_action<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们来解析一下 net_tx_action。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __latent_entropy <span class="token keyword">void</span> <span class="token function">net_tx_action</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">softirq_action</span> <span class="token operator">*</span>h<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">softnet_data</span> <span class="token operator">*</span>sd <span class="token operator">=</span> <span class="token function">this_cpu_ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>softnet_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sd<span class="token operator">-&gt;</span>output_queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">Qdisc</span> <span class="token operator">*</span>head<span class="token punctuation">;</span>

        <span class="token function">local_irq_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        head <span class="token operator">=</span> sd<span class="token operator">-&gt;</span>output_queue<span class="token punctuation">;</span>
        sd<span class="token operator">-&gt;</span>output_queue <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        sd<span class="token operator">-&gt;</span>output_queue_tailp <span class="token operator">=</span> <span class="token operator">&amp;</span>sd<span class="token operator">-&gt;</span>output_queue<span class="token punctuation">;</span>
        <span class="token function">local_irq_enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">struct</span> <span class="token class-name">Qdisc</span> <span class="token operator">*</span>q <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token class-name">spinlock_t</span> <span class="token operator">*</span>root_lock<span class="token punctuation">;</span>

            head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next_sched<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token function">qdisc_run</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们会发现，net_tx_action 还是调用了 qdisc_run，还是会调用 __qdisc_run，然后调用 qdisc_restart 发送网络包。</p><p>我们来看一下 qdisc_restart 的实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">qdisc_restart</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Qdisc</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>packets<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">netdev_queue</span> <span class="token operator">*</span>txq<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">;</span>
        <span class="token class-name">spinlock_t</span> <span class="token operator">*</span>root_lock<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">;</span>
        bool validate<span class="token punctuation">;</span>

        <span class="token comment">/* Dequeue packet */</span>
        skb <span class="token operator">=</span> <span class="token function">dequeue_skb</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>validate<span class="token punctuation">,</span> packets<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

        root_lock <span class="token operator">=</span> <span class="token function">qdisc_lock</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dev <span class="token operator">=</span> <span class="token function">qdisc_dev</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        txq <span class="token operator">=</span> <span class="token function">skb_get_tx_queue</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token function">sch_direct_xmit</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> q<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> txq<span class="token punctuation">,</span> root_lock<span class="token punctuation">,</span> validate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>qdisc_restart 将网络包从 Qdisc 的队列中拿下来，然后调用 sch_direct_xmit 进行发送。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sch_direct_xmit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">Qdisc</span> <span class="token operator">*</span>q<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">netdev_queue</span> <span class="token operator">*</span>txq<span class="token punctuation">,</span>
            <span class="token class-name">spinlock_t</span> <span class="token operator">*</span>root_lock<span class="token punctuation">,</span> bool validate<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> NETDEV_TX_BUSY<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">netif_xmit_frozen_or_stopped</span><span class="token punctuation">(</span>txq<span class="token punctuation">)</span><span class="token punctuation">)</span>
            skb <span class="token operator">=</span> <span class="token function">dev_hard_start_xmit</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> txq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dev_xmit_complete</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* Driver sent out skb successfully or skb was consumed */</span>
        ret <span class="token operator">=</span> <span class="token function">qdisc_qlen</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">/* Driver returned NETDEV_TX_BUSY - requeue skb */</span>
        ret <span class="token operator">=</span> <span class="token function">dev_requeue_skb</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 sch_direct_xmit 中，调用 dev_hard_start_xmit 进行发送，如果发送不成功，会返回 NETDEV_TX_BUSY。这说明网络卡很忙，于是就调用 dev_requeue_skb，重新放入队列。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span><span class="token function">dev_hard_start_xmit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>first<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">netdev_queue</span> <span class="token operator">*</span>txq<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb <span class="token operator">=</span> first<span class="token punctuation">;</span>
    <span class="token keyword">int</span> rc <span class="token operator">=</span> NETDEV_TX_OK<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>skb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>next <span class="token operator">=</span> skb<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        rc <span class="token operator">=</span> <span class="token function">xmit_one</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> txq<span class="token punctuation">,</span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        skb <span class="token operator">=</span> next<span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">netif_xmit_stopped</span><span class="token punctuation">(</span>txq<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> skb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rc <span class="token operator">=</span> NETDEV_TX_BUSY<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>      
        <span class="token punctuation">}</span>       
    <span class="token punctuation">}</span>   
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 dev_hard_start_xmit 中，是一个 while 循环。每次在队列中取出一个 sk_buff，调用 xmit_one 发送。</p><p>接下来的调用链为：xmit_one-&gt;netdev_start_xmit-&gt;__netdev_start_xmit。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token class-name">netdev_tx_t</span> <span class="token function">__netdev_start_xmit</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">net_device_ops</span> <span class="token operator">*</span>ops<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> bool more<span class="token punctuation">)</span>          
<span class="token punctuation">{</span>
    skb<span class="token operator">-&gt;</span>xmit_more <span class="token operator">=</span> more <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ops<span class="token operator">-&gt;</span><span class="token function">ndo_start_xmit</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候，已经到了设备驱动层了。我们能看到，drivers/net/ethernet/intel/ixgb/ixgb_main.c 里面有对于这个网卡的操作的定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">net_device_ops</span> ixgb_netdev_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>ndo_open               <span class="token operator">=</span> ixgb_open<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_stop               <span class="token operator">=</span> ixgb_close<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_start_xmit         <span class="token operator">=</span> ixgb_xmit_frame<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_set_rx_mode        <span class="token operator">=</span> ixgb_set_multi<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_validate_addr      <span class="token operator">=</span> eth_validate_addr<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_set_mac_address    <span class="token operator">=</span> ixgb_set_mac<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_change_mtu         <span class="token operator">=</span> ixgb_change_mtu<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_tx_timeout         <span class="token operator">=</span> ixgb_tx_timeout<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_vlan_rx_add_vid    <span class="token operator">=</span> ixgb_vlan_rx_add_vid<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_vlan_rx_kill_vid   <span class="token operator">=</span> ixgb_vlan_rx_kill_vid<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_fix_features       <span class="token operator">=</span> ixgb_fix_features<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>ndo_set_features       <span class="token operator">=</span> ixgb_set_features<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里面，我们可以找到对于 ndo_start_xmit 的定义，调用 ixgb_xmit_frame。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">netdev_tx_t</span> <span class="token function">ixgb_xmit_frame</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>netdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ixgb_adapter</span> <span class="token operator">*</span>adapter <span class="token operator">=</span> <span class="token function">netdev_priv</span><span class="token punctuation">(</span>netdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ixgb_tx_queue</span><span class="token punctuation">(</span>adapter<span class="token punctuation">,</span> count<span class="token punctuation">,</span> vlan_id<span class="token punctuation">,</span> tx_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* Make sure there is space in the ring for the next send. */</span>
        <span class="token function">ixgb_maybe_stop_tx</span><span class="token punctuation">(</span>netdev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>adapter<span class="token operator">-&gt;</span>tx_ring<span class="token punctuation">,</span> DESC_NEEDED<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> NETDEV_TX_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ixgb_xmit_frame 中，我们会得到这个网卡对应的适配器，然后将其放入硬件网卡的队列中。</p><p>至此，整个发送才算结束。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> <strong>总结时刻</strong></h2><p>这一节，我们继续解析了发送一个网络包的过程，我们整个过程的图画在了下面。</p><figure><img src="`+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个过程分成几个层次。</p><ul><li>VFS 层：write 系统调用找到 struct file，根据里面的 file_operations 的定义，调用 sock_write_iter 函数。sock_write_iter 函数调用 sock_sendmsg 函数。</li><li>Socket 层：从 struct file 里面的 private_data 得到 struct socket，根据里面 ops 的定义，调用 inet_sendmsg 函数。</li><li>Sock 层：从 struct socket 里面的 sk 得到 struct sock，根据里面 sk_prot 的定义，调用 tcp_sendmsg 函数。</li><li>TCP 层：tcp_sendmsg 函数会调用 tcp_write_xmit 函数，tcp_write_xmit 函数会调用 tcp_transmit_skb，在这里实现了 TCP 层面向连接的逻辑。</li><li>IP 层：扩展 struct sock，得到 struct inet_connection_sock，根据里面 icsk_af_ops 的定义，调用 ip_queue_xmit 函数。</li><li>IP 层：ip_route_output_ports 函数里面会调用 fib_lookup 查找路由表。FIB 全称是 Forwarding Information Base，转发信息表，也就是路由表。</li><li>在 IP 层里面要做的另一个事情是填写 IP 层的头。</li><li>在 IP 层还要做的一件事情就是通过 iptables 规则。</li><li>MAC 层：IP 层调用 ip_finish_output 进行 MAC 层。</li><li>MAC 层需要 ARP 获得 MAC 地址，因而要调用 ___neigh_lookup_noref 查找属于同一个网段的邻居，他会调用 neigh_probe 发送 ARP。</li><li>有了 MAC 地址，就可以调用 dev_queue_xmit 发送二层网络包了，它会调用 __dev_xmit_skb 会将请求放入队列。</li><li>设备层：网络包的发送会触发一个软中断 NET_TX_SOFTIRQ 来处理队列中的数据。这个软中断的处理函数是 net_tx_action。</li><li>在软中断处理函数中，会将网络包从队列上拿下来，调用网络设备的传输函数 ixgb_xmit_frame，将网络包发到设备的队列上去。</li></ul><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> <strong>课堂练习</strong></h2><p>上一节你应该通过 tcpdump 看到了 TCP 包头的格式，这一节，请你查看一下 IP 包的格式以及 ARP 的过程。</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>老师。应用层调用socket 接口发送数据是到哪个阶段就返回了？是数据写到qdisc中应用就可以返回了吗？还是要等到写到硬件网卡中？<br> 作者回复: 发起软中断就返回</p><p>老师请问neigh_probe 发送 ARP后还需要阻塞等待其他主机返回mac吗，如果没有收到呢<br> 作者回复: 要等待返回，要不然不知道mac发不出去</p><p>例如 192.168.2.0/24 和 192.168.0.0/16 都能匹配 192.168.2.100/24。<br> 192.168.0.0/16为什么能匹配192.168.2.100/24 呢？其实对于目的IP我们是不知道子网掩码的，所以192.168.2.100/24这里的24感觉有点迷惑，如果确定它的掩码是24位，那和16位掩码的那个规则就不匹配了吧。<br> 作者回复: 只要通过本地的子网掩码算一下。192.168.2.100的前16位能够和192.168（192.168.0.0/16）完全一致，则说明能够匹配192.168.0.0/16。同理192.168.2.100的前24位能够和192.168.2（192.168.2.0/24）完全一致，则说明能够匹配192.168.2.0/24</p><p>发个包就干了这么多事！所以性能并不很好，追求性能还是要用dpdk<br> 网友回复：linux内核是通用型的，使用还是较广，基础设施等专用的可以上dpdk或bpf</p><p>老师，请教下qos功能是否也和硬件有关系？pfifo_fast是需要硬件支持的吗？<br> 作者回复: 不需要，是内核的功能</p><p>最近用go实现了rtp的协议，协议头填充和字节大小计算等等很类似，这节内容有种似曾相识的感觉，借鉴下可以实现的更牛逼，哈<br> 作者回复: 赞，自己实现RTP，牛</p><p>发送数据包时，源Mac地址是由协议栈软件加上的吗，还是等数据包到网卡后由网卡硬件自动加上的？<br> 源Mac地址现在一般是写死在网卡里的吗？还是维护在软件协议栈里的一个变量？<br> 作者回复: 内核协议栈加上的。mac地址可以通过命令修改的</p><p>设备层：网络包的发送回(这里应该是会吧？)触发一个软中断 NET_TX_SOFTIRQ 来处理队列中的数据。这个软中断的处理函数是 net_tx_action。<br> 在软中断处理函数中，会将网络包从队列上拿下来，调用网络设备的传输函数 ixgb_xmit_frame，将网络包发的(这里应该是到吧？)设备的队列上去<br> 作者回复: 是的，谢谢指正</p>',129),d=[r];function v(m,b){return s(),a("div",null,d)}const f=n(k,[["render",v],["__file","M46-发送网络包（下）.html.vue"]]);export{f as default};
