import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,d as l}from"./app-cdabc73c.js";const d={},o=l(`<h1 id="cosmos-initldr" tabindex="-1"><a class="header-anchor" href="#cosmos-initldr" aria-hidden="true">#</a> Cosmos\\initldr\\</h1><h4 id="文件夹-ldrkrl-11-12-二级引导器功能模块" tabindex="-1"><a class="header-anchor" href="#文件夹-ldrkrl-11-12-二级引导器功能模块" aria-hidden="true">#</a> <code>文件夹 ldrkrl</code>: [11\\12] 二级引导器功能模块</h4><p>。。。</p><blockquote><p>有相同的文件夹</p><p>打包工具 lmoskrlimg <code>-m</code> k <code>-lhf</code> initldrimh.bin <code>-o</code> Cosmos.eki <code>-f</code> initldrkrl.bin initldrsve.bin ⇒ 输出<mark>Cosmos.eki 映像文件</mark></p></blockquote><h5 id="initldrimh-grub-头" tabindex="-1"><a class="header-anchor" href="#initldrimh-grub-头" aria-hidden="true">#</a> initldrimh - GRUB 头</h5><p><code>imginithead.asm</code>: 汇编部分</p><pre><code>1. 既能让 GRUB 识别，又能设置 C 语言运行环境，用于调用 C 函数
2. 初始化CPU中寄存器，加载GDT全局描述符，从实模式切换到保护模式
</code></pre><p><code>inithead.c</code>: C语言部分，用于放置二级引导器到指定内存中</p><ol><li><p>它的主要功能是查找二级引导器的核心文件——initldrkrl.bin，然后把它放置到特定的内存地址上</p><ul><li>写initldrsve.bin文件【GRUB中断设计】到特定的内存中</li><li>写initldrkrl.bin文件【GRUB主模块核心入口】到特定的内存中</li><li>在映像文件中查找对应的文件</li></ul></li><li><p>把映像文件中的 initldrsve.bin 文件和 initldrkrl.bin 文件写入到特定的内存地址空间中，具体地址在上面代码中的宏有详细定义</p></li></ol><h5 id="initldrsve-grub-中断设计" tabindex="-1"><a class="header-anchor" href="#initldrsve-grub-中断设计" aria-hidden="true">#</a> initldrsve - GRUB 中断设计</h5><p><strong>realintsve.~~<code>16</code>~~asm</strong>: 实现调用BIOS中断的功能</p><h5 id="initldrkrl-grub-主模块核心入口" tabindex="-1"><a class="header-anchor" href="#initldrkrl-grub-主模块核心入口" aria-hidden="true">#</a> initldrkrl - GRUB 主模块核心入口</h5><p><strong>ldrkrl<code>32</code>.asm</strong>: 汇编部分</p><p><code>ldrkrlentry.c</code>: 【总裁\\交代】C语言部分</p><ul><li><code>bstartparm.c</code>: 【经理\\管理】实现收集机器信息建立页面数据 <ul><li>1 检查 CPU 模式 2 获取内存布局 3 初始化内核栈 4 放置内核文件 5 放置字库文件 6 建立 MMU 页表 7 设置图像模式 <ul><li>【帮工\\完成】 <ul><li><code>chkcpmm.c</code>: 实现检查CPU工作模式和内存视图</li><li><code>fs.c</code>: 实现解析内核映像文件的功能</li><li><code>graph.c</code>: 实现切换显卡图形模式</li><li><code>vgastr.c</code>: 实现字符串输出</li></ul></li></ul></li></ul></li></ul>`,15),c=[o];function n(t,a){return e(),r("div",null,c)}const m=i(d,[["render",n],["__file","D12-Cosmos-initldr.html.vue"]]);export{m as default};
