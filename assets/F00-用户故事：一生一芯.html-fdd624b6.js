import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as n,a as e,b as r,e as i,d as l}from"./app-cdabc73c.js";const c="/assets/9b479384fa473ce9d9c8a021584425bf-bfc43553.jpg",s={},h=l('<h1 id="国庆策划02-来自课代表的学习锦囊" tabindex="-1"><a class="header-anchor" href="#国庆策划02-来自课代表的学习锦囊" aria-hidden="true">#</a> 国庆策划02｜来自课代表的学习锦囊</h1><p>你好，我是课程编辑小新。</p><p>这里是国庆特别策划的第二期，我特意邀请了两位“课代表”来分享一下他们学习方法。</p><p>第一位靳同学目前在中科院研究所实习。特别巧的是，第二季的课程我们选择了 RISC-V 体系结构，<u>而他之前就做过一个 RISC-V 处理器</u>。</p><p>第二位是青玉白露同学，他也是两季课程的老粉丝了，今年 5 月份的时候他在忙活面试，但还是抽出时间参与了第二季专栏目录的调研反馈。另外，听说国庆期间他的 flag，要是把前面更新的课都看完。</p><p>借此机会，也感谢这两位同学的积极参与，还有其他更多没“出镜”的潜水同学，也谢谢你们对这门课程的建议和支持。接下来，我们就听听“课代表”们的分享吧。</p><h2 id="靳同学" tabindex="-1"><a class="header-anchor" href="#靳同学" aria-hidden="true">#</a> @靳同学</h2><p>你好，我是靳培泽。</p><p>作为一名本科应届毕业生，现在我在中国科学院计算技术研究所的一个项目组中实习。</p><p>在之前的课程群中，我得知彭老师的课程要“进军”RISC-V 处理器设计，知道以后我很兴奋，因为那时我正在参加中国科学院大学的<u>“一生一芯”培养计划</u>，已经完成了当初的第一个“玩具”处理器。</p><h3 id="我之前做的-risc-v-处理器" tabindex="-1"><a class="header-anchor" href="#我之前做的-risc-v-处理器" aria-hidden="true">#</a> 我之前做的 RISC-V 处理器</h3><p>我做的是一个普通的五级流水 CPU，实现了所有 RV64I 指令并且能够上板运行交叉编译后的小程序（编译出来的结果一定要看看，不然有可能会编译出不支持的指令）。同时，我还为我的小 CPU“量身定做”了一个 LCD 显示屏模块，小 CPU 采用 MMIO 方式通过 DMEM 直接访问显存，在显示屏打印某些字符。这是突发奇想的一个实现，还是挺有趣的。</p><img src="'+c+'" alt="img" style="zoom:25%;"><p>本来我还打算与一位擅长游戏开发的朋友合作，进行一些小扩展，例如我向他提供库函数，让他来编写游戏。可惜到最后临近毕业，也没有能实现这个想法。</p><p>虽然我的这次项目代码量相当少，并且没有涉及到任何高级体系结构方面的实现，<em>但是它为我现在正在进行的、更深入的工作提供了很扎实的知识</em>。值得一提的是，这次开发过程中我采用的 difftest 差分测试，极大地提升了我的 debug 效率，感兴趣的朋友们可以去了解一下相关内容。</p><p>通过整个项目，<em>我直接体会到使用 RISC-V 设计处理器有多么简洁</em>，我相信这样的开源指令集也会在工业界和学术界一年比一年火爆。但现在大部分人对它还没太多了解，所以，我也想借这次机会为 RISC-V 的推广尽一份绵薄之力。于是，我就联系编辑，想看看有没有什么能帮上忙的，也对彭老师的教学内容和计划有了一定的了解。</p><h3 id="学习经验" tabindex="-1"><a class="header-anchor" href="#学习经验" aria-hidden="true">#</a> 学习经验</h3><p>这次很高兴能收到邀请，分享一些我在设计或者学习过程中的“踩坑”经验，希望对你有启发。</p><p>在理论学习过程中，碰到问题是一件在所难免的事。我在“一生一芯”学习期间有个比较重要的感受就是，我们首先应当学习的是<strong>如何获取知识</strong>的知识。听着是不是有点像绕口令？说简单点就是学习获取知识的方法。这方面我在下面贴一个链接，各位可以去观赏观赏。</p>',19),d={href:"https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md",target:"_blank",rel:"noopener noreferrer"},_={href:"https://ysyx.oscc.cc/docs/misc/ask.html",target:"_blank",rel:"noopener noreferrer"},m=l('<p>我的另一条经验就是<strong>理论和实践是一体两面</strong>，两者都重要。哪怕你觉得已经把理论全搞明白了，到了实践环节（coding）还是会出各种问题。</p><p>不过，不知道你是不是也有这样的体会：实践之前最折磨人的环节，就是花一段比较长的时间学理论。除非你积累足够深，不然想快速突击学几天就进入敲代码环节几乎不可能。</p><p>举个 cache 实现的例子。先从理论部分聊起，教科书上通常都是一些老生常谈的描述：</p><ol><li><p>地址映射方式包括直接映射、多路组相联、全相联；</p></li><li><p>write through 和 write back 方法；</p></li><li><p>write allocate 和 no write allocate 方法；</p></li><li><p>……</p></li></ol><p>知道了这些？就能立刻进行代码实践了么？<em>答案是否定的</em>。因为理论里“隐藏了”非常非常多的细节部分，<em>而这些细节涉及到你实践环节是顺利跑通还是举步维艰</em>。只停留在教科书理论，没有进行自主思考和探索，是无法进行实践的。</p><p>那怎么判断自己掌握的知识够不够呢？还是接着用 cache 实现为例，我们把要实现什么描述得再具体一些：假设我们现在要开始实现一个四路组相联，一个 cacheline 为 16B 的 4KB instruction cache。你可以想一想，前面列的那些知识点你掌握了，足够么？</p><p>显然还不够，所以我罗列了一系列问题，这些问题都是在实现 cache 过程中 <em>101% 会碰到的</em>，我们需要考虑清楚的问题，也邀请你试着回答一下：</p><ol><li><p>主存和 icache 的交互单位最小是多少？</p></li><li><p>更新主存时采用 write back，还是 write through?</p></li><li><p>如果采用 write back，那么需要对每个理论上的 line 进行怎样的改造？实现这种改造需要多少多余的 bit？</p></li><li><p>当 cache 读 miss 时，也就是在我们必须通过总线访问主存时，CPU 应该进行什么样的行为？在 cache 读取回 miss 的 line 后应该怎么办？是使用 read allocate 还是 read through？</p></li><li><p>如果使用 read allocate 的话，应该如何定位到该被替换的 cacheline？如何决定替换哪一组的哪一个 cacheline？</p></li><li><p>替换成功后，CPU 应该进行什么样的行为？</p></li></ol><p>并不是前面的理论学习不重要，而是我们通过理论学习环节，<em>对某个知识有了全局把握以后，还要结合更实际的问题来挑战自己，并且在摸索实现的过程里，把局部、具体的细节一一攻破</em>。这些细节可能很散，不比我们学理论需要的耐心少。<strong>但经历了这个环节</strong>，你才能真正在理论学习的基础上迈出下一步，拿出实践结果，从而在学习和工作里更快地成长。</p><p>最后，我想说的是，虽然我们有时在某种程度上只是被动去学习，但是我们也可以换个角度，主动给自己“出题”，驱动自己主动分析、解决问题，类似于“解谜游戏”一样。在我眼中，计算机领域具有它自己的独特魅力，出于兴趣的缘故，我以后也打算在计算机体系结构领域一直探索。</p><p>这次的分享就到这里，希望我们都能在学完这门课程后，跟着 LMOS 精进自身的技术功力，一起加油。</p><h2 id="青玉白露" tabindex="-1"><a class="header-anchor" href="#青玉白露" aria-hidden="true">#</a> @青玉白露</h2><p>你好，我是青玉白露，现在是在字节跳动做后端，今年校招刚入职。</p><p>作为彭东第一季课程的忠实“粉丝”，第二季我上线的时候就入手了。编辑听说我国庆准备把目前更新的课程都学完，邀请我分享自己的学习体会，这里我就简单聊聊我的收获和方法。</p><h3 id="学习收获" tabindex="-1"><a class="header-anchor" href="#学习收获" aria-hidden="true">#</a> 学习收获</h3><p>如果用一句话概括彭东老师这门课给我带来的收获，那就只能是：能让我把<strong>计算机体系从上到下、里里外外的脉络都了然于胸。</strong></p><p>现代计算机体系无非是硬件与软件的结合：</p><ol><li>硬件提供高效的计算能力、存储能力；</li><li>而软件则是各种应用，如操作系统、影音软件、游戏、工程软件等等。</li></ol><p>**那么，两者分别是怎么实现的？又是通过什么联系在一起的呢？**这门课给了我答案。</p><p>硬件，其实就是由各种基础元器件所构成的总和。理论上来说，所有的电路都可以通过直接画图的方式来表达，但是对于复杂电路就无能为力了，而 Verilog 语言则是让我们能够以编码的方式对电路进行抽象，让计算机来进行处理，生成我们所需要的电路。</p><p>软件，归根结底是依托于硬件所提供的各种“指令”，这些指令，就像是一个个不同的功能开关。软件基于这些功能开关，就能实现人们所想要的功能。至于机器语言、汇编语言、高级语言等等，也仅仅是指令不同层级的表述而已，一通百通，不外如是。</p><p>说得更具体一些，就拿前面手写 CPU 这个章节来说，我学到了怎么通过 Verilog 语言来编写 CPU，头一次站在“CPU 设计者”的视角上观察 CPU 是怎么工作的，还知道了怎么基于我所写的 CPU 实现一些简单的功能……</p><h3 id="学习方法" tabindex="-1"><a class="header-anchor" href="#学习方法" aria-hidden="true">#</a> 学习方法</h3><p>归纳一下我的学习方法，可以概括成三个关键词：<strong>兴趣为王、辐射四周、以点带面</strong>。</p><p><mark>兴趣为王</mark>很好理解。不管学习什么知识，兴趣是必不可少的东西，它是让你在学习过程中遇到问题还能继续坚持的动力。如果有兴趣，那就好好学；如果没有兴趣，<em>多想想诗与远方，人不可能原地踏步，必须一往无前。</em></p><p>而<mark>辐射四周</mark>的意思是基于课程提供的知识和线索，自己再做些额外扩展。在学习过程中，我会尽可能了解所学知识所涉及到的东西，有些东西课程里没讲，<em>但基于好奇心我会记录下来当时的疑问，之后自己去探索</em>。</p><p>举个例子，在学习手写 CPU 的章节过程中，我比较好奇的是 CPU 的基础硬件是怎么实现的？为此，我找到英特尔的介绍文档，了解到了从沙子到 CPU 最终成型的过程；我觉得对这个成形过程还不够了解，于是又回过头去看了电子管到晶体管的演变，数电和模电……</p><p>最后一招就是<mark>以点带面</mark>。学海无涯，但时间是有限的，我们的精力是有限的。虽然我说了可以通过辐射四周来扩展知识面，<u>但这并不意味着我们需要方方面面都刨根究底，只需要把握一个大致的脉络即可</u>。之后的某天，当你工作需要的时候，回过头来再去深究也不迟。<em>沿着这个思路，我会把课程里一些关键的要点记录下来，<u>成为日后深入探索的“索引”</u>。</em></p><h3 id="学习资料" tabindex="-1"><a class="header-anchor" href="#学习资料" aria-hidden="true">#</a> 学习资料</h3><p>最后给你列了一些我自己感觉不错的学习资料，供你参考：</p>',30),u={href:"https://www.bilibili.com/video/BV1tV41127Zr/?spm_id_from=333.337.search-card.all.click&vd_source=86ca4d393159d80212efa047854cb01f",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.bilibili.com/video/BV1Qr4y1H7i8/?spm_id_from=333.337.search-card.all.click&vd_source=86ca4d393159d80212efa047854cb01fhttps://www.bilibili.com/video/BV1Qr4y1H7i8/?spm_id_from=333.337.search-card.all.click&vd_source=86ca4d393159d80212efa047854cb01f",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.runoob.com/w3cnote/verilog-basic-syntax.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html",target:"_blank",rel:"noopener noreferrer"},k={href:"http://riscvbook.com/chinese/RISC-V-Reader-Chinese-v2p1.pdf",target:"_blank",rel:"noopener noreferrer"},w=e("p",null,"无论是学生时代，还是现在的工作中，我越来越觉得计算机学科的未来永无止境。漫漫征途中，很高兴能通过这门课程跟彭东老师结缘，跟优秀的同学们结缘。希望我的分享对你也有帮助，我们一起加油。",-1),C=e("p",null,"课代表分享的全部内容就是这些，也欢迎你留言区，聊聊自己的学习方法或者课程收获。",-1);function V(x,v){const a=t("ExternalLinkIcon");return p(),n("div",null,[h,e("p",null,[r("第一个链接是"),e("a",d,[r("提问的智慧"),i(a)]),r("，当时一经发出就被奉为经典，详细描述了提问的人事前应该做好什么，以及不该做什么。第二个是“一生一芯”的"),e("a",_,[r("提问模板"),i(a)]),r("。")]),m,e("ul",null,[e("li",null,[e("p",null,[e("a",u,[r("【科普】从沙子到芯片的制作过程"),i(a)])])]),e("li",null,[e("p",null,[e("a",f,[r("超形象鬼畜动画一看就懂，二极管工作原理"),i(a)])])]),e("li",null,[e("p",null,[e("a",b,[r("2.1 Verilog 基础语法 | 菜鸟教程"),i(a)])])]),e("li",null,[e("p",null,[e("a",g,[r("汇编语言入门教程"),i(a)])])]),e("li",null,[e("p",null,[e("a",k,[r("RISCV 中文手册"),i(a)])])])]),w,C])}const I=o(s,[["render",V],["__file","F00-用户故事：一生一芯.html.vue"]]);export{I as default};
