import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,d as p}from"./app-cdabc73c.js";const t="/assets/675341b47057e483713395b55eef7089-dde77efa.png",o="/assets/d39b0f2b3962d646133d450541fb75a6-180113d3.png",s="/assets/53cb2d05d9bc8e3131466e9802d2c6d3-d4c8868e.png",c="/assets/1ecca5bc07486a4d829263c8d78df667-54ab7387.png",d="/assets/fb32dd8a5847745d07a1b17254c75158-d808e84c.png",m={},i=p('<h1 id="_36-局部性原理-数据库性能跟不上-加个缓存就好了" tabindex="-1"><a class="header-anchor" href="#_36-局部性原理-数据库性能跟不上-加个缓存就好了" aria-hidden="true">#</a> 36 | 局部性原理：数据库性能跟不上，加个缓存就好了？</h1><p>平时进行服务端软件开发的时候，我们通常会把数据存储在数据库里。而服务端系统遇到的<code>第一个性能瓶颈</code>，往往就发生在<code>访问数据库</code>的时候。这个时候，大部分工程师和架构师会拿出一种叫作“<em>缓存</em>”的武器，通过使用 Redis 或者 Memcache 这样的开源软件，<em>在数据库前面提供一层缓存的数据，来缓解数据库面临的压力，提升服务端的程序性能</em>。</p><img src="'+t+'" alt="img" style="zoom:50%;"><p>在数据库前添加数据缓存是常见的性能优化方式</p><p>那么，不知道你有没有想过，这种添加缓存的策略一定是有效的吗？或者说，这种策略在什么情况下是有效的呢？如果从理论角度去分析，添加缓存一定是我们的最佳策略么？进一步地，如果我们对于访问性能的要求非常高，希望数据在 1 毫秒，乃至 100 微秒内完成处理，我们还能用这个添加缓存的策略么？</p><h2 id="理解局部性原理-判断热点数据" tabindex="-1"><a class="header-anchor" href="#理解局部性原理-判断热点数据" aria-hidden="true">#</a> 理解局部性原理：判断热点数据</h2><p>我们先来回顾一下，上一讲的这张不同存储器的性能和价目表。可以看到，不同的存储器设备之间，访问速度、价格和容量都有几十乃至上千倍的差异。</p><img src="'+o+'" alt="img" style="zoom:50%;"><p>以上一讲的 Intel 8265U 的 CPU 为例，它的 L1 Cache 只有 256K，L2 Cache 有个 1MB，L3 Cache 有 12MB。一共 13MB 的存储空间，如果按照 7 美元 /1MB 的价格计算，就要 91 美元。</p><p>我们的内存有 8GB，容量是 CPU Cache 的 600 多倍，按照表上的价格差不多就是 120 美元。如果按照今天京东上的价格，恐怕不到 40 美元。128G 的 SSD 和 1T 的 HDD，现在的价格加起来也不会超过 100 美元。虽然容量是内存的 16 倍乃至 128 倍，但是它们的访问速度却不到内存的 1/1000。</p><p>性能和价格的巨大差异，给我们工程师带来了一个挑战：**我们能不能既享受 CPU Cache 的速度，又享受内存、硬盘巨大的容量和低廉的价格呢？**你可以停下来自己思考一下，或者点击文章右上方的“请朋友读”，邀请你的朋友一起来思考这个问题。然后，再一起听我的讲解。</p><p>好了，现在我公布答案。想要同时享受到这三点，前辈们已经探索出了答案，那就是，存储器中数据的<strong>局部性原理</strong>（Principle of Locality）。我们可以利用这个局部性原理，<em>来制定管理和访问数据的策略</em>。这个局部性原理包括<strong>时间局部性</strong>（temporal locality）和<strong>空间局部性</strong>（spatial locality）这两种策略。</p><h3 id="_1-时间局部性" tabindex="-1"><a class="header-anchor" href="#_1-时间局部性" aria-hidden="true">#</a> 1 时间局部性</h3><p>我们先来看<strong>时间局部性</strong>。这个策略是说，<em>如果一个数据被访问了，那么<code>它在短时间内</code>还会被再次访问</em>。这么看这个策略有点奇怪是吧？我用一个简单的例子给你解释下，你一下就能明白了。</p><p>比如说，《哈利波特与魔法石》这本小说，我今天读了一会儿，没读完，明天还会继续读。同理，在一个电子商务型系统中，如果一个用户打开了 App，看到了首屏。我们推断他应该很快还会再次访问网站的其他内容或者页面，我们就将这个用户的个人信息，从存储在硬盘的数据库读取到内存的缓存中来。这利用的就是时间局部性。</p><img src="'+s+'" alt="img" style="zoom:50%;"><p>同一份数据在短时间内会反复多次被访问</p><h3 id="_2-空间局部性" tabindex="-1"><a class="header-anchor" href="#_2-空间局部性" aria-hidden="true">#</a> 2 空间局部性</h3><p>我们再来看<strong>空间局部性</strong>。这个策略是说，<em>如果一个数据被访问了，那么<code>和它相邻的数据</code>也很快会被访问</em>。</p><p>我们还拿刚才读《哈利波特与魔法石》的例子来说。我读完了这本书之后，感觉这书不错，所以就会借阅整套“哈利波特”。这就好比我们的程序，在访问了数组的首项之后，多半会循环访问它的下一项。因为，在存储数据的时候，数组内的多项数据会存储在相邻的位置。这就好比图书馆会把“哈利波特”系列放在一个书架上，摆放在一起，加载的时候，也会一并加载。我们去图书馆借书，往往会一次性把 7 本都借回来。</p><img src="'+c+'" alt="img" style="zoom:50%;"><p>相邻的数据会被连续访问</p><h3 id="_3-访问多-访问少" tabindex="-1"><a class="header-anchor" href="#_3-访问多-访问少" aria-hidden="true">#</a> 3 访问多 / 访问少</h3><p>有了时间局部性和空间局部性，我们不用再把所有数据都放在内存里，也不用都放在 HDD 硬盘上，<em>而是把访问次数多的数据</em>，放在贵但是快一点的存储器里，<em>把访问次数少的数据</em>，放在慢但是大一点的存储器里。这样组合使用内存、SSD 硬盘以及 HDD 硬盘，使得我们可以用最低的成本提供实际所需要的数据存储、管理和访问的需求。</p><h2 id="如何花最少的钱-装下亚马逊的所有商品" tabindex="-1"><a class="header-anchor" href="#如何花最少的钱-装下亚马逊的所有商品" aria-hidden="true">#</a> 如何花最少的钱，装下亚马逊的所有商品？</h2><p>了解了局部性原理，下面我用一些真实世界中的数据举个例子，带你做个小小的思维体操，来看一看通过局部性原理，利用不同层次存储器的组合，究竟会有什么样的好处。</p><p>我们现在要提供一个亚马逊这样的电商网站。我们假设里面有 6 亿件商品，如果每件商品需要 4MB 的存储空间（考虑到商品图片的话，4MB 已经是一个相对较小的估计了），那么一共需要 2400TB（ = 6 亿 × 4MB）的数据存储。</p><p><em>如果我们把数据都放在内存里面</em>，那就需要 3600 万美元（ = 2400TB/1MB × 0.015 美元 = 3600 万美元）。但是，这 6 亿件商品中，不是每一件商品都会被经常访问。比如说，有 Kindle 电子书这样的热销商品，也一定有基本无人问津的商品，比如偏门的缅甸语词典。</p><p><em>如果我们只在内存里放前 1% 的热门商品</em>，也就是 600 万件热门商品，<em>而把剩下的商品，放在机械式的 HDD 硬盘上</em>，那么，我们需要的存储成本就下降到 45.6 万美元（ = 3600 万美元 × 1% + 2400TB / 1MB × 0.00004 美元），是原来成本的 1.3% 左右。</p><p>这里我们用的就是<mark>时间局部性</mark>。我们把有用户访问过的数据，加载到内存中，一旦内存里面放不下了，我们就把最长时间没有在内存中被访问过的数据，从内存中移走，这个其实就是我们常用的 <strong>LRU</strong>（Least Recently Used）<strong>缓存算法</strong>。热门商品被访问得多，就会始终被保留在内存里，而冷门商品被访问得少，就只存放在 HDD 硬盘上，数据的读取也都是直接访问硬盘。即使加载到内存中，也会很快被移除。<em>越是热门的商品，越容易在内存中找到，也就更好地利用了内存的随机访问性能</em>。</p><p>那么，只放 600 万件商品真的可以满足我们实际的线上服务请求吗？这个就要看 LRU 缓存策略的<strong>缓存命中率</strong>（Hit Rate/Hit Ratio）了，也就是访问的数据中，可以在我们设置的内存缓存中找到的，占有多大比例。</p><p>内存的随机访问请求需要 100ns。这也就意味着，在极限情况下，内存可以支持 1000 万次随机访问。我们用了 24TB 内存，如果 8G 一条的话，意味着有 3000 条内存，<em>可以支持每秒 300 亿次</em>（ = 24TB/8GB × 1s/100ns）访问。以亚马逊 2017 年 3 亿的用户数来看，我们估算每天的活跃用户为 1 亿，这 1 亿用户每人平均会访问 100 个商品，<em>那么平均每秒访问的商品数量，就是 12 万次</em>。</p><p>但是如果数据没有命中内存，那么对应的数据请求就要访问到 HDD 磁盘了。刚才的图表中，我写了，一块 HDD 硬盘只能支撑每秒 100 次的随机访问，2400TB 的数据，以 4TB 一块磁盘来计算，有 600 块磁盘，<em>也就是能支撑每秒 6 万次</em>（ = 2400TB/4TB × 1s/10ms ）的随机访问。</p><blockquote><p>600 块磁盘构成了一个集群吗<br> 作者回复: 你好，并不一定是一个集群，通常很多服务器，一个主板上可以有8块乃至12块硬盘的接口。用50台服务器提供服务就可以了。</p></blockquote><p>这就意味着，所有的商品访问请求，都直接到了 HDD 磁盘，HDD 磁盘支撑不了这样的压力。<em><code>我们至少要 50% 的缓存命中率</code>，HDD 磁盘才能支撑对应的访问次数</em>。不然的话，我们<code>要么</code>选择添加更多数量的 HDD 硬盘，做到每秒 12 万次的随机访问，<code>或者</code>将 HDD 替换成 SSD 硬盘，让单个硬盘可以支持更多的随机访问请求。</p><img src="'+d+'" alt="img" style="zoom:50%;"><p>当然，这里我们只是一个简单的估算。在实际的应用程序中，</p><ol><li>查看一个商品的数据可能意味着不止一次的随机内存或者随机磁盘的访问。</li><li>对应的数据存储空间也不止要考虑数据，还需要考虑维护数据结构的空间，</li><li>而缓存的命中率和访问请求也要考虑均值和峰值的问题。</li></ol><p>通过这个估算过程，你需要理解，如何进行存储器的硬件规划。你需要考虑<mark>硬件的成本</mark>、<mark>访问的数据量</mark>以及<mark>访问的数据分布</mark>，<em>然后根据这些数据的估算，来组合不同的存储器</em>，能用尽可能低的成本支撑所需要的服务器压力。而当你用上了数据访问的局部性原理，组合起了多种存储器，你也就理解了怎么基于存储器层次结构，来进行硬件规划了。</p><h2 id="总结延伸" tabindex="-1"><a class="header-anchor" href="#总结延伸" aria-hidden="true">#</a> 总结延伸</h2><p>这一讲，我们讲解了计算机存储器层次结构中最重要的一个优化思路，就是局部性原理。</p><p>在实际的计算机日常的开发和应用中，我们对于数据的访问总是会存在一定的局部性。有时候，这个局部性是<mark>时间局部性</mark>，就是我们最近访问过的数据还会被反复访问。有时候，这个局部性是<mark>空间局部性</mark>，就是我们最近访问过数据附近的数据很快会被访问到。</p><p>而局部性的存在，使得我们可以在应用开发中使用<mark>缓存</mark>这个有利的武器。比如，通过将<mark>热点数据</mark>加载并保留在速度更快的存储设备里面，我们可以用更低的成本来支撑服务器。</p><p>通过亚马逊这个例子，我们可以看到，我们可以通过快速估算的方式，来判断这个添加缓存的策略是否能够满足我们的需求，以及在估算的服务器负载的情况下，需要规划多少硬件设备。这个*“估算 + 规划”*的能力，是每一个期望成长为架构师的工程师，必须掌握的能力。</p><p>最后，回到这一讲的开头，我问了你这样一个问题，在遇到性能问题，特别是访问存储器的性能问题的时候，是否可以简单地添加一层数据缓存就能让问题迎刃而解呢？今天这个亚马逊网站商品数据的例子，似乎给了我们一个“Yes”的答案。那么，这个答案是否放之四海皆准呢？后面的几讲，我们会深入各种应用场景，进一步来回答这个问题。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2><p>想要仔细了解各种存储器和局部性原理，你还是可以去读一读教科书。《<code>计算机组成与设计：硬件 / 软件接口</code>》的 5.1～5.2 小节，是一个很好的阅读材料。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考" aria-hidden="true">#</a> 课后思考</h2><p>我们今天拿了亚马逊的商品和用户访问数据做了例子。请你想一下，如果是拿商品数量更多的淘宝网来看，你可以估算一下，至少需要使用多少 DRAM 的内存，或者其他存储设备呢？</p><p>欢迎留言和我分享你的思考过程和最终答案。如果自己的力量无法解决，你也可以拉上你的朋友一起讨论。</p><blockquote><p>局部性原理真是计算机各类优化的基石，小到cpu cache，大到cdn。而且不仅仅是存储，java的jit也是利于局部性优化性能。任何东西只要不是均匀分布的，就有优化空间。加速大概率事件</p><p>我记得编程珠玑有一章中，专门考察了估算能力，老师关于亚马逊的估算真的是很赞。</p><p>感觉硬盘应该还是需要能够完全支撑用户访问, 因为一开始数据应该都是存放在硬盘中, 然后通过用户的不断点击来更新缓存? 不知道是不是这样<br> 作者回复: 是这样的。但是一般我们可以做缓存预热，也就是warm-up，预先把我们认为可能会高频访问的数据先加载到缓存里面来。</p></blockquote>',51),n=[i];function h(l,_){return a(),r("div",null,n)}const b=e(m,[["render",h],["__file","F36-局部性原理.html.vue"]]);export{b as default};
