import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/c5c61cdb1f7b85b8ec9a98ebda0dce80-7a2980b8.jpg",e="/assets/1b34e45ea4b5f4a69cyy51aa62f9220d-90ce27bb.jpg",o="/assets/d1604ayy3545abdec753563bbe466b50-68b184c2.jpg",c="/assets/538e9e73f8aec155fa81522d93c9dbef-33931acd.jpg",i="/assets/922220836e2a80beb0f74e414f477dd5-7f804376.jpg",u="/assets/2da3a251ce7fed772dc1a54cf828ab70-da810819.jpg",l="/assets/6881dd1483a19423367f57cae7c03023-a6e01b71.jpg",r="/assets/1ec498be7a9995abe4ee5c9c512039a0-c4140c4c.jpg",k="/assets/e1d582ef5034812aca94ca30665e8129-104d56a5.jpg",d={},m=p(`<h1 id="_26-延迟分配-提高内存利用率的三种机制" tabindex="-1"><a class="header-anchor" href="#_26-延迟分配-提高内存利用率的三种机制" aria-hidden="true">#</a> 26｜延迟分配：提高内存利用率的三种机制</h1><p>你好，我是 LMOS。</p><p>通过前面的学习，我相信你已经感觉到了物理内存资源的宝贵。为了尽可能有效利用它，操作系统在内存管理上花了很多心思，之前学过的虚拟内存、虚实结合的故事也佐证了这一点。</p><p>为了提高内存利用率，还有一些巧妙的机制等待我们探索。今天我就跟你聊聊其中的三种“玩法”，分别是写时复制、请求调页和 mmap 系统调用。这节课的代码，你可以从这里下载。</p><h2 id="写时复制" tabindex="-1"><a class="header-anchor" href="#写时复制" aria-hidden="true">#</a> 写时复制</h2><p>什么是写时复制呢？用极为通俗的语言可以这样概括：写时复制是一种计算机编程领域中的优化技术（Copy-on-write，简称 COW）。</p><p>其核心原理是，如果有多个应用同时请求相同资源，会共同获取相同的指针，指向相同的资源。这个资源或许是内存中的数据，又或许是硬盘中的文件，直到某个应用真正需要修改资源的内容时，操作系统才会真正复制一份该资源的专用副本给该应用，而其他应用所见的最初资源仍然保持不变，操作系统使得该过程对其他应用都是透明的。</p><p>COW 的优点是，如果应用没有修改该资源，就不会产生副本，因此多个应用只是在读取操作时可以共享同一份资源，从而节省内存空间。</p><p>关于 COW 的原理，我们先说到这里。接下来，我们研究一下实际的 Linux 系统是如何应用 COW 的。</p><p>Linux 下对 COW 最直接的应用就是 fork 系统使用，fork 是建立进程的系统调用，因为我们现在还没有讲到进程，你先把进程当成运行中的应用就行。</p><p>在 Linux 系统中，一个应用调用 fork 创建另一个应用时，会复制一些当前应用的数据结构，比如 task_struct（代表一个运行中的应用）、mm_struct（代表应用的内存）、vm_area_struct（代表应用的虚拟内存空间）、files_struct（应用打开的文件）等等。</p><p>但是创建的时候，并不会把当前应用所有占用的内存页复制一份，而是先让新建应用与当前应用共用相同的内存页。只有新建应用或者当前应用中的一个，对内存页进行修改时，Linux 系统才会分配新的页面并进行数据的复制。</p><p>光看文字描述你可能还是没法领会，让我们写一个小程序开开胃，代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;当前应用id = %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;这是当前应用，当前应用id = %d 新建应用id = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;这是新建应用，新建应用id = %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如其名字一样，fork 代表分叉。这里 fork 以应用 A 为蓝本，复制出应用 B。因为当 fork 返回之前，系统中已经存在应用 A 和应用 B 了，所以应用 A 会从 fork 返回，应用 B 也会从 fork 返回。对于应用 A，fork 返回的是应用 B 的 ID；对于应用 B，fork 返回的是 0，系统通过修改应用 B 的 CPU 上下文数据，就能做到这一点。而 getpid 返回的是调用它的应用的 ID。</p><p>下面我们运行这段程序，运行结果如下图所示：</p><figure><img src="`+t+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>图中绿色部分是应用 A 和应用 B 都会运行的代码片段。我们看一下运行结果：应用 A 调用 fork 返回的 pid 与应用 B 调用 getpid 返回的 pid，是完全一样的。这验证了我们之前对 fork 的描述。</p><p>只不过第一个 printf 函数来自于应用 A 的运行，而第二个 printf 函数来自应用 B 的运行，为什么会出现这种情况呢？</p><p>这就是 fork 的妙处了，fork 会复制应用 A 的很多关键数据，但不会复制应用 A 对应的物理内存页面，而是要监测这些物理内存的读写，只有这样才能让应用 A 和应用 B 正常运行。</p><p>我画幅图表示一下这个过程，你看后就更清楚了：</p><figure><img src="'+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上面的图里，fork 把应用 A 的重要数据结构复制了一份，就生成了应用 B。有一点很重要，那就是应用 A 与应用 B 的页表<strong>指向了相同的物理内存页</strong>，并对其页表都设置为<strong>只读属性</strong>。</p><p>讲到这里，你可能会想：“这不是相当于内存共享吗？”这样想对也不对，我们得分成应用写入数据和读取数据这两个情况来讨论。</p><p>先看看写入数据会发生什么样的故事。这时无论是应用 A 还是应用 B 去写入数据，这里我们假定应用 B 向它的栈区、数据区、指令区等虚拟内存空间写入数据，结果一定是产生 MMU 转换地址失败。</p><p>这是因为对应的页表是只读的，即不允许写入。此时 MMU 就会继续通知 CPU 产生缺页异常中断，进而引起 Linux 内核缺页处理程序运行起来。然后，缺页处理程序执行完相应的检查，发现问题出在 COW 机制上，这时候才会把一页物理内存也分配给相关应用，解除页表的只读属性，并且把应用 A 对应的物理内存页的数据，复制到新分配的物理内存页中。</p><p>这个过程，你可以结合后面的示意图来加深理解，这张图描述了 COW 机制的过程：</p><figure><img src="'+o+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>观察上图，我给你总结一下写时复制的机制。COW 的机制保证了应用最终真正写入数据的时候，才能分配到宝贵的物理内存资源，只要不是写入数据，系统坚决不分配新的内存。</p><p>而前面你理解的共享内存，更符合这个情况的是读取数据，比如上图中的应用 A 与应用 B 的指令区，这大大节约了物理内存。由于不是完全复制所有的内存页面，所以 fork 的执行很快，最终效果就是 Linux 创建进程的性能非常高。</p><h2 id="请求调页" tabindex="-1"><a class="header-anchor" href="#请求调页" aria-hidden="true">#</a> 请求调页</h2><p>搞清楚了写时复制，我们来看看请求调页是怎么一回事儿。</p><p>请求调页是一种动态内存分配技术，更是一种优化技术，它把物理内存页面的分配推迟到不能再推迟为止。</p><p>请求调页机制之所以能实现，是因为应用程序开始运行时，并不会访问虚拟内存空间中的全部内容。由于程序的局部性原理，使得应用程序在执行的每个阶段，真正使用的内存页面只有一小部分，对于暂时不用的物理内存页，就可以分配由其它应用程序使用。因此，在不改变物理内存页面数量的情况下，请求调页能够提高系统的吞吐量。</p><p>请求调页与写时复制的区别是什么呢？当 MMU 转换失败，CPU 产生缺页异常时，在相关页表中请求调页没有对应的物理内存页面，需要分配一个新的物理内存页面，再填入到页表中；而写时复制有对应的物理内存页面，只不过是只读共享的，也需要分配一个新的物理内存页面填入页表中，并进行复制。</p><p>接下来，我们就来写写代码，验证一下，代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">size_t</span> msize <span class="token operator">=</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;当前应用id = %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>msize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;分配内存空间失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;分配内存空间地址:%p 大小:%ld\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> msize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//防止程序退出</span>
  <span class="token function">waitforKeyc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码主要是用 malloc 函数分配了 1000 个页面的内存。这 1000 个页面的内存空间是虚拟内存空间，而 waitforkeyc 函数的作用是让应用程序不要急着退出。好，让我们通过“sudo cat /proc/55285/smaps &gt; main.smap”命令，观察相应的统计数据。</p><p>这个命令是不是有点眼熟？在上一节课我们介绍过它，不过这次是读取 smaps 文件，其中的信息更为详细。</p><p>现在我们还是运行一下这段代码，看看结果如何。我把我的运行结果截图如下所示：</p><figure><img src="`+c+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图绿色方框里就是 malloc 分配的虚拟内存空间。可以看到，这次 malloc 没有在堆中分配，它选择了在映射区分配这个内存空间。绿色方框中 size 为 4100KB，这正是我们分配内存的大小（多出的大小是为了存放管理信息和对齐）。</p><p>我们需要重点关注的是其中的 RSS，它代表的是实际分配的物理内存，这部分物理内存现在已经分配好了，因此使用过程不会产生缺页中断。</p><p>同时，RSS 也包含了应用的私有内存和共享内存。我们看到这里已经分配了 4KB，即一个页面。按常理应该分配 1024 个物理内存页面，可是这里才分配了一个页面，这是为什么呢？</p><p>把这个问题想清楚，请求调页的原理你就明白了。<strong>如果你不向该内存中写入数据，它就不会真正分配物理内存，并且一次只分配一个物理内存页面，当你继续写入下一个虚拟内存页面时，它才会继续分配下一个物理内存页面。</strong></p><p>下面我们加一行代码，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">size_t</span> msize <span class="token operator">=</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;当前应用id = %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>msize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;分配内存空间失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0xaf</span><span class="token punctuation">,</span> msize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;分配内存空间地址:%p 大小:%ld\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> msize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//防止程序退出</span>
  <span class="token function">waitforKeyc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在代码中加入 memset 函数，用于把 malloc 函数分配的空间全部写入为 0xaf。</p><p>我们运行上述程序后，就会得到如下图所示的结果：</p><figure><img src="`+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们看到绿色方框中的有些数据发生了变化。RSS 代表的应用占用的物理内存，现在变成了 4100KB，而 Private_Dirty 代表应用的脏内存（即写入数据的内存）的大小，也是 4100KB，转换成页面刚好是 1025 个页面。1025 个页，减去 malloc 分配时写入的 1 个页，刚好和我们分配的 1024 页面是相等的。</p><p>现在我们知道了，请求调页是虚拟内存下的一个优化机制。在分配虚拟内存空间时，并不会直接分配相应的物理内存页面，而是由访问虚拟内存引起缺页异常，驱动操作系统分配物理内存页面，将物理内存分配推迟到使用的最后一刻，这就是请求调页。</p><h2 id="映射文件" tabindex="-1"><a class="header-anchor" href="#映射文件" aria-hidden="true">#</a> 映射文件</h2><p>在 Linux 等通用操作系统中，请求调页还有一个更深层次的应用，即映射文件。</p><p>一般情况下，我们操作文件要反复调用 read、write 等系统调用。而映射文件的方式能让我们像读写内存一样读写，就是我们只要读写一段内存，其数据就会反映在相应的文件中，这样操作文件就更加方便了。</p><p>在 Linux 中有个专门的系统调用，来实现这个映射文件的功能，它就是 mmap 调用。我们先来看一看 mmap 函数原型声明，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>start<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> prot<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述代码就是 mmap 函数的原型。是不是感觉参数很多，但我们每个参数都要搞清楚，我给你一个个列举出来，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>start：指定要映射的内存地址，一般设置为NULL，以便让操作系统自动分配合适的内存地址。
length：指定映射内存空间的字节数。
prot：指定映射内存的访问权限。可取如下几个值：PROT_READ（可读）, PROT_WRITE（可写）, PROT_EXEC（可执行）, PROT_NONE（不可访问）。
flags：指定映射内存的类型：MAP_SHARED（共享的） MAP_PRIVATE（私有的）, MAP_FIXED（表示必须使用 start 参数作为开始地址，如果失败不进行修正），其中，MAP_SHARED , MAP_PRIVATE必选其一，而 MAP_FIXED 则不推荐使用。
fd：指定要映射的打开的文件句柄。
offset：指定映射文件的偏移量，一般设置为 0 ，表示从文件头部开始映射。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>了解了 mmap 调用，是不是觉得可以进入写代码环节了？先别急，我们先熟悉熟悉 mmap 内部的原理和机制。</p><p>当调用 mmap() 时，Linux 会在当前应用（由 task_struct 表示）的虚拟内存（由 mm_struct 表示）中，创建一个 vm_area_struct 结构，让其指向虚拟内存中的某个内存区，并且把其中 vm_file 成员指向要映射的文件对象（file）。</p><p>然后，调用文件对象的 mmap 接口就会对 vm_area_struct 结构的 vm_ops 成员进行初始化。接着，vm_ops 成员会初始化具体文件系统的相关函数。</p><p>这里，我们不需要深入到文件系统，只要明白后面这个逻辑就行：当应用访问这个 vm_area_struct 结构表示的虚拟内存地址时，会产生缺页异常。随即在这个缺页异常的驱动下，最终会调用 vm_ops 中的相关函数，读取文件数据到物理内存页中并进行映射。</p><p>我们用一幅图来展示这一过程，如下所示：</p><figure><img src="`+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Linux 内核在调用 open 函数打开文件时，会在内存中建立诸如 file、dentry、inode、address_space 等数据结构实例，用来表示一个文件及其文件数据。这些结构的细节现在你不必了解，只需要了解它们之间的关系就足够了。</p><p>有了 open 返回的 fd 文件句柄，mmap 就可以工作了。mmap 调用首先会建立一个 vm_area_struct 结构，表示文件映射的虚拟内存。然后，根据参数 fd 文件句柄，找到打开的文件，即 file 结构，并且让它们关联起来。</p><p>最后，应用访问 mmap 函数返回的一个地址，应用程序访问这个地址就会导致缺页异常。在缺页异常处理程序的驱动下，CPU 会找到这个地址对应的 vm_operations_struct 结构，这个结构中封装了大量的虚拟内存操作 。</p><p>我们说说这些虚拟内存的操作是什么。第一次缺页异常处理时，会调用 vm_operations_struct 中的 map_pages 函数，用来给文件分配相应的物理内存页。不过这时虽然有了物理内存页，但里面并没有文件数据，所以内核会在页表上做标记，标记该页不存在于内存里，这样还是会导致缺页异常。</p><p>接下来这次异常操作就不同了，这次会调用 vm_operations_struct 结构中的 fault 函数，读取对应的文件数据，并和 address_space 结构联系起来。最终，CPU 就能访问文件的内容，一步步通过前面讲过的请求调页方式，把对应文件的内容加载到物理内存中了。</p><p>下面我们写代码测试一下，代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;当前应用id = %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当前目录下打开或者建立testmmap.bin文件</span>
  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;./testmmap.bin&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token operator">|</span>O_CREAT<span class="token punctuation">,</span> <span class="token number">777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    <span class="token comment">//建立文件映射</span>
  buf <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ<span class="token operator">|</span>PROT_WRITE<span class="token punctuation">,</span> MAP_PRIVATE<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;映射文件失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;映射文件的内存地址:%p 大小:%ld\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//防止程序退出</span>
  <span class="token function">waitforKeyc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中先调用 open 函数，这个函数带有 O_CREAT 标志，表示打开一个 testmmap.bin 文件，若文件不存在，就会新建一个名为 testmmap.bin 的文件。接着会调用 mmap 函数建立文件映射，虚拟内存区间由操作系统自动选择，长度为 4KB，该区间可以读写，而且是私有的，从文件头开始映射。请注意**，**这里我们没有对文件映射区进行任何操作。</p><p>现在我们运行一下这个应用，并查看一下对应进程的 smaps 文件信息，如下所示：</p><figure><img src="`+l+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如上图所示，mmap 返回的地址是 0x7f3fa9aaf000，大小为 4KB。对照右边绿色方框中的信息，刚好吻合。其中 RSS 为 0，说明此时没有分配物理内存，因为我们没有这个虚拟内存区间做任何操作。</p><p>下一步，我们往这个虚拟内存区间写入数据，代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;当前应用id = %d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;./testmmap.bin&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token operator">|</span>O_CREAT<span class="token operator">|</span>O_TRUNC<span class="token punctuation">,</span> S_IRWXU<span class="token operator">|</span>S_IRWXG<span class="token operator">|</span>S_IRWXO<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//因为mmap不能扩展空文件，空文件没有物理内存页，所以先要改变文件大小，否则会产生总线错误</span>
  <span class="token function">ftruncate</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  buf <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ<span class="token operator">|</span>PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;映射文件失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;映射文件的内存地址:%p 大小:%ld\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//向文件映射区间写入0xff</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//防止程序退出</span>
  <span class="token function">waitforKeyc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和前面代码相比，这里我们只是增加了扩展文件大小的功能，接着 mmap 文件，最后调用 memset 函数文件映射区的虚拟内存地址 buf 处，写入 0x1000 个 0xff。</p><p>我们运行一下这段代码，结果如下图所示：</p><figure><img src="`+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>对比前一张图，我们可以看出绿色方框的 RSS 中，Private_Dirty 的数据有所变化。这是因为 memset 函数写入数据导致缺页异常，从而分配物理内存页并关联到 testmmap.bin 文件。当 close 函数被调用时，物理内存页中的数据就会同步到硬盘中。我们可以打开 testmmap.bin 文件查看一下，即上图中蓝色方框中的数据。</p><p>讲到这里，我们就清楚了 mmap 函数的底层原理就是对请求调页的扩展。这种方式在处理超大文件的随机读写过程中，性能相当不错。当只有文件中一部分被读写的时候，就不必读取整个文件，占用大量内存了。</p><p>对内存资源“精打细算”的操作系统通过文件映射的机制，让物理内存页的分配管理更加精细了，等到应用实际要用到文件的哪一部分，系统才会去分配真正的物理内存。文件映射的内容到这里就告一段落了，其实在 Windows、Mac OSX 也有这种函数，只是名字和参数有所区别而已，感兴趣的话你可以课后自行探索一下。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>今天的内容讲完了，我们来回顾一下这节课的学习重点。</p><p>无论是写时复制还是请求调页，都是一种内存优化技术，需要 MMU 等硬件的支持才能实施。正是因为物理内存的使用被推迟了，才导致多个应用可以看到的物理内存页面还有很多，因为总是在最后需要内存的时刻，才会分配物理内存。这种延迟分配的方式，可以更好地利用空闲内存，同时运行更多的应用，总体上让系统产生更大的吞吐量。</p><p>写时复制是一种延迟分配内存的技术，可以优化内存的使用。我们一起研究了 fork 调用，发现 Linux 在 fork 创建新应用时使用了 COW（Copy-on-write）技术。fork 通过对当前应用的关键数据结构复制，即可得到一个新应用，但当前应用和新应用会以只读方式共享物理内存，只有当其中一个应用试图修改数据时，就会为其分配一个物理内存页，将数据复制到新的物理内存页中。</p><p>请求调页的核心思路就是将内存推迟到使用时才分配。由于应用程序的局部性原理，使得应用总是会访问常用的页面，而不是在一定时间内顺序访问所有的页面。请求调页的思路就是等到应用产生了缺页异常，才为其分配一个物理内存页，这大大提高物理内存的整体利用率。</p><p>最后，我们学习了文件映射，其作用是让开发人员能把操作内存的动作反映到相应的文件中。但是底层核心却是<strong>请求调页的扩展应用</strong>，它将映射到应用程序的虚拟内存区间。访问这个虚拟内存区间就会产生缺页异常，在其异常的驱动下，一次分配一个物理内存页，将文件内容加载到内存页，或者将其中的内容写入到文件中。</p><p>我把这节课的要点梳理成了后面这张导图，你可以做个参考。</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请简单说一下写时复制和请求调页的区别。</p><p>期待在留言区看到你的“随堂笔记”或者疑问，也可以试试回答别人的问题。如果觉得这节课还不错，别忘了分享给身边更多朋友。</p><blockquote><p>对于mmap而言，如果我对某个2G的文件进行顺序读，那么也应该到最后是把整个2G的文件加载到内存了吧。会出现因为内存不足导致之前读取过的数据已经被释放的情况吗？<br> 作者回复: 会的</p><hr><p>感觉像redis之类的数据库也可以使用mmap来增加性能<br> 作者回复: 是的</p><hr><p>请教老师几个问题：<br> Q1：A应用和B应用返回的pid为什么是一样的？<br> 文中提到“应用 A 调用 fork 返回的 pid 与应用 B 调用 getpid 返回的 pid，是完全一样的”，但A返回的是61618，B返回的是61819，是不同的，为什么说是相同的呢。<br> Q2：fork后，B应用的页表设置为只读，那A应用的页表也是只读吗？<br> Q3：fork后，B应用有写入采摘后会分配物理内存，同时还把A应用的内容拷贝到B应用，<br> 这个拷贝有什么意义？B应用是另外一个程序，有自己的数据，为什么需要A应用的数据？<br> 作者回复: Q1 不是一样的;<br> Q2 都是只读</p><hr><p>有个小疑问请问一下老师：<br> COW的写入只读内存页的时候触发的缺页异常，还有mmap的的两次缺页异常，中断处理程序是怎么跟普通的缺页异常区分开的。它们调用的都是同一个中断处理程序吗？是通过特殊的状态位吗？<br> 作者回复: 对 是同一个处理程序 页表的标志位</p><hr><p>写时复制的目的是减少不必要的调页，更好的利用内存空间，调页要引发中断，缺页异常，操作系统分配新的页？<br> 由于程序的局部性原理，总有一部分数据会被重复利用！利用写时复制，在cpu层面，减少维护数据一致性浪费的时间，提高cpu的效率（包括寻页址浪费的时间（cpu要扫盘））<br> 但在应用上具体问题具体分析，内核区cow肯定大大方便了！但如果是多核呢？在非内核区的应用层，多核加内存条容量大。二八定律的反面（长尾理论），看似在单核上的节俭到多核未必节俭的啊！（其它核晒太阳？）<br> 这也是哈佛结构在局部应用领域优于冯诺依曼结构，如果进程过多，时间轮片（每个进程执行一会）会越来越吃力！<br> 在分支预测层面，0.99的预测率多乘几次会发现，高不到哪里去！这就体现多核的优势，复杂问题简单化，每个核运行不同线程，减少分支预测次数！<br> 在内存管理上，写时复制混序用得过于频繁（中途假如需要反复换数据），在庞大的线程排队面前，还不如多开几个页面，更好的利用写时复制（不同类型不同页面）的优点，又减少了线程排队的时间！<br> 最后吐槽的新笔记本的x64cpu，不知是win操作系统还是cpu问题，不直接支持32位程序运行了！说明大名鼎鼎x86的cpu也不是固有印象，也在寻求变化！<br> 但说实话，并发等还处在增长阶段，操作系统和cpu估计还会相亲相爱共同进化下去，大胆假设，小心求证！俺不怕说错出丑！<br> 作者回复: 666666<br> 正确</p></blockquote>',96),v=[m];function b(f,g){return s(),a("div",null,v)}const h=n(d,[["render",b],["__file","J26-延迟分配的三种机制.html.vue"]]);export{h as default};
