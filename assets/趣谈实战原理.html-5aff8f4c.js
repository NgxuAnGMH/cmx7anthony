import{_ as i}from"./cbd634cd5256e372bcbebd4b95f21b34-655b5b18.js";import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as h,c as d,a as r,b as e,e as n,d as t}from"./app-cdabc73c.js";const o="/assets/image-20220708140454365-b3ec4a40.png",c={},p=t(`<h1 id="_10-11-12" tabindex="-1"><a class="header-anchor" href="#_10-11-12" aria-hidden="true">#</a> 10 + 11 + 12</h1><p>系统引导器（英语：boot loader，也称启动加载器，引导程序) 是在操作系统内核运行之前运行的一段小程序。</p><p>通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境带到一个合适的状态，以便为最终调用操作系统内核做好一切准备。</p><h2 id="虚拟机" tabindex="-1"><a class="header-anchor" href="#虚拟机" aria-hidden="true">#</a> 虚拟机</h2><p>虚拟机用软件的方式实现了真实计算机的全部功能特性，它在我们所使用的 Linux 下，其实就是个应用程序。使用虚拟机软件我们就可以在现有的 Linux 系统之上开发、编译、运行我们的操作系统了，省时且方便。</p><h3 id="cpu-内存-硬盘-网络" tabindex="-1"><a class="header-anchor" href="#cpu-内存-硬盘-网络" aria-hidden="true">#</a> CPU\\内存\\硬盘\\网络</h3><p>暂不添加硬盘</p><h3 id="_64位-显卡-硬件加速-嵌套虚拟化" tabindex="-1"><a class="header-anchor" href="#_64位-显卡-硬件加速-嵌套虚拟化" aria-hidden="true">#</a> 64位\\显卡\\硬件加速\\嵌套虚拟化</h3><h2 id="虚拟硬盘制作" tabindex="-1"><a class="header-anchor" href="#虚拟硬盘制作" aria-hidden="true">#</a> 虚拟硬盘制作</h2><ol><li><p>生成指定大小的纯二进制文件: sudo dd bs=512 if=/dev/zero of=hd.img count=204800</p></li><li><p>在其上建立一个文件系统:</p><ol><li>注册成Linux中的一个回环设备(块设备): sudo losetup /dev/loop0 hd.img</li><li>格式化该回环块设备，建立EXT4文件系统: sudo mkfs.ext4 -q /dev/loop0</li><li>建立目录并挂载到相应的位置。</li></ol></li><li><p><strong>在这中间 --&gt; 虚拟硬盘中!!!完成安装GRUB(1+2)进去 --&gt; 之后再进行格式转换</strong></p></li><li><p>转换虚拟硬盘的格式. 上述已经满足能够被Linux识别, 这一步实现让其能够被虚拟机(程序)本身识别.</p><p>最终目的是让虚拟机加载这个虚拟硬盘, 从而启动其中的操作系统.<br> 虚拟机(程序)提供了专用的转换格式的工具: VBoxManage convertfromraw ./hd.img --format VDI ./hd.vdi</p></li><li><p>安装虚拟硬盘到虚拟机</p><ol><li><p>第一步，配置硬盘控制器，我们使用 SATA 的硬盘，其控制器是 intelAHCI<br> VBoxManage storagectl HelloOS --name &quot;SATA&quot; --add sata --controller IntelAhci --portcount 1</p></li><li><p>第二步，(先删除虚拟硬盘UUID并重新分配), 挂载虚拟硬盘文件(将虚拟硬盘挂到虚拟机的硬盘控制器)。</p><p>VBoxManage closemedium disk ./hd.vdi<br> VBoxManage storageattach HelloOS --storagectl &quot;SATA&quot; --port 1 --device 0 --type hdd --medium ./hd.vdi</p></li><li><p>因为 VirtualBox 虚拟机用 UUID 管理硬盘，所以每次挂载硬盘时，都需要删除虚拟硬盘的 UUID 并重新分配。</p></li></ol></li></ol><h2 id="在虚拟硬盘上安装生成grub" tabindex="-1"><a class="header-anchor" href="#在虚拟硬盘上安装生成grub" aria-hidden="true">#</a> 在虚拟硬盘上安装生成GRUB</h2><h3 id="_1级引导器" tabindex="-1"><a class="header-anchor" href="#_1级引导器" aria-hidden="true">#</a> 1级引导器</h3><p>一级引导器专门负责<strong>执行具体的加载任务</strong>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#(已完成)第一步挂载虚拟硬盘文件为loop0回环设备</span>
<span class="token function">sudo</span> losetup /dev/loop0 hd.img
<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-o</span> loop ./hd.img ./hdisk/ <span class="token comment">#挂载硬盘文件</span>
<span class="token comment">#第二步安装GRUB</span>
<span class="token function">sudo</span> grub-install --boot-directory<span class="token operator">=</span>./hdisk/boot/ <span class="token parameter variable">--force</span> --allow-floppy /dev/loop0
<span class="token function">sudo</span> grub-install --boot-directory<span class="token operator">=</span>./hdisk/boot/ <span class="token parameter variable">--force</span> --allow-floppy /dev/loop70
；--boot-directory 指向先前我们在虚拟硬盘中建立的boot目录。
；--force --allow-floppy ：指向我们的虚拟硬盘设备文件/dev/loop0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，现在 /hdisk/boot/ 目录下多了一个 grub 目录，表示我们的 GRUB 安装成功。请注意，这里还要在 /hdisk/boot/grub/ 目录下建立一个 <strong>grub.cfg 文本文件</strong>，GRUB 正是通过这个文件内容，查找到<mark>我们的操作系统映像文件</mark>的。</p><p>我们需要在这个文件里写入如下内容。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>menuentry <span class="token string">&#39;HelloOS&#39;</span> <span class="token punctuation">{</span>
insmod part_msdos
insmod ext2
<span class="token builtin class-name">set</span> <span class="token assign-left variable">root</span><span class="token operator">=</span><span class="token string">&#39;hd0,msdos1&#39;</span> <span class="token comment">#我们的硬盘只有一个分区所以是&#39;hd0,msdos1&#39;</span>
multiboot2 /boot/HelloOS.eki <span class="token comment">#加载boot目录下的HelloOS.eki文件</span>
boot <span class="token comment">#引导启动</span>
<span class="token punctuation">}</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout_style</span><span class="token operator">=</span>menu
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">\${timeout}</span>&quot;</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">set</span> <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">10</span> <span class="token comment">#等待10秒钟自动启动</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;#加载boot目录下的HelloOS.eki文件&quot; --&gt; 一级引导器处理完加载任务, 就将流程引入到二级引导器</p><h3 id="_2级引导器" tabindex="-1"><a class="header-anchor" href="#_2级引导器" aria-hidden="true">#</a> 2级引导器</h3><p>二级引导器不是执行具体的加载任务的，而是<strong>解析内核文件、收集机器环境信息</strong>。</p><h4 id="_1-机器的信息-数据结构表示" tabindex="-1"><a class="header-anchor" href="#_1-机器的信息-数据结构表示" aria-hidden="true">#</a> 1 机器的信息(数据结构表示)</h4><h4 id="_2-功能模块的详解" tabindex="-1"><a class="header-anchor" href="#_2-功能模块的详解" aria-hidden="true">#</a> 2 功能模块的详解</h4><h4 id="_3-打包成内核映像文件" tabindex="-1"><a class="header-anchor" href="#_3-打包成内核映像文件" aria-hidden="true">#</a> 3 打包成内核映像文件</h4><p>流程图!!!</p><p>编译之后会形成三个.bin文件, 通过映像打包工具:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>**映像封装打包工具**: lmoskrlimg <span class="token parameter variable">-m</span> k <span class="token parameter variable">-lhf</span> initldrimh.bin <span class="token parameter variable">-o</span> Cosmos.eki <span class="token parameter variable">-f</span> initldrkrl.bin initldrsve.bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>二级引导器 --&gt; .eki文件 就完成了</p><h4 id="_4-流程图详解" tabindex="-1"><a class="header-anchor" href="#_4-流程图详解" aria-hidden="true">#</a> 4 流程图详解</h4><p>[.asm / .c] 这些文件主要都负责什么, 相互之间有什么特别关联.</p><ul><li>GRUB头: <mark>grubhead.bin</mark><ul><li>imginithead.asm: <ul><li>1 既能让 GRUB 识别，又能设置 C 语言运行环境，用于调用 C 函数</li><li>2 初始化CPU寄存器, 加载GDT全局描述符, 从实模式切换到保护模式</li></ul></li><li>inithead.c: 主要功能是查找二级引导器的核心文件——initldrkrl.bin，然后把它放置到特定的内存地址上</li></ul></li><li><mark>initldrsve.bin</mark>: 与BIOS的中断服务相关, 由 realintsve.asm 文件编译而成.</li><li>进入二级引导器主模块: <mark>initldrkrl.bin</mark><ul><li>检查 CPU 是否支持 64 位的工作模式、收集内存布局信息</li><li>接着初始化内核栈、放置好内核文件和字库文件</li><li>设置操作系统需要的 MMU 页表、设置显卡模式、释放中文字体文件</li><li>当二级引导器完成了上述功能后，就会显示我们操作系统的 logo，这标志着二级引导器所有的工作一切正常</li></ul></li></ul><h2 id="启动虚拟机运行自定义操作系统" tabindex="-1"><a class="header-anchor" href="#启动虚拟机运行自定义操作系统" aria-hidden="true">#</a> 启动虚拟机运行自定义操作系统</h2><p>VBoxManage startvm HelloOS #启动虚拟机</p><p>输入以上命令就会出现以下界面，出现 GRUB 引导菜单。</p><h2 id="内核映像" tabindex="-1"><a class="header-anchor" href="#内核映像" aria-hidden="true">#</a> 内核映像</h2><p>一个内核工程肯定是由复杂的多个文件组成，但是常见的系统引导器，例如GRUB，都只加载一个文件。因此多个文件需要封装打包成一个内核映像。</p><h3 id="具体组成的格式图" tabindex="-1"><a class="header-anchor" href="#具体组成的格式图" aria-hidden="true">#</a> 具体组成的格式图</h3><h3 id="相关的描述符-数据结构" tabindex="-1"><a class="header-anchor" href="#相关的描述符-数据结构" aria-hidden="true">#</a> 相关的描述符(数据结构)</h3><h3 id="封装打包的工具" tabindex="-1"><a class="header-anchor" href="#封装打包的工具" aria-hidden="true">#</a> 封装打包的工具</h3><h1 id="cosmos-lesson-41-3" tabindex="-1"><a class="header-anchor" href="#cosmos-lesson-41-3" aria-hidden="true">#</a> Cosmos-lesson-41.3</h1>`,39),b=r("br",null,null,-1),u={href:"http://codeline.sh",target:"_blank",rel:"noopener noreferrer"},_=r("br",null,null,-1),m=r("br",null,null,-1),k=r("br",null,null,-1),f=r("br",null,null,-1),g=r("br",null,null,-1),v=t('<h2 id="文件夹-vscode" tabindex="-1"><a class="header-anchor" href="#文件夹-vscode" aria-hidden="true">#</a> 文件夹 .vscode</h2><p>。<br> │ c_cpp_properties.json<br> │ launch.json<br> │ settings.json<br> │ tasks.json<br> │</p><h2 id="文件夹-apps" tabindex="-1"><a class="header-anchor" href="#文件夹-apps" aria-hidden="true">#</a> 文件夹 apps</h2><p>。<br> │ helloworld.c<br> │ love.c<br> │ oneuser.c<br> │</p><h2 id="文件夹-build" tabindex="-1"><a class="header-anchor" href="#文件夹-build" aria-hidden="true">#</a> 文件夹 build</h2><p>。<br> │ lmkfbuild<br> │ pretreatment.mkf<br> │ vbox.mkf<br> │</p><h2 id="文件夹-drivers" tabindex="-1"><a class="header-anchor" href="#文件夹-drivers" aria-hidden="true">#</a> 文件夹 drivers</h2><p>。<br> │ │ drvrfs.c<br> │ │ <code>drvtick.c</code>: [30] 设备驱动程序整体框架<br> │ │ drvuart.c<br> │ │</p><h3 id="文件夹-net" tabindex="-1"><a class="header-anchor" href="#文件夹-net" aria-hidden="true">#</a> 文件夹 net</h3><p>。。</p><h4 id="文件夹-doc" tabindex="-1"><a class="header-anchor" href="#文件夹-doc" aria-hidden="true">#</a> 文件夹 doc</h4><p>。。。<br> │ │ │ contrib.txt<br> │ │ │ FILES<br> │ │ │ mdns.txt<br> │ │ │ mqtt_client.txt<br> │ │ │ NO_SYS_SampleCode.c<br> │ │ │ ppp.txt<br> │ │ │ savannah.txt<br> │ │ │ ZeroCopyRx.c<br> │ │ │</p><h5 id="文件夹-doxygen" tabindex="-1"><a class="header-anchor" href="#文件夹-doxygen" aria-hidden="true">#</a> 文件夹 doxygen</h5>',13),x=r("br",null,null,-1),y=r("br",null,null,-1),w={href:"http://generate.sh",target:"_blank",rel:"noopener noreferrer"},U=r("br",null,null,-1),S=r("br",null,null,-1),C={href:"http://lwip.Doxyfile.cmake.in",target:"_blank",rel:"noopener noreferrer"},B=r("br",null,null,-1),q=r("br",null,null,-1),R=r("h6",{id:"文件夹-output",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#文件夹-output","aria-hidden":"true"},"#"),e(" 文件夹 output")],-1),G=r("p",null,[e("。。。。。"),r("br"),e(" │ │ index.html"),r("br"),e(" │ │")],-1),I=r("h4",{id:"文件夹-src",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#文件夹-src","aria-hidden":"true"},"#"),e(" 文件夹 src")],-1),M=r("br",null,null,-1),O=r("br",null,null,-1),P={href:"http://Filelists.mk",target:"_blank",rel:"noopener noreferrer"},j=r("br",null,null,-1),D=r("br",null,null,-1),L=t('<h5 id="文件夹-api" tabindex="-1"><a class="header-anchor" href="#文件夹-api" aria-hidden="true">#</a> 文件夹 api</h5><p>。。。。<br> │ │ │ api_lib.c<br> │ │ │ api_msg.c<br> │ │ │ err.c<br> │ │ │ if_api.c<br> │ │ │ netbuf.c<br> │ │ │ netdb.c<br> │ │ │ netifapi.c<br> │ │ │ sockets.c<br> │ │ │ tcpip.c<br> │ │ │</p><h5 id="文件夹-apps-1" tabindex="-1"><a class="header-anchor" href="#文件夹-apps-1" aria-hidden="true">#</a> 文件夹 apps</h5><p>。。。。</p><h6 id="文件夹-altcp-tls" tabindex="-1"><a class="header-anchor" href="#文件夹-altcp-tls" aria-hidden="true">#</a> 文件夹 altcp_tls</h6><p>。。。。。<br> │ │ │ │ altcp_tls_mbedtls.c<br> │ │ │ │ altcp_tls_mbedtls_mem.c<br> │ │ │ │ altcp_tls_mbedtls_mem.h<br> │ │ │ │ altcp_tls_mbedtls_structs.h<br> │ │ │ │</p><h6 id="文件夹-http" tabindex="-1"><a class="header-anchor" href="#文件夹-http" aria-hidden="true">#</a> 文件夹 http</h6><p>。。。。。<br> │ │ │ │ │ altcp_proxyconnect.c<br> │ │ │ │ │ fs.c<br> │ │ │ │ │ fsdata.c<br> │ │ │ │ │ fsdata.h<br> │ │ │ │ │ httpd.c<br> │ │ │ │ │ httpd_structs.h<br> │ │ │ │ │ http_client.c<br> │ │ │ │ │<br> │ │ │ │ ├####### 文件夹 fs<br> │ │ │ │ │ │ 404.html<br> │ │ │ │ │ │ index.html<br> │ │ │ │ │ │<br> │ │ │ │ │ └######## 文件夹 img<br> │ │ │ │ │ sics.gif<br> │ │ │ │ │<br> │ │ │ │ └####### 文件夹 makefsdata<br> │ │ │ │ makefsdata<br> │ │ │ │ makefsdata.c<br> │ │ │ │ readme.txt<br> │ │ │ │ tinydir.h<br> │ │ │ │</p><h6 id="文件夹-lwiperf" tabindex="-1"><a class="header-anchor" href="#文件夹-lwiperf" aria-hidden="true">#</a> 文件夹 lwiperf</h6><p>。。。。。<br> │ │ │ │ lwiperf.c<br> │ │ │ │</p><h6 id="文件夹-mdns" tabindex="-1"><a class="header-anchor" href="#文件夹-mdns" aria-hidden="true">#</a> 文件夹 mdns</h6><p>。。。。。<br> │ │ │ │ mdns.c<br> │ │ │ │</p><h6 id="文件夹-mqtt" tabindex="-1"><a class="header-anchor" href="#文件夹-mqtt" aria-hidden="true">#</a> 文件夹 mqtt</h6><p>。。。。。<br> │ │ │ │ mqtt.c<br> │ │ │ │</p><h6 id="文件夹-netbiosns" tabindex="-1"><a class="header-anchor" href="#文件夹-netbiosns" aria-hidden="true">#</a> 文件夹 netbiosns</h6><p>。。。。。<br> │ │ │ │ netbiosns.c<br> │ │ │ │</p><h6 id="文件夹-smtp" tabindex="-1"><a class="header-anchor" href="#文件夹-smtp" aria-hidden="true">#</a> 文件夹 smtp</h6><p>。。。。。<br> │ │ │ │ smtp.c<br> │ │ │ │</p><h6 id="文件夹-snmp" tabindex="-1"><a class="header-anchor" href="#文件夹-snmp" aria-hidden="true">#</a> 文件夹 snmp</h6><p>。。。。。<br> │ │ │ │ snmpv3.c<br> │ │ │ │ snmpv3_mbedtls.c<br> │ │ │ │ snmpv3_priv.h<br> │ │ │ │ snmp_asn1.c<br> │ │ │ │ snmp_asn1.h<br> │ │ │ │ snmp_core.c<br> │ │ │ │ snmp_core_priv.h<br> │ │ │ │ snmp_mib2.c<br> │ │ │ │ snmp_mib2_icmp.c<br> │ │ │ │ snmp_mib2_interfaces.c<br> │ │ │ │ snmp_mib2_ip.c<br> │ │ │ │ snmp_mib2_snmp.c<br> │ │ │ │ snmp_mib2_system.c<br> │ │ │ │ snmp_mib2_tcp.c<br> │ │ │ │ snmp_mib2_udp.c<br> │ │ │ │ snmp_msg.c<br> │ │ │ │ snmp_msg.h<br> │ │ │ │ snmp_netconn.c<br> │ │ │ │ snmp_pbuf_stream.c<br> │ │ │ │ snmp_pbuf_stream.h<br> │ │ │ │ snmp_raw.c<br> │ │ │ │ snmp_scalar.c<br> │ │ │ │ snmp_snmpv2_framework.c<br> │ │ │ │ snmp_snmpv2_usm.c<br> │ │ │ │ snmp_table.c<br> │ │ │ │ snmp_threadsync.c<br> │ │ │ │ snmp_traps.c<br> │ │ │ │</p><h6 id="文件夹-sntp" tabindex="-1"><a class="header-anchor" href="#文件夹-sntp" aria-hidden="true">#</a> 文件夹 sntp</h6><p>。。。。。<br> │ │ │ │ sntp.c<br> │ │ │ │</p><h6 id="文件夹-tftp" tabindex="-1"><a class="header-anchor" href="#文件夹-tftp" aria-hidden="true">#</a> 文件夹 tftp</h6><p>。。。。。<br> │ │ │ tftp_server.c<br> │ │ │</p><h5 id="文件夹-core" tabindex="-1"><a class="header-anchor" href="#文件夹-core" aria-hidden="true">#</a> 文件夹 core</h5><p>。。。。<br> │ │ │ │ altcp.c<br> │ │ │ │ altcp_alloc.c<br> │ │ │ │ altcp_tcp.c<br> │ │ │ │ def.c<br> │ │ │ │ dns.c<br> │ │ │ │ inet_chksum.c<br> │ │ │ │ init.c<br> │ │ │ │ ip.c<br> │ │ │ │ mem.c<br> │ │ │ │ memp.c<br> │ │ │ │ netif.c<br> │ │ │ │ pbuf.c<br> │ │ │ │ raw.c<br> │ │ │ │ stats.c<br> │ │ │ │ sys.c<br> │ │ │ │ tcp.c<br> │ │ │ │ tcp_in.c<br> │ │ │ │ tcp_out.c<br> │ │ │ │ timeouts.c<br> │ │ │ │ udp.c<br> │ │ │ │</p><h6 id="文件夹-ipv4" tabindex="-1"><a class="header-anchor" href="#文件夹-ipv4" aria-hidden="true">#</a> 文件夹 ipv4</h6><p>。。。。。<br> │ │ │ │ autoip.c<br> │ │ │ │ dhcp.c<br> │ │ │ │ etharp.c<br> │ │ │ │ icmp.c<br> │ │ │ │ igmp.c<br> │ │ │ │ ip4.c<br> │ │ │ │ ip4_addr.c<br> │ │ │ │ ip4_frag.c<br> │ │ │ │</p><h6 id="文件夹-ipv6" tabindex="-1"><a class="header-anchor" href="#文件夹-ipv6" aria-hidden="true">#</a> 文件夹 ipv6</h6><p>。。。。。<br> │ │ │ dhcp6.c<br> │ │ │ ethip6.c<br> │ │ │ icmp6.c<br> │ │ │ inet6.c<br> │ │ │ ip6.c<br> │ │ │ ip6_addr.c<br> │ │ │ ip6_frag.c<br> │ │ │ mld6.c<br> │ │ │ nd6.c<br> │ │ │</p><h5 id="文件夹-include" tabindex="-1"><a class="header-anchor" href="#文件夹-include" aria-hidden="true">#</a> 文件夹 include</h5><p>。。。。</p><h6 id="文件夹-compat" tabindex="-1"><a class="header-anchor" href="#文件夹-compat" aria-hidden="true">#</a> 文件夹 compat</h6><p>。。。。。<br> │ │ │ │ ├####### 文件夹 posix<br> │ │ │ │ │ │ netdb.h<br> │ │ │ │ │ │<br> │ │ │ │ │ ├######## 文件夹 arpa<br> │ │ │ │ │ │ inet.h<br> │ │ │ │ │ │<br> │ │ │ │ │ ├######## 文件夹 net<br> │ │ │ │ │ │ if.h<br> │ │ │ │ │ │<br> │ │ │ │ │ └######## 文件夹 sys<br> │ │ │ │ │ socket.h<br> │ │ │ │ │<br> │ │ │ │ └####### 文件夹 stdc<br> │ │ │ │ errno.h<br> │ │ │ │</p><h6 id="文件夹-lwip" tabindex="-1"><a class="header-anchor" href="#文件夹-lwip" aria-hidden="true">#</a> 文件夹 lwip</h6>',35),z=r("br",null,null,-1),E=r("br",null,null,-1),F=r("br",null,null,-1),V=r("br",null,null,-1),A=r("br",null,null,-1),H=r("br",null,null,-1),T=r("br",null,null,-1),N=r("br",null,null,-1),X=r("br",null,null,-1),K=r("br",null,null,-1),W=r("br",null,null,-1),Y=r("br",null,null,-1),Z=r("br",null,null,-1),$=r("br",null,null,-1),J=r("br",null,null,-1),Q=r("br",null,null,-1),rr=r("br",null,null,-1),er=r("br",null,null,-1),lr=r("br",null,null,-1),nr=r("br",null,null,-1),tr=r("br",null,null,-1),ir=r("br",null,null,-1),ar=r("br",null,null,-1),sr={href:"http://init.h.cmake.in",target:"_blank",rel:"noopener noreferrer"},hr=r("br",null,null,-1),dr=r("br",null,null,-1),or=r("br",null,null,-1),cr=r("br",null,null,-1),pr=r("br",null,null,-1),br=r("br",null,null,-1),ur=r("br",null,null,-1),_r=r("br",null,null,-1),mr=r("br",null,null,-1),kr=r("br",null,null,-1),fr=r("br",null,null,-1),gr=r("br",null,null,-1),vr=r("br",null,null,-1),xr=r("br",null,null,-1),yr=r("br",null,null,-1),wr=r("br",null,null,-1),Ur=r("br",null,null,-1),Sr=r("br",null,null,-1),Cr=r("br",null,null,-1),Br=r("br",null,null,-1),qr=r("br",null,null,-1),Rr=r("br",null,null,-1),Gr=r("br",null,null,-1),Ir=r("br",null,null,-1),Mr=r("br",null,null,-1),Or=r("code",null,"sys.h",-1),Pr=r("br",null,null,-1),jr=r("br",null,null,-1),Dr=r("br",null,null,-1),Lr=r("br",null,null,-1),zr=r("br",null,null,-1),Er=r("br",null,null,-1),Fr=r("br",null,null,-1),Vr=r("br",null,null,-1),Ar=r("br",null,null,-1),Hr=r("br",null,null,-1),Tr=r("br",null,null,-1),Nr=r("br",null,null,-1),Xr=r("br",null,null,-1),Kr=r("br",null,null,-1),Wr=r("br",null,null,-1),Yr=r("br",null,null,-1),Zr=r("br",null,null,-1),$r=r("br",null,null,-1),Jr=r("br",null,null,-1),Qr=r("br",null,null,-1),re=r("br",null,null,-1),ee=r("br",null,null,-1),le=r("br",null,null,-1),ne=r("br",null,null,-1),te=r("br",null,null,-1),ie=r("br",null,null,-1),ae=r("br",null,null,-1),se=r("br",null,null,-1),he=r("br",null,null,-1),de=r("br",null,null,-1),oe=r("br",null,null,-1),ce=r("br",null,null,-1),pe=r("br",null,null,-1),be=r("br",null,null,-1),ue=r("br",null,null,-1),_e=r("br",null,null,-1),me=r("br",null,null,-1),ke=r("br",null,null,-1),fe=r("br",null,null,-1),ge=r("br",null,null,-1),ve=r("br",null,null,-1),xe=r("br",null,null,-1),ye=r("br",null,null,-1),we=r("br",null,null,-1),Ue=r("br",null,null,-1),Se=r("br",null,null,-1),Ce=r("br",null,null,-1),Be=r("br",null,null,-1),qe=r("br",null,null,-1),Re=r("br",null,null,-1),Ge=r("br",null,null,-1),Ie=r("br",null,null,-1),Me=r("br",null,null,-1),Oe=r("br",null,null,-1),Pe=r("br",null,null,-1),je=r("br",null,null,-1),De=r("br",null,null,-1),Le=r("br",null,null,-1),ze=r("br",null,null,-1),Ee=r("br",null,null,-1),Fe=r("br",null,null,-1),Ve=r("br",null,null,-1),Ae=r("br",null,null,-1),He=r("br",null,null,-1),Te=r("br",null,null,-1),Ne=r("br",null,null,-1),Xe=r("br",null,null,-1),Ke=r("br",null,null,-1),We=r("br",null,null,-1),Ye=r("br",null,null,-1),Ze=r("br",null,null,-1),$e=r("br",null,null,-1),Je=t('<h6 id="文件夹-netif" tabindex="-1"><a class="header-anchor" href="#文件夹-netif" aria-hidden="true">#</a> 文件夹 netif</h6><p>。。。。。<br> │ │ │ │ bridgeif.h<br> │ │ │ │ bridgeif_opts.h<br> │ │ │ │ etharp.h<br> │ │ │ │ ethernet.h<br> │ │ │ │ ieee802154.h<br> │ │ │ │ lowpan6.h<br> │ │ │ │ lowpan6_ble.h<br> │ │ │ │ lowpan6_common.h<br> │ │ │ │ lowpan6_opts.h<br> │ │ │ │ slipif.h<br> │ │ │ │ zepif.h<br> │ │ │ │<br> │ │ │ └####### 文件夹 ppp<br> │ │ │ │ ccp.h<br> │ │ │ │ chap-md5.h<br> │ │ │ │ chap-new.h<br> │ │ │ │ chap_ms.h<br> │ │ │ │ eap.h<br> │ │ │ │ ecp.h<br> │ │ │ │ eui64.h<br> │ │ │ │ fsm.h<br> │ │ │ │ ipcp.h<br> │ │ │ │ ipv6cp.h<br> │ │ │ │ lcp.h<br> │ │ │ │ magic.h<br> │ │ │ │ mppe.h<br> │ │ │ │ ppp.h<br> │ │ │ │ pppapi.h<br> │ │ │ │ pppcrypt.h<br> │ │ │ │ pppdebug.h<br> │ │ │ │ pppoe.h<br> │ │ │ │ pppol2tp.h<br> │ │ │ │ pppos.h<br> │ │ │ │ ppp_impl.h<br> │ │ │ │ ppp_opts.h<br> │ │ │ │ upap.h<br> │ │ │ │ vj.h<br> │ │ │ │<br> │ │ │ └######## 文件夹 polarssl<br> │ │ │ arc4.h<br> │ │ │ des.h<br> │ │ │ md4.h<br> │ │ │ md5.h<br> │ │ │ sha1.h<br> │ │ │</p><h5 id="文件夹-netif-1" tabindex="-1"><a class="header-anchor" href="#文件夹-netif-1" aria-hidden="true">#</a> 文件夹 netif</h5><p>。。。。<br> │ │ │ bridgeif.c<br> │ │ │ bridgeif_fdb.c<br> │ │ │ ethernet.c<br> │ │ │ FILES<br> │ │ │ lowpan6.c<br> │ │ │ lowpan6_ble.c<br> │ │ │ lowpan6_common.c<br> │ │ │ slipif.c<br> │ │ │ zepif.c<br> │ │ │</p><h6 id="文件夹-ppp" tabindex="-1"><a class="header-anchor" href="#文件夹-ppp" aria-hidden="true">#</a> 文件夹 ppp</h6><p>。。。。。<br> │ │ │ auth.c<br> │ │ │ ccp.c<br> │ │ │ chap-md5.c<br> │ │ │ chap-new.c<br> │ │ │ chap_ms.c<br> │ │ │ demand.c<br> │ │ │ eap.c<br> │ │ │ ecp.c<br> │ │ │ eui64.c<br> │ │ │ fsm.c<br> │ │ │ ipcp.c<br> │ │ │ ipv6cp.c<br> │ │ │ lcp.c<br> │ │ │ magic.c<br> │ │ │ mppe.c<br> │ │ │ multilink.c<br> │ │ │ ppp.c<br> │ │ │ pppapi.c<br> │ │ │ pppcrypt.c<br> │ │ │ PPPD_FOLLOWUP<br> │ │ │ pppoe.c<br> │ │ │ pppol2tp.c<br> │ │ │ pppos.c<br> │ │ │ upap.c<br> │ │ │ utils.c<br> │ │ │ vj.c<br> │ │ │<br> │ │ └####### 文件夹 polarssl<br> │ │ arc4.c<br> │ │ des.c<br> │ │ md4.c<br> │ │ md5.c<br> │ │ README<br> │ │ sha1.c<br> │ │</p><h4 id="文件夹-test" tabindex="-1"><a class="header-anchor" href="#文件夹-test" aria-hidden="true">#</a> 文件夹 test</h4><p>。。。</p><h5 id="文件夹-fuzz" tabindex="-1"><a class="header-anchor" href="#文件夹-fuzz" aria-hidden="true">#</a> 文件夹 fuzz</h5><p>。。。。<br> │ │ │ config.h<br> │ │ │ fuzz.c<br> │ │ │ lwipopts.h<br> │ │ │ Makefile<br> │ │ │ output_to_pcap.sh<br> │ │ │ README<br> │ │ │</p><h6 id="文件夹-inputs" tabindex="-1"><a class="header-anchor" href="#文件夹-inputs" aria-hidden="true">#</a> 文件夹 inputs</h6><p>。。。。。<br> │ │ ├####### 文件夹 arp<br> │ │ │ arp_req.bin<br> │ │ │<br> │ │ ├####### 文件夹 icmp<br> │ │ │ icmp_ping.bin<br> │ │ │<br> │ │ ├####### 文件夹 ipv6<br> │ │ │ neighbor_solicitation.bin<br> │ │ │ router_adv.bin<br> │ │ │<br> │ │ ├####### 文件夹 tcp<br> │ │ │ tcp_syn.bin<br> │ │ │<br> │ │ └####### 文件夹 udp<br> │ │ udp_port_5000.bin<br> │ │</p><h5 id="文件夹-sockets" tabindex="-1"><a class="header-anchor" href="#文件夹-sockets" aria-hidden="true">#</a> 文件夹 sockets</h5><p>。。。。<br> │ │ sockets_stresstest.c<br> │ │ sockets_stresstest.h<br> │ │</p><h5 id="文件夹-unit" tabindex="-1"><a class="header-anchor" href="#文件夹-unit" aria-hidden="true">#</a> 文件夹 unit</h5>',15),Qe=r("br",null,null,-1),rl=r("br",null,null,-1),el={href:"http://Filelists.mk",target:"_blank",rel:"noopener noreferrer"},ll=r("br",null,null,-1),nl=r("br",null,null,-1),tl=r("br",null,null,-1),il=r("br",null,null,-1),al=t('<h6 id="文件夹-api-1" tabindex="-1"><a class="header-anchor" href="#文件夹-api-1" aria-hidden="true">#</a> 文件夹 api</h6><p>。。。。。<br> │ │ test_sockets.c<br> │ │ test_sockets.h<br> │ │</p><h6 id="文件夹-arch" tabindex="-1"><a class="header-anchor" href="#文件夹-arch" aria-hidden="true">#</a> 文件夹 arch</h6><p>。。。。。<br> │ │ <code>sys_arch.c</code>: [37] lwIP移植协议栈 / 操作系统模拟底层的函数<br> │ │ sys_arch.h<br> │ │</p><h6 id="文件夹-core-1" tabindex="-1"><a class="header-anchor" href="#文件夹-core-1" aria-hidden="true">#</a> 文件夹 core</h6><p>。。。。。<br> │ │ test_def.c<br> │ │ test_def.h<br> │ │ test_mem.c<br> │ │ test_mem.h<br> │ │ test_netif.c<br> │ │ test_netif.h<br> │ │ test_pbuf.c<br> │ │ test_pbuf.h<br> │ │ test_timers.c<br> │ │ test_timers.h<br> │ │</p><h6 id="文件夹-dhcp" tabindex="-1"><a class="header-anchor" href="#文件夹-dhcp" aria-hidden="true">#</a> 文件夹 dhcp</h6><p>。。。。。<br> │ │ test_dhcp.c<br> │ │ test_dhcp.h<br> │ │</p><h6 id="文件夹-etharp" tabindex="-1"><a class="header-anchor" href="#文件夹-etharp" aria-hidden="true">#</a> 文件夹 etharp</h6><p>。。。。。<br> │ │ test_etharp.c<br> │ │ test_etharp.h<br> │ │</p><h6 id="文件夹-ip4" tabindex="-1"><a class="header-anchor" href="#文件夹-ip4" aria-hidden="true">#</a> 文件夹 ip4</h6><p>。。。。。<br> │ │ test_ip4.c<br> │ │ test_ip4.h<br> │ │</p><h6 id="文件夹-ip6" tabindex="-1"><a class="header-anchor" href="#文件夹-ip6" aria-hidden="true">#</a> 文件夹 ip6</h6><p>。。。。。<br> │ │ test_ip6.c<br> │ │ test_ip6.h<br> │ │</p><h6 id="文件夹-mdns-1" tabindex="-1"><a class="header-anchor" href="#文件夹-mdns-1" aria-hidden="true">#</a> 文件夹 mdns</h6><p>。。。。。<br> │ │ test_mdns.c<br> │ │ test_mdns.h<br> │ │</p><h6 id="文件夹-mqtt-1" tabindex="-1"><a class="header-anchor" href="#文件夹-mqtt-1" aria-hidden="true">#</a> 文件夹 mqtt</h6><p>。。。。。<br> │ │ test_mqtt.c<br> │ │ test_mqtt.h<br> │ │</p><h6 id="文件夹-tcp" tabindex="-1"><a class="header-anchor" href="#文件夹-tcp" aria-hidden="true">#</a> 文件夹 tcp</h6><p>。。。。。<br> │ │ tcp_helper.c<br> │ │ tcp_helper.h<br> │ │ test_tcp.c<br> │ │ test_tcp.h<br> │ │ test_tcp_oos.c<br> │ │ test_tcp_oos.h<br> │ │</p><h6 id="文件夹-udp" tabindex="-1"><a class="header-anchor" href="#文件夹-udp" aria-hidden="true">#</a> 文件夹 udp</h6><p>。。。。。<br> │ test_udp.c<br> │ test_udp.h<br> │</p><h2 id="文件夹-exckrnl" tabindex="-1"><a class="header-anchor" href="#文件夹-exckrnl" aria-hidden="true">#</a> <s>文件夹 exckrnl</s></h2><p>。</p><p><s>inosdesktop.bmp</s>: 专栏宣传图</p><h2 id="文件夹-hal-13-16-17-18-19-硬件抽象层" tabindex="-1"><a class="header-anchor" href="#文件夹-hal-13-16-17-18-19-硬件抽象层" aria-hidden="true">#</a> <code>文件夹 hal</code>: [13\\16\\17\\18\\19] 硬件抽象层</h2><p>。</p><h3 id="文件夹-x86" tabindex="-1"><a class="header-anchor" href="#文件夹-x86" aria-hidden="true">#</a> 文件夹 x86</h3><p>。。</p><p>------- [13] 板级初始化 -------</p><p><code>init_entry.asm</code>: CPU 进入了长模式，寄存器的位宽都变了，所以需要重新初始化。之后调用了hal_start.c</p><p><code>hal_start.c</code>: 首先进行 hal 层（硬件抽象层）初始化，最后进入到内核层的初始化。</p><ul><li><code>halinit.c</code>: 初始化 hal 层 <ul><li><code>halglobal.c</code>: 有关 hal 层的全局变量</li><li><code>halplatform.c</code>: 1 初始化平台 <ul><li><code>bdvideo.c</code>: 图形驱动相关初始化</li></ul></li><li><code>halmm.c</code>: 2 初始化内存</li><li><code>kernel.asm</code>: 3 初始化中断(中断处理程序的入口地址) / [21] 缺页异常 <ul><li><code>halgdtidt.c</code>: 函数设置中断门描述符</li><li><code>halintupt.c</code>: 中断的具体调用路径，供上层使用 / [21] 异常分发器函数</li><li><code>i8259.c</code>: 中断控制器</li></ul></li></ul></li><li><strong>初始化内核层 ! (待办)</strong></li></ul><p>------- [17] 内核层内存初始化 -------</p><ul><li><code>memmgrinit.c</code>: 内存 初始化 / 物理内存管理器初始化的大总管 / 1 内存页结构 2 内存区结构 3 处理初始内存占用 4 合并内存页到内存区中 <ul><li><code>msadsc.c</code>: 内存页结构 初始化 / 页的状态、页的地址、页的分配记数、页的类型、页的链表</li><li><code>memarea.c</code>: 内存区结构 初始化 / 硬件区、内核区、应用区</li></ul></li></ul><p><code>memdivmer.c</code>: [18] 内存页的分配释放 / 内存管理接口函数 / 组织管理: 内存区 &lt;-相关联-&gt; 内存页面</p><p><code>kmsob.c</code>: [19] 内存对象容器 初始化及管理 / 内存对象管理接口 / 比页更细分的内存管理单元 / Cache 行大小</p><p><code>halmmu.c</code>: [21] 映射物理内存页面</p><p>halcpuctrl.c</p><p>halprint.c</p><h2 id="文件夹-hdisk" tabindex="-1"><a class="header-anchor" href="#文件夹-hdisk" aria-hidden="true">#</a> <s>文件夹 hdisk</s></h2><p>。</p><p><s>inosdesktop.bmp</s>: 专栏宣传图</p><h2 id="文件夹-include-1" tabindex="-1"><a class="header-anchor" href="#文件夹-include-1" aria-hidden="true">#</a> 文件夹 include</h2><p>。<br> │ │ config.h<br> │ │ cosmosmctrl.h<br> │ │ cosmostypes.h<br> │ │</p><h3 id="文件夹-bastypeinc" tabindex="-1"><a class="header-anchor" href="#文件夹-bastypeinc" aria-hidden="true">#</a> 文件夹 bastypeinc</h3><p>。。</p><blockquote><p>可能是OS中常见且通用的一些数据结构 ?</p></blockquote><p>atomic.h</p><p>atomic_t.h</p><p>bastype.h</p><p>bastype_t.h</p><p><code>list.h</code>: 链表</p><p><code>list_t.h</code>: 链表</p><p>sem_t.h</p><p>spinlock_t.h</p><h3 id="文件夹-drvinc" tabindex="-1"><a class="header-anchor" href="#文件夹-drvinc" aria-hidden="true">#</a> 文件夹 drvinc</h3><p>。。<br> │ │ drvheads.h<br> │ │ drvrfs.h<br> │ │ drvrfs_t.h<br> │ │ drvtick.h<br> │ │ drvtick_t.h<br> │ │ drvtypes.h<br> │ │ drvuart.h<br> │ │ drvuart_t.h<br> │ │</p><h3 id="文件夹-halinc-硬件抽象层的相关结构体" tabindex="-1"><a class="header-anchor" href="#文件夹-halinc-硬件抽象层的相关结构体" aria-hidden="true">#</a> <code>文件夹 halinc</code>: 硬件抽象层的相关结构体</h3><p>。。</p><p>bdvideo.h</p><p>bdvideo_t.h</p><p>cpu.h</p><p>cpu_t.h</p><p>halcpuctrl.h</p><p>halcpuctrl_t.h</p><p>halgdtidt.h</p><p>halgdtidt_t.h</p><p>halglobal.h</p><p>halglobal_t.h</p><p>halheads.h</p><p>halinit.h</p><p>halinit_t.h</p><p>halintupt.h</p><p>halintupt_t.h</p><p>halmach.h</p><p>halmach_t.h</p><p>halmm.h</p><p>halmm_t.h</p><p>halmmu.h</p><p>halmmu_t.h</p><p>halplatform.h</p><p>halplatform_t.h</p><p>halprint.h</p><p>halprint_t.h</p><p>haltypes.h</p><p>i8254.h</p><p>i8259.h</p><p>io.h</p><p>kernel.inc</p><p>kmsob.h</p><p><code>kmsob_t.h</code>: [19] 内存对象容器 结构体 / 内存对象管理接口 / 比页更细分的内存管理单元 / Cache 行大小</p><p>link.h</p><p>memarea.h</p><p><code>memarea_t.h</code>: [16\\17\\18] 内存管理 结构体 / 内存区 / 硬件区、内核区、应用区</p><p>memdivmer.h</p><p><code>memdivmer_t.h</code>: [16\\17\\18] 内存管理 结构体 / 内存页的分配释放 / 内存管理接口函数 / 组织管理: 内存区 &lt;-相关联-&gt; 内存页面</p><p>memmgrinit.h</p><p>memmgrinit_t.h</p><p>memmgrmctrl.h</p><p>memmgrtypes.h</p><p>mmu_t.h</p><p>msadsc.h</p><p><code>msadsc_t.h</code>: [16\\17\\18] 内存管理 结构体 / 内存页 / 页的状态、页的地址、页的分配记数、页的类型、页的链表</p><p>pages64_t.h</p><h3 id="文件夹-knlinc" tabindex="-1"><a class="header-anchor" href="#文件夹-knlinc" aria-hidden="true">#</a> 文件夹 knlinc</h3><p>。。<br> │ │ krlcpuidle.h<br> │ │ krlcpuidle_t.h<br> │ │ krldevice.h<br> │ │ <code>krldevice_t.h</code>: [28] 设备系统/设备类型/设备驱动<br> │ │ krlglobal.h<br> │ │ krlglobal_t.h<br> │ │ krlheads.h<br> │ │ krlinit.h<br> │ │ krlinit_t.h<br> │ │ krlintupt.h<br> │ │ krlintupt_t.h<br> │ │ krliocache.h<br> │ │ krliocache_t.h<br> │ │ krlmm.h<br> │ │ krlmm_t.h<br> │ │ krlobjnode.h<br> │ │ <code>krlobjnode_t.h</code>: [30] I/O包<br> │ │ krlobjsmpol.h<br> │ │ krlobjsmpol_t.h<br> │ │ krlpagempol.h<br> │ │ krlpagempol_t.h<br> │ │ <code>krlsched.h</code>: [25] 进程调度器模块<br> │ │ krlsched_t.h<br> │ │ krlsem.h<br> │ │ krlsem_t.h<br> │ │ krlservice.h<br> │ │ krlservice_t.h<br> │ │ krlspinlock.h<br> │ │ krlspinlock_t.h<br> │ │ krlstr.h<br> │ │ krlstr_t.h<br> │ │ krlsveclose.h<br> │ │ krlsveclose_t.h<br> │ │ krlsveioctrl.h<br> │ │ krlsveioctrl_t.h<br> │ │ krlsvelseek.h<br> │ │ krlsvelseek_t.h<br> │ │ krlsvemm.h<br> │ │ krlsvemm_t.h<br> │ │ krlsveopen.h<br> │ │ krlsveopen_t.h<br> │ │ krlsveread.h<br> │ │ krlsveread_t.h<br> │ │ krlsvethread.h<br> │ │ krlsvethread_t.h<br> │ │ krlsvewrite.h<br> │ │ krlsvewrite_t.h<br> │ │ krlthread.h<br> │ │ <code>krlthread_t.h</code>: [24] 进程的数据结构 / 状态，id，运行时间，优先级，应用程序栈，内核栈，机器上下文，资源描述符，地址空间<br> │ │ krltime.h<br> │ │ krltime_t.h<br> │ │ krltypes.h<br> │ │ krlvadrsmem.h<br> │ │ krlvadrsmem_t.h<br> │ │ krlwaitlist.h<br> │ │ krlwaitlist_t.h<br> │ │ task.h<br> │ │</p><h3 id="文件夹-libinc" tabindex="-1"><a class="header-anchor" href="#文件夹-libinc" aria-hidden="true">#</a> 文件夹 libinc</h3><p>。。<br> │ │ cosmosapi.h<br> │ │ lapiclose.h<br> │ │ lapiioctrl.h<br> │ │ lapilseek.h<br> │ │ lapimm.h<br> │ │ <code>lapinrentry.h</code>: [41] 系统服务接口 / 软中断-&gt;系统调用-&gt;传递参数<br> │ │ lapiopen.h<br> │ │ lapiread.h<br> │ │ lapithread.h<br> │ │ lapitime.h<br> │ │ lapiwrite.h<br> │ │ libc.h<br> │ │ libclose.h<br> │ │ libdev.h<br> │ │ libheads.h<br> │ │ libioctrl.h<br> │ │ liblseek.h<br> │ │ libmm.h<br> │ │ libopen.h<br> │ │ libread.h<br> │ │ libthread.h<br> │ │ libtime.h<br> │ │ libtypes.h<br> │ │ libwrite.h<br> │ │ printf.h<br> │ │ stdio.h<br> │ │</p><h3 id="文件夹-script" tabindex="-1"><a class="header-anchor" href="#文件夹-script" aria-hidden="true">#</a> 文件夹 script</h3><p>。。<br> │ buildfile.h<br> │</p><h2 id="文件夹-initldr-11-12-二级引导器" tabindex="-1"><a class="header-anchor" href="#文件夹-initldr-11-12-二级引导器" aria-hidden="true">#</a> <code>文件夹 initldr</code>: [11\\12] 二级引导器</h2><p>。<br> │ │ Makefile<br> │ │</p><h3 id="文件夹-legacy" tabindex="-1"><a class="header-anchor" href="#文件夹-legacy" aria-hidden="true">#</a> 文件夹 legacy</h3><p>。。<br> │ │ │ Makefile<br> │ │ │</p><h4 id="文件夹-build-1" tabindex="-1"><a class="header-anchor" href="#文件夹-build-1" aria-hidden="true">#</a> 文件夹 build</h4>',116),sl=r("br",null,null,-1),hl={href:"http://initldr.mk",target:"_blank",rel:"noopener noreferrer"},dl=r("br",null,null,-1),ol=r("br",null,null,-1),cl=r("br",null,null,-1),pl=r("br",null,null,-1),bl={href:"http://krnlbuidcmd.mh",target:"_blank",rel:"noopener noreferrer"},ul=r("br",null,null,-1),_l={href:"http://krnlbuidrule.mh",target:"_blank",rel:"noopener noreferrer"},ml=r("br",null,null,-1),kl={href:"http://ldrlink.mk",target:"_blank",rel:"noopener noreferrer"},fl=r("br",null,null,-1),gl={href:"http://ldrobjs.mh",target:"_blank",rel:"noopener noreferrer"},vl=r("br",null,null,-1),xl={href:"http://legacybuidcmd.mk",target:"_blank",rel:"noopener noreferrer"},yl=r("br",null,null,-1),wl={href:"http://legacybuidrule.mk",target:"_blank",rel:"noopener noreferrer"},Ul=r("br",null,null,-1),Sl=r("br",null,null,-1),Cl=r("strong",null,"映像封装打包工具",-1),Bl=r("br",null,null,-1),ql=r("br",null,null,-1),Rl={href:"http://uefibuidcmd.mk",target:"_blank",rel:"noopener noreferrer"},Gl=r("br",null,null,-1),Il={href:"http://uefibuidrule.mk",target:"_blank",rel:"noopener noreferrer"},Ml=r("br",null,null,-1),Ol=t(`<h4 id="文件夹-include-2" tabindex="-1"><a class="header-anchor" href="#文件夹-include-2" aria-hidden="true">#</a> 文件夹 include</h4><p>。。。<br> │ │ │ bstartparm.h<br> │ │ │ chkcpmm.h<br> │ │ │ chkcpmm_t.h<br> │ │ │ cmctl.h<br> │ │ │ fs.h<br> │ │ │ graph.h<br> │ │ │ imgmgrhead.h<br> │ │ │ inithead.h<br> │ │ │ io.h<br> │ │ │ ldrasm.inc<br> │ │ │ ldrkrlentry.h<br> │ │ │ <code>ldrtype.h</code>: [11] 机器相关信息（数据结构）<br> │ │ │ realparm.h<br> │ │ │ type.h<br> │ │ │ vgastr.h<br> │ │ │ vgastr_t.h<br> │ │ │</p><h4 id="文件夹-ldrkrl-11-12-功能模块" tabindex="-1"><a class="header-anchor" href="#文件夹-ldrkrl-11-12-功能模块" aria-hidden="true">#</a> <code>文件夹 ldrkrl</code>: [11\\12] 功能模块</h4><p>。。。</p><blockquote><p>有相同的文件夹</p><p>打包工具 lmoskrlimg <code>-m</code> k <code>-lhf</code> initldrimh.bin <code>-o</code> Cosmos.eki <code>-f</code> initldrkrl.bin initldrsve.bin ⇒ 输出<mark>Cosmos.eki 映像文件</mark></p></blockquote><h5 id="initldrimh-grub-头" tabindex="-1"><a class="header-anchor" href="#initldrimh-grub-头" aria-hidden="true">#</a> initldrimh - GRUB 头</h5><p><code>imginithead.asm</code>: 汇编部分</p><pre><code>1. 既能让 GRUB 识别，又能设置 C 语言运行环境，用于调用 C 函数
2. 初始化CPU中寄存器，加载GDT全局描述符，从实模式切换到保护模式
</code></pre><p><code>inithead.c</code>: C语言部分，用于放置二级引导器到指定内存中</p><ol><li><p>它的主要功能是查找二级引导器的核心文件——initldrkrl.bin，然后把它放置到特定的内存地址上</p><ul><li>写initldrsve.bin文件【GRUB中断设计】到特定的内存中</li><li>写initldrkrl.bin文件【GRUB主模块核心入口】到特定的内存中</li><li>在映像文件中查找对应的文件</li></ul></li><li><p>把映像文件中的 initldrsve.bin 文件和 initldrkrl.bin 文件写入到特定的内存地址空间中，具体地址在上面代码中的宏有详细定义</p></li></ol><h5 id="initldrsve-grub-中断设计" tabindex="-1"><a class="header-anchor" href="#initldrsve-grub-中断设计" aria-hidden="true">#</a> initldrsve - GRUB 中断设计</h5><p><strong>realintsve.~~<code>16</code>~~asm</strong>: 实现调用BIOS中断的功能</p><h5 id="initldrkrl-grub-主模块核心入口" tabindex="-1"><a class="header-anchor" href="#initldrkrl-grub-主模块核心入口" aria-hidden="true">#</a> initldrkrl - GRUB 主模块核心入口</h5><p><strong>ldrkrl<code>32</code>.asm</strong>: 汇编部分</p><p><code>ldrkrlentry.c</code>: 【总裁\\交代】C语言部分</p><ul><li><code>bstartparm.c</code>: 【经理\\管理】实现收集机器信息建立页面数据 <ul><li>1 检查 CPU 模式 2 获取内存布局 3 初始化内核栈 4 放置内核文件 5 放置字库文件 6 建立 MMU 页表 7 设置图像模式 <ul><li>【帮工\\完成】 <ul><li><code>chkcpmm.c</code>: 实现检查CPU工作模式和内存视图</li><li><code>fs.c</code>: 实现解析内核映像文件的功能</li><li><code>graph.c</code>: 实现切换显卡图形模式</li><li><code>vgastr.c</code>: 实现字符串输出</li></ul></li></ul></li></ul></li></ul><h3 id="文件夹-script-1" tabindex="-1"><a class="header-anchor" href="#文件夹-script-1" aria-hidden="true">#</a> 文件夹 script</h3><p>。。<br> │ │ legacybuidcmd.S<br> │ │ legacybuidrule.S<br> │ │ lmkfbuild<br> │ │ pretreatment.mkf<br> │ │ uefibuidcmd.S<br> │ │ uefibuidrule.S<br> │ │</p><h3 id="文件夹-uefi" tabindex="-1"><a class="header-anchor" href="#文件夹-uefi" aria-hidden="true">#</a> 文件夹 uefi</h3><p>。。<br> │ │ Makefile<br> │ │</p><h4 id="文件夹-build-2" tabindex="-1"><a class="header-anchor" href="#文件夹-build-2" aria-hidden="true">#</a> 文件夹 build</h4>`,21),Pl=r("br",null,null,-1),jl={href:"http://buidrule.mk",target:"_blank",rel:"noopener noreferrer"},Dl=r("br",null,null,-1),Ll={href:"http://initldr.mk",target:"_blank",rel:"noopener noreferrer"},zl=r("br",null,null,-1),El=r("br",null,null,-1),Fl=r("br",null,null,-1),Vl=r("br",null,null,-1),Al={href:"http://krnlbuidcmd.mh",target:"_blank",rel:"noopener noreferrer"},Hl=r("br",null,null,-1),Tl={href:"http://krnlbuidcmd.mk",target:"_blank",rel:"noopener noreferrer"},Nl=r("br",null,null,-1),Xl={href:"http://krnlbuidrule.mh",target:"_blank",rel:"noopener noreferrer"},Kl=r("br",null,null,-1),Wl={href:"http://krnlbuidrule.mk",target:"_blank",rel:"noopener noreferrer"},Yl=r("br",null,null,-1),Zl={href:"http://ldrlink.mk",target:"_blank",rel:"noopener noreferrer"},$l=r("br",null,null,-1),Jl={href:"http://ldrobjs.mh",target:"_blank",rel:"noopener noreferrer"},Ql=r("br",null,null,-1),rn={href:"http://legacybuidcmd.mk",target:"_blank",rel:"noopener noreferrer"},en=r("br",null,null,-1),ln={href:"http://legacybuidrule.mk",target:"_blank",rel:"noopener noreferrer"},nn=r("br",null,null,-1),tn=r("br",null,null,-1),an=r("strong",null,"映像封装打包工具",-1),sn=r("br",null,null,-1),hn=r("br",null,null,-1),dn={href:"http://uefibuidcmd.mk",target:"_blank",rel:"noopener noreferrer"},on=r("br",null,null,-1),cn={href:"http://uefibuidrule.mk",target:"_blank",rel:"noopener noreferrer"},pn=r("br",null,null,-1),bn=t(`<h4 id="文件夹-include-3" tabindex="-1"><a class="header-anchor" href="#文件夹-include-3" aria-hidden="true">#</a> 文件夹 include</h4><p>。。。<br> │ │ bstartparm.h<br> │ │ chkcpmm.h<br> │ │ chkcpmm_t.h<br> │ │ cmctl.h<br> │ │ fs.h<br> │ │ graph.h<br> │ │ imgmgrhead.h<br> │ │ inithead.h<br> │ │ io.h<br> │ │ ldrasm.inc<br> │ │ ldrkrlentry.h<br> │ │ <code>ldrtype.h</code>: [11] 机器相关信息（数据结构）<br> │ │ realparm.h<br> │ │ type.h<br> │ │ vgastr.h<br> │ │ vgastr_t.h<br> │ │</p><h4 id="文件夹-ldrkrl-11-12-功能模块-1" tabindex="-1"><a class="header-anchor" href="#文件夹-ldrkrl-11-12-功能模块-1" aria-hidden="true">#</a> <code>文件夹 ldrkrl</code>: [11\\12] 功能模块</h4><p>。。。</p><blockquote><p>有相同的文件夹</p><p>打包工具 lmoskrlimg <code>-m</code> k <code>-lhf</code> initldrimh.bin <code>-o</code> Cosmos.eki <code>-f</code> initldrkrl.bin initldrsve.bin ⇒ 输出<mark>Cosmos.eki 映像文件</mark></p></blockquote><h5 id="initldrimh-grub-头-1" tabindex="-1"><a class="header-anchor" href="#initldrimh-grub-头-1" aria-hidden="true">#</a> initldrimh - GRUB 头</h5><p><code>imginithead.asm</code>: 汇编部分</p><pre><code>1. 既能让 GRUB 识别，又能设置 C 语言运行环境，用于调用 C 函数
1. 初始化CPU中寄存器，加载GDT全局描述符，从实模式切换到保护模式
</code></pre><p><code>inithead.c</code>: C语言部分，用于放置二级引导器到指定内存中</p><ol><li><p>它的主要功能是查找二级引导器的核心文件——initldrkrl.bin，然后把它放置到特定的内存地址上</p><ul><li>写initldrsve.bin文件【GRUB中断设计】到特定的内存中</li><li>写initldrkrl.bin文件【GRUB主模块核心入口】到特定的内存中</li><li>在映像文件中查找对应的文件</li></ul></li><li><p>把映像文件中的 initldrsve.bin 文件和 initldrkrl.bin 文件写入到特定的内存地址空间中，具体地址在上面代码中的宏有详细定义</p></li></ol><h5 id="initldrsve-grub-中断设计-1" tabindex="-1"><a class="header-anchor" href="#initldrsve-grub-中断设计-1" aria-hidden="true">#</a> initldrsve - GRUB 中断设计</h5><p><strong>realintsve.<code>16</code>asm</strong>: 实现调用BIOS中断的功能</p><h5 id="initldrkrl-grub-主模块核心入口-1" tabindex="-1"><a class="header-anchor" href="#initldrkrl-grub-主模块核心入口-1" aria-hidden="true">#</a> initldrkrl - GRUB 主模块核心入口</h5><p><strong>ldrkrl<code>64</code>.asm</strong>: 汇编部分</p><p><code>ldrkrlentry.c</code>: 【总裁\\交代】C语言部分</p><ul><li><code>bstartparm.c</code>: 【经理\\管理】实现收集机器信息建立页面数据 <ul><li>1 检查 CPU 模式 2 获取内存布局 3 初始化内核栈 4 放置内核文件 5 放置字库文件 6 建立 MMU 页表 7 设置图像模式 <ul><li>【帮工\\完成】 <ul><li><code>chkcpmm.c</code>: 实现检查CPU工作模式和内存视图</li><li><code>fs.c</code>: 实现解析内核映像文件的功能</li><li><code>graph.c</code>: 实现切换显卡图形模式</li><li><code>vgastr.c</code>: 实现字符串输出</li></ul></li></ul></li></ul></li></ul><h2 id="文件夹-kernel" tabindex="-1"><a class="header-anchor" href="#文件夹-kernel" aria-hidden="true">#</a> 文件夹 kernel</h2><p>。<br> │ krlcpuidle.c<br> │ <code>krldevice.c</code>: [30] 向设备发送I/O包<br> │ <code>krlglobal.c</code>: [20] 虚拟内存的初始化 / [25] 进程调度器模块 / [41] 系统服务接口 / 系统调用-&gt;软中断-&gt;传递参数-&gt;系统服务分发器-&gt;系统服务表<br> │ <code>krlinit.c</code>: [20] 虚拟内存的初始化 / [25] 进程调度器模块<br> │ krlintupt.c<br> │ krlmm.c<br> │ <code>krlobjnode.c</code>: [30] I/O包相关<br> │ krlpagempol.c<br> │ <code>krlsched.c</code>: [25] 进程调度器模块<br> │ krlsem.c<br> │ <code>krlservice.c</code>: [41] 系统服务接口 / 系统调用-&gt;软中断-&gt;传递参数-&gt;系统服务分发器<br> │ krlspinlock.c<br> │ krlstr.c<br> │ krlsveclose.c<br> │ krlsveioctrl.c<br> │ krlsvelseek.c<br> │ krlsvemm.c<br> │ krlsveopen.c<br> │ krlsveread.c<br> │ krlsvethread.c<br> │ krlsvewrite.c<br> │ <code>krlthread.c</code>: [24] 建立进程接口 /<br> │ <code>krltime.c</code>: [41] 系统服务接口 / 内核态时间服务接口 / 内核实现时间服务<br> │ <code>krlvadrsmem.c</code>: [20/21] 虚拟内存的初始化 / 虚拟地址空间分配接口<br> │ krlwaitlist.c<br> │</p><h2 id="文件夹-lib" tabindex="-1"><a class="header-anchor" href="#文件夹-lib" aria-hidden="true">#</a> 文件夹 lib</h2><p>。<br> │ lapiclose.c<br> │ lapiioctrl.c<br> │ lapilseek.c<br> │ lapimm.c<br> │ lapiopen.c<br> │ lapiread.c<br> │ lapithread.c<br> │ <code>lapitime.c</code>: [41] 系统服务接口 / 时间API接口<br> │ lapiwrite.c<br> │ libclose.c<br> │ libioctrl.c<br> │ liblseek.c<br> │ libmm.c<br> │ libopen.c<br> │ libread.c<br> │ libthread.c<br> │ <code>libtime.c</code>: [41] 系统服务接口 / 时间库函数 时间API接口<br> │ libwrite.c<br> │ printf.c<br> │ start.asm<br> │</p><h2 id="文件夹-ovmf" tabindex="-1"><a class="header-anchor" href="#文件夹-ovmf" aria-hidden="true">#</a> 文件夹 ovmf</h2><p>。<br> │ │ OVMF_CODE.fd<br> │ │ OVMF_VARS.fd<br> │ │</p><h3 id="文件夹-esp" tabindex="-1"><a class="header-anchor" href="#文件夹-esp" aria-hidden="true">#</a> 文件夹 esp</h3><p>。。</p><h4 id="文件夹-efi" tabindex="-1"><a class="header-anchor" href="#文件夹-efi" aria-hidden="true">#</a> 文件夹 EFI</h4><p>。。。</p><h5 id="文件夹-boot" tabindex="-1"><a class="header-anchor" href="#文件夹-boot" aria-hidden="true">#</a> 文件夹 Boot</h5><p>。。。。<br> │ │ BootX64.efi<br> │ │ BootX64shell.efi<br> │ │</p><h4 id="文件夹-kernel-1" tabindex="-1"><a class="header-anchor" href="#文件夹-kernel-1" aria-hidden="true">#</a> 文件夹 Kernel</h4><p>。。。<br> │ Cosmos.eki<br> │</p><h2 id="文件夹-release" tabindex="-1"><a class="header-anchor" href="#文件夹-release" aria-hidden="true">#</a> <s>文件夹 release</s></h2><p>。</p><h3 id="文件夹-legacy-1" tabindex="-1"><a class="header-anchor" href="#文件夹-legacy-1" aria-hidden="true">#</a> 文件夹 legacy</h3><p>。。</p><p><code>background.bmp</code>: 图形显卡驱动程序初始化, 展示背景图片</p><p>desktop.bmp</p><p>desktop1.bmp</p><p><code>font.fnt</code>: 内核字体 ?</p><p><strong>映像封装打包工具</strong>: lmoskrlimg</p><p><code>logo.bmp</code>: Cosmos的Logo</p><h3 id="文件夹-uefi-1" tabindex="-1"><a class="header-anchor" href="#文件夹-uefi-1" aria-hidden="true">#</a> 文件夹 uefi</h3><p>。。</p><p><code>background.bmp</code>: 图形显卡驱动程序初始化, 展示背景图片</p><p>desktop.bmp</p><p>desktop1.bmp</p><p><code>font.fnt</code>: 内核字体 ?</p><p><strong>映像封装打包工具</strong>: lmoskrlimg</p><p><code>logo.bmp</code>: Cosmos的Logo</p><h2 id="文件夹-script-2" tabindex="-1"><a class="header-anchor" href="#文件夹-script-2" aria-hidden="true">#</a> 文件夹 script</h2><p>。<br> app.S<br> applds.S<br> appslink.S<br> cosmoslink.S<br> drv.S<br> hal.S<br> krl.S<br> krnlbuidcmd.S<br> krnlbuidrule.S<br> krnlobjs.S<br> lib.S<br> link.S<br> lmkfbuild.c<br> pretreatment.mkf</p><h1 id="编译流程图" tabindex="-1"><a class="header-anchor" href="#编译流程图" aria-hidden="true">#</a> 编译流程图</h1><img src="`+i+'" alt="img" style="zoom:15%;"><p>Makefile: 构建规则文档</p><p><strong>make: 构建工具</strong></p><p><strong>nasm: asm汇编语言的编译工具</strong></p><p><strong>gcc: c语言的编译工具</strong></p><p>.asm: 汇编</p><p>.c: C语言</p><p>.s: 由 .c 经 gcc 预处理+编译 形成的 汇编文件</p><p>.o: [由 .asm 经 nasm / 由 .c 经 gcc 预处理+编译+汇编] 形成的 可重定位目标文件</p><p>.a: 同上 可重定位文件</p><p>.so: (动态链接)共享目标(共享库)文件</p><p>.h: 头文件 / 宏常量</p><p>.lds: 链接的相关流程</p><p><strong>LD: 链接器</strong></p><p>.elf: 二进制可执行文件(程序)</p><p><strong>objcopy: 打包封装工具?</strong></p><p>.bin: 二进制可执行文件(程序)</p><img src="'+o+'" alt="image-20220708140454365" style="zoom:25%;">',69);function un(_n,mn){const l=s("ExternalLinkIcon");return h(),d("div",null,[p,r("p",null,[e("Cosmos 工程项目"),b,e(" │ "),r("a",u,[e("codeline.sh"),n(l)]),_,e(" │ gdbinit"),m,e(" │ hd.img"),k,e(" │ Makefile"),f,e(" │ Makefile.x86"),g,e(" │")]),v,r("p",null,[e("。。。。"),x,e(" │ │ │ generate.bat"),y,e(" │ │ │ "),r("a",w,[e("generate.sh"),n(l)]),U,e(" │ │ │ lwip.Doxyfile"),S,e(" │ │ │ "),r("a",C,[e("lwip.Doxyfile.cmake.in"),n(l)]),B,e(" │ │ │ main_page.h"),q,e(" │ │ │")]),R,G,I,r("p",null,[e("。。。"),M,e(" │ │ │ Filelists.cmake"),O,e(" │ │ │ "),r("a",P,[e("Filelists.mk"),n(l)]),j,e(" │ │ │ FILES"),D,e(" │ │ │")]),L,r("p",null,[e("。。。。。"),z,e(" │ │ │ │ │ altcp.h"),E,e(" │ │ │ │ │ altcp_tcp.h"),F,e(" │ │ │ │ │ altcp_tls.h"),V,e(" │ │ │ │ │ api.h"),A,e(" │ │ │ │ │ arch.h"),H,e(" │ │ │ │ │ autoip.h"),T,e(" │ │ │ │ │ debug.h"),N,e(" │ │ │ │ │ def.h"),X,e(" │ │ │ │ │ dhcp.h"),K,e(" │ │ │ │ │ dhcp6.h"),W,e(" │ │ │ │ │ dns.h"),Y,e(" │ │ │ │ │ err.h"),Z,e(" │ │ │ │ │ errno.h"),$,e(" │ │ │ │ │ etharp.h"),J,e(" │ │ │ │ │ ethip6.h"),Q,e(" │ │ │ │ │ icmp.h"),rr,e(" │ │ │ │ │ icmp6.h"),er,e(" │ │ │ │ │ if_api.h"),lr,e(" │ │ │ │ │ igmp.h"),nr,e(" │ │ │ │ │ inet.h"),tr,e(" │ │ │ │ │ inet_chksum.h"),ir,e(" │ │ │ │ │ init.h"),ar,e(" │ │ │ │ │ "),r("a",sr,[e("init.h.cmake.in"),n(l)]),hr,e(" │ │ │ │ │ ip.h"),dr,e(" │ │ │ │ │ ip4.h"),or,e(" │ │ │ │ │ ip4_addr.h"),cr,e(" │ │ │ │ │ ip4_frag.h"),pr,e(" │ │ │ │ │ ip6.h"),br,e(" │ │ │ │ │ ip6_addr.h"),ur,e(" │ │ │ │ │ ip6_frag.h"),_r,e(" │ │ │ │ │ ip6_zone.h"),mr,e(" │ │ │ │ │ ip_addr.h"),kr,e(" │ │ │ │ │ mem.h"),fr,e(" │ │ │ │ │ memp.h"),gr,e(" │ │ │ │ │ mld6.h"),vr,e(" │ │ │ │ │ nd6.h"),xr,e(" │ │ │ │ │ netbuf.h"),yr,e(" │ │ │ │ │ netdb.h"),wr,e(" │ │ │ │ │ netif.h"),Ur,e(" │ │ │ │ │ netifapi.h"),Sr,e(" │ │ │ │ │ opt.h"),Cr,e(" │ │ │ │ │ pbuf.h"),Br,e(" │ │ │ │ │ raw.h"),qr,e(" │ │ │ │ │ sio.h"),Rr,e(" │ │ │ │ │ snmp.h"),Gr,e(" │ │ │ │ │ sockets.h"),Ir,e(" │ │ │ │ │ stats.h"),Mr,e(" │ │ │ │ │ "),Or,e(": [37] lwIP移植协议栈 / 操作系统模拟层的函数"),Pr,e(" │ │ │ │ │ tcp.h"),jr,e(" │ │ │ │ │ tcpbase.h"),Dr,e(" │ │ │ │ │ tcpip.h"),Lr,e(" │ │ │ │ │ timeouts.h"),zr,e(" │ │ │ │ │ udp.h"),Er,e(" │ │ │ │ │"),Fr,e(" │ │ │ │ ├####### 文件夹 apps"),Vr,e(" │ │ │ │ │ altcp_proxyconnect.h"),Ar,e(" │ │ │ │ │ altcp_tls_mbedtls_opts.h"),Hr,e(" │ │ │ │ │ FILES"),Tr,e(" │ │ │ │ │ fs.h"),Nr,e(" │ │ │ │ │ httpd.h"),Xr,e(" │ │ │ │ │ httpd_opts.h"),Kr,e(" │ │ │ │ │ http_client.h"),Wr,e(" │ │ │ │ │ lwiperf.h"),Yr,e(" │ │ │ │ │ mdns.h"),Zr,e(" │ │ │ │ │ mdns_opts.h"),$r,e(" │ │ │ │ │ mdns_priv.h"),Jr,e(" │ │ │ │ │ mqtt.h"),Qr,e(" │ │ │ │ │ mqtt_opts.h"),re,e(" │ │ │ │ │ mqtt_priv.h"),ee,e(" │ │ │ │ │ netbiosns.h"),le,e(" │ │ │ │ │ netbiosns_opts.h"),ne,e(" │ │ │ │ │ smtp.h"),te,e(" │ │ │ │ │ smtp_opts.h"),ie,e(" │ │ │ │ │ snmp.h"),ae,e(" │ │ │ │ │ snmpv3.h"),se,e(" │ │ │ │ │ snmp_core.h"),he,e(" │ │ │ │ │ snmp_mib2.h"),de,e(" │ │ │ │ │ snmp_opts.h"),oe,e(" │ │ │ │ │ snmp_scalar.h"),ce,e(" │ │ │ │ │ snmp_snmpv2_framework.h"),pe,e(" │ │ │ │ │ snmp_snmpv2_usm.h"),be,e(" │ │ │ │ │ snmp_table.h"),ue,e(" │ │ │ │ │ snmp_threadsync.h"),_e,e(" │ │ │ │ │ sntp.h"),me,e(" │ │ │ │ │ sntp_opts.h"),ke,e(" │ │ │ │ │ tftp_opts.h"),fe,e(" │ │ │ │ │ tftp_server.h"),ge,e(" │ │ │ │ │"),ve,e(" │ │ │ │ ├####### 文件夹 priv"),xe,e(" │ │ │ │ │ altcp_priv.h"),ye,e(" │ │ │ │ │ api_msg.h"),we,e(" │ │ │ │ │ memp_priv.h"),Ue,e(" │ │ │ │ │ memp_std.h"),Se,e(" │ │ │ │ │ mem_priv.h"),Ce,e(" │ │ │ │ │ nd6_priv.h"),Be,e(" │ │ │ │ │ raw_priv.h"),qe,e(" │ │ │ │ │ sockets_priv.h"),Re,e(" │ │ │ │ │ tcpip_priv.h"),Ge,e(" │ │ │ │ │ tcp_priv.h"),Ie,e(" │ │ │ │ │"),Me,e(" │ │ │ │ └####### 文件夹 prot"),Oe,e(" │ │ │ │ autoip.h"),Pe,e(" │ │ │ │ dhcp.h"),je,e(" │ │ │ │ dhcp6.h"),De,e(" │ │ │ │ dns.h"),Le,e(" │ │ │ │ etharp.h"),ze,e(" │ │ │ │ ethernet.h"),Ee,e(" │ │ │ │ iana.h"),Fe,e(" │ │ │ │ icmp.h"),Ve,e(" │ │ │ │ icmp6.h"),Ae,e(" │ │ │ │ ieee.h"),He,e(" │ │ │ │ igmp.h"),Te,e(" │ │ │ │ ip.h"),Ne,e(" │ │ │ │ ip4.h"),Xe,e(" │ │ │ │ ip6.h"),Ke,e(" │ │ │ │ mld6.h"),We,e(" │ │ │ │ nd6.h"),Ye,e(" │ │ │ │ tcp.h"),Ze,e(" │ │ │ │ udp.h"),$e,e(" │ │ │ │")]),Je,r("p",null,[e("。。。。"),Qe,e(" │ │ Filelists.cmake"),rl,e(" │ │ "),r("a",el,[e("Filelists.mk"),n(l)]),ll,e(" │ │ lwipopts.h"),nl,e(" │ │ lwip_check.h"),tl,e(" │ │ lwip_unittests.c"),il,e(" │ │")]),al,r("p",null,[e("。。。"),sl,e(" │ │ │ "),r("a",hl,[e("initldr.mk"),n(l)]),dl,e(" │ │ │ initldrimh.lds"),ol,e(" │ │ │ initldrkrl.lds"),cl,e(" │ │ │ initldrsve.lds"),pl,e(" │ │ │ "),r("a",bl,[e("krnlbuidcmd.mh"),n(l)]),ul,e(" │ │ │ "),r("a",_l,[e("krnlbuidrule.mh"),n(l)]),ml,e(" │ │ │ "),r("a",kl,[e("ldrlink.mk"),n(l)]),fl,e(" │ │ │ "),r("a",gl,[e("ldrobjs.mh"),n(l)]),vl,e(" │ │ │ "),r("a",xl,[e("legacybuidcmd.mk"),n(l)]),yl,e(" │ │ │ "),r("a",wl,[e("legacybuidrule.mk"),n(l)]),Ul,e(" │ │ │ lmkfbuild"),Sl,e(" │ │ │ "),Cl,e(": lmoskrlimg"),Bl,e(" │ │ │ pretreatment.mkf"),ql,e(" │ │ │ "),r("a",Rl,[e("uefibuidcmd.mk"),n(l)]),Gl,e(" │ │ │ "),r("a",Il,[e("uefibuidrule.mk"),n(l)]),Ml,e(" │ │ │")]),Ol,r("p",null,[e("。。。"),Pl,e(" │ │ "),r("a",jl,[e("buidrule.mk"),n(l)]),Dl,e(" │ │ "),r("a",Ll,[e("initldr.mk"),n(l)]),zl,e(" │ │ initldrimh.lds"),El,e(" │ │ initldrkrl.lds"),Fl,e(" │ │ initldrsve.lds"),Vl,e(" │ │ "),r("a",Al,[e("krnlbuidcmd.mh"),n(l)]),Hl,e(" │ │ "),r("a",Tl,[e("krnlbuidcmd.mk"),n(l)]),Nl,e(" │ │ "),r("a",Xl,[e("krnlbuidrule.mh"),n(l)]),Kl,e(" │ │ "),r("a",Wl,[e("krnlbuidrule.mk"),n(l)]),Yl,e(" │ │ "),r("a",Zl,[e("ldrlink.mk"),n(l)]),$l,e(" │ │ "),r("a",Jl,[e("ldrobjs.mh"),n(l)]),Ql,e(" │ │ "),r("a",rn,[e("legacybuidcmd.mk"),n(l)]),en,e(" │ │ "),r("a",ln,[e("legacybuidrule.mk"),n(l)]),nn,e(" │ │ lmkfbuild"),tn,e(" │ │ "),an,e(": lmoskrlimg"),sn,e(" │ │ pretreatment.mkf"),hn,e(" │ │ "),r("a",dn,[e("uefibuidcmd.mk"),n(l)]),on,e(" │ │ "),r("a",cn,[e("uefibuidrule.mk"),n(l)]),pn,e(" │ │")]),bn])}const vn=a(c,[["render",un],["__file","趣谈实战原理.html.vue"]]);export{vn as default};
