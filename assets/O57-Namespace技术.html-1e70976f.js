import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const e="/assets/56bb9502b58628ff3d1bee83b6f53cd7-3a6ccb04.png",t={},o=p(`<h1 id="_57-namespace技术-内部创业公司应该独立运营" tabindex="-1"><a class="header-anchor" href="#_57-namespace技术-内部创业公司应该独立运营" aria-hidden="true">#</a> 57 | Namespace技术：内部创业公司应该独立运营</h1><p>上一节我们讲了 Docker 的基本原理，今天我们来看一下，“看起来隔离的”技术 namespace 在内核里面是如何工作的。</p><p>既然容器是一种类似公司内部创业的技术，我们可以设想一下，如果一个创新项目要独立运营，应该成立哪些看起来独立的组织和部门呢？</p><p>首先是<strong>用户管理</strong>，咱们这个小分队应该有自己独立的用户和组管理体系，公司里面并不是任何人都知道我们在做什么。</p><p>其次是<strong>项目管理</strong>，咱们应该有自己独立的项目管理体系，不能按照大公司的来。</p><p>然后是<strong>档案管理</strong>，咱们这个创新项目的资料一定要保密，要不然创意让人家偷走了可不好。</p><p>最后就是<strong>合作部</strong>，咱们这个小分队还是要和公司其他部门或者其他公司合作的，所以需要一个外向的人来干这件事情。</p><p>对应到容器技术，为了隔离不同类型的资源，Linux 内核里面实现了以下几种不同类型的 namespace。</p><ul><li>UTS，对应的宏为 CLONE_NEWUTS，表示不同的 namespace 可以配置不同的 hostname。</li><li>User，对应的宏为 CLONE_NEWUSER，表示不同的 namespace 可以配置不同的用户和组。</li><li>Mount，对应的宏为 CLONE_NEWNS，表示不同的 namespace 的文件系统挂载点是隔离的</li><li>PID，对应的宏为 CLONE_NEWPID，表示不同的 namespace 有完全独立的 pid，也即一个 namespace 的进程和另一个 namespace 的进程，pid 可以是一样的，但是代表不同的进程。</li><li>Network，对应的宏为 CLONE_NEWNET，表示不同的 namespace 有独立的网络协议栈。</li></ul><p>还记得咱们启动的那个容器吗？</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">docker</span> <span class="token expression">ps</span></span>
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
f604f0e34bc2        testnginx<span class="token operator">:</span><span class="token number">1</span>         <span class="token string">&quot;/bin/sh -c &#39;nginx -…&quot;</span>   <span class="token number">17</span> hours ago        Up <span class="token number">17</span> hours         <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">:</span><span class="token number">8081</span><span class="token operator">-&gt;</span><span class="token number">80</span><span class="token operator">/</span>tcp   youthful_torvalds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看这个容器对应的 entrypoint 的 pid。通过 docker inspect 命令，可以看到，进程号为 58212。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span>root@deployer <span class="token operator">~</span><span class="token punctuation">]</span># docker inspect f604f0e34bc2
<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;Id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;f604f0e34bc263bc32ba683d97a1db2a65de42ab052da16df3c7811ad07f0dc3&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;Created&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2019-07-15T17:43:44.158300531Z&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;Path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;Args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;nginx -g \\&quot;daemon off;\\&quot;&quot;</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">&quot;State&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;running&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Running&quot;</span><span class="token operator">:</span> true<span class="token punctuation">,</span>
            <span class="token string">&quot;Pid&quot;</span><span class="token operator">:</span> <span class="token number">58212</span><span class="token punctuation">,</span>
            <span class="token string">&quot;ExitCode&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token string">&quot;StartedAt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2019-07-15T17:43:44.651756682Z&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;FinishedAt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0001-01-01T00:00:00Z&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token string">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/youthful_torvalds&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;RestartCount&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
        <span class="token string">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;overlay2&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;Platform&quot;</span><span class="token operator">:</span> <span class="token string">&quot;linux&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;HostConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;NetworkMode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;PortBindings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;80/tcp&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token punctuation">{</span>
                        <span class="token string">&quot;HostIp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;HostPort&quot;</span><span class="token operator">:</span> <span class="token string">&quot;8081&quot;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&quot;Config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Hostname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;f604f0e34bc2&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;ExposedPorts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;80/tcp&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Image&quot;</span><span class="token operator">:</span> <span class="token string">&quot;testnginx:1&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Entrypoint&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;nginx -g \\&quot;daemon off;\\&quot;&quot;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&quot;NetworkSettings&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Bridge&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;SandboxID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;7fd3eb469578903b66687090e512958658ae28d17bce1a7cee2da3148d1dfad4&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Ports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;80/tcp&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token punctuation">{</span>
                        <span class="token string">&quot;HostIp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;HostPort&quot;</span><span class="token operator">:</span> <span class="token string">&quot;8081&quot;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Gateway&quot;</span><span class="token operator">:</span> <span class="token string">&quot;172.17.0.1&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;IPAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;172.17.0.3&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;IPPrefixLen&quot;</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
            <span class="token string">&quot;MacAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;02:42:ac:11:00:03&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Networks&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;bridge&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token string">&quot;NetworkID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;c8eef1603afb399bf17af154be202fd1e543d3772cc83ef4a1ca3f97b8bd6eda&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;EndpointID&quot;</span><span class="token operator">:</span> <span class="token string">&quot;8d9bb18ca57889112e758ede193d2cfb45cbf794c9d952819763c08f8545da46&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;Gateway&quot;</span><span class="token operator">:</span> <span class="token string">&quot;172.17.0.1&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;IPAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;172.17.0.3&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;IPPrefixLen&quot;</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;MacAddress&quot;</span><span class="token operator">:</span> <span class="token string">&quot;02:42:ac:11:00:03&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们用 ps 查看机器上的 nginx 进程，可以看到 master 和 worker，worker 的父进程是 master。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ps</span> <span class="token expression"><span class="token operator">-</span>ef <span class="token operator">|</span>grep nginx</span></span>
root     <span class="token number">58212</span> <span class="token number">58195</span>  <span class="token number">0</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">43</span> <span class="token operator">?</span>        <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> <span class="token operator">/</span>bin<span class="token operator">/</span>sh <span class="token operator">-</span>c nginx <span class="token operator">-</span>g <span class="token string">&quot;daemon off;&quot;</span>
root     <span class="token number">58244</span> <span class="token number">58212</span>  <span class="token number">0</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">43</span> <span class="token operator">?</span>        <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> nginx<span class="token operator">:</span> master process nginx <span class="token operator">-</span>g daemon off<span class="token punctuation">;</span>
<span class="token number">33</span>       <span class="token number">58250</span> <span class="token number">58244</span>  <span class="token number">0</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">43</span> <span class="token operator">?</span>        <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> nginx<span class="token operator">:</span> worker process
<span class="token number">33</span>       <span class="token number">58251</span> <span class="token number">58244</span>  <span class="token number">0</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">43</span> <span class="token operator">?</span>        <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">05</span> nginx<span class="token operator">:</span> worker process
<span class="token number">33</span>       <span class="token number">58252</span> <span class="token number">58244</span>  <span class="token number">0</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">43</span> <span class="token operator">?</span>        <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">05</span> nginx<span class="token operator">:</span> worker process
<span class="token number">33</span>       <span class="token number">58253</span> <span class="token number">58244</span>  <span class="token number">0</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">43</span> <span class="token operator">?</span>        <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">05</span> nginx<span class="token operator">:</span> worker process
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 /proc/pid/ns 里面，我们能够看到这个进程所属于的 6 种 namespace。我们拿出两个进程来，应该可以看出来，它们属于同一个 namespace。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ls</span> <span class="token expression"><span class="token operator">-</span>l <span class="token operator">/</span>proc<span class="token operator">/</span><span class="token number">58212</span><span class="token operator">/</span>ns </span></span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">19</span> ipc <span class="token operator">-&gt;</span> ipc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026532278</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">19</span> mnt <span class="token operator">-&gt;</span> mnt<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026532276</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">43</span> net <span class="token operator">-&gt;</span> net<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026532281</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">19</span> pid <span class="token operator">-&gt;</span> pid<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026532279</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">19</span> user <span class="token operator">-&gt;</span> user<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026531837</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">19</span> uts <span class="token operator">-&gt;</span> uts<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026532277</span><span class="token punctuation">]</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ls</span> <span class="token expression"><span class="token operator">-</span>l <span class="token operator">/</span>proc<span class="token operator">/</span><span class="token number">58253</span><span class="token operator">/</span>ns </span></span>
lrwxrwxrwx <span class="token number">1</span> <span class="token number">33</span> tape <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">20</span> ipc <span class="token operator">-&gt;</span> ipc<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026532278</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> <span class="token number">33</span> tape <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">20</span> mnt <span class="token operator">-&gt;</span> mnt<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026532276</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> <span class="token number">33</span> tape <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">20</span> net <span class="token operator">-&gt;</span> net<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026532281</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> <span class="token number">33</span> tape <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">20</span> pid <span class="token operator">-&gt;</span> pid<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026532279</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> <span class="token number">33</span> tape <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">20</span> user <span class="token operator">-&gt;</span> user<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026531837</span><span class="token punctuation">]</span>
lrwxrwxrwx <span class="token number">1</span> <span class="token number">33</span> tape <span class="token number">0</span> Jul <span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">20</span> uts <span class="token operator">-&gt;</span> uts<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">4026532277</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们来看，如何操作 namespace。这里我们重点关注 pid 和 network。</p><p>操作 namespace 的常用指令 <strong>nsenter</strong>，可以用来运行一个进程，进入指定的 namespace。例如，通过下面的命令，我们可以运行 /bin/bash，并且进入 nginx 所在容器的 namespace。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">nsenter</span> <span class="token expression"><span class="token operator">--</span>target <span class="token number">58212</span> <span class="token operator">--</span>mount <span class="token operator">--</span>uts <span class="token operator">--</span>ipc <span class="token operator">--</span>net <span class="token operator">--</span>pid <span class="token operator">--</span> env <span class="token operator">--</span>ignore<span class="token operator">-</span>environment <span class="token operator">--</span> <span class="token operator">/</span>bin<span class="token operator">/</span>bash</span></span>

root@f604f0e34bc2<span class="token operator">:</span><span class="token operator">/</span># ip addr
<span class="token number">1</span><span class="token operator">:</span> lo<span class="token operator">:</span> <span class="token operator">&lt;</span>LOOPBACK<span class="token punctuation">,</span>UP<span class="token punctuation">,</span>LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group <span class="token keyword">default</span> qlen <span class="token number">1000</span>
    link<span class="token operator">/</span>loopback <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> brd <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>
    inet <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">8</span> scope host lo
       valid_lft forever preferred_lft forever
<span class="token number">23</span><span class="token operator">:</span> eth0@if24<span class="token operator">:</span> <span class="token operator">&lt;</span>BROADCAST<span class="token punctuation">,</span>MULTICAST<span class="token punctuation">,</span>UP<span class="token punctuation">,</span>LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group <span class="token keyword">default</span> 
    link<span class="token operator">/</span>ether <span class="token number">02</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span>ac<span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">03</span> brd ff<span class="token operator">:</span>ff<span class="token operator">:</span>ff<span class="token operator">:</span>ff<span class="token operator">:</span>ff<span class="token operator">:</span>ff
    inet <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">16</span> brd <span class="token number">172.17</span><span class="token number">.255</span><span class="token number">.255</span> scope global eth0
       valid_lft forever preferred_lft forever
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个命令是 <strong>unshare</strong>，它会离开当前的 namespace，创建且加入新的 namespace，然后执行参数中指定的命令。</p><p>例如，运行下面这行命令之后，pid 和 net 都进入了新的 namespace。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>unshare <span class="token operator">--</span>mount <span class="token operator">--</span>ipc <span class="token operator">--</span>pid <span class="token operator">--</span>net <span class="token operator">--</span>mount<span class="token operator">-</span>proc<span class="token operator">=</span><span class="token operator">/</span>proc <span class="token operator">--</span>fork <span class="token operator">/</span>bin<span class="token operator">/</span>bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果从 shell 上运行上面这行命令的话，好像没有什么变化，但是因为 pid 和 net 都进入了新的 namespace，所以我们查看进程列表和 ip 地址的时候应该会发现有所不同。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ip</span> <span class="token expression">addr</span></span>
<span class="token number">1</span><span class="token operator">:</span> lo<span class="token operator">:</span> <span class="token operator">&lt;</span>LOOPBACK<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noop state DOWN group <span class="token keyword">default</span> qlen <span class="token number">1000</span>
    link<span class="token operator">/</span>loopback <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> brd <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ps</span> <span class="token expression">aux</span></span>
USER       PID <span class="token operator">%</span>CPU <span class="token operator">%</span>MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         <span class="token number">1</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">115568</span>  <span class="token number">2136</span> pts<span class="token operator">/</span><span class="token number">0</span>    S    <span class="token number">22</span><span class="token operator">:</span><span class="token number">55</span>   <span class="token number">0</span><span class="token operator">:</span><span class="token number">00</span> <span class="token operator">/</span>bin<span class="token operator">/</span>bash
root        <span class="token number">13</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">155360</span>  <span class="token number">1872</span> pts<span class="token operator">/</span><span class="token number">0</span>    R<span class="token operator">+</span>   <span class="token number">22</span><span class="token operator">:</span><span class="token number">55</span>   <span class="token number">0</span><span class="token operator">:</span><span class="token number">00</span> ps aux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>果真，我们看不到宿主机上的 IP 地址和网卡了，也看不到宿主机上的所有进程了。</p><p>另外，我们还可以通过函数操作 namespace。</p><p>第一个函数是 <strong>clone</strong>，也就是创建一个新的进程，并把它放到新的 namespace 中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>child_stack<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>clone 函数我们原来介绍过。这里面有一个参数 flags，原来我们没有注意它。其实它可以设置为 CLONE_NEWUTS、CLONE_NEWUSER、CLONE_NEWNS、CLONE_NEWPID。CLONE_NEWNET 会将 clone 出来的新进程放到新的 namespace 中。</p><p>第二个函数是 <strong>setns</strong>，用于将当前进程加入到已有的 namespace 中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">setns</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> nstype<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，fd 指向 /proc/[pid]/ns/ 目录里相应 namespace 对应的文件，表示要加入哪个 namespace。nstype 用来指定 namespace 的类型，可以设置为 CLONE_NEWUTS、CLONE_NEWUSER、CLONE_NEWNS、CLONE_NEWPID 和 CLONE_NEWNET。</p><p>第三个函数是 <strong>unshare</strong>，它可以使当前进程退出当前的 namespace，并加入到新创建的 namespace。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">unshare</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，flags 用于指定一个或者多个上面的 CLONE_NEWUTS、CLONE_NEWUSER、CLONE_NEWNS、CLONE_NEWPID 和 CLONE_NEWNET。</p><p>clone 和 unshare 的区别是，unshare 是使当前进程加入新的 namespace；clone 是创建一个新的子进程，然后让子进程加入新的 namespace，而当前进程保持不变。</p><p>这里我们尝试一下，通过 clone 函数来进入一个 namespace。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/utsname.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STACK_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">childFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;In child process.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">&quot;bash&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bash&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>stack<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>stackTop<span class="token punctuation">;</span>
    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>

    stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>STACK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;malloc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    stackTop <span class="token operator">=</span> stack <span class="token operator">+</span> STACK_SIZE<span class="token punctuation">;</span>

    pid <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>childFunc<span class="token punctuation">,</span> stackTop<span class="token punctuation">,</span> CLONE_NEWNS<span class="token operator">|</span>CLONE_NEWPID<span class="token operator">|</span>CLONE_NEWNET<span class="token operator">|</span>SIGCHLD<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;clone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;clone() returned %ld\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;waitpid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;child has terminated\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们调用 clone 的时候，给的参数是 CLONE_NEWNS|CLONE_NEWPID|CLONE_NEWNET，也就是说，我们会进入一个新的 pid、network，以及 mount 的 namespace。</p><p>如果我们编译运行它，可以得到下面的结果。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">echo</span> <span class="token expression">$$</span></span>
<span class="token number">64267</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ps</span> <span class="token expression">aux <span class="token operator">|</span> grep bash <span class="token operator">|</span> grep <span class="token operator">-</span>v grep</span></span>
root     <span class="token number">64267</span>  <span class="token number">0.0</span>  <span class="token number">0.0</span> <span class="token number">115572</span>  <span class="token number">2176</span> pts<span class="token operator">/</span><span class="token number">0</span>    Ss   <span class="token number">16</span><span class="token operator">:</span><span class="token number">53</span>   <span class="token number">0</span><span class="token operator">:</span><span class="token number">00</span> <span class="token operator">-</span>bash

# <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out           
<span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> returned <span class="token number">64360</span>
In child process<span class="token punctuation">.</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">echo</span> <span class="token expression">$$</span></span>
<span class="token number">1</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ip</span> <span class="token expression">addr</span></span>
<span class="token number">1</span><span class="token operator">:</span> lo<span class="token operator">:</span> <span class="token operator">&lt;</span>LOOPBACK<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noop state DOWN group <span class="token keyword">default</span> qlen <span class="token number">1000</span>
    link<span class="token operator">/</span>loopback <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> brd <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">exit</span></span>
exit
child has terminated

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">echo</span> <span class="token expression">$$           </span></span>
<span class="token number">64267</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过echo $$，我们可以得到当前 bash 的进程号。一旦运行了上面的程序，我们就会进入一个新的 pid 的 namespace。</p><p>当我们再次 <code>echo $$</code> 的时候就会发现，当前 bash 的进程号变成了 1。上面的程序运行了一个新的 bash，它在一个独立的 pid namespace 里面，自己是 1 号进程。如果运行 ip addr，可以看到，宿主机的网卡都找不到了，因为新的 bash 也在一个独立的 network namespace 里面，等退出了，再次 <code>echo $$</code> 的时候，就可以得到原来进程号。</p><p>clone 系统调用我们在进程的创建那一节解析过，当时我们没有看关于 namespace 的代码，现在我们就来看一看，namespace 在内核做了哪些事情。</p><p>在内核里面，clone 会调用 _do_fork-&gt;copy_process-&gt;copy_namespaces，也就是说，在创建子进程的时候，有一个机会可以复制和设置 namespace。</p><p>namespace 是在哪里定义的呢？在每一个进程的 task_struct 里面，有一个指向 namespace 结构体的指针 nsproxy。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/* Namespaces: */</span>
  <span class="token keyword">struct</span> <span class="token class-name">nsproxy</span>      <span class="token operator">*</span>nsproxy<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * A structure to contain pointers to all per-process
 * namespaces - fs (mount), uts, network, sysvipc, etc.
 *
 * The pid namespace is an exception -- it&#39;s accessed using
 * task_active_pid_ns.  The pid namespace here is the
 * namespace that children will use.
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">nsproxy</span> <span class="token punctuation">{</span>
  <span class="token class-name">atomic_t</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">uts_namespace</span> <span class="token operator">*</span>uts_ns<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ipc_ns<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mnt_namespace</span> <span class="token operator">*</span>mnt_ns<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">pid_namespace</span> <span class="token operator">*</span>pid_ns_for_children<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">net</span>        <span class="token operator">*</span>net_ns<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cgroup_namespace</span> <span class="token operator">*</span>cgroup_ns<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到在 struct nsproxy 结构里面，有我们上面讲过的各种 namespace。</p><p>在系统初始化的时候，有一个默认的 init_nsproxy。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">nsproxy</span> init_nsproxy <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>count      <span class="token operator">=</span> <span class="token function">ATOMIC_INIT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>uts_ns      <span class="token operator">=</span> <span class="token operator">&amp;</span>init_uts_ns<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_POSIX_MQUEUE<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">defined</span><span class="token punctuation">(</span>CONFIG_SYSVIPC<span class="token punctuation">)</span></span></span>
  <span class="token punctuation">.</span>ipc_ns      <span class="token operator">=</span> <span class="token operator">&amp;</span>init_ipc_ns<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token punctuation">.</span>mnt_ns      <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>pid_ns_for_children  <span class="token operator">=</span> <span class="token operator">&amp;</span>init_pid_ns<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_NET</span></span>
  <span class="token punctuation">.</span>net_ns      <span class="token operator">=</span> <span class="token operator">&amp;</span>init_net<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_CGROUPS</span></span>
  <span class="token punctuation">.</span>cgroup_ns    <span class="token operator">=</span> <span class="token operator">&amp;</span>init_cgroup_ns<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面，我们来看 copy_namespaces 的实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * called from clone.  This now handles copy for nsproxy and all
 * namespaces therein.
 */</span>
<span class="token keyword">int</span> <span class="token function">copy_namespaces</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">nsproxy</span> <span class="token operator">*</span>old_ns <span class="token operator">=</span> tsk<span class="token operator">-&gt;</span>nsproxy<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns <span class="token operator">=</span> <span class="token function">task_cred_xxx</span><span class="token punctuation">(</span>tsk<span class="token punctuation">,</span> user_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">nsproxy</span> <span class="token operator">*</span>new_ns<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>CLONE_NEWNS <span class="token operator">|</span> CLONE_NEWUTS <span class="token operator">|</span> CLONE_NEWIPC <span class="token operator">|</span>
            CLONE_NEWPID <span class="token operator">|</span> CLONE_NEWNET <span class="token operator">|</span>
            CLONE_NEWCGROUP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">get_nsproxy</span><span class="token punctuation">(</span>old_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ns_capable</span><span class="token punctuation">(</span>user_ns<span class="token punctuation">,</span> CAP_SYS_ADMIN<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EPERM<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  new_ns <span class="token operator">=</span> <span class="token function">create_new_namespaces</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> tsk<span class="token punctuation">,</span> user_ns<span class="token punctuation">,</span> tsk<span class="token operator">-&gt;</span>fs<span class="token punctuation">)</span><span class="token punctuation">;</span>

  tsk<span class="token operator">-&gt;</span>nsproxy <span class="token operator">=</span> new_ns<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 clone 的参数里面没有 CLONE_NEWNS | CLONE_NEWUTS | CLONE_NEWIPC | CLONE_NEWPID | CLONE_NEWNET | CLONE_NEWCGROUP，就返回原来的 namespace，调用 get_nsproxy。</p><p>接着，我们调用 create_new_namespaces。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * Create new nsproxy and all of its the associated namespaces.
 * Return the newly created nsproxy.  Do not attach this to the task,
 * leave it to the caller to do proper locking and attach it to task.
 */</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">nsproxy</span> <span class="token operator">*</span><span class="token function">create_new_namespaces</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns<span class="token punctuation">,</span>
  <span class="token keyword">struct</span> <span class="token class-name">fs_struct</span> <span class="token operator">*</span>new_fs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">nsproxy</span> <span class="token operator">*</span>new_nsp<span class="token punctuation">;</span>

  new_nsp <span class="token operator">=</span> <span class="token function">create_nsproxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  new_nsp<span class="token operator">-&gt;</span>mnt_ns <span class="token operator">=</span> <span class="token function">copy_mnt_ns</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> tsk<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>mnt_ns<span class="token punctuation">,</span> user_ns<span class="token punctuation">,</span> new_fs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  new_nsp<span class="token operator">-&gt;</span>uts_ns <span class="token operator">=</span> <span class="token function">copy_utsname</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> user_ns<span class="token punctuation">,</span> tsk<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>uts_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  new_nsp<span class="token operator">-&gt;</span>ipc_ns <span class="token operator">=</span> <span class="token function">copy_ipcs</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> user_ns<span class="token punctuation">,</span> tsk<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>ipc_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  new_nsp<span class="token operator">-&gt;</span>pid_ns_for_children <span class="token operator">=</span>
    <span class="token function">copy_pid_ns</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> user_ns<span class="token punctuation">,</span> tsk<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>pid_ns_for_children<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  new_nsp<span class="token operator">-&gt;</span>cgroup_ns <span class="token operator">=</span> <span class="token function">copy_cgroup_ns</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> user_ns<span class="token punctuation">,</span>
              tsk<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>cgroup_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  new_nsp<span class="token operator">-&gt;</span>net_ns <span class="token operator">=</span> <span class="token function">copy_net_ns</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> user_ns<span class="token punctuation">,</span> tsk<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>net_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> new_nsp<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 create_new_namespaces 中，我们可以看到对于各种 namespace 的复制。</p><p>我们来看 copy_pid_ns 对于 pid namespace 的复制。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">pid_namespace</span> <span class="token operator">*</span><span class="token function">copy_pid_ns</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span>
  <span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">pid_namespace</span> <span class="token operator">*</span>old_ns<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> CLONE_NEWPID<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">get_pid_ns</span><span class="token punctuation">(</span>old_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">task_active_pid_ns</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">!=</span> old_ns<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">ERR_PTR</span><span class="token punctuation">(</span><span class="token operator">-</span>EINVAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">create_pid_namespace</span><span class="token punctuation">(</span>user_ns<span class="token punctuation">,</span> old_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 copy_pid_ns 中，如果没有设置 CLONE_NEWPID，则返回老的 pid namespace；如果设置了，就调用 create_pid_namespace，创建新的 pid namespace.</p><p>我们再来看 copy_net_ns 对于 network namespace 的复制。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span><span class="token function">copy_net_ns</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span>
      <span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>old_net<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">ucounts</span> <span class="token operator">*</span>ucounts<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">;</span>
  <span class="token keyword">int</span> rv<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> CLONE_NEWNET<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">get_net</span><span class="token punctuation">(</span>old_net<span class="token punctuation">)</span><span class="token punctuation">;</span>

  ucounts <span class="token operator">=</span> <span class="token function">inc_net_namespaces</span><span class="token punctuation">(</span>user_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  net <span class="token operator">=</span> <span class="token function">net_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">get_user_ns</span><span class="token punctuation">(</span>user_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
  net<span class="token operator">-&gt;</span>ucounts <span class="token operator">=</span> ucounts<span class="token punctuation">;</span>
  rv <span class="token operator">=</span> <span class="token function">setup_net</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> user_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> net<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里面，我们需要判断，如果 flags 中不包含 CLONE_NEWNET，也就是不会创建一个新的 network namespace，则返回 old_net；否则需要新建一个 network namespace。</p><p>然后，copy_net_ns 会调用 net = net_alloc()，分配一个新的 struct net 结构，然后调用 setup_net 对新分配的 net 结构进行初始化，之后调用 list_add_tail_rcu，将新建的 network namespace，添加到全局的 network namespace 列表 net_namespace_list 中。</p><p>我们来看一下 setup_net 的实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * setup_net runs the initializers for the network namespace object.
 */</span>
<span class="token keyword">static</span> __net_init <span class="token keyword">int</span> <span class="token function">setup_net</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/* Must be called with net_mutex held */</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pernet_operations</span> <span class="token operator">*</span>ops<span class="token punctuation">,</span> <span class="token operator">*</span>saved_ops<span class="token punctuation">;</span>
  <span class="token function">LIST_HEAD</span><span class="token punctuation">(</span>net_exit_list<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">atomic_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net<span class="token operator">-&gt;</span>count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">refcount_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net<span class="token operator">-&gt;</span>passive<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  net<span class="token operator">-&gt;</span>dev_base_seq <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  net<span class="token operator">-&gt;</span>user_ns <span class="token operator">=</span> user_ns<span class="token punctuation">;</span>
  <span class="token function">idr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net<span class="token operator">-&gt;</span>netns_ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net<span class="token operator">-&gt;</span>nsid_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>ops<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pernet_list<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    error <span class="token operator">=</span> <span class="token function">ops_init</span><span class="token punctuation">(</span>ops<span class="token punctuation">,</span> net<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 setup_net 中，这里面有一个循环 list_for_each_entry，对于 pernet_list 的每一项 struct pernet_operations，运行 ops_init，也就是调用 pernet_operations 的 init 函数。</p><p>这个 pernet_list 是怎么来的呢？在网络设备初始化的时候，我们要调用 net_dev_init 函数，这里面有下面的代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">register_pernet_device</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>loopback_net_ops<span class="token punctuation">)</span>

<span class="token keyword">int</span> <span class="token function">register_pernet_device</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pernet_operations</span> <span class="token operator">*</span>ops<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> error<span class="token punctuation">;</span>
  <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  error <span class="token operator">=</span> <span class="token function">register_pernet_operations</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pernet_list<span class="token punctuation">,</span> ops<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first_device <span class="token operator">==</span> <span class="token operator">&amp;</span>pernet_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
    first_device <span class="token operator">=</span> <span class="token operator">&amp;</span>ops<span class="token operator">-&gt;</span>list<span class="token punctuation">;</span>
  <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> error<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">pernet_operations</span> __net_initdata loopback_net_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>init <span class="token operator">=</span> loopback_net_init<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>register_pernet_device 函数注册了一个 loopback_net_ops，在这里面，把 init 函数设置为 loopback_net_init.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __net_init <span class="token keyword">int</span> <span class="token function">loopback_net_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">;</span>
        dev <span class="token operator">=</span> <span class="token function">alloc_netdev</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;lo&quot;</span><span class="token punctuation">,</span> NET_NAME_UNKNOWN<span class="token punctuation">,</span> loopback_setup<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token function">dev_net_set</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> net<span class="token punctuation">)</span><span class="token punctuation">;</span>
        err <span class="token operator">=</span> <span class="token function">register_netdev</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        net<span class="token operator">-&gt;</span>loopback_dev <span class="token operator">=</span> dev<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 loopback_net_init 函数中，我们会创建并且注册一个名字为&quot;lo&quot;的 struct net_device。注册完之后，在这个 namespace 里面就会出现一个这样的网络设备，称为 loopback 网络设备。</p><p>这就是为什么上面的实验中，创建出的新的 network namespace 里面有一个 lo 网络设备。</p><p><strong>总结时刻</strong></p><p>这一节我们讲了 namespace 相关的技术，有六种类型，分别是 UTS、User、Mount、Pid、Network 和 IPC。</p><p>还有两个常用的命令 nsenter 和 unshare，主要用于操作 Namespace，有三个常用的函数 clone、setns 和 unshare。</p><p>在内核里面，对于任何一个进程 task_struct 来讲，里面都会有一个成员 struct nsproxy，用于保存 namespace 相关信息，里面有 struct uts_namespace、struct ipc_namespace、struct mnt_namespace、struct pid_namespace、struct net *net_ns 和 struct cgroup_namespace *cgroup_ns。</p><p>创建 namespace 的时候，我们在内核中会调用 copy_namespaces，调用顺序依次是 copy_mnt_ns、copy_utsname、copy_ipcs、copy_pid_ns、copy_cgroup_ns 和 copy_net_ns，来复制 namespace。</p><figure><img src="`+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>课堂练习</strong></p><p>网络的 Namespace 有一个非常好的命令 ip netns。请你研究一下这个命令，并且创建一个容器，用这个命令查看网络 namespace。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p>',82),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(t,[["render",l],["__file","O57-Namespace技术.html.vue"]]);export{d as default};
