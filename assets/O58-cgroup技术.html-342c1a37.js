import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/1c762a6283429ff3587a7fc370fc090f-67d6d18c.png",e="/assets/c9cc56d20e6a4bac0f9657e6380a96c4-19fd0f8b.png",c={},o=p(`<h1 id="_58-cgroup技术-内部创业公司应该独立核算成本" tabindex="-1"><a class="header-anchor" href="#_58-cgroup技术-内部创业公司应该独立核算成本" aria-hidden="true">#</a> 58 | cgroup技术：内部创业公司应该独立核算成本</h1><p>我们前面说了，容器实现封闭的环境主要靠两种技术，一种是“看起来是隔离”的技术 Namespace，另一种是用起来是隔离的技术 cgroup。</p><p>上一节我们讲了“看起来隔离“的技术 Namespace，这一节我们就来看一下“用起来隔离“的技术 cgroup。</p><p>cgroup 全称是 control group，顾名思义，它是用来做“控制”的。控制什么东西呢？当然是资源的使用了。那它都能控制哪些资源的使用呢？我们一起来看一看。</p><p>首先，cgroup 定义了下面的一系列子系统，每个子系统用于控制某一类资源。</p><ul><li>CPU 子系统，主要限制进程的 CPU 使用率。</li><li>cpuacct 子系统，可以统计 cgroup 中的进程的 CPU 使用报告。</li><li>cpuset 子系统，可以为 cgroup 中的进程分配单独的 CPU 节点或者内存节点。</li><li>memory 子系统，可以限制进程的 Memory 使用量。</li><li>blkio 子系统，可以限制进程的块设备 IO。</li><li>devices 子系统，可以控制进程能够访问某些设备。</li><li>net_cls 子系统，可以标记 cgroups 中进程的网络数据包，然后可以使用 tc 模块（traffic control）对数据包进行控制。</li><li>freezer 子系统，可以挂起或者恢复 cgroup 中的进程。</li></ul><p>这么多子系统，你可能要说了，那我们不用都掌握吧？没错，这里面最常用的是对于 CPU 和内存的控制，所以下面我们详细来说它。</p><p>在容器这一章的第一节，我们讲了，Docker 有一些参数能够限制 CPU 和内存的使用，如果把它落地到 cgroup 里面会如何限制呢？</p><p>为了验证 Docker 的参数与 cgroup 的映射关系，我们运行一个命令特殊的 docker run 命令，这个命令比较长，里面的参数都会映射为 cgroup 的某项配置，然后我们运行 docker ps，可以看到，这个容器的 id 为 3dc0601189dd。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>docker run <span class="token operator">-</span>d <span class="token operator">--</span>cpu<span class="token operator">-</span>shares <span class="token number">513</span> <span class="token operator">--</span>cpus <span class="token number">2</span> <span class="token operator">--</span>cpuset<span class="token operator">-</span>cpus <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token operator">--</span>memory <span class="token number">1024</span>M <span class="token operator">--</span>memory<span class="token operator">-</span>swap <span class="token number">1234</span>M <span class="token operator">--</span>memory<span class="token operator">-</span>swappiness <span class="token number">7</span> <span class="token operator">-</span>p <span class="token number">8081</span><span class="token operator">:</span><span class="token number">80</span> testnginx<span class="token operator">:</span><span class="token number">1</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">docker</span> <span class="token expression">ps</span></span>
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                  NAMES
<span class="token number">3</span>dc0601189dd        testnginx<span class="token operator">:</span><span class="token number">1</span>         <span class="token string">&quot;/bin/sh -c &#39;nginx -…&quot;</span>   About a minute ago   Up About a minute   <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">:</span><span class="token number">8081</span><span class="token operator">-&gt;</span><span class="token number">80</span><span class="token operator">/</span>tcp   boring_cohen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Linux 上，为了操作 cgroup，有一个专门的 cgroup 文件系统，我们运行 mount 命令可以查看。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">mount</span> <span class="token expression"><span class="token operator">-</span>t cgroup</span></span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>systemd type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>xattr<span class="token punctuation">,</span>release_agent<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>systemd<span class="token operator">/</span>systemd<span class="token operator">-</span>cgroups<span class="token operator">-</span>agent<span class="token punctuation">,</span>name<span class="token operator">=</span>systemd<span class="token punctuation">)</span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>net_cls<span class="token punctuation">,</span>net_prio type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>net_prio<span class="token punctuation">,</span>net_cls<span class="token punctuation">)</span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>perf_event type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>perf_event<span class="token punctuation">)</span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>devices type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>devices<span class="token punctuation">)</span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>blkio type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>blkio<span class="token punctuation">)</span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>cpu<span class="token punctuation">,</span>cpuacct type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>cpuacct<span class="token punctuation">,</span>cpu<span class="token punctuation">)</span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>memory type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>memory<span class="token punctuation">)</span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>cpuset type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>cpuset<span class="token punctuation">)</span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>hugetlb type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>hugetlb<span class="token punctuation">)</span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>freezer type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>freezer<span class="token punctuation">)</span>
cgroup on <span class="token operator">/</span>sys<span class="token operator">/</span>fs<span class="token operator">/</span>cgroup<span class="token operator">/</span>pids type <span class="token function">cgroup</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>nodev<span class="token punctuation">,</span>noexec<span class="token punctuation">,</span>relatime<span class="token punctuation">,</span>pids<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cgroup 文件系统多挂载到 /sys/fs/cgroup 下，通过上面的命令行，我们可以看到我们可以用 cgroup 控制哪些资源。</p><p>对于 CPU 的控制，我在这一章的第一节讲过，Docker 可以控制 cpu-shares、cpus 和 cpuset。</p><p>我们在 /sys/fs/cgroup/ 下面能看到下面的目录结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">5</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> blkio
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">11</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> cpu <span class="token operator">-&gt;</span> cpu<span class="token punctuation">,</span>cpuacct
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">11</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> cpuacct <span class="token operator">-&gt;</span> cpu<span class="token punctuation">,</span>cpuacct
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">5</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> cpu<span class="token punctuation">,</span>cpuacct
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">3</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> cpuset
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">5</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> devices
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">3</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> freezer
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">3</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> hugetlb
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">5</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> memory
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">16</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> net_cls <span class="token operator">-&gt;</span> net_cls<span class="token punctuation">,</span>net_prio
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">3</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> net_cls<span class="token punctuation">,</span>net_prio
lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">16</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> net_prio <span class="token operator">-&gt;</span> net_cls<span class="token punctuation">,</span>net_prio
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">3</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> perf_event
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">5</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> pids
drwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">5</span> root root  <span class="token number">0</span> May <span class="token number">30</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">00</span> systemd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以想象，CPU 的资源控制的配置文件，应该在 cpu, cpuacct 这个文件夹下面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ls</span></span>
cgroup<span class="token punctuation">.</span>clone_children  cpu<span class="token punctuation">.</span>cfs_period_us  notify_on_release
cgroup<span class="token punctuation">.</span>event_control   cpu<span class="token punctuation">.</span>cfs_quota_us   release_agent
cgroup<span class="token punctuation">.</span>procs           cpu<span class="token punctuation">.</span>rt_period_us   system<span class="token punctuation">.</span>slice
cgroup<span class="token punctuation">.</span>sane_behavior   cpu<span class="token punctuation">.</span>rt_runtime_us  tasks
cpuacct<span class="token punctuation">.</span>stat           cpu<span class="token punctuation">.</span>shares         user<span class="token punctuation">.</span>slice
cpuacct<span class="token punctuation">.</span>usage          cpu<span class="token punctuation">.</span>stat
cpuacct<span class="token punctuation">.</span>usage_percpu   docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>果真，这下面是对 CPU 的相关控制，里面还有一个路径叫 docker。我们进入这个路径。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">]</span># ls
cgroup<span class="token punctuation">.</span>clone_children
cgroup<span class="token punctuation">.</span>event_control
cgroup<span class="token punctuation">.</span>procs
cpuacct<span class="token punctuation">.</span>stat
cpuacct<span class="token punctuation">.</span>usage
cpuacct<span class="token punctuation">.</span>usage_percpu
cpu<span class="token punctuation">.</span>cfs_period_us
cpu<span class="token punctuation">.</span>cfs_quota_us
cpu<span class="token punctuation">.</span>rt_period_us
cpu<span class="token punctuation">.</span>rt_runtime_us
cpu<span class="token punctuation">.</span>shares
cpu<span class="token punctuation">.</span>stat
<span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd
notify_on_release
tasks
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面有个很长的 id，是我们创建的 docker 的 id。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># ls
cgroup<span class="token punctuation">.</span>clone_children  cpuacct<span class="token punctuation">.</span>usage_percpu  cpu<span class="token punctuation">.</span>shares
cgroup<span class="token punctuation">.</span>event_control   cpu<span class="token punctuation">.</span>cfs_period_us     cpu<span class="token punctuation">.</span>stat
cgroup<span class="token punctuation">.</span>procs           cpu<span class="token punctuation">.</span>cfs_quota_us      notify_on_release
cpuacct<span class="token punctuation">.</span>stat           cpu<span class="token punctuation">.</span>rt_period_us      tasks
cpuacct<span class="token punctuation">.</span>usage          cpu<span class="token punctuation">.</span>rt_runtime_us
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们能看到 cpu.shares，还有一个重要的文件 tasks。这里面是这个容器里所有进程的进程号，也即所有这些进程都被这些 CPU 策略控制。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># cat tasks 
<span class="token number">39487</span>
<span class="token number">39520</span>
<span class="token number">39526</span>
<span class="token number">39527</span>
<span class="token number">39528</span>
<span class="token number">39529</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们查看 cpu.shares，里面就是我们设置的 513。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># cat cpu<span class="token punctuation">.</span>shares
<span class="token number">513</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，我们还配置了 cpus，这个值其实是由 cpu.cfs_period_us 和 cpu.cfs_quota_us 共同决定的。cpu.cfs_period_us 是运行周期，cpu.cfs_quota_us 是在周期内这些进程占用多少时间。我们设置了 cpus 为 2，代表的意思是，在周期 100000 微秒的运行周期内，这些进程要占用 200000 微秒的时间，也即需要两个 CPU 同时运行一个整的周期。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># cat cpu<span class="token punctuation">.</span>cfs_period_us
<span class="token number">100000</span>
<span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># cat cpu<span class="token punctuation">.</span>cfs_quota_us
<span class="token number">200000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 cpuset，也即 CPU 绑核的参数，在另外一个文件夹里面 /sys/fs/cgroup/cpuset，这里面同样有一个 docker 文件夹，下面同样有 docker id 也即 3dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd 文件夹，这里面的 cpuset.cpus 就是配置的绑定到 1、3 两个核。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># cat cpuset<span class="token punctuation">.</span>cpus
<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这一章的第一节我们还讲了 Docker 可以限制内存的使用量，例如 memory、memory-swap、memory-swappiness。这些在哪里控制呢？</p><p>/sys/fs/cgroup/ 下面还有一个 memory 路径，控制策略就是在这里面定义的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span>root@deployer memory<span class="token punctuation">]</span># ls
cgroup<span class="token punctuation">.</span>clone_children               memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>failcnt
cgroup<span class="token punctuation">.</span>event_control                memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>limit_in_bytes
cgroup<span class="token punctuation">.</span>procs                        memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>max_usage_in_bytes
cgroup<span class="token punctuation">.</span>sane_behavior                memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>usage_in_bytes
docker                              memory<span class="token punctuation">.</span>move_charge_at_immigrate
memory<span class="token punctuation">.</span>failcnt                      memory<span class="token punctuation">.</span>numa_stat
memory<span class="token punctuation">.</span>force_empty                  memory<span class="token punctuation">.</span>oom_control
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>failcnt                 memory<span class="token punctuation">.</span>pressure_level
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>limit_in_bytes          memory<span class="token punctuation">.</span>soft_limit_in_bytes
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>max_usage_in_bytes      memory<span class="token punctuation">.</span>stat
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>slabinfo                memory<span class="token punctuation">.</span>swappiness
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>failcnt             memory<span class="token punctuation">.</span>usage_in_bytes
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>limit_in_bytes      memory<span class="token punctuation">.</span>use_hierarchy
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>max_usage_in_bytes  notify_on_release
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>usage_in_bytes      release_agent
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>usage_in_bytes          system<span class="token punctuation">.</span>slice
memory<span class="token punctuation">.</span>limit_in_bytes               tasks
memory<span class="token punctuation">.</span>max_usage_in_bytes           user<span class="token punctuation">.</span>slice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面全是对于 memory 的控制参数，在这里面我们可看到了 docker，里面还有容器的 id 作为文件夹。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span>docker<span class="token punctuation">]</span># ls
<span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd
cgroup<span class="token punctuation">.</span>clone_children
cgroup<span class="token punctuation">.</span>event_control
cgroup<span class="token punctuation">.</span>procs
memory<span class="token punctuation">.</span>failcnt
memory<span class="token punctuation">.</span>force_empty
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>failcnt
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>limit_in_bytes
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>max_usage_in_bytes
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>slabinfo
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>failcnt
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>limit_in_bytes
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>max_usage_in_bytes
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>usage_in_bytes
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>usage_in_bytes
memory<span class="token punctuation">.</span>limit_in_bytes
memory<span class="token punctuation">.</span>max_usage_in_bytes
memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>failcnt
memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>limit_in_bytes
memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>max_usage_in_bytes
memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>usage_in_bytes
memory<span class="token punctuation">.</span>move_charge_at_immigrate
memory<span class="token punctuation">.</span>numa_stat
memory<span class="token punctuation">.</span>oom_control
memory<span class="token punctuation">.</span>pressure_level
memory<span class="token punctuation">.</span>soft_limit_in_bytes
memory<span class="token punctuation">.</span>stat
memory<span class="token punctuation">.</span>swappiness
memory<span class="token punctuation">.</span>usage_in_bytes
memory<span class="token punctuation">.</span>use_hierarchy
notify_on_release
tasks

<span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># ls
cgroup<span class="token punctuation">.</span>clone_children               memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>failcnt
cgroup<span class="token punctuation">.</span>event_control                memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>limit_in_bytes
cgroup<span class="token punctuation">.</span>procs                        memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>max_usage_in_bytes
memory<span class="token punctuation">.</span>failcnt                      memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>usage_in_bytes
memory<span class="token punctuation">.</span>force_empty                  memory<span class="token punctuation">.</span>move_charge_at_immigrate
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>failcnt                 memory<span class="token punctuation">.</span>numa_stat
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>limit_in_bytes          memory<span class="token punctuation">.</span>oom_control
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>max_usage_in_bytes      memory<span class="token punctuation">.</span>pressure_level
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>slabinfo                memory<span class="token punctuation">.</span>soft_limit_in_bytes
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>failcnt             memory<span class="token punctuation">.</span>stat
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>limit_in_bytes      memory<span class="token punctuation">.</span>swappiness
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>max_usage_in_bytes  memory<span class="token punctuation">.</span>usage_in_bytes
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>tcp<span class="token punctuation">.</span>usage_in_bytes      memory<span class="token punctuation">.</span>use_hierarchy
memory<span class="token punctuation">.</span>kmem<span class="token punctuation">.</span>usage_in_bytes          notify_on_release
memory<span class="token punctuation">.</span>limit_in_bytes               tasks
memory<span class="token punctuation">.</span>max_usage_in_bytes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 docker id 的文件夹下面，有一个 memory.limit_in_bytes，里面配置的就是 memory。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># cat memory<span class="token punctuation">.</span>limit_in_bytes
<span class="token number">1073741824</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>还有 memory.swappiness，里面配置的就是 memory-swappiness。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># cat memory<span class="token punctuation">.</span>swappiness
<span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>还有就是 memory.memsw.limit_in_bytes，里面配置的是 memory-swap。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># cat memory<span class="token punctuation">.</span>memsw<span class="token punctuation">.</span>limit_in_bytes
<span class="token number">1293942784</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还可以看一下 tasks 文件的内容，tasks 里面是容器里面所有进程的进程号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span><span class="token number">3</span>dc0601189dd218898f31f9526a6cfae83913763a4da59f95ec789c6e030ecfd<span class="token punctuation">]</span># cat tasks 
<span class="token number">39487</span>
<span class="token number">39520</span>
<span class="token number">39526</span>
<span class="token number">39527</span>
<span class="token number">39528</span>
<span class="token number">39529</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们看到了 cgroup 对于 Docker 资源的控制，在用户态是如何表现的。我画了一张图总结一下。</p><figure><img src="`+t+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在内核中，cgroup 是如何实现的呢？</p><p>首先，在系统初始化的时候，cgroup 也会进行初始化，在 start_kernel 中，cgroup_init_early 和 cgroup_init 都会进行初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>asmlinkage __visible <span class="token keyword">void</span> __init <span class="token function">start_kernel</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">cgroup_init_early</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">cgroup_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 cgroup_init_early 和 cgroup_init 中，会有下面的循环。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">for_each_subsys</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ss<span class="token operator">-&gt;</span>id <span class="token operator">=</span> i<span class="token punctuation">;</span>
  ss<span class="token operator">-&gt;</span>name <span class="token operator">=</span> cgroup_subsys_name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">cgroup_init_subsys</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">for_each_subsys</span><span class="token expression"><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> ssid<span class="token punctuation">)</span>          </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ssid<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>ssid<span class="token punctuation">)</span> <span class="token operator">&lt;</span> CGROUP_SUBSYS_COUNT <span class="token operator">&amp;&amp;</span>    </span><span class="token punctuation">\\</span>
       <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token operator">=</span> cgroup_subsys<span class="token punctuation">[</span>ssid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>ssid<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for_each_subsys 会在 cgroup_subsys 数组中进行循环。这个 cgroup_subsys 数组是如何形成的呢？</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SUBSYS</span><span class="token expression"><span class="token punctuation">(</span>_x<span class="token punctuation">)</span> <span class="token punctuation">[</span>_x </span><span class="token punctuation">##</span> <span class="token expression">_cgrp_id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>_x </span><span class="token punctuation">##</span> <span class="token expression">_cgrp_subsys<span class="token punctuation">,</span></span></span>
<span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys</span> <span class="token operator">*</span>cgroup_subsys<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/cgroup_subsys.h&gt;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">SUBSYS</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SUBSYS 这个宏定义了这个 cgroup_subsys 数组，数组中的项定义在 cgroup_subsys.h 头文件中。例如，对于 CPU 和内存有下面的定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//cgroup_subsys.h</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_CPUSETS<span class="token punctuation">)</span></span></span>
<span class="token function">SUBSYS</span><span class="token punctuation">(</span>cpuset<span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_CGROUP_SCHED<span class="token punctuation">)</span></span></span>
<span class="token function">SUBSYS</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_CGROUP_CPUACCT<span class="token punctuation">)</span></span></span>
<span class="token function">SUBSYS</span><span class="token punctuation">(</span>cpuacct<span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_MEMCG<span class="token punctuation">)</span></span></span>
<span class="token function">SUBSYS</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 SUBSYS 的定义，SUBSYS(cpu) 其实是[cpu_cgrp_id] = &amp;cpu_cgrp_subsys，而 SUBSYS(memory) 其实是[memory_cgrp_id] = &amp;memory_cgrp_subsys。</p><p>我们能够找到 cpu_cgrp_subsys 和 memory_cgrp_subsys 的定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>cpuset_cgrp_subsys
<span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys</span> cpuset_cgrp_subsys <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>css_alloc  <span class="token operator">=</span> cpuset_css_alloc<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_online  <span class="token operator">=</span> cpuset_css_online<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_offline  <span class="token operator">=</span> cpuset_css_offline<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_free  <span class="token operator">=</span> cpuset_css_free<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>can_attach  <span class="token operator">=</span> cpuset_can_attach<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>cancel_attach  <span class="token operator">=</span> cpuset_cancel_attach<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>attach    <span class="token operator">=</span> cpuset_attach<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>post_attach  <span class="token operator">=</span> cpuset_post_attach<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>bind    <span class="token operator">=</span> cpuset_bind<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fork    <span class="token operator">=</span> cpuset_fork<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>legacy_cftypes  <span class="token operator">=</span> files<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>early_init  <span class="token operator">=</span> true<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

cpu_cgrp_subsys
<span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys</span> cpu_cgrp_subsys <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>css_alloc  <span class="token operator">=</span> cpu_cgroup_css_alloc<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_online  <span class="token operator">=</span> cpu_cgroup_css_online<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_released  <span class="token operator">=</span> cpu_cgroup_css_released<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_free  <span class="token operator">=</span> cpu_cgroup_css_free<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fork    <span class="token operator">=</span> cpu_cgroup_fork<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>can_attach  <span class="token operator">=</span> cpu_cgroup_can_attach<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>attach    <span class="token operator">=</span> cpu_cgroup_attach<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>legacy_cftypes  <span class="token operator">=</span> cpu_files<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>early_init  <span class="token operator">=</span> true<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

memory_cgrp_subsys
<span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys</span> memory_cgrp_subsys <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>css_alloc <span class="token operator">=</span> mem_cgroup_css_alloc<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_online <span class="token operator">=</span> mem_cgroup_css_online<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_offline <span class="token operator">=</span> mem_cgroup_css_offline<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_released <span class="token operator">=</span> mem_cgroup_css_released<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_free <span class="token operator">=</span> mem_cgroup_css_free<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>css_reset <span class="token operator">=</span> mem_cgroup_css_reset<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>can_attach <span class="token operator">=</span> mem_cgroup_can_attach<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>cancel_attach <span class="token operator">=</span> mem_cgroup_cancel_attach<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>post_attach <span class="token operator">=</span> mem_cgroup_move_task<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>bind <span class="token operator">=</span> mem_cgroup_bind<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>dfl_cftypes <span class="token operator">=</span> memory_files<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>legacy_cftypes <span class="token operator">=</span> mem_cgroup_legacy_files<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>early_init <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 for_each_subsys 的循环里面，cgroup_subsys[]数组中的每一个 cgroup_subsys，都会调用 cgroup_init_subsys，对于 cgroup_subsys 对于初始化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> __init <span class="token function">cgroup_init_subsys</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys</span> <span class="token operator">*</span>ss<span class="token punctuation">,</span> bool early<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys_state</span> <span class="token operator">*</span>css<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">idr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token operator">-&gt;</span>css_idr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token operator">-&gt;</span>cfts<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Create the root cgroup state for this subsystem */</span>
  ss<span class="token operator">-&gt;</span>root <span class="token operator">=</span> <span class="token operator">&amp;</span>cgrp_dfl_root<span class="token punctuation">;</span>
  css <span class="token operator">=</span> ss<span class="token operator">-&gt;</span><span class="token function">css_alloc</span><span class="token punctuation">(</span><span class="token function">cgroup_css</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cgrp_dfl_root<span class="token punctuation">.</span>cgrp<span class="token punctuation">,</span> ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">init_and_link_css</span><span class="token punctuation">(</span>css<span class="token punctuation">,</span> ss<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cgrp_dfl_root<span class="token punctuation">.</span>cgrp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  css<span class="token operator">-&gt;</span>id <span class="token operator">=</span> <span class="token function">cgroup_idr_alloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ss<span class="token operator">-&gt;</span>css_idr<span class="token punctuation">,</span> css<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  init_css_set<span class="token punctuation">.</span>subsys<span class="token punctuation">[</span>ss<span class="token operator">-&gt;</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> css<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">BUG_ON</span><span class="token punctuation">(</span><span class="token function">online_css</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cgroup_init_subsys 里面会做两件事情，一个是调用 cgroup_subsys 的 css_alloc 函数创建一个 cgroup_subsys_state；另外就是调用 online_css，也即调用 cgroup_subsys 的 css_online 函数，激活这个 cgroup。</p><p>对于 CPU 来讲，css_alloc 函数就是 cpu_cgroup_css_alloc。这里面会调用 sched_create_group 创建一个 struct task_group。在这个结构中，第一项就是 cgroup_subsys_state，也就是说，task_group 是 cgroup_subsys_state 的一个扩展，最终返回的是指向 cgroup_subsys_state 结构的指针，可以通过强制类型转换变为 task_group。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_group</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys_state</span> css<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_FAIR_GROUP_SCHED</span></span>
  <span class="token comment">/* schedulable entities of this group on each cpu */</span>
  <span class="token keyword">struct</span> <span class="token class-name">sched_entity</span> <span class="token operator">*</span><span class="token operator">*</span>se<span class="token punctuation">;</span>
  <span class="token comment">/* runqueue &quot;owned&quot; by this group on each cpu */</span>
  <span class="token keyword">struct</span> <span class="token class-name">cfs_rq</span> <span class="token operator">*</span><span class="token operator">*</span>cfs_rq<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> shares<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span>  <span class="token expression">CONFIG_SMP</span></span>
  <span class="token class-name">atomic_long_t</span> load_avg ____cacheline_aligned<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

  <span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> rcu<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> list<span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">task_group</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> siblings<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> children<span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">cfs_bandwidth</span> cfs_bandwidth<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 task_group 结构中，有一个成员是 sched_entity，前面我们讲进程调度的时候，遇到过它。它是调度的实体，也即这一个 task_group 也是一个调度实体。</p><p>接下来，online_css 会被调用。对于 CPU 来讲，online_css 调用的是 cpu_cgroup_css_online。它会调用 sched_online_group-&gt;online_fair_sched_group。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">online_fair_sched_group</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_group</span> <span class="token operator">*</span>tg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">sched_entity</span> <span class="token operator">*</span>se<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">rq</span> <span class="token operator">*</span>rq<span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>

  <span class="token function">for_each_possible_cpu</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rq <span class="token operator">=</span> <span class="token function">cpu_rq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    se <span class="token operator">=</span> tg<span class="token operator">-&gt;</span>se<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">update_rq_clock</span><span class="token punctuation">(</span>rq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">attach_entity_cfs_rq</span><span class="token punctuation">(</span>se<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sync_throttle</span><span class="token punctuation">(</span>tg<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里面，对于每一个 CPU，取出每个 CPU 的运行队列 rq，也取出 task_group 的 sched_entity，然后通过 attach_entity_cfs_rq 将 sched_entity 添加到运行队列中。</p><p>对于内存来讲，css_alloc 函数就是 mem_cgroup_css_alloc。这里面会调用 mem_cgroup_alloc，创建一个 struct mem_cgroup。在这个结构中，第一项就是 cgroup_subsys_state，也就是说，mem_cgroup 是 cgroup_subsys_state 的一个扩展，最终返回的是指向 cgroup_subsys_state 结构的指针，我们可以通过强制类型转换变为 mem_cgroup。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">mem_cgroup</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys_state</span> css<span class="token punctuation">;</span>

  <span class="token comment">/* Private memcg ID. Used to ID objects that outlive the cgroup */</span>
  <span class="token keyword">struct</span> <span class="token class-name">mem_cgroup_id</span> id<span class="token punctuation">;</span>

  <span class="token comment">/* Accounted resources */</span>
  <span class="token keyword">struct</span> <span class="token class-name">page_counter</span> memory<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">page_counter</span> swap<span class="token punctuation">;</span>

  <span class="token comment">/* Legacy consumer-oriented counters */</span>
  <span class="token keyword">struct</span> <span class="token class-name">page_counter</span> memsw<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">page_counter</span> kmem<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">page_counter</span> tcpmem<span class="token punctuation">;</span>

  <span class="token comment">/* Normal memory consumption range */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> low<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> high<span class="token punctuation">;</span>

  <span class="token comment">/* Range enforcement for interrupt charges */</span>
  <span class="token keyword">struct</span> <span class="token class-name">work_struct</span> high_work<span class="token punctuation">;</span>

  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> soft_limit<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">int</span>  swappiness<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/*
   * percpu counter.
   */</span>
  <span class="token keyword">struct</span> <span class="token class-name">mem_cgroup_stat_cpu</span> __percpu <span class="token operator">*</span>stat<span class="token punctuation">;</span>

  <span class="token keyword">int</span> last_scanned_node<span class="token punctuation">;</span>

  <span class="token comment">/* List of events which userspace want to receive */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> event_list<span class="token punctuation">;</span>
  <span class="token class-name">spinlock_t</span> event_list_lock<span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">mem_cgroup_per_node</span> <span class="token operator">*</span>nodeinfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">/* WARNING: nodeinfo must be the last member here */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 cgroup_init 函数中，cgroup 的初始化还做了一件很重要的事情，它会调用 cgroup_init_cftypes(NULL, cgroup1_base_files)，来初始化对于 cgroup 文件类型 cftype 的操作函数，也就是将 struct kernfs_ops *kf_ops 设置为 cgroup_kf_ops。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">cftype</span> cgroup1_base_files<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">{</span>   
        <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;tasks&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>seq_start <span class="token operator">=</span> cgroup_pidlist_start<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>seq_next <span class="token operator">=</span> cgroup_pidlist_next<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>seq_stop <span class="token operator">=</span> cgroup_pidlist_stop<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>seq_show <span class="token operator">=</span> cgroup_pidlist_show<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>private <span class="token operator">=</span> CGROUP_FILE_TASKS<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>write <span class="token operator">=</span> cgroup_tasks_write<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">kernfs_ops</span> cgroup_kf_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>atomic_write_len  <span class="token operator">=</span> PAGE_SIZE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>open      <span class="token operator">=</span> cgroup_file_open<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>release    <span class="token operator">=</span> cgroup_file_release<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write      <span class="token operator">=</span> cgroup_file_write<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>seq_start    <span class="token operator">=</span> cgroup_seqfile_start<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>seq_next    <span class="token operator">=</span> cgroup_seqfile_next<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>seq_stop    <span class="token operator">=</span> cgroup_seqfile_stop<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>seq_show    <span class="token operator">=</span> cgroup_seqfile_show<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 cgroup 初始化完毕之后，接下来就是创建一个 cgroup 的文件系统，用于配置和操作 cgroup。</p><p>cgroup 是一种特殊的文件系统。它的定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> cgroup_fs_type <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;cgroup&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>mount <span class="token operator">=</span> cgroup_mount<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>kill_sb <span class="token operator">=</span> cgroup_kill_sb<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fs_flags <span class="token operator">=</span> FS_USERNS_MOUNT<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们 mount 这个 cgroup 文件系统的时候，会调用 cgroup_mount-&gt;cgroup1_mount。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span><span class="token function">cgroup1_mount</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> <span class="token operator">*</span>fs_type<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>
           <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> magic<span class="token punctuation">,</span>
           <span class="token keyword">struct</span> <span class="token class-name">cgroup_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span>pinned_sb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cgroup_sb_opts</span> opts<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cgroup_root</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys</span> <span class="token operator">*</span>ss<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span>dentry<span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> ret<span class="token punctuation">;</span>
  bool new_root <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  root <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  new_root <span class="token operator">=</span> true<span class="token punctuation">;</span>

  <span class="token function">init_cgroup_root</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span>

  ret <span class="token operator">=</span> <span class="token function">cgroup_setup_root</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>subsys_mask<span class="token punctuation">,</span> PERCPU_REF_INIT_DEAD<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  dentry <span class="token operator">=</span> <span class="token function">cgroup_do_mount</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cgroup_fs_type<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> root<span class="token punctuation">,</span>
         CGROUP_SUPER_MAGIC<span class="token punctuation">,</span> ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> dentry<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cgroup 被组织成为树形结构，因而有 cgroup_root。init_cgroup_root 会初始化这个 cgroup_root。cgroup_root 是 cgroup 的根，它有一个成员 kf_root，是 cgroup 文件系统的根 struct kernfs_root。kernfs_create_root 就是用来创建这个 kernfs_root 结构的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cgroup_setup_root</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cgroup_root</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> u16 ss_mask<span class="token punctuation">,</span> <span class="token keyword">int</span> ref_flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">LIST_HEAD</span><span class="token punctuation">(</span>tmp_links<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cgroup</span> <span class="token operator">*</span>root_cgrp <span class="token operator">=</span> <span class="token operator">&amp;</span>root<span class="token operator">-&gt;</span>cgrp<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kernfs_syscall_ops</span> <span class="token operator">*</span>kf_sops<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">css_set</span> <span class="token operator">*</span>cset<span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> ret<span class="token punctuation">;</span>

  root<span class="token operator">-&gt;</span>kf_root <span class="token operator">=</span> <span class="token function">kernfs_create_root</span><span class="token punctuation">(</span>kf_sops<span class="token punctuation">,</span>
             KERNFS_ROOT_CREATE_DEACTIVATED<span class="token punctuation">,</span>
             root_cgrp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  root_cgrp<span class="token operator">-&gt;</span>kn <span class="token operator">=</span> root<span class="token operator">-&gt;</span>kf_root<span class="token operator">-&gt;</span>kn<span class="token punctuation">;</span>

  ret <span class="token operator">=</span> <span class="token function">css_populate_dir</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root_cgrp<span class="token operator">-&gt;</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ret <span class="token operator">=</span> <span class="token function">rebind_subsystems</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> ss_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>root<span class="token operator">-&gt;</span>root_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cgroup_roots<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cgroup_root_count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">kernfs_activate</span><span class="token punctuation">(</span>root_cgrp<span class="token operator">-&gt;</span>kn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像在普通文件系统上，每一个文件都对应一个 inode，在 cgroup 文件系统上，每个文件都对应一个 struct kernfs_node 结构，当然 kernfs_root 作为文件系的根也对应一个 kernfs_node 结构。</p><p>接下来，css_populate_dir 会调用 cgroup_addrm_files-&gt;cgroup_add_file-&gt;cgroup_add_file，来创建整棵文件树，并且为树中的每个文件创建对应的 kernfs_node 结构，并将这个文件的操作函数设置为 kf_ops，也即指向 cgroup_kf_ops 。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cgroup_add_file</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys_state</span> <span class="token operator">*</span>css<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">cgroup</span> <span class="token operator">*</span>cgrp<span class="token punctuation">,</span>
         <span class="token keyword">struct</span> <span class="token class-name">cftype</span> <span class="token operator">*</span>cft<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span>CGROUP_FILE_NAME_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kernfs_node</span> <span class="token operator">*</span>kn<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  kn <span class="token operator">=</span> <span class="token function">__kernfs_create_file</span><span class="token punctuation">(</span>cgrp<span class="token operator">-&gt;</span>kn<span class="token punctuation">,</span> <span class="token function">cgroup_file_name</span><span class="token punctuation">(</span>cgrp<span class="token punctuation">,</span> cft<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token function">cgroup_file_mode</span><span class="token punctuation">(</span>cft<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cft<span class="token operator">-&gt;</span>kf_ops<span class="token punctuation">,</span> cft<span class="token punctuation">,</span>
          <span class="token constant">NULL</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">kernfs_node</span> <span class="token operator">*</span><span class="token function">__kernfs_create_file</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kernfs_node</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span>
           <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
           <span class="token class-name">umode_t</span> mode<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> size<span class="token punctuation">,</span>
           <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">kernfs_ops</span> <span class="token operator">*</span>ops<span class="token punctuation">,</span>
           <span class="token keyword">void</span> <span class="token operator">*</span>priv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>ns<span class="token punctuation">,</span>
           <span class="token keyword">struct</span> <span class="token class-name">lock_class_key</span> <span class="token operator">*</span>key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kernfs_node</span> <span class="token operator">*</span>kn<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> flags<span class="token punctuation">;</span>
  <span class="token keyword">int</span> rc<span class="token punctuation">;</span>

  flags <span class="token operator">=</span> KERNFS_FILE<span class="token punctuation">;</span>

  kn <span class="token operator">=</span> <span class="token function">kernfs_new_node</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> S_IALLUGO<span class="token punctuation">)</span> <span class="token operator">|</span> S_IFREG<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>

  kn<span class="token operator">-&gt;</span>attr<span class="token punctuation">.</span>ops <span class="token operator">=</span> ops<span class="token punctuation">;</span>
  kn<span class="token operator">-&gt;</span>attr<span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
  kn<span class="token operator">-&gt;</span>ns <span class="token operator">=</span> ns<span class="token punctuation">;</span>
  kn<span class="token operator">-&gt;</span>priv <span class="token operator">=</span> priv<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  rc <span class="token operator">=</span> <span class="token function">kernfs_add_one</span><span class="token punctuation">(</span>kn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> kn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 cgroup_setup_root 返回后，接下来，在 cgroup1_mount 中，要做的一件事情是 cgroup_do_mount，调用 kernfs_mount 真的去 mount 这个文件系统，返回一个普通的文件系统都认识的 dentry。这种特殊的文件系统对应的文件操作函数为 kernfs_file_fops。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> kernfs_file_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>read    <span class="token operator">=</span> kernfs_fop_read<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write    <span class="token operator">=</span> kernfs_fop_write<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>llseek    <span class="token operator">=</span> generic_file_llseek<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>mmap    <span class="token operator">=</span> kernfs_fop_mmap<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>open    <span class="token operator">=</span> kernfs_fop_open<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>release  <span class="token operator">=</span> kernfs_fop_release<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>poll    <span class="token operator">=</span> kernfs_fop_poll<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fsync    <span class="token operator">=</span> noop_fsync<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们要写入一个 CGroup 文件来设置参数的时候，根据文件系统的操作，kernfs_fop_write 会被调用，在这里面会调用 kernfs_ops 的 write 函数，根据上面的定义为 cgroup_file_write，在这里会调用 cftype 的 write 函数。对于 CPU 和内存的 write 函数，有以下不同的定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cftype</span> cpu_files<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_FAIR_GROUP_SCHED</span></span>
    <span class="token punctuation">{</span>   
        <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;shares&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>read_u64 <span class="token operator">=</span> cpu_shares_read_u64<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>write_u64 <span class="token operator">=</span> cpu_shares_write_u64<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_CFS_BANDWIDTH</span></span>
    <span class="token punctuation">{</span>   
        <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;cfs_quota_us&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>read_s64 <span class="token operator">=</span> cpu_cfs_quota_read_s64<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>write_s64 <span class="token operator">=</span> cpu_cfs_quota_write_s64<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span>   
        <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;cfs_period_us&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>read_u64 <span class="token operator">=</span> cpu_cfs_period_read_u64<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>write_u64 <span class="token operator">=</span> cpu_cfs_period_write_u64<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cftype</span> mem_cgroup_legacy_files<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>   
        <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;usage_in_bytes&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>private <span class="token operator">=</span> <span class="token function">MEMFILE_PRIVATE</span><span class="token punctuation">(</span>_MEM<span class="token punctuation">,</span> RES_USAGE<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>read_u64 <span class="token operator">=</span> mem_cgroup_read_u64<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span>   
        <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;max_usage_in_bytes&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>private <span class="token operator">=</span> <span class="token function">MEMFILE_PRIVATE</span><span class="token punctuation">(</span>_MEM<span class="token punctuation">,</span> RES_MAX_USAGE<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>write <span class="token operator">=</span> mem_cgroup_reset<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>read_u64 <span class="token operator">=</span> mem_cgroup_read_u64<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span>   
        <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;limit_in_bytes&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>private <span class="token operator">=</span> <span class="token function">MEMFILE_PRIVATE</span><span class="token punctuation">(</span>_MEM<span class="token punctuation">,</span> RES_LIMIT<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>write <span class="token operator">=</span> mem_cgroup_write<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>read_u64 <span class="token operator">=</span> mem_cgroup_read_u64<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
    <span class="token punctuation">{</span>   
        <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;soft_limit_in_bytes&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>private <span class="token operator">=</span> <span class="token function">MEMFILE_PRIVATE</span><span class="token punctuation">(</span>_MEM<span class="token punctuation">,</span> RES_SOFT_LIMIT<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>write <span class="token operator">=</span> mem_cgroup_write<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>read_u64 <span class="token operator">=</span> mem_cgroup_read_u64<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果设置的是 cpu.shares，则调用 cpu_shares_write_u64。在这里面，task_group 的 shares 变量更新了，并且更新了 CPU 队列上的调度实体。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">sched_group_set_shares</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_group</span> <span class="token operator">*</span>tg<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> shares<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>

  shares <span class="token operator">=</span> <span class="token function">clamp</span><span class="token punctuation">(</span>shares<span class="token punctuation">,</span> <span class="token function">scale_load</span><span class="token punctuation">(</span>MIN_SHARES<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">scale_load</span><span class="token punctuation">(</span>MAX_SHARES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  tg<span class="token operator">-&gt;</span>shares <span class="token operator">=</span> shares<span class="token punctuation">;</span>
  <span class="token function">for_each_possible_cpu</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">rq</span> <span class="token operator">*</span>rq <span class="token operator">=</span> <span class="token function">cpu_rq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sched_entity</span> <span class="token operator">*</span>se <span class="token operator">=</span> tg<span class="token operator">-&gt;</span>se<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rq_flags</span> rf<span class="token punctuation">;</span>

    <span class="token function">update_rq_clock</span><span class="token punctuation">(</span>rq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">for_each_sched_entity</span><span class="token punctuation">(</span>se<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">update_load_avg</span><span class="token punctuation">(</span>se<span class="token punctuation">,</span> UPDATE_TG<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">update_cfs_shares</span><span class="token punctuation">(</span>se<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这个时候别忘了，我们还没有将 CPU 的文件夹下面的 tasks 文件写入进程号呢。写入一个进程号到 tasks 文件里面，按照 cgroup1_base_files 里面的定义，我们应该调用 cgroup_tasks_write。</p><p>接下来的调用链为：cgroup_tasks_write-&gt;__cgroup_procs_write-&gt;cgroup_attach_task-&gt; cgroup_migrate-&gt;cgroup_migrate_execute。将这个进程和一个 cgroup 关联起来，也即将这个进程迁移到这个 cgroup 下面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cgroup_migrate_execute</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cgroup_mgctx</span> <span class="token operator">*</span>mgctx<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">cgroup_taskset</span> <span class="token operator">*</span>tset <span class="token operator">=</span> <span class="token operator">&amp;</span>mgctx<span class="token operator">-&gt;</span>tset<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cgroup_subsys</span> <span class="token operator">*</span>ss<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>task<span class="token punctuation">,</span> <span class="token operator">*</span>tmp_task<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">css_set</span> <span class="token operator">*</span>cset<span class="token punctuation">,</span> <span class="token operator">*</span>tmp_cset<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tset<span class="token operator">-&gt;</span>nr_tasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">do_each_subsys_mask</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> ssid<span class="token punctuation">,</span> mgctx<span class="token operator">-&gt;</span>ss_mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ss<span class="token operator">-&gt;</span>attach<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tset<span class="token operator">-&gt;</span>ssid <span class="token operator">=</span> ssid<span class="token punctuation">;</span>
        ss<span class="token operator">-&gt;</span><span class="token function">attach</span><span class="token punctuation">(</span>tset<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token function">while_each_subsys_mask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个 cgroup 子系统会调用相应的 attach 函数。而 CPU 调用的是 cpu_cgroup_attach-&gt; sched_move_task-&gt; sched_change_group。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sched_change_group</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_group</span> <span class="token operator">*</span>tg<span class="token punctuation">;</span>

  tg <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span><span class="token function">task_css_check</span><span class="token punctuation">(</span>tsk<span class="token punctuation">,</span> cpu_cgrp_id<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">struct</span> <span class="token class-name">task_group</span><span class="token punctuation">,</span> css<span class="token punctuation">)</span><span class="token punctuation">;</span>
  tg <span class="token operator">=</span> <span class="token function">autogroup_task_group</span><span class="token punctuation">(</span>tsk<span class="token punctuation">,</span> tg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  tsk<span class="token operator">-&gt;</span>sched_task_group <span class="token operator">=</span> tg<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_FAIR_GROUP_SCHED</span></span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tsk<span class="token operator">-&gt;</span>sched_class<span class="token operator">-&gt;</span>task_change_group<span class="token punctuation">)</span>
    tsk<span class="token operator">-&gt;</span>sched_class<span class="token operator">-&gt;</span><span class="token function">task_change_group</span><span class="token punctuation">(</span>tsk<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token function">set_task_rq</span><span class="token punctuation">(</span>tsk<span class="token punctuation">,</span> <span class="token function">task_cpu</span><span class="token punctuation">(</span>tsk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 sched_change_group 中设置这个进程以这个 task_group 的方式参与调度，从而使得上面的 cpu.shares 起作用。</p><p>对于内存来讲，写入内存的限制使用函数 mem_cgroup_write-&gt;mem_cgroup_resize_limit 来设置 struct mem_cgroup 的 memory.limit 成员。</p><p>在进程执行过程中，申请内存的时候，我们会调用 handle_pte_fault-&gt;do_anonymous_page()-&gt;mem_cgroup_try_charge()。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">mem_cgroup_try_charge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span>
        <span class="token class-name">gfp_t</span> gfp_mask<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">mem_cgroup</span> <span class="token operator">*</span><span class="token operator">*</span>memcgp<span class="token punctuation">,</span>
        bool compound<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">mem_cgroup</span> <span class="token operator">*</span>memcg <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>memcg<span class="token punctuation">)</span>
    memcg <span class="token operator">=</span> <span class="token function">get_mem_cgroup_from_mm</span><span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>

  ret <span class="token operator">=</span> <span class="token function">try_charge</span><span class="token punctuation">(</span>memcg<span class="token punctuation">,</span> gfp_mask<span class="token punctuation">,</span> nr_pages<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 mem_cgroup_try_charge 中，先是调用 get_mem_cgroup_from_mm 获得这个进程对应的 mem_cgroup 结构，然后在 try_charge 中，根据 mem_cgroup 的限制，看是否可以申请分配内存。</p><p>至此，cgroup 对于内存的限制才真正起作用。</p><p><strong>总结时刻</strong></p><p>内核中 cgroup 的工作机制，我们在这里总结一下。</p><figure><img src="`+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>第一步，系统初始化的时候，初始化 cgroup 的各个子系统的操作函数，分配各个子系统的数据结构。</p><p>第二步，mount cgroup 文件系统，创建文件系统的树形结构，以及操作函数。</p><p>第三步，写入 cgroup 文件，设置 cpu 或者 memory 的相关参数，这个时候文件系统的操作函数会调用到 cgroup 子系统的操作函数，从而将参数设置到 cgroup 子系统的数据结构中。</p><p>第四步，写入 tasks 文件，将进程交给某个 cgroup 进行管理，因为 tasks 文件也是一个 cgroup 文件，统一会调用文件系统的操作函数进而调用 cgroup 子系统的操作函数，将 cgroup 子系统的数据结构和进程关联起来。</p><p>第五步，对于 CPU 来讲，会修改 scheduled entity，放入相应的队列里面去，从而下次调度的时候就起作用了。对于内存的 cgroup 设定，只有在申请内存的时候才起作用。</p><p><strong>课堂练习</strong></p><p>这里我们用 cgroup 限制了 CPU 和内存，如何限制网络呢？给你一个提示 tc，请你研究一下。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p>',108),u=[o];function i(l,r){return s(),a("div",null,u)}const m=n(c,[["render",i],["__file","O58-cgroup技术.html.vue"]]);export{m as default};
