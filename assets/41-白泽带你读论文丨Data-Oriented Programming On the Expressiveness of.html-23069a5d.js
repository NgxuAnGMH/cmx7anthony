import{_ as i,a as r,b as d,c as n}from"./640-1691465760076-219-dfaa4c87.js";import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as g,o as s,c,a as e,b as a,e as h,d as p}from"./app-cdabc73c.js";const _={},m=e("h1",{id:"_41-白泽带你读论文丨data-oriented-programming-on-the-expressiveness-of",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_41-白泽带你读论文丨data-oriented-programming-on-the-expressiveness-of","aria-hidden":"true"},"#"),a(" 41-白泽带你读论文丨Data-Oriented Programming: On the Expressiveness of")],-1),l=e("p",null,[e("strong",null,"Data-Oriented Programming: On the Expressiveness of Non-Control Data Attacks")],-1),f={href:"https://ieeexplore.ieee.org/document/7546545",target:"_blank",rel:"noopener noreferrer"},u=p('<p>本文发表在Oakland 2016，出自新加坡国立大学梁振凯教授的研究组。</p><h2 id="_1-主要内容" tabindex="-1"><a class="header-anchor" href="#_1-主要内容" aria-hidden="true">#</a> <strong>1 主要内容</strong></h2><p>面向数据攻击（Data-Oriented-Attack）近年来逐渐引起重视，与传统的针对程序控制流的劫持攻击不同，面向数据的攻击方式仅从程序数据层面进行攻击，例如采用替换关键变量等形式。面向数据攻击往往被认为能力有限，仅可以<em>实现特定内存的读写、关键变量的访问</em>，但是作者通过收集程序中的计算片段组成gadgets，利用程序中存在<em>内存漏洞的循环</em>（即gadgets dispatcher）将gadgets拼接成特定计算，达成了更加丰富的攻击效果，不仅如此，作者通过自定义的MinDop指令集证明了这种攻击方式可以实现图灵完备的计算。</p><p>最终，作者在9个包含众多CVE的现实世界的程序中，提取出了1273个可用gadgets，110可用的gadgets dispatcher，证明了3个程序存在通过面向数据攻击进行图灵完备计算的所有条件，体现了攻击的有效性和广泛性。</p><h2 id="_2-原理与实现" tabindex="-1"><a class="header-anchor" href="#_2-原理与实现" aria-hidden="true">#</a> <strong>2 原理与实现</strong></h2><figure><img src="'+i+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>DOP的攻击原理如上图所示，其中gadget1-5为源程序中进行运算的程序片段，例如赋值运算、算数运算、取值运算等等，称之为Data-oriented gadget，将这些gadget有序的拼接起来，就实现了我们想要的运算。Gadget Dispatcher为包含这些gadget、存在内存漏洞且可以允许攻击者控制程序中的变量的循环，攻击者通过控制循环中的变量从而达到在不同的循环次数中执行不同Data-oriented gadget的目的。</p><h3 id="a-data-oriented-gadget-identification" tabindex="-1"><a class="header-anchor" href="#a-data-oriented-gadget-identification" aria-hidden="true">#</a> a) Data-oriented gadget identification</h3><p>首先，作者尝试从程序中识别出可以用来进行数据操作的gadget，由于这种攻击<em>只能通过已知的内存漏洞来操纵内存</em>，因此全部的运算都需要在内存中完成，运算的参数必须由内存中读取，而结果必须写回内存，因此目标gadget遵循着<code>load-operation-store</code>这样的指令顺序分布。作者通过对程序进行<mark>静态分析</mark>，识别出所有符合该分布的gadget。</p><h3 id="b-gadget-dispatcher-identification" tabindex="-1"><a class="header-anchor" href="#b-gadget-dispatcher-identification" aria-hidden="true">#</a> b) Gadget dispatcher identification</h3><p>接着，作者寻找可利用的循环作为Gadget dispatcher。寻找分为两个部分。首先，将包含Data-oriented gadget的所有循环作为疑似目标，作者通过程序静态分析，找出所有包含可用gadget的循环。除此之外，为了达到修改内存变量的目标，<em>还要确定该循环中的变量能否通过一个已知的内存漏洞来进行控制</em>。所以，作者利用静态分析对一个已知的内存漏洞位置和已定位的循环进行可达性分析，并利用动态分析记录漏洞函数的call trace，判断循环是否在其中，最终甄选出可使用的循环作为Gadget dispatcher。</p><h3 id="c-data-oriented-gadget-stitching" tabindex="-1"><a class="header-anchor" href="#c-data-oriented-gadget-stitching" aria-hidden="true">#</a> c) Data-oriented gadget stitching</h3><p>最终，作者将搜集到的Data-oriented gadget通过操纵变量的方式结合Gadget dispatcher进行有序的组合，这里主要采用人工的方式来进行分析，并构造合适的输入来触发内存漏洞以控制变量、组合gadgets运算。</p><h3 id="d-mindop-turing-complete" tabindex="-1"><a class="header-anchor" href="#d-mindop-turing-complete" aria-hidden="true">#</a> d) MinDOP - Turing Complete</h3><figure><img src="'+r+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>为了证明这种攻击方式所进行的运算是图灵完备的，作者自定义了<em>一个指令集MinDOP</em>，随后将x86中的指令组成gadgets来模拟MinDOP中的指令，最后通过对经典图灵机进行模拟，证明了MinDOP是图灵完备的，即证明了使用gadgets这种攻击方式可进行的运算是图灵完备的。</p><h2 id="_3-实验评估" tabindex="-1"><a class="header-anchor" href="#_3-实验评估" aria-hidden="true">#</a> <strong>3 实验评估</strong></h2><p>首先作者搜集了现实世界中存在众多CVE的程序，对它们进行静态分析，获取程序中的Data-oriented gadget与Gadget dispatcher。实验结果发现，作者成功获取了可用的Gadget dispatcher有1443个，可用的Data-oriented gadget高达7518个。</p><figure><img src="'+d+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>但是，存在这些gadgets并不代表就可以利用，<em>只有存在内存漏洞可达的情况下才可以来进行构造攻击</em>。因此，作者从每一个程序中挑选出一个CVE进行可达性的分析，最终获得了110个可用的Gadget dispatcher，1273个Data-oriented gadget。并且，通过比较gadgets对于MinDOP的模拟情况，证明了其中3个程序是可以通过这种攻击进行图灵完备计算的。</p><figure><img src="'+n+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><h2 id="_4-总结评价" tabindex="-1"><a class="header-anchor" href="#_4-总结评价" aria-hidden="true">#</a> <strong>4 总结评价</strong></h2><p>本文的攻击视角是非常新颖的，在程序控制流的攻击和防御都日趋完备的情况下，独树一帜的<em>对数据层面的攻击</em>进行了比较深入的研究，并且很好的证明了在现实世界的程序中确实存在许多可以利用的程序片段来进行攻击，从展示的效果上来看攻击十分有效，并且证明了这种攻击的图灵完备性。</p>',23);function x(D,b){const t=g("ExternalLinkIcon");return s(),c("div",null,[m,l,e("p",null,[a("原文链接："),e("a",f,[a("https://ieeexplore.ieee.org/document/7546545"),h(t)])]),u])}const P=o(_,[["render",x],["__file","41-白泽带你读论文丨Data-Oriented Programming On the Expressiveness of.html.vue"]]);export{P as default};
