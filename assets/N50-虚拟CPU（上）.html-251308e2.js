import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/078dc698ef1b3df93ee9569e55ea2f30-695a5094.png",e={},o=p(`<h1 id="_50-计算虚拟化之cpu-上-如何复用集团的人力资源" tabindex="-1"><a class="header-anchor" href="#_50-计算虚拟化之cpu-上-如何复用集团的人力资源" aria-hidden="true">#</a> 50 | 计算虚拟化之CPU（上）：如何复用集团的人力资源？</h1><p>上一节，我们讲了一下虚拟化的基本原理，以及 qemu、kvm 之间的关系。这一节，我们就来看一下，用户态的 qemu 和内核态的 kvm 如何一起协作，来创建虚拟机，实现 CPU 和内存虚拟化。</p><p>这里是上一节我们讲的 qemu 启动时候的命令。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>qemu<span class="token operator">-</span>system<span class="token operator">-</span>x86_64 <span class="token operator">-</span>enable<span class="token operator">-</span>kvm <span class="token operator">-</span>name ubuntutest  <span class="token operator">-</span>m <span class="token number">2048</span> <span class="token operator">-</span>hda ubuntutest<span class="token punctuation">.</span>qcow2 <span class="token operator">-</span>vnc <span class="token operator">:</span><span class="token number">19</span> <span class="token operator">-</span>net nic<span class="token punctuation">,</span>model<span class="token operator">=</span>virtio <span class="token operator">-</span>nettap<span class="token punctuation">,</span>ifname<span class="token operator">=</span>tap0<span class="token punctuation">,</span>script<span class="token operator">=</span>no<span class="token punctuation">,</span>downscript<span class="token operator">=</span>no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，我们在这里下载qemu 的代码。qemu 的 main 函数在 vl.c 下面。这是一个非常非常长的函数，我们来慢慢地解析它。</p><p><strong>1. 初始化所有的 Module</strong></p><p>第一步，初始化所有的 Module，调用下面的函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">module_call_init</span><span class="token punctuation">(</span>MODULE_INIT_QOM<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上一节我们讲过，qemu 作为中间人其实挺累的，对上面的虚拟机需要模拟各种各样的外部设备。当虚拟机真的要使用物理资源的时候，对下面的物理机上的资源要进行请求，所以它的工作模式有点儿类似操作系统对接驱动。驱动要符合一定的格式，才能算操作系统的一个模块。同理，qemu 为了模拟各种各样的设备，也需要管理各种各样的模块，这些模块也需要符合一定的格式。</p><p>定义一个 qemu 模块会调用 type_init。例如，kvm 的模块要在 accel/kvm/kvm-all.c 文件里面实现。在这个文件里面，有一行下面的代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">type_init</span><span class="token punctuation">(</span>kvm_type_init<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">type_init</span><span class="token expression"><span class="token punctuation">(</span>function<span class="token punctuation">)</span> <span class="token function">module_init</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> MODULE_INIT_QOM<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">module_init</span><span class="token expression"><span class="token punctuation">(</span>function<span class="token punctuation">,</span> type<span class="token punctuation">)</span>                                         </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span> do_qemu_init_ </span><span class="token punctuation">##</span> <span class="token expression"><span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>    </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">{</span>                                                                           </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">register_module_init</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">}</span></span></span>

<span class="token keyword">void</span> <span class="token function">register_module_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> module_init_type type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ModuleEntry <span class="token operator">*</span>e<span class="token punctuation">;</span>
    ModuleTypeList <span class="token operator">*</span>l<span class="token punctuation">;</span>

    e <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token operator">-&gt;</span>init <span class="token operator">=</span> fn<span class="token punctuation">;</span>
    e<span class="token operator">-&gt;</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>

    l <span class="token operator">=</span> <span class="token function">find_type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">QTAILQ_INSERT_TAIL</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码里面的定义我们可以看出来，type_init 后面的参数是一个函数，调用 type_init 就相当于调用 module_init，在这里函数就是 kvm_type_init，类型就是 MODULE_INIT_QOM。是不是感觉和驱动有点儿像？</p><p>module_init 最终要调用 register_module_init。属于 MODULE_INIT_QOM 这种类型的，有一个 Module 列表 ModuleTypeList，列表里面是一项一项的 ModuleEntry。KVM 就是其中一项，并且会初始化每一项的 init 函数为参数表示的函数 fn，也即 KVM 这个 module 的 init 函数就是 kvm_type_init。</p><p>当然，MODULE_INIT_QOM 这种类型会有很多很多的 module，从后面的代码我们可以看到，所有调用 type_init 的地方都注册了一个 MODULE_INIT_QOM 类型的 Module。</p><p>了解了 Module 的注册机制，我们继续回到 main 函数中 module_call_init 的调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">module_call_init</span><span class="token punctuation">(</span>module_init_type type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ModuleTypeList <span class="token operator">*</span>l<span class="token punctuation">;</span>
    ModuleEntry <span class="token operator">*</span>e<span class="token punctuation">;</span>
    l <span class="token operator">=</span> <span class="token function">find_type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">QTAILQ_FOREACH</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> l<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token operator">-&gt;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 module_call_init 中，我们会找到 MODULE_INIT_QOM 这种类型对应的 ModuleTypeList，找出列表中所有的 ModuleEntry，然后调用每个 ModuleEntry 的 init 函数。这里需要注意的是，在 module_call_init 调用的这一步，所有 Module 的 init 函数都已经被调用过了。</p><p>后面我们会看到很多的 Module，当你看到它们的时候，你需要意识到，它的 init 函数在这里也被调用过了。这里我们还是以对于 kvm 这个 module 为例子，看看它的 init 函数都做了哪些事情。你会发现，其实它调用的是 kvm_type_init。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">kvm_type_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">type_register_static</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm_accel_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

TypeImpl <span class="token operator">*</span><span class="token function">type_register_static</span><span class="token punctuation">(</span><span class="token keyword">const</span> TypeInfo <span class="token operator">*</span>info<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">type_register</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

TypeImpl <span class="token operator">*</span><span class="token function">type_register</span><span class="token punctuation">(</span><span class="token keyword">const</span> TypeInfo <span class="token operator">*</span>info<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>info<span class="token operator">-&gt;</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">type_register_internal</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> TypeImpl <span class="token operator">*</span><span class="token function">type_register_internal</span><span class="token punctuation">(</span><span class="token keyword">const</span> TypeInfo <span class="token operator">*</span>info<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    TypeImpl <span class="token operator">*</span>ti<span class="token punctuation">;</span>
    ti <span class="token operator">=</span> <span class="token function">type_new</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">type_table_add</span><span class="token punctuation">(</span>ti<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ti<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> TypeImpl <span class="token operator">*</span><span class="token function">type_new</span><span class="token punctuation">(</span><span class="token keyword">const</span> TypeInfo <span class="token operator">*</span>info<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    TypeImpl <span class="token operator">*</span>ti <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ti<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type_table_lookup</span><span class="token punctuation">(</span>info<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    ti<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token function">g_strdup</span><span class="token punctuation">(</span>info<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ti<span class="token operator">-&gt;</span>parent <span class="token operator">=</span> <span class="token function">g_strdup</span><span class="token punctuation">(</span>info<span class="token operator">-&gt;</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>

    ti<span class="token operator">-&gt;</span>class_size <span class="token operator">=</span> info<span class="token operator">-&gt;</span>class_size<span class="token punctuation">;</span>
    ti<span class="token operator">-&gt;</span>instance_size <span class="token operator">=</span> info<span class="token operator">-&gt;</span>instance_size<span class="token punctuation">;</span>

    ti<span class="token operator">-&gt;</span>class_init <span class="token operator">=</span> info<span class="token operator">-&gt;</span>class_init<span class="token punctuation">;</span>
    ti<span class="token operator">-&gt;</span>class_base_init <span class="token operator">=</span> info<span class="token operator">-&gt;</span>class_base_init<span class="token punctuation">;</span>
    ti<span class="token operator">-&gt;</span>class_data <span class="token operator">=</span> info<span class="token operator">-&gt;</span>class_data<span class="token punctuation">;</span>

    ti<span class="token operator">-&gt;</span>instance_init <span class="token operator">=</span> info<span class="token operator">-&gt;</span>instance_init<span class="token punctuation">;</span>
    ti<span class="token operator">-&gt;</span>instance_post_init <span class="token operator">=</span> info<span class="token operator">-&gt;</span>instance_post_init<span class="token punctuation">;</span>
    ti<span class="token operator">-&gt;</span>instance_finalize <span class="token operator">=</span> info<span class="token operator">-&gt;</span>instance_finalize<span class="token punctuation">;</span>

    ti<span class="token operator">-&gt;</span>abstract <span class="token operator">=</span> info<span class="token operator">-&gt;</span>abstract<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> info<span class="token operator">-&gt;</span>interfaces <span class="token operator">&amp;&amp;</span> info<span class="token operator">-&gt;</span>interfaces<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ti<span class="token operator">-&gt;</span>interfaces<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>typename <span class="token operator">=</span> <span class="token function">g_strdup</span><span class="token punctuation">(</span>info<span class="token operator">-&gt;</span>interfaces<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ti<span class="token operator">-&gt;</span>num_interfaces <span class="token operator">=</span> i<span class="token punctuation">;</span>

    <span class="token keyword">return</span> ti<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">type_table_add</span><span class="token punctuation">(</span>TypeImpl <span class="token operator">*</span>ti<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>enumerating_types<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">g_hash_table_insert</span><span class="token punctuation">(</span><span class="token function">type_table_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>ti<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> ti<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> GHashTable <span class="token operator">*</span><span class="token function">type_table_get</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> GHashTable <span class="token operator">*</span>type_table<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>type_table <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        type_table <span class="token operator">=</span> <span class="token function">g_hash_table_new</span><span class="token punctuation">(</span>g_str_hash<span class="token punctuation">,</span> g_str_equal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> type_table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo kvm_accel_type <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> TYPE_KVM_ACCEL<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parent <span class="token operator">=</span> TYPE_ACCEL<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_init <span class="token operator">=</span> kvm_accel_class_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KVMState<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个 Module 既然要模拟某种设备，那应该定义一种类型 TypeImpl 来表示这些设备，这其实是一种面向对象编程的思路，只不过这里用的是纯 C 语言的实现，所以需要变相实现一下类和对象。</p><p>kvm_type_init 会注册 kvm_accel_type，定义上面的代码，我们可以认为这样动态定义了一个类。这个类的名字是 TYPE_KVM_ACCEL，这个类有父类 TYPE_ACCEL，这个类的初始化应该调用函数 kvm_accel_class_init（看，这里已经直接叫类 class 了）。如果用这个类声明一个对象，对象的大小应该是 instance_size。是不是有点儿 Java 语言反射的意思，根据一些名称的定义，一个类就定义好了。</p><p>这里的调用链为：kvm_type_init-&gt;type_register_static-&gt;type_register-&gt;type_register_internal。</p><p>在 type_register_internal 中，我们会根据 kvm_accel_type 这个 TypeInfo，创建一个 TypeImpl 来表示这个新注册的类，也就是说，TypeImpl 才是我们想要声明的那个 class。在 qemu 里面，有一个全局的哈希表 type_table，用来存放所有定义的类。在 type_new 里面，我们先从全局表里面根据名字找这个类。如果找到，说明这个类曾经被注册过，就报错；如果没有找到，说明这是一个新的类，则将 TypeInfo 里面信息填到 TypeImpl 里面。type_table_add 会将这个类注册到全局的表里面。到这里，我们注意，class_init 还没有被调用，也即这个类现在还处于纸面的状态。</p><p>这点更加像 Java 的反射机制了。在 Java 里面，对于一个类，首先我们写代码的时候要写一个 class xxx 的定义，编译好就放在.class 文件中，这也是出于纸面的状态。然后，Java 会有一个 Class 对象，用于读取和表示这个纸面上的 class xxx，可以生成真正的对象。</p><p>相同的过程在后面的代码中我们也可以看到，class_init 会生成 XXXClass，就相当于 Java 里面的 Class 对象，TypeImpl 还会有一个 instance_init 函数，相当于构造函数，用于根据 XXXClass 生成 Object，这就相当于 Java 反射里面最终创建的对象。和构造函数对应的还有 instance_finalize，相当于析构函数。</p><p>这一套反射机制放在 qom 文件夹下面，全称 QEMU Object Model，也即用 C 实现了一套面向对象的反射机制。</p><p>说完了初始化 Module，我们还回到 main 函数接着分析。</p><p><strong>2. 解析 qemu 的命令行</strong></p><p>第二步我们就要开始解析 qemu 的命令行了。qemu 的命令行解析，就是下面这样一长串。还记得咱们自己写过一个解析命令行参数的程序吗？这里的 opts 是差不多的意思。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_drive_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_chardev_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_device_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_netdev_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_nic_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_net_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_rtc_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_machine_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_accel_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_mem_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_smp_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_boot_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_name_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_add_opts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_numa_opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么有这么多的 opts 呢？这是因为，我们上一节给的参数都是简单的参数，实际运行中创建的 kvm 参数会复杂 N 倍。这里我们贴一个开源云平台软件 OpenStack 创建出来的 KVM 的参数，如下所示。不要被吓坏，你不需要全部看懂，只需要看懂一部分就行了。具体我来给你解析。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>qemu<span class="token operator">-</span>system<span class="token operator">-</span>x86_64
<span class="token operator">-</span>enable<span class="token operator">-</span>kvm
<span class="token operator">-</span>name instance<span class="token operator">-</span><span class="token number">00000024</span>
<span class="token operator">-</span>machine pc<span class="token operator">-</span>i440fx<span class="token operator">-</span>trusty<span class="token punctuation">,</span>accel<span class="token operator">=</span>kvm<span class="token punctuation">,</span>usb<span class="token operator">=</span>off
<span class="token operator">-</span>cpu SandyBridge<span class="token punctuation">,</span><span class="token operator">+</span>erms<span class="token punctuation">,</span><span class="token operator">+</span>smep<span class="token punctuation">,</span><span class="token operator">+</span>fsgsbase<span class="token punctuation">,</span><span class="token operator">+</span>pdpe1gb<span class="token punctuation">,</span><span class="token operator">+</span>rdrand<span class="token punctuation">,</span><span class="token operator">+</span>f16c<span class="token punctuation">,</span><span class="token operator">+</span>osxsave<span class="token punctuation">,</span><span class="token operator">+</span>dca<span class="token punctuation">,</span><span class="token operator">+</span>pcid<span class="token punctuation">,</span><span class="token operator">+</span>pdcm<span class="token punctuation">,</span><span class="token operator">+</span>xtpr<span class="token punctuation">,</span><span class="token operator">+</span>tm2<span class="token punctuation">,</span><span class="token operator">+</span>est<span class="token punctuation">,</span><span class="token operator">+</span>smx<span class="token punctuation">,</span><span class="token operator">+</span>vmx<span class="token punctuation">,</span><span class="token operator">+</span>ds_cpl<span class="token punctuation">,</span><span class="token operator">+</span>monitor<span class="token punctuation">,</span><span class="token operator">+</span>dtes64<span class="token punctuation">,</span><span class="token operator">+</span>pbe<span class="token punctuation">,</span><span class="token operator">+</span>tm<span class="token punctuation">,</span><span class="token operator">+</span>ht<span class="token punctuation">,</span><span class="token operator">+</span>ss<span class="token punctuation">,</span><span class="token operator">+</span>acpi<span class="token punctuation">,</span><span class="token operator">+</span>ds<span class="token punctuation">,</span><span class="token operator">+</span>vme
<span class="token operator">-</span>m <span class="token number">2048</span>
<span class="token operator">-</span>smp <span class="token number">1</span><span class="token punctuation">,</span>sockets<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>cores<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>threads<span class="token operator">=</span><span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">-</span>rtc base<span class="token operator">=</span>utc<span class="token punctuation">,</span>driftfix<span class="token operator">=</span>slew
<span class="token operator">-</span>drive file<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>nova<span class="token operator">/</span>instances<span class="token operator">/</span><span class="token number">1f</span><span class="token number">8e6f</span><span class="token number">7e-5</span>a70<span class="token operator">-</span><span class="token number">4780</span><span class="token operator">-</span><span class="token number">89</span>c1<span class="token operator">-</span><span class="token number">464</span>dc0e7f308<span class="token operator">/</span>disk<span class="token punctuation">,</span><span class="token keyword">if</span><span class="token operator">=</span>none<span class="token punctuation">,</span>id<span class="token operator">=</span>drive<span class="token operator">-</span>virtio<span class="token operator">-</span>disk0<span class="token punctuation">,</span>format<span class="token operator">=</span>qcow2<span class="token punctuation">,</span>cache<span class="token operator">=</span>none
<span class="token operator">-</span>device virtio<span class="token operator">-</span>blk<span class="token operator">-</span>pci<span class="token punctuation">,</span>scsi<span class="token operator">=</span>off<span class="token punctuation">,</span>bus<span class="token operator">=</span>pci<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token number">0x4</span><span class="token punctuation">,</span>drive<span class="token operator">=</span>drive<span class="token operator">-</span>virtio<span class="token operator">-</span>disk0<span class="token punctuation">,</span>id<span class="token operator">=</span>virtio<span class="token operator">-</span>disk0<span class="token punctuation">,</span>bootindex<span class="token operator">=</span><span class="token number">1</span>
<span class="token operator">-</span>netdev tap<span class="token punctuation">,</span>fd<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>id<span class="token operator">=</span>hostnet0<span class="token punctuation">,</span>vhost<span class="token operator">=</span>on<span class="token punctuation">,</span>vhostfd<span class="token operator">=</span><span class="token number">37</span>
<span class="token operator">-</span>device virtio<span class="token operator">-</span>net<span class="token operator">-</span>pci<span class="token punctuation">,</span>netdev<span class="token operator">=</span>hostnet0<span class="token punctuation">,</span>id<span class="token operator">=</span>net0<span class="token punctuation">,</span>mac<span class="token operator">=</span>fa<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">3</span>e<span class="token operator">:</span>d1<span class="token operator">:</span><span class="token number">2</span>d<span class="token operator">:</span><span class="token number">99</span><span class="token punctuation">,</span>bus<span class="token operator">=</span>pci<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token number">0x3</span>
<span class="token operator">-</span>chardev file<span class="token punctuation">,</span>id<span class="token operator">=</span>charserial0<span class="token punctuation">,</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>nova<span class="token operator">/</span>instances<span class="token operator">/</span><span class="token number">1f</span><span class="token number">8e6f</span><span class="token number">7e-5</span>a70<span class="token operator">-</span><span class="token number">4780</span><span class="token operator">-</span><span class="token number">89</span>c1<span class="token operator">-</span><span class="token number">464</span>dc0e7f308<span class="token operator">/</span>console<span class="token punctuation">.</span>log
<span class="token operator">-</span>vnc <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">:</span><span class="token number">12</span>
<span class="token operator">-</span>device cirrus<span class="token operator">-</span>vga<span class="token punctuation">,</span>id<span class="token operator">=</span>video0<span class="token punctuation">,</span>bus<span class="token operator">=</span>pci<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token number">0x2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>-enable-kvm：表示启用硬件辅助虚拟化。</li><li>-name instance-00000024：表示虚拟机的名称。</li><li>-machine pc-i440fx-trusty,accel=kvm,usb=off：machine 是什么呢？其实就是计算机体系结构。不知道什么是体系结构的话，可以订阅极客时间的另一个专栏《深入浅出计算机组成原理》。 <ul><li>qemu 会模拟多种体系结构，常用的有普通 PC 机，也即 x86 的 32 位或者 64 位的体系结构、Mac 电脑 PowerPC 的体系结构、Sun 的体系结构、MIPS 的体系结构，精简指令集。如果使用 KVM hardware-assisted virtualization，也即 BIOS 中 VD-T 是打开的，则参数中 accel=kvm。如果不使用 hardware-assisted virtualization，用的是纯模拟，则有参数 accel = tcg，-no-kvm。</li></ul></li><li>-cpu SandyBridge,+erms,+smep,+fsgsbase,+pdpe1gb,+rdrand,+f16c,+osxsave,+dca,+pcid,+pdcm,+xtpr,+tm2,+est,+smx,+vmx,+ds_cpl,+monitor,+dtes64,+pbe,+tm,+ht,+ss,+acpi,+ds,+vme：表示设置 CPU，SandyBridge 是 Intel 处理器，后面的加号都是添加的 CPU 的参数，这些参数会显示在 /proc/cpuinfo 里面。</li><li>-m 2048：表示内存。</li><li>-smp 1,sockets=1,cores=1,threads=1：SMP 我们解析过，叫对称多处理器，和 NUMA 对应。qemu 仿真了一个具有 1 个 vcpu，一个 socket，一个 core，一个 threads 的处理器。 <ul><li>socket、core、threads 是什么概念呢？socket 就是主板上插 cpu 的槽的数目，也即常说的“路”，core 就是我们平时说的“核”，即双核、4 核等。thread 就是每个 core 的硬件线程数，即超线程。举个具体的例子，某个服务器是：2 路 4 核超线程（一般默认为 2 个线程），通过 cat /proc/cpuinfo，我们看到的是 2<em>4</em>2=16 个 processor，很多人也习惯成为 16 核了。</li></ul></li><li>-rtc base=utc,driftfix=slew：表示系统时间由参数 -rtc 指定。</li><li>-device cirrus-vga,id=video0,bus=pci.0,addr=0x2：表示显示器用参数 -vga 设置，默认为 cirrus，它模拟了 CL-GD5446PCI VGA card。</li><li>有关网卡，使用 -net 参数和 -device。</li><li>从 HOST 角度：-netdev tap,fd=32,id=hostnet0,vhost=on,vhostfd=37。</li><li>从 GUEST 角度：-device virtio-net-pci,netdev=hostnet0,id=net0,mac=fa:16:3e:d1:2d:99,bus=pci.0,addr=0x3。</li><li>有关硬盘，使用 -hda -hdb，或者使用 -drive 和 -device。</li><li>从 HOST 角度：-drive file=/var/lib/nova/instances/1f8e6f7e-5a70-4780-89c1-464dc0e7f308/disk,if=none,id=drive-virtio-disk0,format=qcow2,cache=none</li><li>从 GUEST 角度：-device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x4,drive=drive-virtio-disk0,id=virtio-disk0,bootindex=1</li><li>-vnc 0.0.0.0:12：设置 VNC。</li></ul><p>在 main 函数中，接下来的 for 循环和大量的 switch case 语句，就是对于这些参数的解析，我们不一一解析，后面真的用到这些参数的时候，我们再仔细看。</p><p><strong>3. 初始化 machine</strong></p><p>回到 main 函数，接下来是初始化 machine。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>machine_class <span class="token operator">=</span> <span class="token function">select_machine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
current_machine <span class="token operator">=</span> <span class="token function">MACHINE</span><span class="token punctuation">(</span><span class="token function">object_new</span><span class="token punctuation">(</span><span class="token function">object_class_get_name</span><span class="token punctuation">(</span>
                          <span class="token function">OBJECT_CLASS</span><span class="token punctuation">(</span>machine_class<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面的 machine_class 是什么呢？这还得从 machine 参数说起。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">-</span>machine pc<span class="token operator">-</span>i440fx<span class="token operator">-</span>trusty<span class="token punctuation">,</span>accel<span class="token operator">=</span>kvm<span class="token punctuation">,</span>usb<span class="token operator">=</span>off
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的 pc-i440fx 是 x86 机器默认的体系结构。在 hw/i386/pc_piix.c 中，它定义了对应的 machine_class。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">DEFINE_I440FX_MACHINE</span><span class="token punctuation">(</span>v4_0<span class="token punctuation">,</span> <span class="token string">&quot;pc-i440fx-4.0&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                      pc_i440fx_4_0_machine_options<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEFINE_I440FX_MACHINE</span><span class="token expression"><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> name<span class="token punctuation">,</span> compatfn<span class="token punctuation">,</span> optionfn<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> pc_init_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">suffix</span><span class="token punctuation">(</span>MachineState <span class="token operator">*</span>machine<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">{</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span></span>
        <span class="token function">pc_init1</span><span class="token punctuation">(</span>machine<span class="token punctuation">,</span> TYPE_I440FX_PCI_HOST_BRIDGE<span class="token punctuation">,</span> \\
                 TYPE_I440FX_PCI_DEVICE<span class="token punctuation">)</span><span class="token punctuation">;</span> \\
    <span class="token punctuation">}</span> \\
    <span class="token function">DEFINE_PC_MACHINE</span><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> name<span class="token punctuation">,</span> pc_init_##suffix<span class="token punctuation">,</span> optionfn<span class="token punctuation">)</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">DEFINE_PC_MACHINE</span><span class="token expression"><span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> namestr<span class="token punctuation">,</span> initfn<span class="token punctuation">,</span> optsfn<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">void</span> pc_machine_</span><span class="token punctuation">##</span><span class="token expression">suffix</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">_class_init</span><span class="token punctuation">(</span>ObjectClass <span class="token operator">*</span>oc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data</span></span>
<span class="token punctuation">)</span> \\
    <span class="token punctuation">{</span> \\
        MachineClass <span class="token operator">*</span>mc <span class="token operator">=</span> <span class="token function">MACHINE_CLASS</span><span class="token punctuation">(</span>oc<span class="token punctuation">)</span><span class="token punctuation">;</span> \\
        <span class="token function">optsfn</span><span class="token punctuation">(</span>mc<span class="token punctuation">)</span><span class="token punctuation">;</span> \\
        mc<span class="token operator">-&gt;</span>init <span class="token operator">=</span> initfn<span class="token punctuation">;</span> \\
    <span class="token punctuation">}</span> \\
    <span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo pc_machine_type_##suffix <span class="token operator">=</span> <span class="token punctuation">{</span> \\
        <span class="token punctuation">.</span>name       <span class="token operator">=</span> namestr TYPE_MACHINE_SUFFIX<span class="token punctuation">,</span> \\
        <span class="token punctuation">.</span>parent     <span class="token operator">=</span> TYPE_PC_MACHINE<span class="token punctuation">,</span> \\
        <span class="token punctuation">.</span>class_init <span class="token operator">=</span> pc_machine_##suffix##_class_init<span class="token punctuation">,</span> \\
    <span class="token punctuation">}</span><span class="token punctuation">;</span> \\
    <span class="token keyword">static</span> <span class="token keyword">void</span> pc_machine_init_##<span class="token function">suffix</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> \\
    <span class="token punctuation">{</span> \\
        <span class="token function">type_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pc_machine_type_##suffix<span class="token punctuation">)</span><span class="token punctuation">;</span> \\
    <span class="token punctuation">}</span> \\
    <span class="token function">type_init</span><span class="token punctuation">(</span>pc_machine_init_##suffix<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了定义 machine_class，这里有一系列的宏定义。入口是 DEFINE_I440FX_MACHINE。这个宏有几个参数，v4_0 是后缀，&quot;pc-i440fx-4.0&quot;是名字，pc_i440fx_4_0_machine_options 是一个函数，用于定义 machine_class 相关的选项。这个函数定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pc_i440fx_4_0_machine_options</span><span class="token punctuation">(</span>MachineClass <span class="token operator">*</span>m<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">pc_i440fx_machine_options</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m<span class="token operator">-&gt;</span>alias <span class="token operator">=</span> <span class="token string">&quot;pc&quot;</span><span class="token punctuation">;</span>
    m<span class="token operator">-&gt;</span>is_default <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pc_i440fx_machine_options</span><span class="token punctuation">(</span>MachineClass <span class="token operator">*</span>m<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PCMachineClass <span class="token operator">*</span>pcmc <span class="token operator">=</span> <span class="token function">PC_MACHINE_CLASS</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    pcmc<span class="token operator">-&gt;</span>default_nic_model <span class="token operator">=</span> <span class="token string">&quot;e1000&quot;</span><span class="token punctuation">;</span>

    m<span class="token operator">-&gt;</span>family <span class="token operator">=</span> <span class="token string">&quot;pc_piix&quot;</span><span class="token punctuation">;</span>
    m<span class="token operator">-&gt;</span>desc <span class="token operator">=</span> <span class="token string">&quot;Standard PC (i440FX + PIIX, 1996)&quot;</span><span class="token punctuation">;</span>
    m<span class="token operator">-&gt;</span>default_machine_opts <span class="token operator">=</span> <span class="token string">&quot;firmware=bios-256k.bin&quot;</span><span class="token punctuation">;</span>
    m<span class="token operator">-&gt;</span>default_display <span class="token operator">=</span> <span class="token string">&quot;std&quot;</span><span class="token punctuation">;</span>
    <span class="token function">machine_class_allow_dynamic_sysbus_dev</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> TYPE_RAMFB_DEVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先不看 pc_i440fx_4_0_machine_options，先来看 DEFINE_I440FX_MACHINE。</p><p>这里面定义了一个 pc_init_##suffix，也就是 pc_init_v4_0。这里面转而调用 pc_init1。注意这里这个函数只是定义了一下，没有被调用。</p><p>接下来，DEFINE_I440FX_MACHINE 里面又定义了 DEFINE_PC_MACHINE。它有四个参数，除了 DEFINE_I440FX_MACHINE 传进来的三个参数以外，多了一个 initfn，也即初始化函数，指向刚才定义的 pc_init_##suffix。</p><p>在 DEFINE_PC_MACHINE 中，我们定义了一个函数 pc_machine_##suffix##<code>*class_init</code>。从函数的名字 class_init 可以看出，这是 machine_class 从纸面上的 class 初始化为 Class 对象的方法。在这个函数里面，我们可以看到，它创建了一个 MachineClass 对象，这个就是 Class 对象。MachineClass 对象的 init 函数指向上面定义的 <code>pc_init*</code>##suffix，说明这个函数是 machine 这种类型初始化的一个函数，后面会被调用。</p><p>接着，我们看 DEFINE_PC_MACHINE。它定义了一个 pc_machine_type_##suffix 的 TypeInfo。这是用于生成纸面上的 class 的原材料，果真后面调用了 type_init。</p><p>看到了 type_init，我们应该能够想到，既然它定义了一个纸面上的 class，那上面的那句 module_call_init，会和我们上面解析的 type_init 是一样的，在全局的表里面注册了一个全局的名字是&quot;pc-i440fx-4.0&quot;的纸面上的 class，也即 TypeImpl。</p><p>现在全局表中有这个纸面上的 class 了。我们回到 select_machine。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> MachineClass <span class="token operator">*</span><span class="token function">select_machine</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MachineClass <span class="token operator">*</span>machine_class <span class="token operator">=</span> <span class="token function">find_default_machine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>optarg<span class="token punctuation">;</span>
    QemuOpts <span class="token operator">*</span>opts<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    opts <span class="token operator">=</span> <span class="token function">qemu_get_machine_opts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_opts_loc_restore</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span>

    optarg <span class="token operator">=</span> <span class="token function">qemu_opt_get</span><span class="token punctuation">(</span>opts<span class="token punctuation">,</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>optarg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        machine_class <span class="token operator">=</span> <span class="token function">machine_parse</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> machine_class<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

MachineClass <span class="token operator">*</span><span class="token function">find_default_machine</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    GSList <span class="token operator">*</span>el<span class="token punctuation">,</span> <span class="token operator">*</span>machines <span class="token operator">=</span> <span class="token function">object_class_get_list</span><span class="token punctuation">(</span>TYPE_MACHINE<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
    MachineClass <span class="token operator">*</span>mc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>el <span class="token operator">=</span> machines<span class="token punctuation">;</span> el<span class="token punctuation">;</span> el <span class="token operator">=</span> el<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        MachineClass <span class="token operator">*</span>temp <span class="token operator">=</span> el<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>is_default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mc <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">g_slist_free</span><span class="token punctuation">(</span>machines<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mc<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> MachineClass <span class="token operator">*</span><span class="token function">machine_parse</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MachineClass <span class="token operator">*</span>mc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    GSList <span class="token operator">*</span>el<span class="token punctuation">,</span> <span class="token operator">*</span>machines <span class="token operator">=</span> <span class="token function">object_class_get_list</span><span class="token punctuation">(</span>TYPE_MACHINE<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mc <span class="token operator">=</span> <span class="token function">find_machine</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">g_slist_free</span><span class="token punctuation">(</span>machines<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 select_machine 中，有两种方式可以生成 MachineClass。一种方式是 find_default_machine，找一个默认的；另一种方式是 machine_parse，通过解析参数生成 MachineClass。无论哪种方式，都会调用 object_class_get_list 获得一个 MachineClass 的列表，然后在里面找。object_class_get_list 定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>GSList <span class="token operator">*</span><span class="token function">object_class_get_list</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>implements_type<span class="token punctuation">,</span>
                              bool include_abstract<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    GSList <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token function">object_class_foreach</span><span class="token punctuation">(</span>object_class_get_list_tramp<span class="token punctuation">,</span>
                         implements_type<span class="token punctuation">,</span> include_abstract<span class="token punctuation">,</span> <span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">object_class_foreach</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span>ObjectClass <span class="token operator">*</span>klass<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>opaque<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>implements_type<span class="token punctuation">,</span> bool include_abstract<span class="token punctuation">,</span>
                          <span class="token keyword">void</span> <span class="token operator">*</span>opaque<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    OCFData data <span class="token operator">=</span> <span class="token punctuation">{</span> fn<span class="token punctuation">,</span> implements_type<span class="token punctuation">,</span> include_abstract<span class="token punctuation">,</span> opaque <span class="token punctuation">}</span><span class="token punctuation">;</span>

    enumerating_types <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token function">g_hash_table_foreach</span><span class="token punctuation">(</span><span class="token function">type_table_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> object_class_foreach_tramp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    enumerating_types <span class="token operator">=</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在全局表 type_table_get() 中，对于每一项 TypeImpl，我们都执行 object_class_foreach_tramp。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">object_class_foreach_tramp</span><span class="token punctuation">(</span>gpointer key<span class="token punctuation">,</span> gpointer value<span class="token punctuation">,</span>
                                       gpointer opaque<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    OCFData <span class="token operator">*</span>data <span class="token operator">=</span> opaque<span class="token punctuation">;</span>
    TypeImpl <span class="token operator">*</span>type <span class="token operator">=</span> value<span class="token punctuation">;</span>
    ObjectClass <span class="token operator">*</span>k<span class="token punctuation">;</span>

    <span class="token function">type_initialize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    k <span class="token operator">=</span> type<span class="token operator">-&gt;</span>class<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    data<span class="token operator">-&gt;</span><span class="token function">fn</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> data<span class="token operator">-&gt;</span>opaque<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">type_initialize</span><span class="token punctuation">(</span>TypeImpl <span class="token operator">*</span>ti<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    TypeImpl <span class="token operator">*</span>parent<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    ti<span class="token operator">-&gt;</span>class_size <span class="token operator">=</span> <span class="token function">type_class_get_size</span><span class="token punctuation">(</span>ti<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ti<span class="token operator">-&gt;</span>instance_size <span class="token operator">=</span> <span class="token function">type_object_get_size</span><span class="token punctuation">(</span>ti<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ti<span class="token operator">-&gt;</span>instance_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ti<span class="token operator">-&gt;</span>abstract <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    ti<span class="token operator">-&gt;</span>class <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span>ti<span class="token operator">-&gt;</span>class_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    ti<span class="token operator">-&gt;</span>class<span class="token operator">-&gt;</span>type <span class="token operator">=</span> ti<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token operator">-&gt;</span>class_base_init<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            parent<span class="token operator">-&gt;</span><span class="token function">class_base_init</span><span class="token punctuation">(</span>ti<span class="token operator">-&gt;</span>class<span class="token punctuation">,</span> ti<span class="token operator">-&gt;</span>class_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        parent <span class="token operator">=</span> <span class="token function">type_get_parent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ti<span class="token operator">-&gt;</span>class_init<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ti<span class="token operator">-&gt;</span><span class="token function">class_init</span><span class="token punctuation">(</span>ti<span class="token operator">-&gt;</span>class<span class="token punctuation">,</span> ti<span class="token operator">-&gt;</span>class_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 object_class_foreach_tramp 中，会调用将 type_initialize，这里面会调用 class_init 将纸面上的 class 也即 TypeImpl 变为 ObjectClass，ObjectClass 是所有 Class 类的祖先，MachineClass 是它的子类。</p><p>因为在 machine 的命令行里面，我们指定了名字为&quot;pc-i440fx-4.0&quot;，就肯定能够找到我们注册过了的 TypeImpl，并调用它的 class_init 函数。</p><p>因而 pc_machine_##suffix##<code>*class_init</code> 会被调用，在这里面，pc_i440fx_machine_options 才真正被调用初始化 MachineClass，并且将 MachineClass 的 init 函数设置为 <code>pc_init*</code>##suffix。也即，当 select_machine 执行完毕后，就有一个 MachineClass 了。</p><p>接着，我们回到 object_new。这就很好理解了，MachineClass 是一个 Class 类，接下来应该通过它生成一个 Instance，也即对象，这就是 object_new 的作用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Object <span class="token operator">*</span><span class="token function">object_new</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>typename<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    TypeImpl <span class="token operator">*</span>ti <span class="token operator">=</span> <span class="token function">type_get_by_name</span><span class="token punctuation">(</span>typename<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">object_new_with_type</span><span class="token punctuation">(</span>ti<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> Object <span class="token operator">*</span><span class="token function">object_new_with_type</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Object <span class="token operator">*</span>obj<span class="token punctuation">;</span>
    <span class="token function">type_initialize</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj <span class="token operator">=</span> <span class="token function">g_malloc</span><span class="token punctuation">(</span>type<span class="token operator">-&gt;</span>instance_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">object_initialize_with_type</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> type<span class="token operator">-&gt;</span>instance_size<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token operator">-&gt;</span>free <span class="token operator">=</span> g_free<span class="token punctuation">;</span>

    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>object_new 中，TypeImpl 的 instance_init 会被调用，创建一个对象。current_machine 就是这个对象，它的类型是 MachineState。</p><p>至此，绕了这么大一圈，有关体系结构的对象才创建完毕，接下来很多的设备的初始化，包括 CPU 和内存的初始化，都是围绕着体系结构的对象来的，后面我们会常常看到 current_machine。</p><p><strong>总结时刻</strong></p><p>这一节，我们学到，虚拟机对于设备的模拟是一件非常复杂的事情，需要用复杂的参数模拟各种各样的设备。为了能够适配这些设备，qemu 定义了自己的模块管理机制，只有了解了这种机制，后面看每一种设备的虚拟化的时候，才有一个整体的思路。</p><p>这里的 MachineClass 是我们遇到的第一个，我们需要掌握它里面各种定义之间的关系。</p><figure><img src="`+t+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>每个模块都会有一个定义 TypeInfo，会通过 type_init 变为全局的 TypeImpl。TypeInfo 以及生成的 TypeImpl 有以下成员：</p><ul><li>name 表示当前类型的名称</li><li>parent 表示父类的名称</li><li>class_init 用于将 TypeImpl 初始化为 MachineClass</li><li>instance_init 用于将 MachineClass 初始化为 MachineState</li></ul><p>所以，以后遇到任何一个类型的时候，将父类和子类之间的关系，以及对应的初始化函数都要看好，这样就一目了然了。</p><p><strong>课堂练习</strong></p><p>你可能会问，这么复杂的 qemu 命令，我是怎么找到的，当然不是我一个字一个字打的，这是著名的云平台管理软件 OpenStack 创建虚拟机的时候自动生成的命令行。所以，给你留一道课堂练习题，请你看一下 OpenStack 的基本原理，看它是通过什么工具来管理如此复杂的命令行的。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p>',72),c=[o];function i(l,u){return s(),a("div",null,c)}const d=n(e,[["render",i],["__file","N50-虚拟CPU（上）.html.vue"]]);export{d as default};
