import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/eddb4f92fd55c34113ba55c81e2b95d4-2339c8f1.jpg",e={},o=p(`<h1 id="_34-仓库管理-如何实现文件的六大基本操作" tabindex="-1"><a class="header-anchor" href="#_34-仓库管理-如何实现文件的六大基本操作" aria-hidden="true">#</a> 34 | 仓库管理：如何实现文件的六大基本操作？</h1><p>你好，我是 LMOS。</p><p>我们在上一节课中，已经建立了仓库，并对仓库进行了划分，就是文件系统的格式化。有了仓库就需要往里面存取东西，对于我们的仓库来说，就是存取应用程序的文件。</p><p>所以今天我们要给仓库增加一些相关的操作，这些操作主要用于新建、打开、关闭、读写文件，它们也是文件系统的标准功能，自然即使我们这个最小的文件系统，也必须要支持。</p><p>好了，话不多说，我们开始吧。这节课的配套代码，你可以从这里下载。</p><h2 id="辅助操作" tabindex="-1"><a class="header-anchor" href="#辅助操作" aria-hidden="true">#</a> 辅助操作</h2><p>通过上一节课的学习，我们了解了文件系统格式化操作，不难发现文件系统格式化并不复杂，但是它们需要大量的辅助函数。同样的，完成文件相关的操作，我们也需要大量的辅助函数。为了让你更加清楚每个实现细节，这里我们先来实现文件操作相关的辅助函数。</p><h3 id="操作根目录文件" tabindex="-1"><a class="header-anchor" href="#操作根目录文件" aria-hidden="true">#</a> 操作根目录文件</h3><p>根据我们文件系统的设计，不管是新建、删除、打开一个文件，首先都要找到与该文件对应的 rfsdir_t 结构。</p><p>在我们的文件系统中，一个文件的 rfsdir_t 结构就储存在根目录文件中，所以想要读取文件对应的 rfsdir_t 结构，首先就要获取和释放根目录文件。</p><p>下面我们来实现获取和释放根目录文件的函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//获取根目录文件</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">get_rootdirfile_blk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span><span class="token operator">*</span> retptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  
    <span class="token class-name">rfsdir_t</span><span class="token operator">*</span> rtdir <span class="token operator">=</span> <span class="token function">get_rootdir</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取根目录文件的rfsdir_t结构</span>
    <span class="token comment">//分配4KB大小的缓冲区并清零</span>
    <span class="token keyword">void</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//读取根目录文件的逻辑储存块到缓冲区中</span>
    <span class="token function">read_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> rtdir<span class="token operator">-&gt;</span>rdr_blknr<span class="token punctuation">)</span>
    retptr <span class="token operator">=</span> buf<span class="token punctuation">;</span><span class="token comment">//设置缓冲区的首地址为返回值</span>
    <span class="token keyword">goto</span> errl1<span class="token punctuation">;</span>
errl<span class="token operator">:</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
errl1<span class="token operator">:</span>
    <span class="token function">del_rootdir</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> rtdir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放根目录文件的rfsdir_t结构</span>
    <span class="token keyword">return</span> retptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//释放根目录文件</span>
<span class="token keyword">void</span> <span class="token function">del_rootdirfile_blk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> blkp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//因为逻辑储存块的头512字节的空间中，保存的就是fimgrhd_t结构</span>
    <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> fmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>blkp<span class="token punctuation">;</span>
    <span class="token comment">//把根目录文件回写到储存设备中去，块号为fimgrhd_t结构自身所在的块号</span>
    <span class="token function">write_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> blkp<span class="token punctuation">,</span> fmp<span class="token operator">-&gt;</span>fmd_sfblk<span class="token punctuation">)</span>
    <span class="token comment">//释放缓冲区</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span>blkp<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，get_rootdir 函数的作用就是读取文件系统超级块中 rfsdir_t 结构到一个缓冲区中，del_rootdir 函数则是用来释放这个缓冲区，其代码非常简单，我已经帮你写好了。</p><p>获取根目录文件的方法也很容易，根据超级块中的 rfsdir_t 结构中的信息，读取根目录文件的逻辑储存块就行了。而释放根目录文件，就是把根目录文件的储存块回写到储存设备中去，最后释放对应的缓冲区就可以了。</p><h3 id="获取文件名" tabindex="-1"><a class="header-anchor" href="#获取文件名" aria-hidden="true">#</a> 获取文件名</h3><p>下面我们来实现获取文件名，在我们的印象中，一个完整的文件名应该是这样的“/cosmos/drivers/drvrfs.c”，这样的文件名包含了完整目录路径。</p><p>除了第一个“/”是根目录外，其它的“/”只是一个目录路径分隔符。然而，在很多情况下，我们通常需要把目录路径分隔符去除，提取其中的目录名称或者文件名称。为了简化问题，我们对文件系统来点限制，我们的文件名只能是“/xxxx”这种类型的。</p><p>下面我们就来实现去除路径分隔符提取文件名称的函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//检查文件路径名</span>
<span class="token class-name">sint_t</span> <span class="token function">rfs_chkfilepath</span><span class="token punctuation">(</span><span class="token class-name">char_t</span><span class="token operator">*</span> fname<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">char_t</span><span class="token operator">*</span> chp <span class="token operator">=</span> fname<span class="token punctuation">;</span>
    <span class="token comment">//检查文件路径名的第一个字符是否为“/”，不是则返回2</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>chp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//检查除第1个字符外其它字符中还有没有为“/”的，有就返回3</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>chp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment">//如果这里i大于等于文件名称的最大长度，就返回4</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> DR_NM_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment">//到文件路径字符串的末尾就跳出循环</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>chp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//返回0表示正确</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//提取纯文件名</span>
<span class="token class-name">sint_t</span> <span class="token function">rfs_ret_fname</span><span class="token punctuation">(</span><span class="token class-name">char_t</span><span class="token operator">*</span> buf<span class="token punctuation">,</span><span class="token class-name">char_t</span><span class="token operator">*</span> fpath<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//检查文件路径名是不是“/xxxx”的形式</span>
    <span class="token class-name">sint_t</span> stus <span class="token operator">=</span> <span class="token function">rfs_chkfilepath</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//如果不为0就直接返回这个状态值表示错误</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> stus<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//从路径名字符串的第2个字符开始复制字符到buf中</span>
    <span class="token function">rfs_strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fpath<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，完成获取文件名的是 rfs_ret_fname 函数，这个函数可以把 fpath 指向的路径名中的文件名提取出来，放到 buf 指向的缓冲区中，但在这之前，需要先调用 rfs_chkfilepath 函数检查路径名是不是“/xxxx”的形式，这是这个功能正常实现的必要条件。</p><h3 id="判断文件是否存在" tabindex="-1"><a class="header-anchor" href="#判断文件是否存在" aria-hidden="true">#</a> 判断文件是否存在</h3><p>获取了文件名称，我们还需要实现这样一个功能：判断一个文件是否存在。因为新建和删除文件，要先判断储存设备里是不是存在着这个文件。具体来说，新建文件时，无法新建相同文件名的文件；删除文件时，不能删除不存在的文件。</p><p>我们一起通过后面这个函数还完成这个功能，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">sint_t</span> <span class="token function">rfs_chkfileisindev</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token class-name">char_t</span><span class="token operator">*</span> fname<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">sint_t</span> rets <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token class-name">sint_t</span> ch <span class="token operator">=</span> <span class="token function">rfs_strlen</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取文件名的长度，注意不是文件路径名</span>
    <span class="token comment">//检查文件名的长度是不是合乎要求</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> ch <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token class-name">sint_t</span><span class="token punctuation">)</span>DR_NM_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span><span class="token operator">*</span> rdblkp <span class="token operator">=</span> <span class="token function">get_rootdirfile_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> fmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>rdblkp<span class="token punctuation">;</span>
    <span class="token comment">//检查该fimgrhd_t结构的类型是不是FMD_DIR_TYPE，即这个文件是不是目录文件</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fmp<span class="token operator">-&gt;</span>fmd_type <span class="token operator">!=</span> FMD_DIR_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span> rets <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//检查根目录文件是不是为空，即没有写入任何数据，所以返回0，表示根目录下没有对应的文件</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fmp<span class="token operator">-&gt;</span>fmd_curfwritebk <span class="token operator">==</span> fmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blkstart <span class="token operator">&amp;&amp;</span>
 fmp<span class="token operator">-&gt;</span>fmd_curfinwbkoff <span class="token operator">==</span> fmp<span class="token operator">-&gt;</span>fmd_fileifstbkoff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">rfsdir_t</span><span class="token operator">*</span> dirp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">rfsdir_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fmp<span class="token punctuation">)</span> <span class="token operator">+</span> fmp<span class="token operator">-&gt;</span>fmd_fileifstbkoff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指向根目录文件的第一个字节</span>
    <span class="token comment">//指向根目录文件的结束地址</span>
    <span class="token keyword">void</span><span class="token operator">*</span> maxchkp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>rdblkp <span class="token operator">+</span> FSYS_ALCBLKSZ <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//当前的rfsdir_t结构的指针比根目录文件的结束地址小，就继续循环    </span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>dirp <span class="token operator">&lt;</span> maxchkp<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果这个rfsdir_t结构的类型是RDR_FIL_TYPE，说明它对应的是文件而不是目录，所以下面就继续比较其文件名</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dirp<span class="token operator">-&gt;</span>rdr_type <span class="token operator">==</span> RDR_FIL_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rfs_strcmp</span><span class="token punctuation">(</span>dirp<span class="token operator">-&gt;</span>rdr_name<span class="token punctuation">,</span>fname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//比较其文件名</span>
                rets <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        dirp<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//到了这里说明没有找到相同的文件</span>
err<span class="token operator">:</span>
    <span class="token function">del_rootdirfile_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>rdblkp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放根目录文件</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，rfs_chkfileisindev 函数逻辑很简单。首先是检查文件名的长度，接着获取了根目录文件，然后遍历根其中的所有 rfsdir_t 结构并比较文件名是否相同，相同就返回 1，不同就返回其它值，最后释放了根目录文件。</p><p>因为 get_rootdirfile_blk 函数已经把根目录文件读取到内存里了，所以可以用 dirp 指针和 maxchkp 指针操作其中的数据。</p><p>好了，操作根目录文件、获取文件名、判断一个文件是否存在的三大函数就实现了，有了它们，再去实现文件相关的其它操作就方便多了，我们接着探索。</p><h2 id="文件相关的操作" tabindex="-1"><a class="header-anchor" href="#文件相关的操作" aria-hidden="true">#</a> 文件相关的操作</h2><p>直到现在，我们还没对任何文件进行操作，而我们实现文件系统，就是为了应用程序更好地存放自己的“劳动成果”——文件，因此一个文件系统必须要支持一些文件操作。</p><p>下面我们将依次实现新建、删除、打开、读写以及关闭文件，这几大文件操作，这也是文件系统需要提供的最基本的功能。</p><h3 id="新建文件" tabindex="-1"><a class="header-anchor" href="#新建文件" aria-hidden="true">#</a> 新建文件</h3><p>在没有文件之前，对任何文件本身的操作都是无效的，所以我们首先就要实现新建文件这个功能。</p><p>在写代码之前，我们还是先来看一看如何新建一个文件，一共可以分成后面这 4 步。</p><p>\\1. 从文件路径名中提取出纯文件名，检查储存设备上是否已经存在这个文件。</p><p>\\2. 分配一个空闲的逻辑储存块，并在根目录文件的末尾写入这个新建文件对应的 rfsdir_t 结构。</p><p>\\3. 在一个新的 4KB 大小的缓冲区中，初始化新建文件对应的 fimgrhd_t 结构。</p><p>\\4. 把第 3 步对应的缓冲区里的数据，写入到先前分配的空闲逻辑储存块中。</p><p>下面我们先来写好新建文件的接口函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//新建文件的接口函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_new_file</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token class-name">char_t</span><span class="token operator">*</span> fname<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> flg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//在栈中分配一个字符缓冲区并清零</span>
    <span class="token class-name">char_t</span> fne<span class="token punctuation">[</span>DR_NM_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>fne<span class="token punctuation">,</span> DR_NM_MAX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从文件路径名中提取出纯文件名</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rfs_ret_fname</span><span class="token punctuation">(</span>fne<span class="token punctuation">,</span> fname<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//检查储存介质上是否已经存在这个新建的文件，如果是则返回错误</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rfs_chkfileisindev</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> fne<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//调用实际建立文件的函数</span>
    <span class="token keyword">return</span> <span class="token function">rfs_new_dirfileblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> fne<span class="token punctuation">,</span> RDR_FIL_TYPE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在新建文件的接口函数中，就实现了前面第一步，完成了提取文件名和检查文件是否在储存设备中存在的工作。接着我们来实现真正新建文件的函数，就是上述代码中 rfs_new_dirfileblk 函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">drvstus_t</span> <span class="token function">rfs_new_dirfileblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token class-name">char_t</span><span class="token operator">*</span> fname<span class="token punctuation">,</span><span class="token class-name">uint_t</span> flgtype<span class="token punctuation">,</span><span class="token class-name">uint_t</span> val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">drvstus_t</span> rets <span class="token operator">=</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一个4KB大小的缓冲区    </span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清零该缓冲区</span>
    <span class="token class-name">uint_t</span> fblk <span class="token operator">=</span> <span class="token function">rfs_new_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配一个新的空闲逻辑储存块</span>
    <span class="token keyword">void</span><span class="token operator">*</span> rdirblk <span class="token operator">=</span> <span class="token function">get_rootdirfile_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取根目录文件</span>
    <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> fmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>rdirblk<span class="token punctuation">;</span>
    <span class="token comment">//指向文件当前的写入地址，因为根目录文件已经被读取到内存中了</span>
    <span class="token class-name">rfsdir_t</span><span class="token operator">*</span> wrdirp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">rfsdir_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>rdirblk <span class="token operator">+</span> fmp<span class="token operator">-&gt;</span>fmd_curfinwbkoff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//对文件当前的写入地址进行检查</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>wrdirp<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>rdirblk <span class="token operator">+</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rets<span class="token operator">=</span>DFCERRSTUS<span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    wrdirp<span class="token operator">-&gt;</span>rdr_stus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    wrdirp<span class="token operator">-&gt;</span>rdr_type <span class="token operator">=</span> flgtype<span class="token punctuation">;</span><span class="token comment">//设为文件类型</span>
    wrdirp<span class="token operator">-&gt;</span>rdr_blknr <span class="token operator">=</span> fblk<span class="token punctuation">;</span><span class="token comment">//设为刚刚分配的空闲逻辑储存块</span>
    <span class="token function">rfs_strcpy</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> wrdirp<span class="token operator">-&gt;</span>rdr_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把文件名复制到rfsdir_t结构</span>
    fmp<span class="token operator">-&gt;</span>fmd_filesz <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">rfsdir_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加根目录文件的大小</span>
    <span class="token comment">//增加根目录文件当前的写入地址，保证下次不被覆盖</span>
    fmp<span class="token operator">-&gt;</span>fmd_curfinwbkoff <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">rfsdir_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> ffmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span><span class="token comment">//指向新分配的缓冲区</span>
    <span class="token function">fimgrhd_t_init</span><span class="token punctuation">(</span>ffmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用fimgrhd_t结构默认的初始化函数</span>
    ffmp<span class="token operator">-&gt;</span>fmd_type <span class="token operator">=</span> FMD_FIL_TYPE<span class="token punctuation">;</span><span class="token comment">//因为建立的是文件，所以设为文件类型</span>
    ffmp<span class="token operator">-&gt;</span>fmd_sfblk <span class="token operator">=</span> fblk<span class="token punctuation">;</span><span class="token comment">//把自身所在的块，设为分配的逻辑储存块</span>
    ffmp<span class="token operator">-&gt;</span>fmd_curfwritebk <span class="token operator">=</span> fblk<span class="token punctuation">;</span><span class="token comment">//把当前写入的块，设为分配的逻辑储存块</span>
    ffmp<span class="token operator">-&gt;</span>fmd_curfinwbkoff <span class="token operator">=</span> <span class="token number">0x200</span><span class="token punctuation">;</span><span class="token comment">//把当前写入块的写入偏移量设为512</span>
    <span class="token comment">//把文件储存块数组的第1个元素的开始块，设为刚刚分配的空闲逻辑储存块</span>
    ffmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blkstart <span class="token operator">=</span> fblk<span class="token punctuation">;</span>
    <span class="token comment">//因为只分配了一个逻辑储存块，所以设为1</span>
    ffmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blknr <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//把缓冲区中的数据写入到刚刚分配的空闲逻辑储存块中</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">write_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> fblk<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span> <span class="token punctuation">{</span>       
        rets <span class="token operator">=</span> DFCERRSTUS<span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rets <span class="token operator">=</span> DFCOKSTUS<span class="token punctuation">;</span>
err<span class="token operator">:</span>
    <span class="token function">del_rootdirfile_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> rdirblk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放根目录文件</span>
err1<span class="token operator">:</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放缓冲区</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看完上述代码，我想提醒你，在 rfs_new_dirfileblk 函数中有两点很关键。</p><p>第一，前面反复提到的目录文件中存放的就是<strong>一系列的 rfsdir_t 结构</strong>。</p><p>第二，fmp 和 ffmp 这两个指针很重要。fmp 指针指向的是根目录文件的 fimgrhd_t 结构，因为要写入一个新的 rfsdir_t 结构，所以要获取并改写根目录文件的 fimgrhd_t 结构中的数据。而 ffmp 指针指向的是新建文件的 fimgrhd_t 结构，并且初始化了其中的一些数据。最后，该函数把这个缓冲区中的数据写入到分配的空闲逻辑储存块中，同时释放了根目录文件和缓冲区。</p><h3 id="删除文件" tabindex="-1"><a class="header-anchor" href="#删除文件" aria-hidden="true">#</a> 删除文件</h3><p>新建文件的操作完成了，下面我们来实现删除文件的操作。</p><p>如果只能新建文件而不能删除文件，那么储存设备的空间最终会耗尽，所以文件系统就必须支持删除文件的操作。</p><p>同样的，还是先来了解删除文件的方法。删除文件可以通过后面这 4 步来实现。</p><p>\\1. 从文件路径名中提取出纯文件名。</p><p>\\2. 获取根目录文件，从根目录文件中查找待删除文件的 rfsdir_t 结构，然后释放该文件占用的逻辑储存块。</p><p>\\3. 初始化与待删除文件相对应的 rfsdir_t 结构，并设置 rfsdir_t 结构的类型为 RDR_DEL_TYPE。</p><p>\\4. 释放根目录文件。</p><p>这次我们用三个函数来实现这些步骤，删除文件的接口函数的代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//文件删除的接口函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_del_file</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token class-name">char_t</span><span class="token operator">*</span> fname<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> flg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flg <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">rfs_del_dirfileblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> fname<span class="token punctuation">,</span> RDR_FIL_TYPE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除文件的接口函数非常之简单，就是判断一下标志，接着调用了 rfs_del_dirfileblk 函数，下面我们就来写好这个 rfs_del_dirfileblk 函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">drvstus_t</span> <span class="token function">rfs_del_dirfileblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token class-name">char_t</span><span class="token operator">*</span> fname<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> flgtype<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> val<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flgtype <span class="token operator">!=</span> RDR_FIL_TYPE <span class="token operator">||</span> val <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token class-name">char_t</span> fne<span class="token punctuation">[</span>DR_NM_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>fne<span class="token punctuation">,</span> DR_NM_MAX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//提取纯文件名</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rfs_ret_fname</span><span class="token punctuation">(</span>fne<span class="token punctuation">,</span>fname<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">//调用删除文件的核心函数</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">del_dirfileblk_core</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> fne<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rfs_del_dirfileblk 函数只是提取了文件名，然后调用了一个删除文件的核心函数，这个核心函数就是 del_dirfileblk_core 函数，它的实现代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//删除文件的核心函数</span>
<span class="token class-name">sint_t</span> <span class="token function">del_dirfileblk_core</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token class-name">char_t</span><span class="token operator">*</span> fname<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">sint_t</span> rets <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> rblkp<span class="token operator">=</span><span class="token function">get_rootdirfile_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取根目录文件</span>
    <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> fmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>rblkp<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fmp<span class="token operator">-&gt;</span>fmd_type<span class="token operator">!=</span>FMD_DIR_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//检查根目录文件的类型</span>
        rets<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fmp<span class="token operator">-&gt;</span>fmd_curfwritebk <span class="token operator">==</span> fmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blkstart <span class="token operator">&amp;&amp;</span> fmp<span class="token operator">-&gt;</span>fmd_curfinwbkoff <span class="token operator">==</span> fmp<span class="token operator">-&gt;</span>fmd_fileifstbkoff<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//检查根目录文件中有没有数据</span>
        rets <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">rfsdir_t</span><span class="token operator">*</span> dirp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">rfsdir_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fmp<span class="token punctuation">)</span> <span class="token operator">+</span> fmp<span class="token operator">-&gt;</span>fmd_fileifstbkoff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> maxchkp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>rblkp <span class="token operator">+</span> FSYS_ALCBLKSZ<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>dirp <span class="token operator">&lt;</span> maxchkp<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dirp<span class="token operator">-&gt;</span>rdr_type <span class="token operator">==</span> RDR_FIL_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//检查其类型是否为文件类型</span>
            <span class="token comment">//如果文件名相同，就执行以下删除动作</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rfs_strcmp</span><span class="token punctuation">(</span>dirp<span class="token operator">-&gt;</span>rdr_name<span class="token punctuation">,</span> fname<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//释放rfsdir_t结构的rdr_blknr中指向的逻辑储存块</span>
                <span class="token function">rfs_del_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> dirp<span class="token operator">-&gt;</span>rdr_blknr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//初始化rfsdir_t结构，实际上是清除其中的数据</span>
                <span class="token function">rfsdir_t_init</span><span class="token punctuation">(</span>dirp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//设置rfsdir_t结构的类型为删除类型，表示它已经删除</span>
                dirp<span class="token operator">-&gt;</span>rdr_type <span class="token operator">=</span> RDR_DEL_TYPE<span class="token punctuation">;</span>
                rets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        dirp<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//下一个rfsdir_t</span>
    <span class="token punctuation">}</span>
    rets<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
err<span class="token operator">:</span>
    <span class="token function">del_rootdirfile_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>rblkp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放根目录文件</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的 del_dirfileblk_core 函数，它主要是遍历根目录文件中所有的 rfsdir_t 结构，并比较其文件名，看看删除的文件名称是否相同，相同就释放该 rfsdir_t 结构的 rdr_blknr 字段对应的逻辑储存块，清除该 rfsdir_t 结构中的数据，同时设置该 rfsdir_t 结构的类型为删除类型。</p><p>你可以这样理解：删除一个文件，就是把这个文件对应的 rfsdir_t 结构中的数据清空，这样就无法查找到这个文件了。同时，也要释放该文件占用的逻辑储存块。因为没有清空文件数据，所以可以通过反删除软件找回文件。</p><h3 id="打开文件" tabindex="-1"><a class="header-anchor" href="#打开文件" aria-hidden="true">#</a> 打开文件</h3><p>接下来，我们就要实现打开文件操作了。一个已经存在的文件，要对它进行读写操作，首先就应该打开这个文件。</p><p>在实现这个打开文件操作之前，我们不妨先回忆一下前面课程里提到的objnode_t 结构。</p><p>Cosmos 内核上层组件调用设备驱动程序时，都需要建立一个相应的 objnode_t 结构，把这个 I/O 包发送给相应的驱动程序，但是 objnode_t 结构不仅仅是用于驱动程序，它还用于表示进程使用了哪些资源，例如打开了哪些设备或者文件，而每打开一个设备或者文件就建立一个 objnode_t 结构，放在特定进程的资源表中。</p><p>为了适应文件系统设备驱动程序，在 cosmos/include/krlinc/krlobjnode_t.h 文件中，需要在 objnode_t 结构中增加一些东西，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJN_TY_DEV</span> <span class="token expression"><span class="token number">1</span></span><span class="token comment">//设备类型</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJN_TY_FIL</span> <span class="token expression"><span class="token number">2</span></span><span class="token comment">//文件类型</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJN_TY_NUL</span> <span class="token expression"><span class="token number">0</span></span><span class="token comment">//默认类型</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_OBJNODE</span>
<span class="token punctuation">{</span>
    <span class="token class-name">spinlock_t</span>  on_lock<span class="token punctuation">;</span>
    <span class="token class-name">list_h_t</span>    on_list<span class="token punctuation">;</span>
    <span class="token class-name">sem_t</span>       on_complesem<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span>      on_flgs<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span>      on_stus<span class="token punctuation">;</span>
    <span class="token comment">//……</span>
    <span class="token keyword">void</span><span class="token operator">*</span>       on_fname<span class="token punctuation">;</span><span class="token comment">//文件路径名指针</span>
    <span class="token keyword">void</span><span class="token operator">*</span>       on_finode<span class="token punctuation">;</span><span class="token comment">//文件对应的fimgrhd_t结构指针</span>
    <span class="token keyword">void</span><span class="token operator">*</span>       on_extp<span class="token punctuation">;</span><span class="token comment">//扩展所用</span>
<span class="token punctuation">}</span><span class="token class-name">objnode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中 objnode_t 结构里增加了两个字段，一个是指向文件路径名的指针，表示打开哪个文件。因为要知道一个文件的所有信息，所以增加了指向对应文件的 fimgrhd_t 结构指针，也就是我们增加的第二个字段。</p><p>现在我们来看看打开一个文件的流程。一共也是 4 步。</p><p>\\1. 从 objnode_t 结构的文件路径提取文件名。</p><p>\\2. 获取根目录文件，在该文件中搜索对应的 rfsdir_t 结构，看看文件是否存在。</p><p>\\3. 分配一个 4KB 缓存区，把该文件对应的 rfsdir_t 结构中指向的逻辑储存块读取到缓存区中，然后释放根目录文件。</p><p>\\4. 把缓冲区中的 fimgrhd_t 结构的地址，保存到 objnode_t 结构的 on_finode 域中。</p><p>下面来写两个函数实现这些流程，同样我们需要先写好接口函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//打开文件的接口函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_open_file</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">objnode_t</span><span class="token operator">*</span> obp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">objnode_t</span><span class="token operator">*</span><span class="token punctuation">)</span>iopack<span class="token punctuation">;</span>
    <span class="token comment">//检查objnode_t中的文件路径名</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obp<span class="token operator">-&gt;</span>on_fname <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//调用打开文件的核心函数</span>
    <span class="token keyword">void</span><span class="token operator">*</span> fmdp <span class="token operator">=</span> <span class="token function">rfs_openfileblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">char_t</span><span class="token operator">*</span><span class="token punctuation">)</span>obp<span class="token operator">-&gt;</span>on_fname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fmdp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//把返回的fimgrhd_t结构的地址保存到objnode_t中的on_finode字段中</span>
    obp<span class="token operator">-&gt;</span>on_finode <span class="token operator">=</span> fmdp<span class="token punctuation">;</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口函数 rfs_open_file 中只是对参数进行了检查。然后调用了核心函数，这个函数就是 rfs_openfileblk，它的代码实现如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//打开文件的核心函数</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">rfs_openfileblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token class-name">char_t</span><span class="token operator">*</span> fname<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">char_t</span> fne<span class="token punctuation">[</span>DR_NM_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">void</span><span class="token operator">*</span> rets <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>fne<span class="token punctuation">,</span>DR_NM_MAX<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rfs_ret_fname</span><span class="token punctuation">(</span>fne<span class="token punctuation">,</span> fname<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//从文件路径名中提取纯文件名</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span><span class="token operator">*</span> rblkp <span class="token operator">=</span> <span class="token function">get_rootdirfile_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取根目录文件</span>
    <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> fmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>rblkp<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fmp<span class="token operator">-&gt;</span>fmd_type <span class="token operator">!=</span> FMD_DIR_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断根目录文件的类型是否合理 </span>
        rets <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//判断根目录文件里有没有数据</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fmp<span class="token operator">-&gt;</span>fmd_curfwritebk <span class="token operator">==</span> fmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blkstart <span class="token operator">&amp;&amp;</span> 
fmp<span class="token operator">-&gt;</span>fmd_curfinwbkoff <span class="token operator">==</span> fmp<span class="token operator">-&gt;</span>fmd_fileifstbkoff<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        rets <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">rfsdir_t</span><span class="token operator">*</span> dirp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">rfsdir_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fmp<span class="token punctuation">)</span> <span class="token operator">+</span> fmp<span class="token operator">-&gt;</span>fmd_fileifstbkoff<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">void</span><span class="token operator">*</span> maxchkp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>rblkp <span class="token operator">+</span> FSYS_ALCBLKSZ <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>dirp <span class="token operator">&lt;</span> maxchkp<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//开始遍历文件对应的rfsdir_t结构</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dirp<span class="token operator">-&gt;</span>rdr_type <span class="token operator">==</span> RDR_FIL_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//如果文件名相同就跳转到opfblk标号处运行</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rfs_strcmp</span><span class="token punctuation">(</span>dirp<span class="token operator">-&gt;</span>rdr_name<span class="token punctuation">,</span> fne<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">goto</span> opfblk<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        dirp<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果到这里说明没有找到该文件对应的rfsdir_t结构，所以设置返回值为NULL</span>
    rets <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
opfblk<span class="token operator">:</span>
    buf <span class="token operator">=</span> <span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配4KB大小的缓冲区</span>
    <span class="token comment">//读取该文件占用的逻辑储存块</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">read_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> dirp<span class="token operator">-&gt;</span>rdr_blknr<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> ffmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ffmp<span class="token operator">-&gt;</span>fmd_type <span class="token operator">==</span> FMD_NUL_TYPE <span class="token operator">||</span> ffmp<span class="token operator">-&gt;</span>fmd_fileifstbkoff <span class="token operator">!=</span> <span class="token number">0x200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断将要打开的文件是否合法</span>
        rets <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token keyword">goto</span> err1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rets <span class="token operator">=</span> buf<span class="token punctuation">;</span> <span class="token keyword">goto</span> err<span class="token punctuation">;</span><span class="token comment">//设置缓冲区首地址为返回值</span>
err1<span class="token operator">:</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//上面的步骤若出现问题就要释放缓冲区</span>
err<span class="token operator">:</span>
    <span class="token function">del_rootdirfile_blk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> rblkp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放根目录文件</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合上面的代码我们能够看到，通过 rfs_openfileblk 函数中的 for 循环，可以遍历要打开的文件在根目录文件中对应的 rfsdir_t 结构，然后把对应文件占用的逻辑储存块读取到缓冲区中，最后返回这个缓冲区的首地址。</p><p>因为这个缓冲区开始的空间中，就存放着其文件对应的 fimgrhd_t 结构，所以返回 fimgrhd_t 结构的地址，整个打开文件的流程就结束了。</p><h3 id="读写文件" tabindex="-1"><a class="header-anchor" href="#读写文件" aria-hidden="true">#</a> 读写文件</h3><p>刚才我们已经实现了打开文件， 而打开一个文件，就是为了对这个文件进行读写。</p><p>其实对文件的读写包含两个操作，一个是从储存设备中读取文件的数据，另一个是把文件的数据写入到储存设备中。</p><p>咱们先来看看如何读取已经打开的文件中的数据，大致的流程如下。</p><p>\\1. 检查 objnode_t 结构中用于存放文件数据的缓冲区及其大小。</p><p>\\2. 检查 imgrhd_t 结构中文件相关的信息。</p><p>\\3. 把文件的数据读取到 objnode_t 结构中指向的缓冲区中。</p><p>通过后面的代码，我们把读文件的接口函数跟核心函数一起实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//读取文件数据的接口函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_read_file</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">objnode_t</span><span class="token operator">*</span> obp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">objnode_t</span><span class="token operator">*</span><span class="token punctuation">)</span>iopack<span class="token punctuation">;</span>
    <span class="token comment">//检查文件是否已经打开，以及用于存放文件数据的缓冲区和它的大小是否合理</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obp<span class="token operator">-&gt;</span>on_finode <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> obp<span class="token operator">-&gt;</span>on_buf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> obp<span class="token operator">-&gt;</span>on_bufsz <span class="token operator">!=</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">rfs_readfileblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>obp<span class="token operator">-&gt;</span>on_finode<span class="token punctuation">,</span> obp<span class="token operator">-&gt;</span>on_buf<span class="token punctuation">,</span> obp<span class="token operator">-&gt;</span>on_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//实际读取文件数据的函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_readfileblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> fmp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//检查文件的相关信息是否合理</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fmp<span class="token operator">-&gt;</span>fmd_sfblk <span class="token operator">!=</span> fmp<span class="token operator">-&gt;</span>fmd_curfwritebk <span class="token operator">||</span> fmp<span class="token operator">-&gt;</span>fmd_curfwritebk <span class="token operator">!=</span> fmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blkstart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//检查读取文件数据的长度是否大于（4096-512）</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token punctuation">(</span>FSYS_ALCBLKSZ <span class="token operator">-</span> fmp<span class="token operator">-&gt;</span>fmd_fileifstbkoff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//指向文件数据的开始地址</span>
    <span class="token keyword">void</span><span class="token operator">*</span> wrp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>fmp <span class="token operator">+</span> fmp<span class="token operator">-&gt;</span>fmd_fileifstbkoff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把文件开始处的数据复制len个字节到buf指向的缓冲区中</span>
    <span class="token function">hal_memcpy</span><span class="token punctuation">(</span>wrp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中读取文件数据的函数很简单，关键是要明白前面那个打开文件的函数，因为在那里它已经把文件数据复制到一个缓冲区中了，rfs_readfileblk 函数中的参数 buf、len 都是接口函数 rfs_read_file 从 objnode_t 结构中提取出来的，其它的部分我已经通过注释已经说明了。</p><p>好了，我们下面就来实现怎么向文件中写入数据，和读取文件的流程一样，只不过要将要写入的数据复制到打开文件时为其分配的缓冲区中，最后还要把打开文件时为其分配的缓冲区中的数据，写入到相应的逻辑储存块中。</p><p>我们还是把写文件的接口函数和核心函数一起实现，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//写入文件数据的接口函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_write_file</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">objnode_t</span><span class="token operator">*</span> obp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">objnode_t</span><span class="token operator">*</span><span class="token punctuation">)</span>iopack<span class="token punctuation">;</span>
    <span class="token comment">//检查文件是否已经打开，以及用于存放文件数据的缓冲区和它的大小是否合理</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obp<span class="token operator">-&gt;</span>on_finode <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> obp<span class="token operator">-&gt;</span>on_buf <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> obp<span class="token operator">-&gt;</span>on_bufsz <span class="token operator">!=</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">rfs_writefileblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>obp<span class="token operator">-&gt;</span>on_finode<span class="token punctuation">,</span> obp<span class="token operator">-&gt;</span>on_buf<span class="token punctuation">,</span> obp<span class="token operator">-&gt;</span>on_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//实际写入文件数据的函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_writefileblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> fmp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//检查文件的相关信息是否合理</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fmp<span class="token operator">-&gt;</span>fmd_sfblk <span class="token operator">!=</span> fmp<span class="token operator">-&gt;</span>fmd_curfwritebk <span class="token operator">||</span> fmp<span class="token operator">-&gt;</span>fmd_curfwritebk <span class="token operator">!=</span> fmp<span class="token operator">-&gt;</span>fmd_fleblk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fb_blkstart<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//检查当前将要写入数据的偏移量加上写入数据的长度，是否大于等于4KB</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fmp<span class="token operator">-&gt;</span>fmd_curfinwbkoff <span class="token operator">+</span> len<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//指向将要写入数据的内存空间</span>
    <span class="token keyword">void</span><span class="token operator">*</span> wrp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>fmp <span class="token operator">+</span> fmp<span class="token operator">-&gt;</span>fmd_curfinwbkoff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把buf缓冲区中的数据复制len个字节到wrp指向的内存空间中去</span>
    <span class="token function">hal_memcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> wrp<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fmp<span class="token operator">-&gt;</span>fmd_filesz <span class="token operator">+=</span> len<span class="token punctuation">;</span><span class="token comment">//增加文件大小</span>
    <span class="token comment">//使fmd_curfinwbkoff指向下一次将要写入数据的位置</span>
    fmp<span class="token operator">-&gt;</span>fmd_curfinwbkoff <span class="token operator">+=</span> len<span class="token punctuation">;</span>
    <span class="token comment">//把文件数据写入到相应的逻辑储存块中，完成数据同步</span>
    <span class="token function">write_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>fmp<span class="token punctuation">,</span> fmp<span class="token operator">-&gt;</span>fmd_curfwritebk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，你要注意的是，<strong>rfs_writefileblk 函数永远都是从 fimgrhd_t 结构的 fmd_curfinwbkoff 字段中的偏移量开始写入文件数据的</strong>，比如向空文件中写入 2 个字节，那么其 fmd_curfinwbkoff 字段的值就是 2，因为第 0、1 个字节空间已经被占用了，这就是<strong>追加写入数据</strong>的方式。</p><p>rfs_writefileblk 函数最后调用 write_rfsdevblk 函数把文件数据写入到相应的逻辑储存块中，完成数据同步。我们发现只要打开文件了，读写文件还是很简单的，最后还要实现关闭文件的操作。</p><h3 id="关闭文件" tabindex="-1"><a class="header-anchor" href="#关闭文件" aria-hidden="true">#</a> 关闭文件</h3><p>有打开文件的操作，就需要有关闭文件的操作，因为打开一个文件，会为此分配一个缓冲区，这些都是系统资源，所以需要一个关闭文件的操作来释放这些资源，以防止系统资源泄漏。</p><p>关闭文件的流程很简单，首先检查文件是否已经打开。然后把文件写入到对应的逻辑储存块中，完成数据的同步。最后释放文件数据占用的缓冲区。下面我们开始写代码实现，我们依然把接口和核心函数放在一起实现，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//关闭文件的接口函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_close_file</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">objnode_t</span><span class="token operator">*</span> obp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">objnode_t</span><span class="token operator">*</span><span class="token punctuation">)</span>iopack<span class="token punctuation">;</span>
    <span class="token comment">//检查文件是否已经打开了</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obp<span class="token operator">-&gt;</span>on_finode <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">rfs_closefileblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> obp<span class="token operator">-&gt;</span>on_finode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//关闭文件的核心函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_closefileblk</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> fblkp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//指向文件的fimgrhd_t结构</span>
    <span class="token class-name">fimgrhd_t</span><span class="token operator">*</span> fmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">fimgrhd_t</span><span class="token operator">*</span><span class="token punctuation">)</span>fblkp<span class="token punctuation">;</span>
    <span class="token comment">//完成文件数据的同步</span>
    <span class="token function">write_rfsdevblk</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> fblkp<span class="token punctuation">,</span> fmp<span class="token operator">-&gt;</span>fmd_sfblk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//释放缓冲区</span>
    <span class="token function">del_buf</span><span class="token punctuation">(</span>fblkp<span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码是非常简单的，但在目前的情况下，rfs_closefileblk 函数中是没有必要调用 write_rfsdevblk 函数的，因为前面在写入文件数据的同时，就已经把文件的数据写入到逻辑储存块中去了。最后释放了先前打开文件时分配的缓冲区，而 objnode_t 结构不应该在此释放，它是由 Cosmos 内核上层组件进行释放的。</p><h3 id="串联整合" tabindex="-1"><a class="header-anchor" href="#串联整合" aria-hidden="true">#</a> # 串联整合</h3><p>到目前为止，我们实现了文件相关的操作，并且提供了接口函数，但是我们的文件系统是以设备的形式存在的，所以文件操作的接口，必须要串联整合到文件系统设备驱动程序之中，文件系统才能真正工作。</p><p>下面我们就去整合联串文件系统设备驱动程序。首先来串联整合文件系统的打开文件操作和新建文件操作，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">drvstus_t</span> <span class="token function">rfs_open</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">objnode_t</span><span class="token operator">*</span> obp<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">objnode_t</span><span class="token operator">*</span><span class="token punctuation">)</span>iopack<span class="token punctuation">;</span>
    <span class="token comment">//根据objnode_t结构中的访问标志进行判断</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obp<span class="token operator">-&gt;</span>on_acsflgs <span class="token operator">==</span> FSDEV_OPENFLG_OPEFILE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">rfs_open_file</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obp<span class="token operator">-&gt;</span>on_acsflgs <span class="token operator">==</span> FSDEV_OPENFLG_NEWFILE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">rfs_new_file</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> obp<span class="token operator">-&gt;</span>on_fname<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中 rfs_open 函数对应于设备驱动程序的打开功能派发函数，但没有相应的新建功能派发函数，于是我们就根据 objnode_t 结构中访问标志域设置不同的编码，来进行判断。</p><p>接着我们来串联整合关闭文件的操作。这次要简单一些，因为设备驱动程序有对应的关闭功能派发函数，直接调用关闭文件操作的接口函数就可以了，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">drvstus_t</span> <span class="token function">rfs_close</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">rfs_close_file</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是文件读写操作的串联整合，设备驱动程序也有对应的读写功能派发函数，同样也是直接调用文件读写操作的接口函数即可，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">drvstus_t</span> <span class="token function">rfs_read</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//调用读文件操作的接口函数</span>
    <span class="token keyword">return</span> <span class="token function">rfs_read_file</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">rfs_write</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//调用写文件操作的接口函数</span>
    <span class="token keyword">return</span> <span class="token function">rfs_write_file</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> iopack<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，来串联整合稍微有点复杂的删除文件操作，这是因为设备驱动程序没有对应的功能派发函数，所以我们需要用到设备驱动程序的控制功能派发函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">drvstus_t</span> <span class="token function">rfs_ioctrl</span><span class="token punctuation">(</span><span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">objnode_t</span><span class="token operator">*</span> obp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">objnode_t</span><span class="token operator">*</span><span class="token punctuation">)</span>iopack<span class="token punctuation">;</span>
    <span class="token comment">//根据objnode_t结构中的控制码进行判断</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obp<span class="token operator">-&gt;</span>on_ioctrd <span class="token operator">==</span> FSDEV_IOCTRCD_DELFILE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//调用删除文件操作的接口函数</span>
        <span class="token keyword">return</span> <span class="token function">rfs_del_file</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> obp<span class="token operator">-&gt;</span>on_fname<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，我们给文件系统设备分配了一个 FSDEV_IOCTRCD_DELFILE（一个整数）控制码，Cosmos 内核上层组件的代码就可以根据需要，设置 objnode_t 结构中的控制码就能达到相应的目的了。</p><p>现在，文件相关的操作已经串联整合好了。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>前面实现了文件系统的 6 种最常用的文件操作，并且已经整合到文件系统设备驱动程序框架代码中去了，可是这些代码究竟对不对，测试运行了才知道。</p><p>下面来写好测试代码。要注意的是，Cosmos 下的任何设备驱动程序<strong>都必须要有 objnode_t 结构才能运行</strong>。所以，在这里我们需要手动建立一个 objnode_t 结构并设置好其中的字段，模拟一下 Cosmos 上层组件调用设备驱动程序的过程。</p><p>这一过程我们可以写个 test_fsys 函数来实现，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">test_fsys</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;开始文件操作测试\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>rwbuf <span class="token operator">=</span> <span class="token function">new_buf</span><span class="token punctuation">(</span>FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配缓冲区</span>
    <span class="token comment">//把缓冲区中的所有字节都置为0xff</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>rwbuf<span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">objnode_t</span> <span class="token operator">*</span>ondp <span class="token operator">=</span> <span class="token function">krlnew_objnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新建一个objnode_t结构</span>
    ondp<span class="token operator">-&gt;</span>on_acsflgs <span class="token operator">=</span> FSDEV_OPENFLG_NEWFILE<span class="token punctuation">;</span><span class="token comment">//设置新建文件标志</span>
    ondp<span class="token operator">-&gt;</span>on_fname <span class="token operator">=</span> <span class="token string">&quot;/testfile&quot;</span><span class="token punctuation">;</span><span class="token comment">//设置新建文件名</span>
    ondp<span class="token operator">-&gt;</span>on_buf <span class="token operator">=</span> rwbuf<span class="token punctuation">;</span><span class="token comment">//设置缓冲区</span>
    ondp<span class="token operator">-&gt;</span>on_bufsz <span class="token operator">=</span> FSYS_ALCBLKSZ<span class="token punctuation">;</span><span class="token comment">//设置缓冲区大小</span>
    ondp<span class="token operator">-&gt;</span>on_len <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">;</span><span class="token comment">//设置读写多少字节</span>
    ondp<span class="token operator">-&gt;</span>on_ioctrd <span class="token operator">=</span> FSDEV_IOCTRCD_DELFILE<span class="token punctuation">;</span><span class="token comment">//设置控制码</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rfs_open</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> ondp<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//新建文件</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;新建文件错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ondp<span class="token operator">-&gt;</span>on_acsflgs <span class="token operator">=</span> FSDEV_OPENFLG_OPEFILE<span class="token punctuation">;</span><span class="token comment">//设置打开文件标志</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rfs_open</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> ondp<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//打开文件</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rfs_write</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> ondp<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//把数据写入文件</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;写入文件错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span>rwbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> FSYS_ALCBLKSZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清零缓冲区</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rfs_read</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> ondp<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//读取文件数据</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;读取文件错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rfs_close</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> ondp<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//关闭文件</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;关闭文件错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">u8_t</span> <span class="token operator">*</span>cb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">u8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>rwbuf<span class="token punctuation">;</span><span class="token comment">//指向缓冲区</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//检查缓冲区空间中的头512个字节的数据，是否为0xff</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果不等于0xff就死机</span>
            <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;检查文件内容错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;testfile文件第[%x]个字节数据:%x\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>cb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印文件内容</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rfs_ioctrl</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> ondp<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除文件</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;删除文件错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ondp<span class="token operator">-&gt;</span>on_acsflgs <span class="token operator">=</span> FSDEV_OPENFLG_OPEFILE<span class="token punctuation">;</span><span class="token comment">//再次设置打开文件标志</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rfs_open</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> ondp<span class="token punctuation">)</span> <span class="token operator">==</span> DFCERRSTUS<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//再次打开文件</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;再次打开文件失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;结束文件操作测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码虽然有点长，因为我们一下子测试了关于文件的 6 大操作。每个文件操作失败后都会死机，不会继续向下运行。</p><p>测试逻辑很简单：开始会建立并打开一个文件，接着写入数据，然后读取文件中数据进行比较，看看是不是和之前写入的数据相等，最后删除这个文件并再次打开，看是否会出错。因为文件已经删除了，打开一个已经删除的文件自然要出错，出错就说明测试成功。</p><p>现在我们把 test_fsys 函数放在 rfs_entry 函数的最后调用，然后打开终端切换到 cosmos 目录下执行 make vboxtest 命令，最后不出意外的话，你会看到如下图所示的情况。</p><img src="`+t+'" alt="img" style="zoom:50%;"><p>文件操作测试示意图</p><p>从图里我们能看到，文件中的数据和最后重新打开已经删除文件时出现的错误，这说明了我们的代码是正确无误的。</p><p>至此 ，测试了文件相关的 6 大操作的代码，代码质量都是相当高的，都达到了我们的预期，一个简单、有诸多限制但却五脏俱全的文件系统就实现了。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>这节课告一段落，恭喜你坚持到这里。</p><p>文件系统虽然复杂，但我们发现只要做得足够“小”，就能大大降低了实现的难度。虽然降低了实现的难度，但我们的 rfs 文件系统依然包含了一个正常文件系统所具有的功能特性，现在我来为你梳理一下本节课的重点：</p><p>\\1. 首先是文件系统的辅助操作，因为文件系统的复杂性，所以必须要实现一些如获取与释放根目录文件、获取文件名、判断文件是否存在等基础辅助操作函数。</p><p>\\2. 然后实现了文件系统必须要提供的 6 大文件操作：<strong>新建文件、删除文件、打开文件、读写文件、关闭文件</strong>。</p><p>\\3. 最后把这些文件操作全部串联整合到文件系统设备驱动程序之中，并且进行了测试，确认代码正确无误。</p><p>今天这节课，我们又实现了 Cosmos 内核的一个基础组件，即文件系统，不过它是以<strong>设备的形式</strong>存在的，这样做是为了方便以后的扩展和移植。</p><p>现在文件系统是实现了，不过还不够完善。你可能在想，我们文件系统在内存中，一断电数据就全完了。是的，不过你可以尝试写好硬盘驱动，然后把内存中的逻辑储存块写入到硬盘中就行了，期待你的实现。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请你想一想，我们这个简单的、小的，却五脏俱全的文件系统有哪些限制？</p><p>欢迎你在留言区记录你的收获或疑问，也鼓励你边学边练，多多动手实践。同时我推荐你把这节课分享给身边的朋友，跟他一起学习进步。</p><p>好，我是 LMOS，我们下节课见。</p>',135),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","K34-文件的基本操作.html.vue"]]);export{d as default};
