import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const e="/assets/1b210fe094e7eba4b19ef118f76e6322-9cc59e42.jpg",t="/assets/8392800e70d37795c902b0d5dfebe5b6-3a65a424.jpg",c="/assets/e7b479af38d5ed1ab00f35b4fe88fe30-89a9cf8b.jpg",o="/assets/78868f267073d4b0a8fb73b15bb41bfe-fc2e4ce4.jpg",l={},i=p('<h1 id="_23-瞧一瞧linux-slab如何分配内存" tabindex="-1"><a class="header-anchor" href="#_23-瞧一瞧linux-slab如何分配内存" aria-hidden="true">#</a> 23 | 瞧一瞧Linux：SLAB如何分配内存？</h1><p>你好，我是 LMOS。</p><p>上节课我们学习了伙伴系统，了解了它是怎样管理物理内存页面的。那么你自然会想到这个问题：Linux 系统中，比页更小的内存对象要怎样分配呢？</p><p>带着这个问题，我们来一起看看 **SLAB 分配器的原理和实现。**在学习过程中，你也可以对照一下我们 Cosmos 的内存管理组件，看看两者的内存管理有哪些异同。</p><h2 id="slab" tabindex="-1"><a class="header-anchor" href="#slab" aria-hidden="true">#</a> SLAB</h2><p>与 Cosmos 物理内存页面管理器一样，Linux 中的伙伴系统是<strong>以页面为最小单位</strong>分配的，现实更多要<strong>以内核对象为单位</strong>分配内存，其实更具体一点说，就是根据<strong>内核对象的实例变量大小</strong>来申请和释放内存空间，这些数据结构实例变量的大小通常从几十字节到几百字节不等，<strong>远远小于一个页面的大小</strong>。</p><p>如果一个几十字节大小的数据结构实例变量，就要为此分配一个页面，这无疑是对宝贵物理内存的一种巨大浪费，因此一个更好的技术方案应运而生，就是 <strong>Slab 分配器</strong>（由 Sun 公司的雇员 Jeff Bonwick 在 Solaris 2.4 中设计并实现）。</p><p>由于作者公开了实现方法，后来被 Linux 所借鉴，用于实现内核中更小粒度的内存分配。看看吧，你以为 Linux 很强大，真的强大吗？不过是站在巨人的肩膀上飞翔的。</p><h2 id="走进-slab-对象" tabindex="-1"><a class="header-anchor" href="#走进-slab-对象" aria-hidden="true">#</a> 走进 SLAB 对象</h2><p>何为 SLAB 对象？在 SLAB 分配器中，它把一个内存页面或者一组连续的内存页面，<strong>划分成大小相同的块</strong>，其中这一个小的内存块就是 <mark>SLAB 对象</mark>，但是这一组连续的内存页面中不只是 SLAB 对象，还有 <mark>SLAB 管理头</mark>和<mark>着色区</mark>。</p><p>我画个图你就明白了，如下所示。</p><img src="'+e+`" alt="img" style="zoom:15%;"><p>SLAB对象示意图</p><p>上图中有一个内存页面和两个内存页面的 SLAB，你可能对着色区有点陌生，我来给你讲解一下。</p><h3 id="_1-着色区" tabindex="-1"><a class="header-anchor" href="#_1-着色区" aria-hidden="true">#</a> 1 着色区</h3><p>这个<mark>着色区</mark>也是一块动态的内存块，建立 SLAB 时才会设置它的大小，目的是<strong>为了错开不同 SLAB 中的对象地址</strong>，降低硬件 Cache 行中的地址争用，以免导致 Cache 抖动效应，整个系统性能下降。</p><h3 id="_2-slab头" tabindex="-1"><a class="header-anchor" href="#_2-slab头" aria-hidden="true">#</a> 2 SLAB头</h3><p><mark>SLAB 头</mark>其实是一个数据结构，但是它不一定放在保存对象内存页面的开始。通常会有一个保存 SLAB 管理头的 SLAB，在 Linux 中，SLAB 管理头用 kmem_cache 结构来表示，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">array_cache</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> avail<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>entry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token punctuation">{</span>
    <span class="token comment">//是每个CPU一个array_cache类型的变量，cpu_cache是用于管理空闲对象的 </span>
    <span class="token keyword">struct</span> <span class="token class-name">array_cache</span> __percpu <span class="token operator">*</span>cpu_cache<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">//cache大小</span>
    <span class="token class-name">slab_flags_t</span> flags<span class="token punctuation">;</span><span class="token comment">//slab标志</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token comment">//对象个数</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> gfporder<span class="token punctuation">;</span><span class="token comment">//分配内存页面的order</span>
    <span class="token class-name">gfp_t</span> allocflags<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> colour<span class="token punctuation">;</span><span class="token comment">//着色区大小</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> colour_off<span class="token punctuation">;</span><span class="token comment">//着色区的开始偏移</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token comment">//本SLAB的名字</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> list<span class="token punctuation">;</span><span class="token comment">//所有的SLAB都要链接起来</span>
    <span class="token keyword">int</span> refcount<span class="token punctuation">;</span><span class="token comment">//引用计数</span>
    <span class="token keyword">int</span> object_size<span class="token punctuation">;</span><span class="token comment">//对象大小</span>
    <span class="token keyword">int</span> align<span class="token punctuation">;</span><span class="token comment">//对齐大小</span>
    <span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span> <span class="token operator">*</span>node<span class="token punctuation">[</span>MAX_NUMNODES<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//指向管理kmemcache的上层结构</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="每-cpu-变量" tabindex="-1"><a class="header-anchor" href="#每-cpu-变量" aria-hidden="true">#</a> 每 CPU 变量</h3><p>上述代码中，有多少个 CPU，就会有多少个 array_cache 类型的变量。这种为每个 CPU 构造一个变量副本的同步机制，就是<strong>每 CPU 变量</strong>（per-cpu-variable）。array_cache 结构中&quot;entry[]&quot;表示了一个遵循 LIFO 顺序的数组，&quot;avail&quot;和&quot;limit&quot;分别指定了当前可用对象的数目和允许容纳对象的最大数目。</p><img src="`+t+`" alt="img" style="zoom:15%;"><p>kmem_cache结构图解</p><h2 id="第一个-kmem-cache" tabindex="-1"><a class="header-anchor" href="#第一个-kmem-cache" aria-hidden="true">#</a> 第一个 kmem_cache</h2><p>第一个 kmem_cache 是哪里来的呢？其实它是静态定义在代码中的，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> kmem_cache_boot <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>batchcount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>limit <span class="token operator">=</span> BOOT_CPUCACHE_ENTRIES<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>shared <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;kmem_cache&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> __init <span class="token function">kmem_cache_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token comment">//指向静态定义的kmem_cache_boot</span>
    kmem_cache <span class="token operator">=</span> <span class="token operator">&amp;</span>kmem_cache_boot<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_INIT_LISTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token function">kmem_cache_node_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>init_kmem_cache_node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//建立保存kmem_cache结构的kmem_cache</span>
    <span class="token function">create_boot_cache</span><span class="token punctuation">(</span>kmem_cache<span class="token punctuation">,</span> <span class="token string">&quot;kmem_cache&quot;</span><span class="token punctuation">,</span>
        <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">+</span>
                  nr_node_ids <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                  SLAB_HWCACHE_ALIGN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//加入全局slab_caches链表中</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmem_cache<span class="token operator">-&gt;</span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>slab_caches<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">int</span> nid<span class="token punctuation">;</span>
        <span class="token function">for_each_online_node</span><span class="token punctuation">(</span>nid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">init_list</span><span class="token punctuation">(</span>kmem_cache<span class="token punctuation">,</span> <span class="token operator">&amp;</span>init_kmem_cache_node<span class="token punctuation">[</span>CACHE_CACHE <span class="token operator">+</span> nid<span class="token punctuation">]</span><span class="token punctuation">,</span> nid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">init_list</span><span class="token punctuation">(</span>kmalloc_caches<span class="token punctuation">[</span>KMALLOC_NORMAL<span class="token punctuation">]</span><span class="token punctuation">[</span>INDEX_NODE<span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token operator">&amp;</span>init_kmem_cache_node<span class="token punctuation">[</span>SIZE_NODE <span class="token operator">+</span> nid<span class="token punctuation">]</span><span class="token punctuation">,</span> nid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//建立kmalloc函数使用的的kmem_cache</span>
    <span class="token function">create_kmalloc_caches</span><span class="token punctuation">(</span>ARCH_KMALLOC_FLAGS<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="管理-kmem-cache" tabindex="-1"><a class="header-anchor" href="#管理-kmem-cache" aria-hidden="true">#</a> 管理 kmem_cache</h2><p>我们建好了第一个 kmem_cache，以后 kmem_cache 越来越多，而且我们并没有看到 kmem_cache 结构中有任何指向内存页面的字段，但在 kmem_cache 结构中有个保存 kmem_cache_node 结构的指针数组。</p><p>kmem_cache_node 结构是每个内存节点对应一个，它就是用来管理 kmem_cache 结构的，它开始是静态定义的，初始化时建立了第一个 kmem_cache 结构之后，init_list 函数负责一个个分配内存空间，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_INIT_LISTS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> MAX_NUMNODES<span class="token punctuation">)</span></span></span>
<span class="token comment">//定义的kmem_cache_node结构数组</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span> __initdata init_kmem_cache_node<span class="token punctuation">[</span>NUM_INIT_LISTS<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span> <span class="token punctuation">{</span>
    <span class="token class-name">spinlock_t</span> list_lock<span class="token punctuation">;</span><span class="token comment">//自旋锁</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> slabs_partial<span class="token punctuation">;</span><span class="token comment">//有一部分空闲对象的kmem_cache结构</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> slabs_full<span class="token punctuation">;</span><span class="token comment">//没有空闲对象的kmem_cache结构</span>
    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> slabs_free<span class="token punctuation">;</span><span class="token comment">//对象全部空闲kmem_cache结构</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> total_slabs<span class="token punctuation">;</span> <span class="token comment">//一共多少kmem_cache结构</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> free_slabs<span class="token punctuation">;</span>  <span class="token comment">//空闲的kmem_cache结构</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> free_objects<span class="token punctuation">;</span><span class="token comment">//空闲的对象</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> free_limit<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> __init <span class="token function">init_list</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span> <span class="token operator">*</span>list<span class="token punctuation">,</span>
                <span class="token keyword">int</span> nodeid<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
    <span class="token comment">//分配新的 kmem_cache_node 结构的空间</span>
    ptr <span class="token operator">=</span> <span class="token function">kmalloc_node</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_NOWAIT<span class="token punctuation">,</span> nodeid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">BUG_ON</span><span class="token punctuation">(</span><span class="token operator">!</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//复制初始时的静态kmem_cache_node结构</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> list<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-&gt;</span>list_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MAKE_ALL_LISTS</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> nodeid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置kmem_cache_node的地址</span>
    cachep<span class="token operator">-&gt;</span>node<span class="token punctuation">[</span>nodeid<span class="token punctuation">]</span> <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们第一次分配对象时，肯定没有对应的内存页面存放对象，那么 SLAB 模块就会调用 <strong>cache_grow_begin 函数</strong>获取内存页面，然后用获取的页面来存放对象，我们一起来看看代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">slab_map_pages</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cache<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>freelist<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//页面结构指向kmem_cache结构</span>
    page<span class="token operator">-&gt;</span>slab_cache <span class="token operator">=</span> cache<span class="token punctuation">;</span>
    <span class="token comment">//指向空闲对象的链表</span>
    page<span class="token operator">-&gt;</span>freelist <span class="token operator">=</span> freelist<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">cache_grow_begin</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span>
                <span class="token class-name">gfp_t</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> nodeid<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>freelist<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> offset<span class="token punctuation">;</span>
    <span class="token class-name">gfp_t</span> local_flags<span class="token punctuation">;</span>
    <span class="token keyword">int</span> page_node<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>

    <span class="token function">WARN_ON_ONCE</span><span class="token punctuation">(</span>cachep<span class="token operator">-&gt;</span>ctor <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> __GFP_ZERO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    local_flags <span class="token operator">=</span> flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>GFP_CONSTRAINT_MASK<span class="token operator">|</span>GFP_RECLAIM_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取页面</span>
    page <span class="token operator">=</span> <span class="token function">kmem_getpages</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> local_flags<span class="token punctuation">,</span> nodeid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取页面所在的内存节点号</span>
    page_node <span class="token operator">=</span> <span class="token function">page_to_nid</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据内存节点获取对应kmem_cache_node结构</span>
    n <span class="token operator">=</span> <span class="token function">get_node</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> page_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分配管理空闲对象的数据结构</span>
    freelist <span class="token operator">=</span> <span class="token function">alloc_slabmgmt</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> page<span class="token punctuation">,</span> offset<span class="token punctuation">,</span>
            local_flags <span class="token operator">&amp;</span> <span class="token operator">~</span>GFP_CONSTRAINT_MASK<span class="token punctuation">,</span> page_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//让页面中相关的字段指向kmem_cache和空闲对象</span>
    <span class="token function">slab_map_pages</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> page<span class="token punctuation">,</span> freelist<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化空闲对象管理数据</span>
    <span class="token function">cache_init_objs</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cache_grow_end</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化结page构的slab_list链表</span>
    <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page<span class="token operator">-&gt;</span>slab_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据内存节点获取对应kmem_cache_node结构.</span>
    n <span class="token operator">=</span> <span class="token function">get_node</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> <span class="token function">page_to_nid</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>list_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//slab计数增加</span>
    n<span class="token operator">-&gt;</span>total_slabs<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token operator">-&gt;</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//把这个page结构加入到kmem_cache_node结构的空闲链表中</span>
        <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>page<span class="token operator">-&gt;</span>slab_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>slabs_free<span class="token punctuation">)</span><span class="token punctuation">;</span>
        n<span class="token operator">-&gt;</span>free_slabs<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>list_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的注释已经很清楚了，cache_grow_begin 函数会为 kmem_cache 结构分配用来存放对象的页面，随后会调用与之对应的 cache_grow_end 函数，把这页面挂载到 kmem_cache_node 结构的链表中，并让页面指向 kmem_cache 结构。</p><p>这样 kmem_cache_node，kmem_cache，page 这三者之间就联系起来了。你再看一下后面的图，就更加清楚了。</p><img src="`+c+'" alt="img" style="zoom:15%;"><p>SLAB全局结构示意图</p><p>上图中 page 可能是一组连续的 pages，但是只会把第一个 page 挂载到 kmem_cache_node 中，同时，在 slab_map_pages 函数中又让 page 指向了 kmem_cache。</p><p>但你要特别留意 kmem_cache_node 中的三个链表，它们分别挂载的 pages，有一部分是空闲对象的 page、还有对象全部都已经分配的 page，以及全部都为空闲对象的 page。这是为了提高分配时查找 kmem_cache 的性能。</p><h2 id="slab-分配对象的过程" tabindex="-1"><a class="header-anchor" href="#slab-分配对象的过程" aria-hidden="true">#</a> SLAB 分配对象的过程</h2><p>有了前面对 SLAB 数据结构的了解，SLAB 分配对象的过程你自己也能推导出来，无非是根据请求分配对象的大小，查找对应的 kmem_cache 结构，接着从这个结构中获取 arry_cache 结构，然后分配对象。</p><p>如果没有空闲对象了，就需要在 kmem_cache 对应的 kmem_cache_node 结构中查找有空闲对象的 kmem_cache。如果还是没找到，最后就要分配内存页面新增 kmem_cache 结构了。</p><img src="'+o+`" alt="img" style="zoom:15%;"><p>SLAB分配对象的过程图解</p><p>下面我们从接口开始了解这些过程。</p><h3 id="slab-分配接口" tabindex="-1"><a class="header-anchor" href="#slab-分配接口" aria-hidden="true">#</a> SLAB 分配接口</h3><p>其实在 Linux 内核中，用的最多的是 kmalloc 函数，经常用于分配小的缓冲区，或者数据结构分配实例空间，这个函数就是 SLAB 分配接口，它是用来分配对象的，这个对象就是一小块内存空间。</p><p>下面一起来看看代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">__do_kmalloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> flags<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> caller<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ret<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>size <span class="token operator">&gt;</span> KMALLOC_MAX_CACHE_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//查找size对应的kmem_cache</span>
    cachep <span class="token operator">=</span> <span class="token function">kmalloc_slab</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">ZERO_OR_NULL_PTR</span><span class="token punctuation">(</span>cachep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> cachep<span class="token punctuation">;</span>
    <span class="token comment">//分配对象</span>
    ret <span class="token operator">=</span> <span class="token function">slab_alloc</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> caller<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">__kmalloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">__do_kmalloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> _RET_IP_<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">__kmalloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的流程很简单，就是在 __do_kmalloc 函数中，查找出分配大小对应的 kmem_cache 结构，然后调用 slab_alloc 函数进行分配。可以说，slab_alloc 函数才是 SLAB 的接口函数，但是它的参数中<strong>必须要有 kmem_cache 结构</strong>。</p><p>具体是如何查找的呢？我们这就来看看。</p><h3 id="如何查找-kmem-cache-结构" tabindex="-1"><a class="header-anchor" href="#如何查找-kmem-cache-结构" aria-hidden="true">#</a> 如何查找 kmem_cache 结构</h3><p>由于 SLAB 的接口函数 slab_alloc，它的参数中必须要有 kmem_cache 结构指针，指定从哪个 kmem_cache 结构分配对象，所以在调用 slab_alloc 函数之前必须给出 kmem_cache 结构。</p><p>我们怎么查找到它呢？这就需要调用 kmalloc_slab 函数了，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">kmalloc_cache_type</span> <span class="token punctuation">{</span>
    KMALLOC_NORMAL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    KMALLOC_RECLAIM<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ZONE_DMA</span></span>
    KMALLOC_DMA<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    NR_KMALLOC_TYPES
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>kmalloc_caches<span class="token punctuation">[</span>NR_KMALLOC_TYPES<span class="token punctuation">]</span><span class="token punctuation">[</span>KMALLOC_SHIFT_HIGH <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> __ro_after_init <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">static</span> u8 size_index<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> __ro_after_init <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token comment">/* 8 */</span>
    <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token comment">/* 16 */</span>
    <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment">/* 24 */</span>
    <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment">/* 32 */</span>
    <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token comment">/* 40 */</span>
    <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token comment">/* 48 */</span>
    <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token comment">/* 56 */</span>
    <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token comment">/* 64 */</span>
    <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">/* 72 */</span>
    <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">/* 80 */</span>
    <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">/* 88 */</span>
    <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">/* 96 */</span>
    <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token comment">/* 104 */</span>
    <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token comment">/* 112 */</span>
    <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token comment">/* 120 */</span>
    <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token comment">/* 128 */</span>
    <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">/* 136 */</span>
    <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">/* 144 */</span>
    <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">/* 152 */</span>
    <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">/* 160 */</span>
    <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">/* 168 */</span>
    <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">/* 176 */</span>
    <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">/* 184 */</span>
    <span class="token number">2</span>   <span class="token comment">/* 192 */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//根据分配标志返回枚举类型，其实是0、1、2其中之一</span>
<span class="token keyword">static</span> __always_inline <span class="token keyword">enum</span> <span class="token class-name">kmalloc_cache_type</span> <span class="token function">kmalloc_type</span><span class="token punctuation">(</span><span class="token class-name">gfp_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_ZONE_DMA</span></span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>__GFP_DMA <span class="token operator">|</span> __GFP_RECLAIMABLE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> KMALLOC_NORMAL<span class="token punctuation">;</span>
    <span class="token keyword">return</span> flags <span class="token operator">&amp;</span> __GFP_DMA <span class="token operator">?</span> KMALLOC_DMA <span class="token operator">:</span> KMALLOC_RECLAIM<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
    <span class="token keyword">return</span> flags <span class="token operator">&amp;</span> __GFP_RECLAIMABLE <span class="token operator">?</span> KMALLOC_RECLAIM <span class="token operator">:</span> KMALLOC_NORMAL<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span><span class="token function">kmalloc_slab</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>
    <span class="token comment">//计算出index</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">192</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>size<span class="token punctuation">)</span>
            <span class="token keyword">return</span> ZERO_SIZE_PTR<span class="token punctuation">;</span>
        index <span class="token operator">=</span> size_index<span class="token punctuation">[</span><span class="token function">size_index_elem</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WARN_ON_ONCE</span><span class="token punctuation">(</span>size <span class="token operator">&gt;</span> KMALLOC_MAX_CACHE_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        index <span class="token operator">=</span> <span class="token function">fls</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> kmalloc_caches<span class="token punctuation">[</span><span class="token function">kmalloc_type</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述代码，不难发现 kmalloc_caches 就是个全局的二维数组，kmalloc_slab 函数只是根据分配大小和分配标志计算出了数组下标，最后取出其中 kmem_cache 结构指针。</p><p>那么 kmalloc_caches 中的 kmem_cache，它又是谁建立的呢？我们还是接着看代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>__init <span class="token function">create_kmalloc_cache</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token class-name">slab_flags_t</span> flags<span class="token punctuation">,</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> useroffset<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> usersize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//从第一个kmem_cache中分配一个对象放kmem_cache</span>
    <span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token function">kmem_cache_zalloc</span><span class="token punctuation">(</span>kmem_cache<span class="token punctuation">,</span> GFP_NOWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Out of memory when creating slab %s\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置s的对齐参数，处理s的freelist就是arr_cache</span>
    <span class="token function">create_boot_cache</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> name<span class="token punctuation">,</span> size<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> useroffset<span class="token punctuation">,</span> usersize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token operator">-&gt;</span>list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>slab_caches<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>refcount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//新建一个kmem_cache</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> __init <span class="token function">new_kmalloc_cache</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">enum</span> <span class="token class-name">kmalloc_cache_type</span> type<span class="token punctuation">,</span> <span class="token class-name">slab_flags_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> KMALLOC_RECLAIM<span class="token punctuation">)</span>
        flags <span class="token operator">|=</span> SLAB_RECLAIM_ACCOUNT<span class="token punctuation">;</span>
        <span class="token comment">//根据kmalloc_info中信息建立一个kmem_cache</span>
    kmalloc_caches<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">create_kmalloc_cache</span><span class="token punctuation">(</span>
                    kmalloc_info<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">,</span>
                    kmalloc_info<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                    kmalloc_info<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//建立所有的kmalloc_caches中的kmem_cache</span>
<span class="token keyword">void</span> __init <span class="token function">create_kmalloc_caches</span><span class="token punctuation">(</span><span class="token class-name">slab_flags_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">enum</span> <span class="token class-name">kmalloc_cache_type</span> type<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>type <span class="token operator">=</span> KMALLOC_NORMAL<span class="token punctuation">;</span> type <span class="token operator">&lt;=</span> KMALLOC_RECLAIM<span class="token punctuation">;</span> type<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> KMALLOC_SHIFT_LOW<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> KMALLOC_SHIFT_HIGH<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>kmalloc_caches<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token comment">//建立一个新的kmem_cache</span>
                <span class="token function">new_kmalloc_cache</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> type<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>KMALLOC_MIN_SIZE <span class="token operator">&lt;=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token operator">!</span>kmalloc_caches<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token function">new_kmalloc_cache</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>KMALLOC_MIN_SIZE <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span>
                    <span class="token operator">!</span>kmalloc_caches<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token function">new_kmalloc_cache</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，__do_kmalloc 函数中根据分配对象大小查找的所有 kmem_cache 结构，我们就建立好了，保存在 kmalloc_caches 数组中。下面我们再去看看对象是如何分配的。</p><h3 id="分配对象" tabindex="-1"><a class="header-anchor" href="#分配对象" aria-hidden="true">#</a> 分配对象</h3><p>下面我们从 slab_alloc 函数开始探索对象的分配过程，slab_alloc 函数的第一个参数就 kmem_cache 结构的指针，表示从该 kmem_cache 结构中分配对象。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">slab_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> flags<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> caller<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> save_flags<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>objp<span class="token punctuation">;</span>
    <span class="token comment">//关中断</span>
    <span class="token function">local_irq_save</span><span class="token punctuation">(</span>save_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//分配对象</span>
    objp <span class="token operator">=</span> <span class="token function">__do_cache_alloc</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//恢复中断</span>
    <span class="token function">local_irq_restore</span><span class="token punctuation">(</span>save_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> objp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口函数总是简单的，真正干活的是 __do_cache_alloc 函数，下面我们就来看看这个函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">____cache_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>objp<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">array_cache</span> <span class="token operator">*</span>ac<span class="token punctuation">;</span>
    <span class="token comment">//获取当前cpu在cachep结构中的array_cache结构的指针</span>
    ac <span class="token operator">=</span> <span class="token function">cpu_cache_get</span><span class="token punctuation">(</span>cachep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//如果ac中的avail不为0,说明当前kmem_cache结构中freelist是有空闲对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>ac<span class="token operator">-&gt;</span>avail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ac<span class="token operator">-&gt;</span>touched <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//空间对象的地址保存在ac-&gt;entry</span>
        objp <span class="token operator">=</span> ac<span class="token operator">-&gt;</span>entry<span class="token punctuation">[</span><span class="token operator">--</span>ac<span class="token operator">-&gt;</span>avail<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    objp <span class="token operator">=</span> <span class="token function">cache_alloc_refill</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token operator">:</span>
    <span class="token keyword">return</span> objp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">__do_cache_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">____cache_alloc</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中真正做事的函数是 <strong><code>____cache_alloc 函数</code></strong>，它首先获取了当前 kmem_cache 结构中指向 array_cache 结构的指针，找到它里面空闲对象的地址（如果你不懂 array_cache 结构，请回到 SLAB 对象那一小节复习），然后在 array_cache 结构中取出一个空闲对象地址返回，这样就分配成功了。</p><p>这个速度是很快的，如果 array_cache 结构中没有空闲对象了，就会调用 cache_alloc_refill 函数。那这个函数又干了什么呢？我们接着往下看。代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">get_first_slab</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span> <span class="token operator">*</span>n<span class="token punctuation">,</span> bool pfmemalloc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token function">assert_spin_locked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>list_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//首先从kmem_cache_node结构中的slabs_partial链表上查看有没有page</span>
    page <span class="token operator">=</span> <span class="token function">list_first_entry_or_null</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>slabs_partial<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">page</span><span class="token punctuation">,</span>slab_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果没有</span>
        n<span class="token operator">-&gt;</span>free_touched <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//从kmem_cache_node结构中的slabs_free链表上查看有没有page</span>
        page <span class="token operator">=</span> <span class="token function">list_first_entry_or_null</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>slabs_free<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">page</span><span class="token punctuation">,</span>slab_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span>
            n<span class="token operator">-&gt;</span>free_slabs<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//空闲slab计数减一</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//返回page</span>
    <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">cache_alloc_refill</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> batchcount<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kmem_cache_node</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">array_cache</span> <span class="token operator">*</span>ac<span class="token punctuation">,</span> <span class="token operator">*</span>shared<span class="token punctuation">;</span>
    <span class="token keyword">int</span> node<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token comment">//获取内存节点</span>
    node <span class="token operator">=</span> <span class="token function">numa_mem_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ac <span class="token operator">=</span> <span class="token function">cpu_cache_get</span><span class="token punctuation">(</span>cachep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    batchcount <span class="token operator">=</span> ac<span class="token operator">-&gt;</span>batchcount<span class="token punctuation">;</span>
    <span class="token comment">//获取cachep所属的kmem_cache_node</span>
    n <span class="token operator">=</span> <span class="token function">get_node</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    shared <span class="token operator">=</span> <span class="token function">READ_ONCE</span><span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>shared<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token operator">-&gt;</span>free_objects <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>shared <span class="token operator">||</span> <span class="token operator">!</span>shared<span class="token operator">-&gt;</span>avail<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> direct_grow<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>batchcount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取kmem_cache_node结构中其它kmem_cache,返回的是page，而page会指向kmem_cache</span>
        page <span class="token operator">=</span> <span class="token function">get_first_slab</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span>
            <span class="token keyword">goto</span> must_grow<span class="token punctuation">;</span>
        batchcount <span class="token operator">=</span> <span class="token function">alloc_block</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> ac<span class="token punctuation">,</span> page<span class="token punctuation">,</span> batchcount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
must_grow<span class="token operator">:</span>
    n<span class="token operator">-&gt;</span>free_objects <span class="token operator">-=</span> ac<span class="token operator">-&gt;</span>avail<span class="token punctuation">;</span>
direct_grow<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span>ac<span class="token operator">-&gt;</span>avail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//分配新的kmem_cache并初始化</span>
        page <span class="token operator">=</span> <span class="token function">cache_grow_begin</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> <span class="token function">gfp_exact_node</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ac <span class="token operator">=</span> <span class="token function">cpu_cache_get</span><span class="token punctuation">(</span>cachep<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ac<span class="token operator">-&gt;</span>avail <span class="token operator">&amp;&amp;</span> page<span class="token punctuation">)</span>
            <span class="token function">alloc_block</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> ac<span class="token punctuation">,</span> page<span class="token punctuation">,</span> batchcount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//让page挂载到kmem_cache_node结构的slabs_list链表上</span>
        <span class="token function">cache_grow_end</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ac<span class="token operator">-&gt;</span>avail<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ac<span class="token operator">-&gt;</span>touched <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//重新分配</span>
    <span class="token keyword">return</span> ac<span class="token operator">-&gt;</span>entry<span class="token punctuation">[</span><span class="token operator">--</span>ac<span class="token operator">-&gt;</span>avail<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 cache_alloc_refill 函数的过程，主要的工作都有哪些呢？我给你梳理一下。</p><p>首先，获取了 cachep 所属的 kmem_cache_node。</p><p>然后调用 get_first_slab，获取 kmem_cache_node 结构还有没有包含空闲对象的 kmem_cache。但是请注意，这里返回的是 page，因为 page 会指向 kmem_cache 结构，page 所代表的物理内存页面，也保存着 kmem_cache 结构中的对象。</p><p>最后，如果 kmem_cache_node 结构没有包含空闲对象的 kmem_cache 了，就必须调用 cache_grow_begin 函数，找伙伴系统分配新的内存页面，而且还要找第一个 kmem_cache 分配新的对象，来存放 kmem_cache 结构的实例变量，并进行必要的初始化。</p><p>这些步骤完成之后，再调用 cache_grow_end 函数，把刚刚分配的 page 挂载到 kmem_cache_node 结构的 slabs_list 链表上。因为 cache_grow_begin 和 cache_grow_end 函数在前面已经分析过了，这里不再赘述。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>今天的内容讲完了，我来帮你梳理一下本课程的重点。</p><p>\\1. 为了分配小于 1 个 page 的小块内存，Linux 实现了 SLAB，用 kmem_cache 结构管理 page 对应内存页面上小块内存对象，然后让该 page 指向 kmem_cache，由 kmem_cache_node 结构管理多个 page。</p><p>\\2. 我们从 Linux 内核中使用的 kmalloc 函数入手，了解了 SLAB 下整个内存对象的分配过程。</p><p>到此为止，我们对 SLAB 的研究就告一段落了，是不是感觉和 Cosmos 内存管理有些相像而又不同呢？甚至我们 Cosmos 内存管理要更为简洁和高效。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>Linux 的 SLAB，使用 kmalloc 函数能分配多大的内存对象呢？</p><p>欢迎你在留言区跟我交流互动，也欢迎你把这节课分享给你的同事、朋友，跟他一起研究 SLAB 相关的内容。</p><p>我是 LMOS，我们下节课见！</p>`,80),u=[i];function k(r,d){return s(),a("div",null,u)}const _=n(l,[["render",k],["__file","H23-Linux的SLAB分配器.html.vue"]]);export{_ as default};
