import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,e,d as t}from"./app-cdabc73c.js";const l="/assets/f9fcf00722c6b785052f1yyd8d27aa8c-e35350f0.png",u={},r=n("h1",{id:"_24-实战项目-下-一个简单的高性能-http-server",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_24-实战项目-下-一个简单的高性能-http-server","aria-hidden":"true"},"#"),s(" 24｜实战项目（下）：一个简单的高性能 HTTP Server")],-1),k=n("p",null,"你好，我是于航。",-1),d=n("p",null,"在 23 讲 中，我对本次实战项目将要构建的程序 FibServ 的功能做了基本介绍，并从理论的角度，带你对它的基本实现方案有了一个初步认识。而这一讲，我们将通过实际编码，来应用这些理论知识。",-1),v={href:"https://github.com/Becavalier/tiny-http-echo-server/tree/geektime",target:"_blank",rel:"noopener noreferrer"},m=t('<p>接下来，我会带你从基本的项目目录创建，到模块功能编写，再到代码编译和程序运行，一步步地完成整个项目的开发过程。</p><h2 id="项目基本结构" tabindex="-1"><a class="header-anchor" href="#项目基本结构" aria-hidden="true">#</a> <strong>项目基本结构</strong></h2><p>首先，我们来看应该如何组织整个项目的目录结构。根据预估的项目体量，我使用了如下图所示的目录结构：</p><img src="'+l+`" alt="img" style="zoom:33%;"><p>这里，整个项目包含有三个目录：build、libs 以及 src。</p><ol><li>其中，<mark>build 目录</mark>用于存放程序在 CMake 下的<code>临时编译结果</code>。如果你对这个目录还不太熟悉，可以参考我在 22 讲 中为你介绍的例子。</li><li><mark>libs 目录</mark>中主要存放可以模块化的独立功能实现，这些功能会以<code>头文件</code>的形式来提供外部可用接口，以供不同的应用程序使用。</li><li>而最后的 <mark>src 目录</mark>则存放有与应用程序 FibServ 实现相关的<code>源代码</code>。</li></ol><p>在此基础之上，你会发现我们分别在 libs 目录与项目根目录下，同时创建了用于<code>控制 CMake 编译流程</code>的 CMakeLists.txt 文件。</p><ul><li>其中，前者主要用于控制 <mark>libs 目录</mark>内 C 源代码的编译流程；</li><li>而后者则用于控制<mark>项目根目录</mark>应用程序 FibServ 的编译流程。</li><li>我在这一讲后面的“编译与运行”一节中，还会再具体介绍这两个文件中的配置项。</li></ul><h2 id="处理用户输入参数" tabindex="-1"><a class="header-anchor" href="#处理用户输入参数" aria-hidden="true">#</a> <strong>处理用户输入参数</strong></h2><p>FibServ 在启动时可以接收一个由用户指定的，名为 “thread_count” 的参数。这个参数被用于控制 FibServ 应启用多少线程来处理收到的 HTTP 请求。</p><p>这里，我专门封装了一个<code>用于描述服务器整体配置状态的结构类型 serverSettings</code>，其中仅有的 threadCount 字段便对应于该参数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// libs/structs.h#L9-L11</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> threadCount<span class="token punctuation">;</span>
<span class="token punctuation">}</span> serverSettings<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而通过对 main 函数的两个参数 argc 与 argv 进行解析，我们能够得到用户在运行程序时传入的所有参数。在名为 setupServerSettings 的函数中，我们通过上述这种方式，<code>完成了对用户传入参数的解析与保存过程</code>，解析得到的所有合法选项均被存放在一个 serverSettings 类型的对象中。该函数的实现代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// libs/helpers.h#L67-L86</span>
<span class="token keyword">void</span> <span class="token function">setupServerSettings</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">,</span> serverSettings<span class="token operator">*</span> ss<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>argc<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// process key.</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> keyHead <span class="token operator">=</span> argv<span class="token punctuation">[</span>argc<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> keyPos <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>keyHead<span class="token punctuation">,</span> <span class="token char">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token class-name">size_t</span> keyLen <span class="token operator">=</span> keyPos <span class="token operator">-</span> keyHead <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> key<span class="token punctuation">[</span>keyLen<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">wrapStrFromPTR</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> keyLen<span class="token punctuation">,</span> keyHead<span class="token punctuation">,</span> keyPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// process value.</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> valHead <span class="token operator">=</span> keyHead <span class="token operator">+</span> keyLen<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> valPos <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>valHead<span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token class-name">size_t</span> valLen <span class="token operator">=</span> valPos <span class="token operator">-</span> valHead <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> val<span class="token punctuation">[</span>valLen<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> valHead <span class="token operator">&lt;=</span> valPos<span class="token punctuation">;</span> valHead<span class="token operator">++</span><span class="token punctuation">)</span>
      val<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>valHead<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;thread_count&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ss<span class="token operator">-&gt;</span>threadCount <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，通过判断 argc 的值是否大于 1（略过 argv 的第一个“程序文件名”参数），我们便能够对经由 argv 传递过来的输入参数进行遍历。每一次的遍历过程都分为两个步骤，即分别获取形如 “key=value” 的设置项的 key 与 value 两部分内容。</p><p>这里，我们使用 C 标准库中的 <code>strchr 函数</code>，来得到每个选项中 “=” 与字符串结尾空字符 “\\0” 的位置，并以此将整个选项分为两段。在此基础之上，通过分别收集这两个区间（首字符至 “=”，以及 “=” 至结尾空字符）内的字符，我们能够将一个选项的“键”与“值”进行拆分。最后，使用 strcmp 函数来比对所得到的键是否有效，若有效，则将相应的值存储到指定的 serverSettings 对象中。</p><p>至此，FibServ 便完成了用户配置项的初始化工作。接下来，我们继续为它实现 TCP Server 的核心功能。</p><h2 id="实现-tcp-server" tabindex="-1"><a class="header-anchor" href="#实现-tcp-server" aria-hidden="true">#</a> <strong>实现 TCP Server</strong></h2><p>根据在上一讲中得到的结论，我们将使用来自 POSIX.1 标准的五个接口，socket、bind、listen、accept 与 close，来实现基本的 TCP 请求监听与连接创建等功能。</p><h2 id="监听请求" tabindex="-1"><a class="header-anchor" href="#监听请求" aria-hidden="true">#</a> <strong>监听请求</strong></h2><p>为了将 FibServ 接受和处理 HTTP 请求的代码抽离出来，以方便后续的多线程改造，这里我将 TCP Server 的实现过程分为两个部分来介绍。</p><p>首先来看如何让程序进入“监听”状态，并持续等待 TCP 连接请求的到来。这部分代码将由 main 函数所在线程来执行，对应的代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// src/main.c#L70-95</span>
<span class="token keyword">int</span> serverFd<span class="token punctuation">;</span> 
sockaddr_in address<span class="token punctuation">;</span>
<span class="token keyword">int</span> addrLen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// establish a socket.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>serverFd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> addrLen<span class="token punctuation">)</span><span class="token punctuation">;</span> 
address<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>
address<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span>  <span class="token comment">// -&gt; 0.0.0.0.</span>
address<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token comment">// assigns specified address to the socket.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>serverFd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token comment">// mark the socket as a passive socket.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>serverFd<span class="token punctuation">,</span> MAX_LISTEN_CONN<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察上述代码的第 7、15 与 18 行，你会发现，我们按顺序分别调用了接口 socket、bind 与 listen。其中，socket 接口共接收三个参数：</p><ul><li>AF_INET 宏常量表明使用 IPV4 因特网域；</li><li>SOCK_STREAM 宏常量表明使用有序、可靠、双向，且面向连接的字节流；</li><li>最后的参数 0 表明，让接口根据前两个参数自动选择使用的协议。当然，在这样的配置组合下，将默认使用 TCP 协议。</li></ul><p>接下来，借助 bind 接口，我们可以为前一步创建的 socket 对象绑定一个地址。在 IPV4 域下，对应的地址用 <code>sockaddr_in 类型</code>的结构来表示。在代码的第 10~12 行，我们对该类型的一个对象 address 进行了初始化。其中，sin_addr 结构内的 <code>s_addr 字段</code>用于配置相应的地址信息。这里，<code>INADDR_ANY 宏常量</code>表示将 socket 绑定到地址 “0.0.0.0”。<strong>通过这种方式，程序可以监听其运行所在的机器上发送到所有网卡（网络接口）的网络请求。</strong></p><p>另外需要注意的是，我们在为 address 对象设置用于表示网络端口的 <code>sin_port 字段</code>时，使用了名为 htons 的方法，来将一个 short 类型的端口值转换为<strong>网络协议所要求字节序（<code>通常为大端序</code>）下的表示形式</strong>。而之所以这样做，<code>是为了让异构计算机在交换协议信息的过程中，不会被不同平台的不同字节序混淆。</code></p><p>紧接着，通过调用 listen 接口，程序开始监听即将到来的 TCP 连接请求。这里，通过它的第二个参数，我们指定了暂存队列最多能够存放的待连接请求个数为 <code>MAX_LISTEN_CONN</code> 个。</p><h2 id="管理连接" tabindex="-1"><a class="header-anchor" href="#管理连接" aria-hidden="true">#</a> <strong>管理连接</strong></h2><p>到这里，程序便可以通过 accept 接口来不断地接受连接请求。此时，配合使用 read 和 write 这两个 IO 接口，我们可以获取客户端发来的数据，并在数据处理完毕后，再将特定内容返回给客户端。最后，当连接不再使用时，调用 close 接口即可将它关闭。关于这部分实现，你可以参考文件 “src/main.c” 中第 36~39 行，以及第 60 行的代码。</p><h2 id="处理-http-请求和响应" tabindex="-1"><a class="header-anchor" href="#处理-http-请求和响应" aria-hidden="true">#</a> <strong>处理 HTTP 请求和响应</strong></h2><p>当 TCP 连接成功建立后，我们便可在此基础之上进行与 HTTP 协议相关的操作，整个流程也十分简单，可以分为三个步骤：</p><p>1.通过解析收到的 HTTP 请求报文，我们可以获取由客户端发送过来的参数值 num；</p><p>2.调用斐波那契数列计算函数，相应的结果项可以被计算出来；</p><p>3.通过构造一个合法的 HTTP 响应报文，我们可以将这个计算结果返回给客户端。</p><p>下面，我们来依次看看这几个步骤的具体实现。</p><h2 id="解析请求" tabindex="-1"><a class="header-anchor" href="#解析请求" aria-hidden="true">#</a> <strong>解析请求</strong></h2><p>先来看第一步，解析请求。为了简化实现，这里我们将 HTTP 请求报文的解析过程分为了简单、直接的两个步骤，<strong>即<code>提取路径（URI）</code>和<code>解析查询参数值</code></strong>。</p><p>当然，现实中的 HTTP 服务器应用通常会首先对报文的格式进行完整性校验，然后再进行类似的后续处理。与这部分逻辑相关的实现被封装在了名为 retrieveGETQueryIntValByKey 的函数中，它的实现代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// libs/helpers.c#L37-L65</span>
<span class="token keyword">int</span> <span class="token function">retrieveGETQueryIntValByKey</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> req<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// extract uri;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> uriHead <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> uriTail <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>uriHead<span class="token punctuation">,</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> uriLen <span class="token operator">=</span> uriTail <span class="token operator">-</span> uriHead <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> strUri<span class="token punctuation">[</span>uriLen<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">wrapStrFromPTR</span><span class="token punctuation">(</span>strUri<span class="token punctuation">,</span> uriLen<span class="token punctuation">,</span> uriHead<span class="token punctuation">,</span> uriTail<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// parse uri;</span>
  UriUriA uri<span class="token punctuation">;</span>
  UriQueryListA<span class="token operator">*</span> queryList<span class="token punctuation">;</span>
  <span class="token keyword">int</span> itemCount<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> errorPos<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">uriParseSingleUriA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>uri<span class="token punctuation">,</span> strUri<span class="token punctuation">,</span> <span class="token operator">&amp;</span>errorPos<span class="token punctuation">)</span> <span class="token operator">==</span> URI_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">uriDissectQueryMallocA</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queryList<span class="token punctuation">,</span> <span class="token operator">&amp;</span>itemCount<span class="token punctuation">,</span> uri<span class="token punctuation">.</span>query<span class="token punctuation">.</span>first<span class="token punctuation">,</span> uri<span class="token punctuation">.</span>query<span class="token punctuation">.</span>afterLast<span class="token punctuation">)</span> <span class="token operator">==</span> URI_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>itemCount<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>queryList<span class="token operator">-&gt;</span>key<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          result <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>queryList<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        queryList <span class="token operator">=</span> queryList<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">uriFreeQueryListA</span><span class="token punctuation">(</span>queryList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我在上一讲中曾为你介绍过 HTTP 请求报文的基本格式。其中，路径信息位于报文的“起始行”部分，而起始行中的每个元素则均以空格进行分割。因此，这里我们的第一步便是要<strong>获取当整个报文从头向后逐字符遍历时，遇到的前两个空格之间的那段文本</strong>。从代码中可以看到，这里我们再次使用了名为 <code>strchr 的标准库函数</code>来达到这个目的。</p><p>接下来，我们就会遇到“如何从路径文本中解析出给定查询参数的值？”这个棘手的问题。由于路径的形式可能有多种变化，比如<code>未带有给定参数</code>（/?foo=1）、<code>带有除给定参数外的其他参数</code>（/?foo=1&amp;num=10）、<code>带有子路径的参数</code>（/child/?num=10），<code>等等</code>。</p>`,42),b=n("p",null,"因此，为了完善地处理这类情况，这里我们选用了一个开源的第三方 URI 解析库，uriparser。",-1),h={href:"https://github.com/uriparser/uriparser",target:"_blank",rel:"noopener noreferrer"},_=t(`<h2 id="计算斐波那契数列" tabindex="-1"><a class="header-anchor" href="#计算斐波那契数列" aria-hidden="true">#</a> <strong>计算斐波那契数列</strong></h2><p>此时，我们已经得到了由客户端通过 HTTP 请求传送过来的参数 num。而下一步要完成的，便是 FibServ 的核心功能，即计算斐波那契数列第 num 项的值。与此相关的代码实现如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// libs/helpers.c#L8-L20</span>
<span class="token keyword">int</span> <span class="token function">__calcFibTCO</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">__calcFibTCO</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">__calcFibRecursion</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">__calcFibRecursion</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">__calcFibRecursion</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">calcFibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// return __calcFibTCO(n, 0, 1);  // TCO version. </span>
  <span class="token keyword">return</span> <span class="token function">__calcFibRecursion</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// recursion version.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我为你提供了两种不同的函数实现。其中，函数 <code>__calcFibRecursion</code> 为正常递归版本；而函数 <code>__calcFibTCO</code> 为对应的尾递归版本。由于这两个版本函数需要的参数个数不同，因此为了统一对外的调用接口，我们为外部代码又提供了另一个稳定接口 calcFibonacci，而该接口在内部则可根据需要动态调用上述的两种函数实现。</p><h2 id="返回响应" tabindex="-1"><a class="header-anchor" href="#返回响应" aria-hidden="true">#</a> <strong>返回响应</strong></h2><p>当计算过程结束后，我们便可以构造 HTTP 响应报文，并将结果返回给客户端。**表示操作成功的响应报文应使用内容为 “HTTP/1.1 200 OK” 的响应头。**在本例中，我们没有返回任何首部字段，因此，响应头与主体之间可以直接使用以 CRLF 结尾的一行空行进行分割。关于这部分实现，你可以参考文件 “src/main.c” 中第 55~56 行的代码。</p><h2 id="整合多线程" tabindex="-1"><a class="header-anchor" href="#整合多线程" aria-hidden="true">#</a> <strong>整合多线程</strong></h2><p>经过上面几个步骤，我们已经可以让 FibServ 正常地接收与处理 HTTP 请求，并返回包含有正确结果的 HTTP 响应。但为了进一步提升 FibServ 的请求处理效率，我们将使用多线程技术来对它进行优化。</p><h2 id="分离处理线程" tabindex="-1"><a class="header-anchor" href="#分离处理线程" aria-hidden="true">#</a> <strong>分离处理线程</strong></h2><p>首先，我们把请求处理相关的逻辑全部提取并封装在了名为 acceptConn 的函数中。这样，每一个线程便能够完全独立地来处理一个连接。该函数的完整实现代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>noreturn <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">acceptConn</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  acceptParams<span class="token operator">*</span> ap <span class="token operator">=</span> <span class="token punctuation">(</span>acceptParams<span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>
  <span class="token keyword">int</span> acceptedSocket<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">pthread_cleanup_push</span><span class="token punctuation">(</span>renewThread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>acceptedSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// extracts a request from the queue.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>acceptedSocket <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>ap<span class="token operator">-&gt;</span>serverFd<span class="token punctuation">,</span> ap<span class="token operator">-&gt;</span>addr<span class="token punctuation">,</span> ap<span class="token operator">-&gt;</span>addrLen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;In accept&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// deal with HTTP request.</span>
    <span class="token keyword">char</span> reqBuf<span class="token punctuation">[</span>HTTP_REQ_BUF<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">bzero</span><span class="token punctuation">(</span>reqBuf<span class="token punctuation">,</span> HTTP_REQ_BUF<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">const</span> <span class="token class-name">size_t</span> receivedBytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>acceptedSocket<span class="token punctuation">,</span> reqBuf<span class="token punctuation">,</span> HTTP_REQ_BUF<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>receivedBytes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">char</span> resBuf<span class="token punctuation">[</span>HTTP_RES_BUF<span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token comment">// retrieve number from query.</span>
      <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">retrieveGETQueryIntValByKey</span><span class="token punctuation">(</span>reqBuf<span class="token punctuation">,</span> <span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">int</span> fibResult <span class="token operator">=</span> <span class="token function">calcFibonacci</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// follow the format of the http response.</span>
      <span class="token function">sprintf</span><span class="token punctuation">(</span>resBuf<span class="token punctuation">,</span> <span class="token string">&quot;HTTP/1.1 200 OK\\r\\n\\r\\n%d&quot;</span><span class="token punctuation">,</span> fibResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">write</span><span class="token punctuation">(</span>acceptedSocket<span class="token punctuation">,</span> resBuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>resBuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">close</span><span class="token punctuation">(</span>acceptedSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_cleanup_pop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了能够在线程内部获取与 socket 相关的文件描述符、地址，以及地址长度信息，以便于后续 accept 等接口的调用，这里我将这三个参数封装在了名为 acceptParams 的结构中。该结构的一个对象将在线程创建时以指针的形式传递进来，供所有处理线程使用。</p><p>在上述代码的第 5 行，<code>通过一个死循环结构</code>，线程便可持续不断地处理收到的连接请求。接下来，<code>通过 accept 接口</code>，我们可以从暂存队列中接受一个连接请求。代码的第 16 行，<code>借助 read 函数</code>，程序获取到了由客户端发送来的数据。这些数据将随着第 22 与 25 行的处理，最终变为我们需要的计算结果。最后，在代码的第 27~28 行，我们将该结果整合在一个 HTTP 响应报文中，并返回给客户端。</p><h2 id="优雅地处理异常" tabindex="-1"><a class="header-anchor" href="#优雅地处理异常" aria-hidden="true">#</a> <strong>优雅地处理异常</strong></h2>`,14),f=n("code",null,"为线程添加退出时会自动执行的回调函数",-1),g={href:"https://man7.org/linux/man-pages/man3/pthread_cleanup_push.3.html",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>但也正是因为需要对线程的状态进行更细致的管理，在本次实战项目中，我们并没有使用 <code>C 标准中的线程库 threads.h</code>，而是选用了 POSIX 标准下的 <code>pthread 接口</code>。但对于大多数的线程控制接口来说，两者只是在接口名称和使用方式上稍有差异，而背后的运行原理是完全一致的。</p><p>如下面的代码所示，在这个回调函数中，我们首先关闭了退出线程当前正在使用的 TCP 连接。接着，<code>在互斥锁的保护下</code>，我们更新了用于记录活动线程数量的全局变量 threadCounter，并通过 pthread_cond_signal 来通知 main 函数所在线程，重新创建处理线程（如果你对这里条件变量相关接口的使用方式还不太熟悉，可以重新回顾 14 讲 的相关内容）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">renewThread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
  <span class="token keyword">int</span><span class="token operator">*</span> acceptedSocket <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span><span class="token operator">*</span>acceptedSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  threadCounter<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// notify main thread.</span>
  <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，一切准备就绪。最后，让我们回到 main 函数内部，将“命运的齿轮”转动起来。</p><h2 id="创建线程" tabindex="-1"><a class="header-anchor" href="#创建线程" aria-hidden="true">#</a> <strong>创建线程</strong></h2><p>如下面的代码所示，位于 main 函数内的死循环结构主要用于不断地创建新的处理线程。可以看到，在代码的第 11~12 行，我们使用 <code>pthread_create 接口</code>创建新的线程，并同时递增了工作线程计数器，即全局变量 threadCounter 的值。而直到该值大于等于程序配置状态对象 serverSettings 中 threadCount 的值时，通过调用 <code>pthread_cond_wait 接口</code>，main 线程进入到了阻塞状态。这个状态将会一直维持，直至有工作线程发生异常退出。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// src/main.c#L97-L109</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>threadCounter <span class="token operator">&gt;=</span> ss<span class="token punctuation">.</span>threadCount<span class="token punctuation">)</span>
    <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// create new thread to handle the request.</span>
  <span class="token class-name">pthread_t</span> threadId<span class="token punctuation">;</span>
  acceptParams ap <span class="token operator">=</span> <span class="token punctuation">{</span> serverFd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">socklen_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>addrLen <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threadId<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> acceptConn<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atomic_fetch_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threadCounter<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[Info] Thread Created: No.%d\\n&quot;</span><span class="token punctuation">,</span> threadCounter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，FibServ 在 C 代码层面的基本实现就结束了。接下来，我们将编写用于该项目的 CMake 配置文件，并尝试使用 cmake 命令对它进行编译。</p><h2 id="编译与运行" tabindex="-1"><a class="header-anchor" href="#编译与运行" aria-hidden="true">#</a> <strong>编译与运行</strong></h2><p>我曾在这一讲的第一个小节“项目基本结构”中提到，在本项目中，我们将使用两个 CMakeLists.txt 文件，来分别控制 <mark>libs 目录内的源代码</mark>，以及 FibServ 应用程序的编译过程。通过这种方式，CMake 会首先将前者编译为<mark>独立的 “.a” 静态库文件</mark>，然后再将该文件与 src 下的源代码一起编译，并生成最终的<mark>可执行文件</mark>。</p><p>libs 目录下的 CMakeLists.txt 文件内包含有以下内容：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code># libs/CMakeLists.txt
aux_source_directory(. DIR_LIB_SRCS)
add_library(core STATIC \${DIR_LIB_SRCS})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，指令 aux_source_directory 用于收集当前目录下所有源文件的名称，并将这些名称存储到变量 DIR_LIB_SRCS 中。随后，通过 add_library 命令，从前一步收集而来的源文件将被一同编译，并生成名为 “core” 的静态库。</p><p>返回项目根目录，我们再来看用于控制应用程序 FibServ 编译的 CMakeLists.txt 文件中的内容，具体如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">3.21</span><span class="token punctuation">)</span>
<span class="token function">project</span><span class="token punctuation">(</span>mini<span class="token operator">-</span>http<span class="token operator">-</span>server<span class="token punctuation">)</span>

<span class="token function">set</span><span class="token punctuation">(</span>TARGET_FILE <span class="token string">&quot;http-echo-server&quot;</span><span class="token punctuation">)</span>
<span class="token function">set</span><span class="token punctuation">(</span>CMAKE_BUILD_TYPE Release<span class="token punctuation">)</span>
<span class="token function">set</span><span class="token punctuation">(</span>CMAKE_C_STANDARD <span class="token number">17</span><span class="token punctuation">)</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">a</span> <span class="token expression">simple way to check non<span class="token operator">-</span>standard C header <span class="token function">files</span> <span class="token punctuation">(</span>includes the atomic<span class="token operator">-</span>related one<span class="token punctuation">)</span><span class="token punctuation">.</span></span></span>
<span class="token function">include</span><span class="token punctuation">(</span>CheckIncludeFiles<span class="token punctuation">)</span>
<span class="token function">check_include_files</span><span class="token punctuation">(</span><span class="token string">&quot;pthread.h;stdatomic.h;sys/socket.h;netinet/in.h;unistd.h&quot;</span> EDEPS<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>EPTHREAD EQUAL <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">message</span><span class="token punctuation">(</span>FATAL_ERROR <span class="token string">&quot;Necessary header files are not found!&quot;</span><span class="token punctuation">)</span>
<span class="token function">endif</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">for</span> <span class="token expression">headers in </span><span class="token string">&quot;/libs&quot;</span> <span class="token expression">and other external installed packages<span class="token punctuation">.</span></span></span>
<span class="token function">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">.</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>include<span class="token punctuation">)</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">load</span> <span class="token expression">source files and sub<span class="token operator">-</span>directories<span class="token punctuation">.</span></span></span>
<span class="token function">aux_source_directory</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>src DIR_SRCS<span class="token punctuation">)</span>
<span class="token function">add_subdirectory</span><span class="token punctuation">(</span>libs<span class="token operator">/</span><span class="token punctuation">)</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">load</span> <span class="token expression">packages<span class="token punctuation">.</span></span></span>
<span class="token function">find_package</span><span class="token punctuation">(</span>uriparser <span class="token number">0.9</span><span class="token number">.6</span> CONFIG REQUIRED <span class="token keyword">char</span><span class="token punctuation">)</span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">for</span> <span class="token expression">executable<span class="token punctuation">.</span></span></span>
<span class="token function">add_executable</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>TARGET_FILE<span class="token punctuation">}</span> $<span class="token punctuation">{</span>DIR_SRCS<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">target_link_libraries</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>TARGET_FILE<span class="token punctuation">}</span> PUBLIC core m pthread uriparser<span class="token operator">::</span>uriparser<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，你需要关注的是第 9~13 行的配置代码。这里，通过名为 <code>check_include_files 的宏函数</code>，我们能够让 CMake 在编译代码前，检测应用所需的指定头文件是否可以在当前环境下使用。若否，则直接终止项目的编译配置过程。</p><p>在接下来的第 16 行代码中，我们指定了程序编译时的头文件查找目录。通过第 19~20 行代码，FibServ 对应实现的源文件，以及所需要的内部依赖项（core 静态库）被引用进来。在第 23 行，通过 <code>find_package 指令</code>，CMake 可以帮助我们查找程序需要使用的外部依赖包（这里即 uriparser）。</p>`,17),w={href:"https://github.com/uriparser/uriparser",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"add_executable 与 target_link_libraries 两个指令",-1),x=t(`<p>当然，同我们在上一讲中介绍的方法类似，使用下面这行命令，我们可以一次性完成项目的编译前配置、代码编译与程序运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build <span class="token operator">&amp;&amp;</span> cmake <span class="token punctuation">..</span> <span class="token operator">&amp;&amp;</span> cmake <span class="token parameter variable">--build</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> ./fibserv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h2><p>好了，讲到这里，今天的内容也就基本结束了。最后我来给你总结一下。</p><p>在这一讲中，我带你从基本的项目目录创建，到模块功能编写，再到代码编译和程序运行，一步步地完成了整个 FibServ 项目的开发过程，并为你详细介绍了这个项目的各个重要组成部分在代码层面的具体实现方式。</p><p>在“C 工程实战篇”的最后，我用两讲的篇幅带你实现了一个完整的 C 语言项目。希望通过这些内容，你能够对 C 语言在真实项目中的应用方式有更深刻的理解。同时，也希望你能以此为起点，在实践中持续运用这个模块中介绍到的各种 C 标准库功能与工程化实践技巧，进一步加深对整个 C 语言，乃至相关技术、工具和框架的理解。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> <strong>思考题</strong></h2><p>你知道如何通过复用 TCP 连接来进一步优化 FibServ 的性能吗？欢迎在评论区告诉我你的实现方案，也欢迎你直接提交 PR！</p><p>今天的课程到这里就结束了，希望可以帮助到你，也希望你在下方的留言区和我一起讨论。同时，欢迎把这节课分享给你的朋友或同事，我们一起交流。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2>`,10),C={href:"https://github.com/uriparser/uriparser/issues/137",target:"_blank",rel:"noopener noreferrer"},S=t(`<hr><p>老师你好，我没写过C项目，包管理感觉还是go的项目爽😁；运行报错如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># cmake ..  
...
Could not find a package configuration file provided by &quot;uriparser&quot;
... 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了跑老师的项目，本地安装了libgtest-dev和源码编译安装 uriparser，项目才跑起来。不知有没有简单的办法，类似go mod tidy 或者go get xxx 获取go项目的依赖呢？<br> 作者回复: 据我所知 C 应该是没有被广泛使用的包管理器的，这方面确实不如 Rust、Go 等语言先进。</p><hr><p>第一次跑C项目 还要自己装一下第三方库,学习的路上又踏出了一步 -DURIPARSER_BUILD_DOCS=OFF</p>`,6);function L(P,F){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,k,d,n("p",null,[s("为了便于你理解这一讲的内容，我已经将本项目的完整代码实现放到了 GitHub 上，你可以点击"),n("a",v,[s("这个链接"),e(a)]),s("，先大致浏览一下每个源文件的内容。而在后续讲解到相关代码时，我也会在整段代码的第一行，通过注释的方式将这些代码的所在源文件标注出来。比如注释 “libs/structs.h#L9-L11”，便表示当前所示的代码段对应于项目 libs 目录下，structs.h 文件内的第 9 到 11 行。其他注释的含义你可以此类推。")]),m,n("blockquote",null,[b,n("p",null,[s("uriparser 的使用方式十分简单，通过配合使用 uriParseSingleUriA 与 uriDissectQueryMallocA 这两个接口，我们可以将所传入 URI 的查询参数与值提取成一个单链表。而通过对它进行遍历（itemCount 表示参数个数），我们便能够找到目标参数的值。你可以点击"),n("a",h,[s("这个链接"),e(a)]),s("，来了解关于 uriparser 的更多信息。")])]),_,n("p",null,[s("除此之外，你可能会发现，我们在代码的第 6 与 31 行，还调用了名为 pthread_cleanup_push 与 pthread_cleanup_pop 的两个函数。这两个函数的主要目的在于"),f,s("。这样，我们便能够在线程由于 accept 调用失败而退出时，及时地通知主线程重新创建新的处理线程，以保证线程池中线程的数量维持在一个稳定状态。关于这两个函数的更详细用法，你可以点击"),n("a",g,[s("这个链接"),e(a)]),s("来了解。")]),y,n("p",null,[s("需要注意的是，uriparser 在可以被 CMake 正常使用之前，它需要被正确地编译和安装，你可以点击"),n("a",w,[s("这个链接"),e(a)]),s("来查看更详细的说明。最后，通过 "),T,s("，我们便可完成 FibServ 二进制文件的编译和链接过程。")]),x,n("blockquote",null,[n("p",null,[s("花了两个小时 终于将示例跑通 后面的同学doxygen问题 可以参考老师在uriparser的issue "),n("a",C,[s("https://github.com/uriparser/uriparser/issues/137"),e(a)])]),S])])}const q=p(u,[["render",L],["__file","D24-HTTPServer(下).html.vue"]]);export{q as default};
