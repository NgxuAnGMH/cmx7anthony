import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as n,c,a as e,b as o,e as a,d}from"./app-cdabc73c.js";const i="/assets/fedceecb22936111a74227f7b3dc273e-86d70d9b.jpg",p="/assets/325yy6b15697abae97c145f3135af005-0ec8cbab.jpg",m="/assets/29b1fcdeeaecffb0b86499066c3d9b6b-7a7ba122.jpg",C="/assets/6cb32d65dddb4742ea1229c3d3a28a6c-2761a376.jpg",R="/assets/92fa1a8227f77b74898ccab17386f1a2-fd9a756d.jpg",I="/assets/v2-8e9b9e9bdfad7a57ce87fcf07ea69497_1440w-d884564b.webp",S={},g=d(`<h1 id="_02-risc特性与发展-risc-v凭什么成为-半导体行业的linux" tabindex="-1"><a class="header-anchor" href="#_02-risc特性与发展-risc-v凭什么成为-半导体行业的linux" aria-hidden="true">#</a> 02｜RISC特性与发展：RISC-V凭什么成为“半导体行业的Linux”？</h1><p>你好，我是 LMOS。</p><p>上节课，我带你见证了两种计算机指令集的设计结构——CISC 与 RISC。而今天我们的“主角”就是 RISC 中的一个代表性特例，它就是 RISC-V。</p><p>作为未来芯片指令集的主流，RISC-V 是今后芯片设计的最佳方案，甚至可以说它就是硬件行业里的 Linux。</p><p>为什么这么说呢？这节课，我会从 RISC-V 发展历史、原理与技术特性几个方面入手，带你弄明白为什么 RISC-V 在半导体行业中发展得如此迅猛。</p><h2 id="risc-v-从何而来" tabindex="-1"><a class="header-anchor" href="#risc-v-从何而来" aria-hidden="true">#</a> <strong>RISC-V 从何而来</strong></h2><p>让我们“穿越时空”，把时间线拉回到 2010 年。在加州伯克利分校的校园中，<em>Krste Asanovic 教授正为了学生们学习计算机架构而发愁</em>。由于现存芯片指令集冗余且专利许可费用昂贵，还有很多 IP 法律问题，没有一款合适的 CPU 用于学习。</p><p>于是他想要带领一个研究团队，<em>来设计一款用于学生学习的 CPU</em>。研究团队在选择架构的时候，对比了传统已经存在的 ARM、MIPS、SPARC 以及 x86 架构等，<em>发现这些架构指令集要么极其复杂，要么极其昂贵</em>。所以，他们的研究团队最终决定设计一套全新的指令集。</p><p><em>这个研究团队最开始只有 4 个人，却在三个月之内完成了指令集原型开发，其能力可见一斑</em>。后来，这个项目被计算机体系结构方面的泰斗 David Patterson 发现，并且得到了他的大力支持。</p><p>早在 1981 年，伯克利分校已经设计出了第一代 RISC 指令集，之后又陆续设计了四代 RISC 指令集的架构。<em>有了这些设计经验</em>，在设计 RISC-V 指令集架构时，研究团队就变得驾轻就熟。</p><p>用 RISC-V 来命名该指令集架构，有两层意思：RISC-V 中的“V”，一方面代表第 5 代 RISC；另一方面，“V”取“ Variation”之意，代表变化。</p><p>虽然 RISC-V 在 2010 年才开始研发，但在第二年（2011 年）就进行了首次流片，<em>流片就是按照芯片设计生产出可以工作的芯片成品</em>。<strong>从这以后，基于 RISC-V 的 <code>CPU 设计</code>，或者<code>在 SOC 中集成</code> RISC-V 架构，各种<code>软件工具链</code>的开发和各种基于 RISC-V 架构的<code>操作系统移植</code>，在不断涌现</strong>。这给 CPU 整个行业带来了不小轰动，当然，这也离不开泰斗 David Patterson 的号召作用。</p><p>一个产品的成功，技术当然是非常重要的原因，但也需要非常给力的运营。<em>在 2015 年</em>，由最初的 25 个成员一起成立了非盈利性组织 RISC-V 基金会（RISC-V Foundation）。</p><p>之后，有多达 300 个单位加入 RISC-V 基金会，<strong>其中包括阿里、谷歌、华为、英伟达、高通、麻省理工学院、普林斯顿大学、印度理工学院、中科院计算所、联发科等</strong>。这些学术机构、芯片开发公司、设计服务与系统厂商的加入，为 RISC-V 的发展建立了良好的生态环境。</p><h2 id="risc-v-是什么" tabindex="-1"><a class="header-anchor" href="#risc-v-是什么" aria-hidden="true">#</a> <strong>RISC-V 是什么</strong></h2><p>通过上节课，我们知道了 RISC 就是指<code>精简指令集</code>计算机体系结构。而前面也说了，RISC-V 是伯克利分校设计出的第五代 RISC 指令集架构。但既然迅速走红的是 RISC-V，相比其他的 RISC，它必然有过人之处，这样才能立足于市场，不然很可能只沦为学生们的学习工具。</p><p>如果只是对 RISC-V 下一个定义，会相当简单：<strong>RISC-V 是一套开放许可证书、免费的、由基金会维护的、<code>一个整数运算指令集</code>外加<code>多个扩展指令集</code>的 <em>CPU 架构规范</em>。</strong></p><p>任何硬件开发商或者相关组织都可以免费使用这套规范，构建 CPU 芯片产品。如果我们的目的只是想对 RISC-V 有个概念了解，前面这些信息就足够了。不过想知道 RISC-V 为什么流行这个秘密，显然我们还需要更详细的信息，才能深入了解。</p><h2 id="指令集命名方式" tabindex="-1"><a class="header-anchor" href="#指令集命名方式" aria-hidden="true">#</a> <strong>指令集命名方式</strong></h2><p>现在假定我们是一家芯片公司的芯片工程师，公司有了新的业务，对 CPU 提出了更高的要求，让我们基于 RISCV 指令集架构实现一款全新的 CPU。<em>根据我们公司的业务场景，我们只需要选择 RISC-V 架构中的<code>一部分指令</code>，但是另外<code>对CPU 的位宽</code>也有特定的要求</em>。</p><p>因此，现在需要一些命名方式，来对我们选择的 RISCV 架构进行命名。这样，用户在阅读该 CPU 文档时，马上就能了解这款 CPU 是多少位的、有哪些指令集，它们具体有什么功能。</p><p>其实这个命名方式在 RISC-V 规范中有相关定义说明，以 <code>RV</code> 为前缀，然后是<code>位宽</code>，最后是代表指令集的<code>字母集合</code>，具体形式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>RV[###][abc……xyz]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我用表格为你说明一下这个格式，如下所示：</p><img src="`+i+'" alt="img" style="zoom:33%;"><p>举个例子，比如：<code>RV-64-IMAC</code>，就表示 64 位的 RISC-V，支持整数指令、乘除法指令、原子指令和压缩指令。</p><h2 id="指令集模块" tabindex="-1"><a class="header-anchor" href="#指令集模块" aria-hidden="true">#</a> <strong>指令集模块</strong></h2><p>接着我们一起来看看指令集模块。<strong><code>指令集</code>是一款 CPU 架构的主要组成部分，是 CPU 和上层软件<code>交互的核心</code></strong>，也是 CPU 主要功能的体现。</p><p>但 RISC-V 规范只定义了 CPU 需要包含<mark>基础整形操作指令</mark>，如整型的储存、加载、加减、逻辑、移位、分支等。其它的指令称为<mark>可选指令 / 用户扩展指令</mark>，比如乘、除、取模、单精度浮点、双精度浮点、压缩、原子指令等，这些都是扩展指令。<em>扩展指令需要芯片工程师结合功能需求<code>自定义</code></em>。</p><p>所以 RISC-V 采用的是<strong>模块化的指令集，易于扩展、组装</strong>。它适应于不同的应用场景，可以降低 CPU 的实现成本。</p><p>我给你列了一张图，图里展示的是 RISC-V 指令集的各个组成部分。</p><img src="'+p+'" alt="img" style="zoom:33%;"><p>RISC-V 的基本指令集和扩展指令集你有个大致印象就可以，更详细的技术讲解，后面第五节课我再展开。下面我们去看看 RISC-V 的寄存器。</p><h2 id="risc-v-寄存器" tabindex="-1"><a class="header-anchor" href="#risc-v-寄存器" aria-hidden="true">#</a> <strong>RISC-V 寄存器</strong></h2><p>指令的操作数是来源于寄存器，精简指令集架构的 CPU，都会提供大量的寄存器，RISC-V 当然也不例外。RISC-V 的规范定义了 <mark>32 个通用寄存器</mark>以及<mark>一个 PC 寄存器</mark>，这对于 <strong>RV32I、RV64I、RV128I</strong> 指令集都是一样的，只是<strong>寄存器位宽</strong>不一样。</p><p>如果实现支持 F/D 扩展指令集的 CPU，<strong><code>则需要额外支持</code> 32 个浮点寄存器</strong>。(F单精度浮点D双精度浮点)</p><p>而如果实现只支持 RV32E 指令集的嵌入式 CPU，<strong>则可以将 32 个通用寄存器<code>缩减为</code> 16 个通用寄存器</strong>。</p><img src="'+m+'" alt="img" style="zoom:33%;"><p>为了帮助你聚焦要点，不常用的 32 个浮点寄存器并没有列在这张表里。表中的 <mark>ABI</mark> 名称，即<mark>应用程序二进制接口</mark>，你可以理解为*<mark>寄存器别名</mark>，高级语言在生成<code>汇编语言</code>的时候会用到它们*。比如 C 语言处理函数调用时，用哪些寄存器传递参数、返回值，调用者应该保护哪些寄存器，用什么寄存器管理栈帧等等。</p><p><em>定义好 ABI 标准，<code>我们就能在语言间互相调用函数了</code>。比如 C 语言函数调用汇编语言函数</em>，这里我先卖个关子，后面语言与指令的篇章再给你详细展开。</p><h2 id="risc-v-特权级" tabindex="-1"><a class="header-anchor" href="#risc-v-特权级" aria-hidden="true">#</a> <strong>RISC-V 特权级</strong></h2><p>研究完了 RISC-V 寄存器，我们再来看看 RISC-V 的特权级。不同的特权级能访问的系统资源不同，高特权级能访问低特权级的资源，反之则不行。RISC-V 的规范文档定义了四个特权级别（privilege level），特权等级由高到低排列，如下表所示。</p><img src="'+C+'" alt="img" style="zoom:15%;"><p><mark>一个 RISC-V 硬件线程（hart）</mark>，相当于<mark>一个 CPU 内的独立的可执行核心</mark>，<em>在任一时刻，<code>只能运行在某一个特权级上</code>，这个特权级由 <code>CSR（控制和状态寄存器）</code>指定和配置</em>。</p><p>具体分级如下：</p><ol><li><code>机器特权级（M）</code>：RISC-V 中 hart 可以执行的最高权限模式。 <ul><li>在 M 模式下运行的 hart，对内存、I/O 和一些必要的底层功能(启动和系统配置)有着完全的控制权。</li><li>因此，它是唯一一个所有标准 RISC-V CPU <strong>都必须实现的权限级</strong>。</li><li>实际上，<em>普通的 RISC-V 微控制器</em>仅支持机器特权级。</li></ul></li><li><code>虚拟机监视特权级（H）</code>：为了支持<em>虚拟机监视器</em>而定义的特权级。</li><li><code>管理员特权级（S）</code>：主要用于支持<em>现代操作系统</em>，如 Linux、FreeBSD 和 Windows。</li><li><code>用户应用特权级（U）</code>：用于运行<em>应用程序</em>，同样也适用于<em>嵌入式系统</em>。</li></ol><p>好了，关于 RISC-V 的特权级，你了解这些，在现阶段已经足够了。需要把握的重点是，特权级起到了怎样的作用。</p><p><strong>有了特权级的存在，就给指令加上了权力，从而去控制用指令编写的程序。<code>应用程序</code>只能干应用程序该干的事情，不能越权操作。<code>操作系统</code>则拥有更高的权力，能对系统的资源进行管理。</strong></p><h2 id="risc-v-因何流行" tabindex="-1"><a class="header-anchor" href="#risc-v-因何流行" aria-hidden="true">#</a> <strong>RISC-V 因何流行</strong></h2><p>RISC-V 指令集架构在 2010 年才开发出来，到今天不过 10 多年的时间。这个时间从 CPU 行业的发展看，是非常短的，也可以说是非常年轻的。相比 x86 的 40 多岁的年纪，还有 ARM、MIPS、SPARC 的 30 多的年纪，RISC-V 简直是个孩子。</p><p>要知道 ARM、MIPS、SPARC 都是 RISC 系的，MIPS 和 SPARC 甚至已经进入了死亡阶段。按道理讲，RISC-V 不应该在这么短的时间内流行起来，成为芯片行业一颗耀眼的新星。</p><p>那么 RISC-V 流行起来，肯定有其优势：<strong>一是 RISC-V 完全开放，二是 RISC-V 指令简单，三是 RISC-V 实行模块化设计，易于扩展。</strong></p><p>我们先来看看为什么说 RISC-V 是开放的。<em>之前硬件和软件一样，都是小心地保护自己的“源代码”，因为那是自己的命脉</em>。</p><p>直到后来，软件界出现了开源的 Linux，一经开源就迅速席卷了全球。在今天的互联网、云计算、手机等领域 Linux 已经无处不在。但是硬件依然保护着自己的“源代码”，<em>Intel 和 AMD 还是以售卖 x86 芯片为主，而 ARM 直接售卖 ARM CPU 的“源代码”，连生产芯片的步骤都省了</em>。</p><p><em>这种模式下，无论厂商还是个人，要获得 CPU 都要付出昂贵的代价</em>。这时 RISC-V 应运而生，它完全毫无保留地开放了 CPU 设计标准，任何人都可以使用该标准，自由地设计生产 CPU，不需要支付任何费用，也没有任何法律问题。<strong>这相当于硬件界的“Linux”，推动了开放硬件的运动和发展</strong>。</p><p>然后，我们来看看为什么说 RISC-V 很简单？RISC-V 提供了一个非常强大且开放的精简指令集架构，只有 <mark>32 个通用寄存器</mark>、<mark>40 多条常用指令</mark>、<mark>4 个特权级</mark>。<strong>如果需要其它功能，则要进行指令集的扩展，<em>单核心的规范文档才不到 300 页，一个人在一周之内就能搞清楚</em></strong>。</p><p>相比 ARM、x86 动不动就有 8000 多页的规范文档，这实在是太简单了。<strong>其实，简单也意味着<em>可靠和高效</em>，同时可以让学生或者硬件开发者迅速入手，降低学习和开发成本</strong>。</p><p>最后，我们来说说 RISC-V 的模块化设计。RISC-V 虽然简单，但这并不意味着功能的缺失。<strong>通过模块化的设计，就能实现对各种功能组件的<em>剪裁和扩展</em></strong>。</p><h2 id="专用处理器芯片的需求" tabindex="-1"><a class="header-anchor" href="#专用处理器芯片的需求" aria-hidden="true">#</a> 专用处理器芯片的需求</h2><p>事实上，现代 IT 架构已经发生了巨大的改变。举几个我们身边的例子吧。<strong>你正在使用的网卡，上面越来越多的网络处理任务和功能，都从主处理器上移到了网卡中，由<mark>网卡芯片</mark>自己来处理了</strong>。</p><p><mark>数据处理器 (DPU)</mark> 也体现了这一点。由于通用处理器对大规模数据处理能力的限制，所以我们需要<mark>专用的数据处理器</mark>。而人工智能领域，现在也已经开始<code>通过 GPU 运行相关算法</code>。</p><p>这些例子都在告诉我们，<em>专用处理器芯片的需求在大量激增</em>，而这正是 RISC-V 的用武之地。<em>RISC-V 的标准开放，指令功能模块可以自由组合，所以用 RISC-V 就能定制一款满足特殊用途的处理器</em>。芯片工程师会自由组合 RISC-V 现有的指令功能模块，按需对齐进行修改优化，或者实现一个新的指令功能模块，就像你根据需要修改和使用 Linux 内核一样。</p><p>正是因为 RISC-V 开放、简单和模块化这三大特点，硬件工程师和软件工程师才能站在巨人的肩膀上开发，自由地调用和组装功能模块，<em>快速去实现特定业务场景下的芯片需求</em>。因此，才有了 RISC-V 引爆芯片行业，迅速火热起来的现象，<em>这是推动开放硬件的革命性壮举</em>。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> <strong>重点回顾</strong></h2><p>今天的课程又到了尾声，我们还是来看一下，在这节课中，我们都学习了什么。</p><p>首先，我们了解了 RISC-V 从何而来，明白了 RISC-V 发源于加州伯克利分校，是该校第五代 RISC 指令集，即第五代精简指令集。<em>起初是为了学生有一套用来学习研究的指令集</em>。后来因为有技术泰斗 David Patterson 的加入，又成立 RISC-V 基金会，RISC-V 慢慢流行了起来。</p><p>之后我们研究了 RISC-V 是什么，我带你了解了 RISC-V 指令集的<em>命名方式、组成模块、寄存器与特权级</em>。这些部分共同组成了 RISC-V 指令集<mark>架构规范</mark>。<em>任何硬件厂商都可以按照这个规范，实现自己的 RISC-V 处理器</em>。</p><p>最后，我们讨论了 RISC-V 因何流行。<em><code>RISC-V 是开放的</code>，没有任何法律和许可证问题，而且指令集是<code>模块化的，易于剪裁和扩展</code>，又极其简单</em>。这种开放、简单、易于扩展的特点，使得<strong>硬件工程师</strong>非常容易<strong>上手和定制</strong>满足特定功能需要的<strong>处理器</strong>，这直接推动了<strong>开放硬件的革命</strong>。</p><p>课程里的重点内容，我整理成了导图，供你参考。</p><figure><img src="'+R+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> <strong>思考题</strong></h2><p>为什么 RISC-V 要定义特权级？</p><p>欢迎你在留言区跟我交流互动，如果觉得内容还不错，也推荐你把这节课分享给更多朋友。下节课我们就进入手写 miniCPU 的部分，敬请期待！</p>',73),V={href:"https://www.zhihu.com/question/467281352/answer/1967082273",target:"_blank",rel:"noopener noreferrer"},h=e("figure",null,[e("img",{src:I,alt:"img",tabindex:"0",loading:"lazy"}),e("figcaption",null,"img")],-1),l=e("p",null,"鹏城实验室",-1),u={href:"https://www.zhihu.com/question/409298856",target:"_blank",rel:"noopener noreferrer"};function _(f,b){const r=t("ExternalLinkIcon");return n(),c("div",null,[g,e("blockquote",null,[e("p",null,[e("a",V,[o("能否客观地比较龙芯处理器和香山 RISC-V 处理器，各有哪些优势？ - 知乎 (zhihu.com)"),a(r)])]),h,l,e("p",null,[e("a",u,[o("如何评价中国科学院大学「一生一芯」计划？对国产芯片的发展意味着什么？ - 知乎 (zhihu.com)"),a(r)])])])])}const x=s(S,[["render",_],["__file","A02-RISC特性与发展.html.vue"]]);export{x as default};
