import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as t,a as s,b as n,e as c,d as a}from"./app-cdabc73c.js";const o="/assets/2a77709332744630eed955yy1a663b54-17163146.jpg",r="/assets/a3b8aee5a9529e5837c645c03ef2e117-b7d5d921.jpg",d="/assets/c8d750180467c5c6273da3602eb1a0c6-eb9431b5.jpg",u="/assets/68ea4b5115767fda6eb9e3d9fa687a6d-6bbc7fff.jpg",m="/assets/f0151208abb53826285a8237efaafc44-ff9e5b50.jpg",v="/assets/576c3e509913fdda3084e53787a6dd60-046a23d3.jpg",b="/assets/393973cdf5bec3b465088409d40f2542-325e0a87.jpg",k="/assets/b599050484yy7dfeed713816df2382eb-69cde5bf.jpg",g="/assets/d7d5700b092582b783d15340ab852576-d9653845.jpg",h="/assets/55yy17a3760468yy524a94f6fc798119-51442462.jpg",f="/assets/7bd59fc25837b06ac4ee2588669209b4-76169034.jpg",G="/assets/2745da40fee68e0f9148aafbe5277152-bbc54dbd.jpg",_="/assets/831a13e4d5155335624542bdf0f7dcc1-d228d339.jpg",x={},y=a('<h1 id="_27-应用内存管理-linux的应用与内存管理" tabindex="-1"><a class="header-anchor" href="#_27-应用内存管理-linux的应用与内存管理" aria-hidden="true">#</a> 27｜应用内存管理：Linux的应用与内存管理</h1><p>你好，我是 LMOS。</p><p>前面几节课我们学了不少内存相关的基础知识，今天我们来研究一下应用程序的内存管理。</p><p>应用程序想要使用内存，必须得先找操作系统申请，我们有必要先了解一下 Linux 内核怎么来管理内存，这样再去分析应用程序的内存管理细节的时候，思路才更顺畅。</p><p>之后，我还选择了现在最流行的 Golang 语言作为参考，带你梳理内存管理中各式各样的数据结构，为你揭秘 Golang 为什么能够实现高效、自动化地管理内存。</p><p>这节课的配套代码，你可以从这里下载。让我们进入正题吧！</p><h3 id="硬件架构" tabindex="-1"><a class="header-anchor" href="#硬件架构" aria-hidden="true">#</a> 硬件架构</h3><p>现代计算机体系结构被称为 <strong>Non-Uniform Memory Access（NUMA）</strong>，NUMA 下物理内存是分布式的，由多个计算节点组成，每个 CPU 核都会有自己的<strong>本地内存</strong>。CPU 在访问它的本地内存的时候就<strong>比较快</strong>，访问其他 CPU 核内存的时候就<strong>比较慢</strong>。</p><p>我们最熟悉的 PC 机和手机，就可以看作是只有一个计算节点的 NUMA，这算是 NUMA 中的特例，我来为你画一幅逻辑视图，你一看就明白了，如下图所示：</p><figure><img src="'+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们看到每个节点都是由 CPU、总线、内存组成的。节点之间的内存大小可能不同，但是这些内存都是统一编址到同一个物理地址空间中的，即无论是节点 0 的内存还是节点 1 的内存都有唯一的物理地址，在一个节点内部的物理内存之间可能存在空洞，节点和节点间的物理内存页可能有空洞。何谓地址空洞？就是这一段地址是不对应到内存单元里的。</p><p>一般情况下，手机和个人电脑都只有一个节点。服务器和大型计算机可能有多个节点，节点甚至可以动态插入或者移除。关于硬件架构，我们就回顾到这里，下面我们去看看 Linux 是如何在 NUMA 硬件架构上管理内存的。</p><h3 id="linux-物理内存管理" tabindex="-1"><a class="header-anchor" href="#linux-物理内存管理" aria-hidden="true">#</a> Linux 物理内存管理</h3><p>上面的 NUMA 体系架构上，节点内部的内存和节点之间的内存，其访问速度是不一样的，这无疑是提升了 Linux 的内存管理的复杂度。因此，Linux 用了大量的数据结构来表示计算节点，内存、内存页面，以及它们之间的关系。</p><p>我为你列出了一张表格，梳理不同的数据结构：</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在计算机系统中，至少有一个默认的 pglist_data 结构，如果计算节点增加，pglist_data 结构也会随之增加。</p><p>pglist_data 结构中包含自身节点 CPU 的 id，有指向本节点和其它节点的内存区 zone 结构的指针。而在 zone 结构中包含一个 free_area 结构的数组，用于挂载本内存区中的所有物理内存页，也就是 page 结构。</p><p>Linux 的物理内存分配过程是这样的：通过 pglist_data 结构，先找到自己节点的 zone 结构的指针，如果不能满足要求，则查找其它节点的 zone 结构；然后，找到 zone 结构中的 free_area 结构数组；最后，要找到其中的 page 结构，并返回。释放过程则是分配过程的相反过程。</p><p>下面，我为你画一幅表示这些数据结构的关系图，你看看图就明白了。</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>有了上图，应该能帮助你在大脑中建立 Linux 物理内存分配释放的运行蓝图。Linux 的虚拟内存是建立在物理内存之上的，关于虚拟内存，你可以回到应用与内存部分前面的三节课复习一下。</p><p>关于 Linux 内核的内存管理，我们就研究到这里，如果你想更细致地了解 Linux 内核的内存管理，可以阅读我的上一门课程《操作系统实战 45 讲》中第二十二节课和第二十三节课，那里有非常详尽的讨论。</p><h3 id="golang-内存管理" tabindex="-1"><a class="header-anchor" href="#golang-内存管理" aria-hidden="true">#</a> Golang 内存管理</h3><p>现在到了我们今天课程的重点—— 搞清楚 Golang 语言是如何管理内存的。后面的代码我选择的是 Go 1.5 这个版本 。</p><p>Golang（又称 Go）是 Google 公司于 2007 年召集了三位大神，罗伯特·格瑞史莫（Robert Griesemer），罗勃·派克（Rob Pike）及肯·汤普逊（Ken Thompson，开发了 Unix 和 C 语言），开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。业界戏称为 C2.0。</p><p>到了 2016 年，Go 发展起来了，它被软件评价公司 TIOBE 选为“TIOBE 2016 年最佳语言”。现在，Go 语言在业界是非常流行的编程语言。它的语法接近 C 语言，支持垃圾回收功能。Go 的并行模型是以东尼·霍尔的通信顺序进程（CSP）为基础，与 C++ 相比，Go 并不包括如枚举、异常处理、继承、泛型、断言、虚函数等功能，但增加了切片 (Slice) 型、并发、管道、垃圾回收、接口（Interface）等特性的语言级支持。</p><p>关于 Go 语言的历史和基本情况，我先点到为止，回到我们的主题——Go 的内存管理。</p><p>像 Go 这种支持内存管理和并行功能的语言，一般都是有一个运行时（runtime），它就像针对这个语言开发的一个小型 os，为该语言开发的程序提供一个标准可靠的执行环境。这个环境提供了内存管理和并行模型等一些其它功能，每个 Go 程序加载之时，就会先执行 Go 运行时环境。</p><p>下面我们看一看 Go 语言运行时的内存空间结构，如下图所示：</p><figure><img src="'+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>看完这张示意图，你可能会想：“这和普通应用的内存空间结构并没有什么区别啊？”</p><p>是的，但是普通应用程序是调用 malloc 或者 mmap，向 OS 申请内存；而 Go 程序是通过 Go 运行时申请内存，Go 运行时会向 OS 申请一大块内存，然后自己进行管理。Go 应用程序分配内存时是直接找 Go 运行时，这样 Go 运行时才能对内存空间进行跟踪，最后做好内存垃圾回收的工作。</p><p>Go 运行时中提供了一些向操作系统分配和释放内存的函数，我举两个例子：runtime.sysAlloc 会从操作系统中获取一大块可用的内存空间，可能为几百 KB 或者几 MB；runtime.sysFree 会在程序发生内存不足时释放内存。</p><p>这些函数形成了一个 Go 运行时访问内存时的抽象层，在不同的操作系统上，这些个函数调用操作系统 API 也是不同的。比方说，在 Linux 上调用的是 <strong>mmap、munmap 和 madvise 等系统调用</strong>。</p><p>下面咱们看一看 runtime.sysAlloc 的代码，如下所示：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sysAlloc</span><span class="token punctuation">(</span>n <span class="token builtin">uintptr</span><span class="token punctuation">,</span> sysStat <span class="token operator">*</span>sysMemStat<span class="token punctuation">)</span> unsafe<span class="token punctuation">.</span>Pointer <span class="token punctuation">{</span>
    p<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> _PROT_READ<span class="token operator">|</span>_PROT_WRITE<span class="token punctuation">,</span> _MAP_ANON<span class="token operator">|</span>_MAP_PRIVATE<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> _EACCES <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;runtime: mmap: access denied\\n&quot;</span><span class="token punctuation">)</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> _EAGAIN <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;runtime: mmap: too much locked memory (check &#39;ulimit -l&#39;).\\n&quot;</span><span class="token punctuation">)</span>
            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span>
    <span class="token punctuation">}</span>
    sysStat<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> p
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面第二行代码中调用 mmap 调用，是匿名私有、可读写映射，fd 传的参数是 -1，表示映射的虚拟空间与文件不相关。</p><p>但是 Go 运行时调用 runtime.sysAlloc 函数返回一个大块内存空间之后，是怎么管理的呢？我们继续往下看。</p><p>Go 运行时把这个大块内存称为 arena 区域，其中又划分为 8KB 大小页，其结构如下图所示：</p><figure><img src="`+m+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图中的页和操作系统中的页不是一回事，这里的页是 Go 运行时定义的，通常是操作系统页的整数倍。</p><h3 id="golang-内存管理数据结构" tabindex="-1"><a class="header-anchor" href="#golang-内存管理数据结构" aria-hidden="true">#</a> Golang 内存管理数据结构</h3><p>看到上图，你还是感觉十分空洞么？那是因为你没有弄清楚 Go 内存管理的数据结构，Go 内存管理的有五大数据结构，分别是 mheap、heapArena、mcentral、mcache、mspan，你或许不知道这些结构是什么含义，下面就让我挨个为你拆解一下。</p><h4 id="mheap-数据结构" tabindex="-1"><a class="header-anchor" href="#mheap-数据结构" aria-hidden="true">#</a> mheap 数据结构</h4><p>首先，我们一起来看看 mheap 数据结构。一个 Go 应用中，只有一个 mheap 数据结构，它负责管理应用所有变量、数据对象使用的内存。</p><p>mheap 结构在应用启动时由 Go 运行时初始化。需要注意的是，<strong>mheap 结构并不负责管理 heapArena、mcentral、mcache、mspan 这些数据结构实例所占的内存，也就是说，这些结构占用的内存不是由 Go 内存管理负责的，而是由 Go 在运行时直接通过系统内存 API 函数来分配内存空间。</strong></p><p>mheap 结构的代码如下所示：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mheap <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">//全局锁</span>
    lock      mutex
    <span class="token comment">//页面分配的数据结构</span>
    pages     pageAlloc
    <span class="token comment">//所有的mspan结构指针</span>
    allspans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>mspan 
    ……略
    <span class="token comment">//heapArena结构指针数组</span>
    arenas <span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> arenaL1Bits<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> arenaL2Bits<span class="token punctuation">]</span><span class="token operator">*</span>heapArena
    ……略
    <span class="token comment">//当前区的开始和结束地址</span>
    curArena <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        base<span class="token punctuation">,</span> end <span class="token builtin">uintptr</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//mcentral结构数组</span>
    central <span class="token punctuation">[</span>numSpanClasses<span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>
        mcentral mcentral
        pad      <span class="token punctuation">[</span>cpu<span class="token punctuation">.</span>CacheLinePadSize <span class="token operator">-</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>mcentral<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">%</span>cpu<span class="token punctuation">.</span>CacheLinePadSize<span class="token punctuation">]</span><span class="token builtin">byte</span>
    <span class="token punctuation">}</span>
    ……略
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我删除了 mheap 结构中的许多字段，这不影响我们理解代码流程逻辑。</p><p>我们接着来看看 heapArena 结构，如下所示：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> heapArena <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token comment">//存储此区域中位图的指针</span>
  bitmap <span class="token punctuation">[</span>heapArenaBitmapBytes<span class="token punctuation">]</span><span class="token builtin">byte</span>
    <span class="token comment">//每个区的mspan指针数组</span>
  spans <span class="token punctuation">[</span>pagesPerArena<span class="token punctuation">]</span><span class="token operator">*</span>mspan
    <span class="token comment">//pageInUse是一个位图，指示哪些span处于使用状态</span>
  pageInUse <span class="token punctuation">[</span>pagesPerArena <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token builtin">uint8</span>
    ……略
    <span class="token comment">//zeroedBase记录此区中第一页的第一个字节地址</span>
  zeroedBase <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>heapArena 结构可以管理一个区，这个区的大小一般为 64MB。我把具体情况画一幅图，你就明白了，如下所示：</p><figure><img src="`+v+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图中展示了多个页合并一个 heapArena 的过程，多个 heapArana 由 mheap 管理，这显然是为了方便 mheap 对整个内存空间进行扩大和缩小。</p><h4 id="mcentral-数据结构" tabindex="-1"><a class="header-anchor" href="#mcentral-数据结构" aria-hidden="true">#</a> mcentral 数据结构</h4><p>在 mheap 结构中，还有一个重要的 mcentral 数据结构数组。这个命名是想表达的是它是中央的、核心的，非常重要的。</p><p>mcentral 数据结构里到底有什么重要的内容呢？我们结合代码来揭秘，代码如下所示：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mcentral <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">//跨度类 </span>
  spanclass spanClass
    <span class="token comment">//具有空闲对象的mspan列表</span>
  partial <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>spanSet 
    <span class="token comment">//具有非空闲对象的mspan列表</span>
  full    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>spanSet 
<span class="token punctuation">}</span>
<span class="token keyword">type</span> spanSet <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  spineLock mutex
    <span class="token comment">//指向spanSetBlock</span>
  spine     unsafe<span class="token punctuation">.</span>Pointer
    <span class="token comment">//Spine长度</span>
  spineLen  <span class="token builtin">uintptr</span>
    <span class="token comment">//略……</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token punctuation">(</span>
    <span class="token comment">//常量</span>
  spanSetBlockEntries <span class="token operator">=</span> <span class="token number">512</span> <span class="token comment">// 4KB on 64-bit</span>
  spanSetInitSpineCap <span class="token operator">=</span> <span class="token number">256</span> <span class="token comment">// Enough for 1GB heap on 64-bit</span>
<span class="token punctuation">)</span>
<span class="token keyword">type</span> spanSetBlock <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">//mspan结构指针数组</span>
  spans <span class="token punctuation">[</span>spanSetBlockEntries<span class="token punctuation">]</span><span class="token operator">*</span>mspan
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述代码，我们发现 mcentral 结构中的跨度类就是一个整数。至于这个整数有什么作用，我们后面再说。</p><p>这里的 spanSet 相当于一个管理动态数组的结构，spanSet 里面包括 spanSetBlock 指针和长度，而 spanSetBlock 中才是 mspan 指针。你可以把 spanSet 和 spanSetBlock 的组合理解为一个动态增长的列表，该列表中保存着 mspan 指针。</p><p>那为什么 mcentral 结构中的 partial 和 full 要定义成两个元素的数组呢？这是为了对 mspan 进行分类，优化垃圾回收器的性能。</p><p>让我们回到 mheap 结构中，可以看到有一个 mcentral 结构数组，大小与跨度类有关。我们用一幅图来总结一下这几个数据结构的关系，如下图所示：</p><figure><img src="`+b+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图中，展示了从 mheap 到 mcentral 再到 mspan 的关系，通过 mheap 这个全局的数据结构，就能找到内存相关的全部数据结构。</p><p>不过，我们始终没有搞清楚，Go 运行时如何利用这些个数据结构管理分配内存的。想解决这个问题，我们先得理解一个叫做 mspan 的数据结构。</p><h4 id="mspan-数据结构" tabindex="-1"><a class="header-anchor" href="#mspan-数据结构" aria-hidden="true">#</a> mspan 数据结构</h4><p>mspan 数据结构是 Go 运行时内存管理的基本单元，mspan 中的起始地址指向一大块内存，这块内存是由一片连续的、8KB 的页组成的。这个 8KB 页就是 arean 区的页，其中还有 mspan 分配对象的大小规格、占用页的数量等内容。</p><p>我们下面看一看它的代码，如下所示：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mspan <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment">// mspan双向链表</span>
    next <span class="token operator">*</span>mspan    
    prev <span class="token operator">*</span>mspan     
    <span class="token comment">// 该mspan页的开始地址</span>
    startAddr <span class="token builtin">uintptr</span>
    <span class="token comment">// 该mspan包含的页数</span>
    npages    <span class="token builtin">uintptr</span> <span class="token comment">// number of pages in span</span>
    <span class="token comment">// 略……</span>
    <span class="token comment">// 用于定位下一个可用的object, 大小范围在 0- nelems 之间</span>
    freeindex <span class="token builtin">uintptr</span>
    <span class="token comment">// mspan里object的数量</span>
    nelems <span class="token builtin">uintptr</span>
    <span class="token comment">// 用于缓存freeindex开始的bitmap, 缓存的bit值与原值相反</span>
    <span class="token comment">// ctz函数可以通过这个值快速计算出下一个free object的index</span>
    allocCache <span class="token builtin">uint64</span>
    <span class="token comment">//allocBits标记mspan中的对象哪些是被使用的，哪些是未被使用的</span>
  allocBits  <span class="token operator">*</span>gcBits
    <span class="token comment">//gcmarkBits标记mspan中的对象哪些是被标记了的，哪些是未被标记的</span>
  gcmarkBits <span class="token operator">*</span>gcBits
    <span class="token comment">// 已经分配的object的数量</span>
    allocCount  <span class="token builtin">uint16</span> 
    <span class="token comment">// 跨度类</span>
  spanclass             spanClass     
    <span class="token comment">// mspan状态</span>
    state                 mSpanStateBox 
  <span class="token comment">// 决定分配的对象是否需要初始化为0</span>
    needzero              <span class="token builtin">uint8</span>    
    <span class="token comment">// object的大小</span>
    elemsize    <span class="token builtin">uintptr</span>
    <span class="token comment">// mspan结束地址</span>
    limit                 <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，字段用于管理一个由几个页面组成的空间，这个空间会切成一个个小块空间。这些小块儿空间我们称为对象，相关字段中记录了对象的大小和个数。</p><p>你看看我后面画的这幅图就明白了。</p><figure><img src="`+k+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>对照示意图我们可以看到，两个 mspan 结构中各自有 2 个页面，8 个对象，两组位图。这两组位图里，一组位图用于分配对象，另一组位图用于垃圾回收器扫描时的标记，标记哪些对象是空闲且已经被扫描过了，等待回收。</p><p>对象的多少决定了位图的大小，而对象的个数和大小决定了页面的多少。那么在创建 mspan 时，怎么确定这些数据呢？这时就不得不说那个早该说的跨度类了。其实 spanClass 类型就是 uint8 类型，它是一个数组索引 0~67，现在我们看一看它到底索引的是什么 ，代码如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var class_to_size = [_NumSizeClasses]uint16{0, 8, 16, 24, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256, 288, 320, 352, 384, 416, 448, 480, 512, 576, 640, 704, 768, 896, 1024, 1152, 1280, 1408, 1536, 1792, 2048, 2304, 2688, 3072, 3200, 3456, 4096, 4864, 5376, 6144, 6528, 6784, 6912, 8192, 9472, 9728, 10240, 10880, 12288, 13568, 14336, 16384, 18432, 19072, 20480, 21760, 24576, 27264, 28672, 32768}
var class_to_allocnpages = [_NumSizeClasses]uint8{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 3, 2, 3, 1, 3, 2, 3, 4, 5, 6, 1, 7, 6, 5, 4, 3, 5, 7, 2, 9, 7, 5, 8, 3, 10, 7, 4}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是两个数组，class_to_size 数组表示当前 spanClass 对应的 mspan 中对象的大小，class_to_allocnpages 数组表示当前 spanClass 对应的 mspan 中占用的页面数 ，有了这些数据就能指导我们建立 mspan 结构了。</p><p>Google 官方给出了一个方便观察的数据表，如下所示。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 索引值  对象大小    mspan的大小(页) 对象数量 末尾浪费的内存 最大浪费  最小对齐
// class  bytes/obj  bytes/span  objects  tail waste  max waste  min align
//     1          8        8192     1024           0     87.50%          8
//     2         16        8192      512           0     43.75%         16
//     3         24        8192      341           8     29.24%          8
//     4         32        8192      256           0     21.88%         32
//     5         48        8192      170          32     31.52%         16
//     6         64        8192      128           0     23.44%         64
//     7         80        8192      102          32     19.07%         16
//     8         96        8192       85          32     15.95%         32
//     9        112        8192       73          16     13.56%         16
//    10        128        8192       64           0     11.72%        128
//    11        144        8192       56         128     11.82%         16
//    12        160        8192       51          32      9.73%         32
//    13        176        8192       46          96      9.59%         16
//    14        192        8192       42         128      9.25%         64
//    15        208        8192       39          80      8.12%         16
//    16        224        8192       36         128      8.15%         32
//    17        240        8192       34          32      6.62%         16
//    18        256        8192       32           0      5.86%        256
//    19        288        8192       28         128     12.16%         32
//    20        320        8192       25         192     11.80%         64
//    21        352        8192       23          96      9.88%         32
//    22        384        8192       21         128      9.51%        128
//    23        416        8192       19         288     10.71%         32
//    24        448        8192       18         128      8.37%         64
//    25        480        8192       17          32      6.82%         32
//    26        512        8192       16           0      6.05%        512
//    27        576        8192       14         128     12.33%         64
//    28        640        8192       12         512     15.48%        128
//    29        704        8192       11         448     13.93%         64
//    30        768        8192       10         512     13.94%        256
//    31        896        8192        9         128     15.52%        128
//    32       1024        8192        8           0     12.40%       1024
//    33       1152        8192        7         128     12.41%        128
//    34       1280        8192        6         512     15.55%        256
//    35       1408       16384       11         896     14.00%        128
//    36       1536        8192        5         512     14.00%        512
//    37       1792       16384        9         256     15.57%        256
//    38       2048        8192        4           0     12.45%       2048
//    39       2304       16384        7         256     12.46%        256
//    40       2688        8192        3         128     15.59%        128
//    41       3072       24576        8           0     12.47%       1024
//    42       3200       16384        5         384      6.22%        128
//    43       3456       24576        7         384      8.83%        128
//    44       4096        8192        2           0     15.60%       4096
//    45       4864       24576        5         256     16.65%        256
//    46       5376       16384        3         256     10.92%        256
//    47       6144       24576        4           0     12.48%       2048
//    48       6528       32768        5         128      6.23%        128
//    49       6784       40960        6         256      4.36%        128
//    50       6912       49152        7         768      3.37%        256
//    51       8192        8192        1           0     15.61%       8192
//    52       9472       57344        6         512     14.28%        256
//    53       9728       49152        5         512      3.64%        512
//    54      10240       40960        4           0      4.99%       2048
//    55      10880       32768        3         128      6.24%        128
//    56      12288       24576        2           0     11.45%       4096
//    57      13568       40960        3         256      9.99%        256
//    58      14336       57344        4           0      5.35%       2048
//    59      16384       16384        1           0     12.49%       8192
//    60      18432       73728        4           0     11.11%       2048
//    61      19072       57344        3         128      3.57%        128
//    62      20480       40960        2           0      6.87%       4096
//    63      21760       65536        3         256      6.25%        256
//    64      24576       24576        1           0     11.45%       8192
//    65      27264       81920        3         128     10.00%        128
//    66      28672       57344        2           0      4.91%       4096
//    67      32768       32768        1           0     12.50%       8192
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里，我们就知道，分配小块内存就是找到对应的 mspan 数据结构，然后在该 mspan 结构中分配一个对象返回；如果没有对应的 mspan 就要建立一个。</p><p>那下个问题就是，如何找到对应的 mspan 呢？让我们继续探索另一个数据结构——mcache。</p><h4 id="mcache-数据结构" tabindex="-1"><a class="header-anchor" href="#mcache-数据结构" aria-hidden="true">#</a> mcache 数据结构</h4><p>在说明这个 mcache 数据结构之前，你需要先明白 Go 是支持并行化的，我们可以用 go 关键字建立很多个协程（ Goroutine），并行运行。那么 Go 是如何实现高度并行化的呢？这就不得不提到 Go 中的三个基本对象：G、M、P 。</p><p>它们到底是什么，我给你列了一个表格，如下所示：</p><figure><img src="`+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>知道了这三个基本对象的意思，我们还得聊一聊 Go 运行时是怎样工作的。开始 Go 运行时会建立一个系统上的线程 M，每一个运行的 M 会绑定一个 P，线程 M 有了 P 之后会去检查并执行 G 对象（即协程）。然后每一个 P 中都保存着一个协程 G 的队列，除了每个 P 自身保存的 G 的队列外，还有一个全局的 G 队列。最后，M 通过 P 从它的本地队列或者全局队列中获取 G，并执行。</p><p>G、M、P 三者的关系，如下图所示：</p><figure><img src="'+h+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>逻辑处理器 P，不仅仅能获取局部或者全局 G 队列，其中还有一个指向 mcahe 数据结构的指针，指向各自独立的 mcache 数据结构。</p><p>mcache 数据结构到底是什么，我们一起来看看代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> mcache <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token comment">// 触发堆采样相关的</span>
  nextSample <span class="token builtin">uintptr</span>
  <span class="token comment">// 分配的可扫描堆字节数</span>
    scanAlloc  <span class="token builtin">uintptr</span>
    <span class="token comment">// tiny堆指针，指向当前tiny块的起始指针</span>
  tiny       <span class="token builtin">uintptr</span>
    <span class="token comment">// 当前tiny块的位置</span>
  tinyoffset <span class="token builtin">uintptr</span>
    <span class="token comment">// 拥有当前mcache的P执行的tiny分配数;</span>
  tinyAllocs <span class="token builtin">uintptr</span>
    <span class="token comment">// mspan指针数组，数组中指针指向不同大小对象的mspan</span>
  alloc <span class="token punctuation">[</span>numSpanClasses<span class="token punctuation">]</span><span class="token operator">*</span>mspan 
    <span class="token comment">// 略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的 mcache 结构中，字段 tiny 代表一个指针，指向一个内存块，这个内存块不由 mspan 管理，而是直接找操作系统申请。当申请对象小于 16B 的时候，就会使用 Tiny allocator 分配器，该分配器会根据 tiny、tinyoffset 和 tinyAllocs 这三个字段的情况进行分配。分配算法类似于操作系统里 brk 系统调用的分配方法，你可以回顾前面第二十五节课的内容。</p><p>我们知道 mspan 管理的对象，它的大小规格数据共有 67 类，前面讲跨度类的时候我提到过。Go 运行时中定义的虽然是 _NumSizeClasses = 68 ，但其中包含一个大小为 0 的规格，我单独拎出来说一说，这个规格表示大对象，即 &gt;32KB，这种对象只会分配到 heap 上，这个内存也不归 mspan 管理，所以不可能出现在 alloc 数组中。</p><p>剩下 16-32KB 大小的内存都会通过这个 alloc 数组里的 mspans 分配。每种类型的 mspan 有两个：一个是 mspan 列表中不包含指针的对象，另一个是 mspan 列表中包含指针的对象。这种区别让垃圾收集的工作变得更容易，因为它不必扫描不包含任何指针的范围。</p><p>为了让你更好地理解 mcache 结构，我为你画了一幅图，如下所示：</p><figure><img src="`+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>结合之前讲的 G、M、P 三者的关系，你是不是突然对 mcache 有了新一层理解了呢？正如其名，mcache 的作用正是给 P 和在 P 上运行的 G 缓存 mspan。这个设计的好处就是减少从 mcentral 和 mheap 全局数据结构中查找 mspan 的工作量，进而降低由此产生的锁冲突带来的性能损耗。</p><h3 id="golang-内存分配过程" tabindex="-1"><a class="header-anchor" href="#golang-内存分配过程" aria-hidden="true">#</a> Golang 内存分配过程</h3><p>前面我们对 mheap、mcentral、mspan、mcache 数据以及 G、M、P 对象的关系，有了深入的理解，现在我们就可以梳理出 Go 内存的分配过程了。</p><p>根据 G、M、P 对象的关系，我们不难看出一个规律：<strong>同一个 M 在同一时刻，只能执行一个 P，而 P 又只能运行一个协程。换句话说，分配内存始终是从 P 上运行一个协程开始的</strong>。</p><p>分配过程一共四步，我们分别来看看。</p><p>第一步，根据分配对象的大小，选用不同的结构做分配。包括 3 种情况：1. 小于 16B 的用 mcache 中的 tiny 分配器分配；2. 大于 32KB 的对象直接使用堆区分配；3.16B 和 32KB 之间的对象用 mspan 分配。现在我们假定分配对象大小在 16B 和 32KB 之间。</p><p>第二步，在 mcache 中找到合适的 mspan 结构，如果找到了就直接用它给对象分配内存。我们这里假定此时没有在 mcache 中找到合适的 mspan。</p><p>第三步，因为没找到合适的 mspan，所以需要到 mcentral 结构中查找到一个 mspan 结构并返回。虽然 mcentral 结构对 mspan 的大小和是否空闲进行了分类管理，但是它对所有的 P 都是共享的，所以每个 P 访问 mcentral 结构都要加锁。mcentral 结构就是一个中心缓存，我们假定 Go 运行时在进行了一些扫描回收操作之后，在 mcentral 结构还是没有找到合适的 mspan。</p><p>接着是第四步，因为始终没找到合适的 mspan，Go 运行时就会建立一个新的 mspan，并找到 heapArea 分配相应的页面，把页面地址的数量写入 mspan 中。然后，把 mspan 插入 mcentral 结构中，返回的同时将 mspan 插入 mcache 中。最后用这个新的 mspan 分配对象，返回对象地址。</p><figure><img src="'+G+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Go 分配内存的流程就是这样，只要搞清楚那些数据结构的关系，相信你很容易就能理解。Go 语言是开源的，你可以课后自己阅读一下。</p><p>Go 程序中的分配的内存不需要程序手动释放，而是由 Go 运行时中的垃圾回收器自动回收。程序分配的内存如果不使用，就会成为“垃圾”，在运行过程中的某个时机，就会触发其中的垃圾回收协程，执行垃圾扫描和回收操作。</p><p>Go 的垃圾回收器实现了一种<strong>三色标记</strong>的算法。一个对象可以被标记成白色、黑色、灰色三种颜色之一。白色是对象的初始颜色，如果扫描完成后，对象依然还是白色的，说明此对象是垃圾对象；黑色表示对象是可达的，即使用中的对象，黑色是已经被扫描的对象；灰色表示被黑色对象直接引用的对象，但还没对它进行扫描。</p><p>三色标记的规则是黑色对象不能指向白色对象，黑色对象可以指向灰色对象，灰色对象可以指向白色对象。</p><p>最后我再简单说说三色标记算法的主要流程。首先是初始状态，所有对象都被标记为白色；接着会寻找所有对象，比如被线程直接引用的对象，找到后就把该对象标记为灰色；下一步，把灰色对象标记为黑色，并把它们引用的对象标记为灰色；然后，持续遍历每一个灰色对象，直到没有灰色对象；最后，剩余的白色对象为垃圾对象。</p>',111),P={href:"https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-garbage-collector/",target:"_blank",rel:"noopener noreferrer"},A=a('<h3 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h3><p>这节课，我们首先回顾了计算机硬件架构，然后学习了 Linux 是如何在 NUMA 硬件架构上管理内存的。之后，我们把重点放在了 Golang 的内存管理上面。</p><p>其实这节课我带你梳理 Golang 内存管理的思路，你以后研究其他源码的时候也可以试试看。我的切入点就是从源码里拎出最重要的几个数据结构，然后搞清楚这些数据结构之间的关系。在我们梳理代码关系的时候，如果脑子里无法建立准确关联，可以画图来辅助。</p><p>我的经验是，基本能图画出来的话，关系也就理清楚了。万一有些关联不确定，你可以做些猜想假设，并通过写点代码来验证。</p><p>最后，我画了一幅图，为你总结 Golang 内存管理所用数据结构的关系，如下所示：</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h3><p>Golang 有了 mcentral 结构，可以查找到 mspan 结构，为什么还要建立 mcache 结构呢？</p><p>欢迎你在留言区一起交流，积极互动有助于加深理解。另外也推荐你把这节课分享给更多的朋友，跟他一起学习进步。</p><blockquote><p>mcentral位于中心位置，资源需要加锁解锁排队等待，在单核中另不另开mcache无所谓，但是在多核中则开mcache更好（方便并发），一个操作系统中的mcentral实运行线程（协程）只有一组（存在一个线程）？但多核下mcache实运行的线程（协程）可以有多组（看有多少核）？<br> 由于8kb组成的虚拟分页模型（形成连续页，实际内存中是把两个不靠在一起的4kb页拼接成8kb？还是需要连续分页2个4kb？）但一般操作系统4kb或2M，4M分页，go的分页基于操作系统的支持！<br> go分页的优点是一整页数据都可以是它的，方便管理（减少cpu不同模式指令的切换），缺点是对设备的性能提出要求（虽然现在不是事，但嵌入式领域很多cpu真的垃圾，比如一些家用电器等）！还有go的分页模型不大利于对内存数据的实时动态刷新！<br> 作者回复: 是的 你理解正确</p><hr><p>课后思考题：<br> mcentral结构是全局共享的，多协程访问需要竞争锁。mcache是P独有的结构访问时可以不需要竞争锁。mcache结构提前从mcentral中获取mspan结构，后序的分配内存操作就可以不需要竞争锁可以加快内存的分配。<br> 问一个课程无关的问题：<br> 老师用的画图软件是什么能分享一下名字吗😂<br> 作者回复: drawio</p><hr><p>GMP 的 P 结构其实有三个队列,除了文中提到的本地和全局队列以外,还有一个最高优先级 runnext,其中三个队列其实作用和角色有些不一样.</p><p>他们三个的调度关系是依靠 schedtick 来表示当前处理的循环次数,每次循环会自增,然后 runtime 的调度器用这个值取模 61 来判断当前是否该处理 global 的 G:</p><ol><li>如果等于 0 了就会去全局队列里获取,但每次只会在全局里拿一个给 M,然后 back.</li><li>如果模 61 不等于 0 就是正常流程,即判断 runnext 是否有 G,有 G 就直接执行 runnext 的然后 back.</li><li>如果 runtime 没有 G 就去 local,如果 local 非空就拿一个给 M 执行,然后back.</li><li>如果 local 里也是空的就去全局队列里找,如果非空会尽量拿 128 个,然后单独执行头部第一个,之后其他的放到 local 里,然后 back.</li><li>如果 global 里都是空的,说明当前 P 里 runnext 和 local 以及全局都为空.此时就随机(伪随机,是在 P 总数中找一个质数,用这个质数不断地做加法来实现一个伪随机.)去其他的 P 里的 local 里的尾部直接偷一半的 G,并且从最后一个 G 开始执行,其他的 G 到自己的 local 中.</li></ol><p>此外其实还有一个小插曲,早期版本中 time.Sleep 等待时间的实现是简单的依赖 goroutine 的,即处理 time.Sleep 的时候会作为 runnext 插入进来.<br> 所以在 runtime.GOMAXPROCS 设置成 1,并开启尽量多的 goroutine 后(比如 for),就会一直有一部分的 goroutine 一直在等待 time.Sleep 结束让出 runnext.不过好在 1.14.x 的 go 已经不再让 time.Sleep 占用 runnext 了,如果你用的版本低于 1.14 请知悉这个问题或升级</p><hr><p>当初学的手写操作系统的知识，嘿嘿</p><hr><p>请教老师几个问题：<br> Q1：NUMA是针对CPU还是CPU核？<br> 我刚看过一篇博客，该博客多次强调NUMA是针对物理CPU，不是针对CPU核的；比如一个计算机有一个CPU，8个核，则NUMA是这对这一个CPU，而不是针对这8个核的。但本文 (第27课) 中有一句话“NUMA 下物理内存是分布式的，由多个计算节点组成，每个 CPU 核都会有自己的本地内存”，这句话强调“每个CPU核”。</p><p>Q2：单独一台电脑每个核有自己的内存吗？<br> 单独一台计算机，比如我用的笔记本电脑，惠普笔记本，win10，只有一个CPU(Intel i7)，该CPU有8核，内存16G（原配8G，后增加8G）。请问：我的笔记本，每个CPU核都有自己的本地内存吗？</p><p>Q3：地址空洞的“对应”怎么理解？<br> 文中的第一个图中，有“物理地址空间”和“内存”这两个术语；文中提到“何谓地址空洞？就是这一段地址是不对应到内存单元里的”。这个“对应”是指“物理地址空间”中的某一段地址，实际上并没有对应的“内存”，是吗？</p><p>Q4：NUMA是针对CPU的个数。<br> 情况1：如果是计算机集群，有多台计算机，肯定是多个CPU，所以是NAMA。情况2：如果是一台计算机，但是有两个或两个以上的CPU（每个CPU有多个核），则也是NUMA。情况3：如果是一台计算机，而且只有一个CPU（但有多个核），比如最常见的个人计算机，则此时不是NUMA，可以忽略NUMA，当做非NUMA处理。 我的理解是否对？（这里所说的三种情况都是用Linux）</p><p>Q5：一台计算机上，每个Go应用都有一个独立的Go运行时吗？<br> 还是说“在一台计算机上，所有的Go应用都共享同一个Go运行时”？</p><p>Q6：malloc分配以后，会立即分配物理内存吗？<br> 作者回复: Q1 是针对 物理 CPU smp也可以是逻辑上的NUMA<br> Q2 可以有也可以没有<br> Q3 是的<br> Q4 是对的<br> Q5 共享的<br> Q6 不 会</p></blockquote>',10);function C(U,B){const e=p("ExternalLinkIcon");return l(),t("div",null,[y,s("p",null,[n("这种方法看似很好，但是将垃圾回收协程和其它工作协程放在一起并行执行，会因为 CPU 的调度出现问题，导致对象引用和颜色出现错误，以至于回收了不能回收的对象。Go 为了解决这个问题，又加入了写入内存屏障。这里我就不过多展开了，"),s("a",P,[n("有兴趣的话你可以参考这里"),c(e)]),n("。")]),A])}const z=i(x,[["render",C],["__file","J27-内存的管理与分配.html.vue"]]);export{z as default};
