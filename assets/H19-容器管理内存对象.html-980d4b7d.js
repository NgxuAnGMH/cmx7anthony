import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/a9e3c059aceb3433de2116f9bee02d47-6ba55363.jpg",o="/assets/7yye7013ae2a878286fc6052c9318bbb-9fd6db74.jpg",e={},c=p(`<h1 id="_19-土地不能浪费-如何管理内存对象" tabindex="-1"><a class="header-anchor" href="#_19-土地不能浪费-如何管理内存对象" aria-hidden="true">#</a> 19 | 土地不能浪费：如何管理内存对象？</h1><p>你好，我是 LMOS。</p><p>在前面的课程中，我们建立了物理内存页面管理器，它既可以分配单个页面，也可以分配多个连续的页面，还能指定在特殊内存地址区域中分配页面。</p><p>但你发现没有，物理内存页面管理器一次分配至少是一个页面，而我们对内存分页是一个页面 4KB，即 4096 字节。对于小于一个页面的内存分配请求，它无能为力。如果要实现小于一个页面的内存分配请求，又该怎么做呢？</p><p>这节课我们就一起来解决这个问题。课程配套代码，你可以从这里获得。</p><h2 id="malloc-给我们的启发" tabindex="-1"><a class="header-anchor" href="#malloc-给我们的启发" aria-hidden="true">#</a> malloc 给我们的启发</h2><p>首先，我想和你说说，为什么小于一个页面的内存我们也要格外珍惜？</p><p>如果你在大学学过 C 程序设计语言的话，相信你对 C 库中的 <code>malloc 函数</code>也不会陌生，它负责完成分配一块内存空间的功能。</p><p>下面的代码。我相信你也写过，或者写过类似的，不用多介绍你也可以明白。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span>   </span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    
    <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>      
    <span class="token comment">//内存分配 存放15个char字符类型   </span>
    str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;mem alloc err\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//把hello world字符串复制到str开始的内存地址空间中</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//打印hello world字符串和它的地址    </span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;String = %s,  Address = %u\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//释放分配的内存</span>
    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      
    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码流程很简单，就是分配一块 15 字节大小的内存空间，然后把字符串复制到分配的内存空间中，最后用字符串的形式打印了那个块内存，最后释放该内存空间。</p><p>但我们并不是要了解 malloc、free 函数的工作原理，而是要清楚，像这样分配几个字节内存空间的操作，这在内核中比比皆是。</p><h2 id="页还能细分吗" tabindex="-1"><a class="header-anchor" href="#页还能细分吗" aria-hidden="true">#</a> 页还能细分吗</h2><p>是的，<strong>单从<code>内存</code>角度来看，页最小是以字节为单位的。但是从 <code>MMU</code> 角度看，内存是以页为单位的</strong>，所以我们的 Cosmos 的物理内存分配器也以页为单位。现在的问题是，内核中有大量远小于一个页面的内存分配请求，如果对此还是分配一个页面，就会浪费内存。</p><p>要想解决这个问题，<strong>就要细分“页”这个单位</strong>。虽然从 MMU 角度来看，页不能细分，但是从软件逻辑层面页可以细分，但是如何分，则十分讲究。</p><p>结合历史经验和硬件特性（Cache 行大小）来看，我们可以把一个页面或者连续的多个页面，分成 32 字节、64 字节、128 字节、256 字节、512 字节、1024 字节、2048 字节、4096 字节（一个页）。<mark><strong>这些都是 <code>Cache 行</code>大小的倍数</strong></mark>。我们给这些小块内存取个名字，叫**<mark>内存对象</mark>**。</p><p>我们可以这样设计：**把一个或者多个内存页面分配出来，作为一个<mark>内存对象的容器</mark>，在这个容器中容纳<mark>相同的内存对象</mark>，即<mark>同等大小的内存块</mark>。**你可以把这个容器，想像成一个内存对象数组。为了让你更好理解，我还给你画了张图解释。</p><img src="`+t+`" alt="img" style="zoom:15%;"><p>内存对象视图</p><h2 id="如何表示一个内存对象" tabindex="-1"><a class="header-anchor" href="#如何表示一个内存对象" aria-hidden="true">#</a> 如何表示一个内存对象</h2><p>前面只是进行了理论上的设计和构想，下面我们就通过代码来实现这些构想，真正把想法变成现实。</p><p>我们从内存对象开始入手。如何表示一个内存对象呢？当然是要设计一个表示内存对象的数据结构，代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_FREOBJH</span>
<span class="token punctuation">{</span>
    <span class="token class-name">list_h_t</span> oh_list<span class="token punctuation">;</span>     <span class="token comment">//链表</span>
    <span class="token class-name">uint_t</span> oh_stus<span class="token punctuation">;</span>       <span class="token comment">//对象状态</span>
    <span class="token keyword">void</span><span class="token operator">*</span> oh_stat<span class="token punctuation">;</span>        <span class="token comment">//对象的开始地址</span>
<span class="token punctuation">}</span><span class="token class-name">freobjh_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在后面的代码中就用 freobjh_t 结构表示一个对象，其中的链表是为了找到这个对象。是不是很简单？没错，表示一个内存对象就是如此简单。</p><h2 id="内存对象容器-kmsob-t-h" tabindex="-1"><a class="header-anchor" href="#内存对象容器-kmsob-t-h" aria-hidden="true">#</a> 内存对象容器: kmsob_t.h</h2><p>光有内存对象还不够，如何放置内存对象是很重要的。根据前面的构想，为了把多个同等大小的内存对象放在一个内存对象容器中，我们需要设计出表示内存对象容器的数据结构。内存容器要占用内存页面，需要内存对象计数信息、内存对象大小信息，还要能扩展容量。</p><p>把上述功能综合起来，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//管理内存对象容器占用的内存页面所对应的msadsc_t结构</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_MSCLST</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint_t</span> ml_msanr<span class="token punctuation">;</span>  <span class="token comment">//多少个msadsc_t</span>
    <span class="token class-name">uint_t</span> ml_ompnr<span class="token punctuation">;</span>  <span class="token comment">//一个msadsc_t对应的连续的物理内存页面数</span>
    <span class="token class-name">list_h_t</span> ml_list<span class="token punctuation">;</span> <span class="token comment">//挂载msadsc_t的链表</span>
<span class="token punctuation">}</span><span class="token class-name">msclst_t</span><span class="token punctuation">;</span>
<span class="token comment">//管理内存对象容器占用的内存</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_MSOMDC</span>
<span class="token punctuation">{</span>
    <span class="token comment">//msclst_t结构数组mc_lst[0]=1个连续页面的msadsc_t</span>
    <span class="token comment">//               mc_lst[1]=2个连续页面的msadsc_t</span>
    <span class="token comment">//               mc_lst[2]=4个连续页面的msadsc_t</span>
    <span class="token comment">//               mc_lst[3]=8个连续页面的msadsc_t</span>
    <span class="token comment">//               mc_lst[4]=16个连续页面的msadsc_t</span>
    <span class="token class-name">msclst_t</span> mc_lst<span class="token punctuation">[</span>MSCLST_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> mc_msanr<span class="token punctuation">;</span>   <span class="token comment">//总共多个msadsc_t结构</span>
    <span class="token class-name">list_h_t</span> mc_list<span class="token punctuation">;</span>
    <span class="token comment">//内存对象容器第一个占用msadsc_t</span>
    <span class="token class-name">list_h_t</span> mc_kmobinlst<span class="token punctuation">;</span>
    <span class="token comment">//内存对象容器第一个占用msadsc_t对应的连续的物理内存页面数</span>
    <span class="token class-name">uint_t</span> mc_kmobinpnr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token class-name">msomdc_t</span><span class="token punctuation">;</span>
<span class="token comment">//管理内存对象容器扩展容量</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_KMBEXT</span>
<span class="token punctuation">{</span>
    <span class="token class-name">list_h_t</span> mt_list<span class="token punctuation">;</span>        <span class="token comment">//链表</span>
    <span class="token class-name">adr_t</span> mt_vstat<span class="token punctuation">;</span>          <span class="token comment">//内存对象容器扩展容量开始地址</span>
    <span class="token class-name">adr_t</span> mt_vend<span class="token punctuation">;</span>           <span class="token comment">//内存对象容器扩展容量结束地址</span>
    <span class="token class-name">kmsob_t</span><span class="token operator">*</span> mt_kmsb<span class="token punctuation">;</span>        <span class="token comment">//指向内存对象容器结构</span>
    <span class="token class-name">uint_t</span> mt_mobjnr<span class="token punctuation">;</span>        <span class="token comment">//内存对象容器扩展容量的内存中有多少对象</span>
<span class="token punctuation">}</span><span class="token class-name">kmbext_t</span><span class="token punctuation">;</span>
<span class="token comment">//内存对象容器</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_KMSOB</span>
<span class="token punctuation">{</span>
    <span class="token class-name">list_h_t</span> so_list<span class="token punctuation">;</span>        <span class="token comment">//链表</span>
    <span class="token class-name">spinlock_t</span> so_lock<span class="token punctuation">;</span>      <span class="token comment">//保护结构自身的自旋锁</span>
    <span class="token class-name">uint_t</span> so_stus<span class="token punctuation">;</span>          <span class="token comment">//状态与标志</span>
    <span class="token class-name">uint_t</span> so_flgs<span class="token punctuation">;</span>
    <span class="token class-name">adr_t</span> so_vstat<span class="token punctuation">;</span>          <span class="token comment">//内存对象容器的开始地址</span>
    <span class="token class-name">adr_t</span> so_vend<span class="token punctuation">;</span>           <span class="token comment">//内存对象容器的结束地址</span>
    <span class="token class-name">size_t</span> so_objsz<span class="token punctuation">;</span>         <span class="token comment">//内存对象大小</span>
    <span class="token class-name">size_t</span> so_objrelsz<span class="token punctuation">;</span>      <span class="token comment">//内存对象实际大小</span>
    <span class="token class-name">uint_t</span> so_mobjnr<span class="token punctuation">;</span>        <span class="token comment">//内存对象容器中总共的对象个数</span>
    <span class="token class-name">uint_t</span> so_fobjnr<span class="token punctuation">;</span>        <span class="token comment">//内存对象容器中空闲的对象个数</span>
    <span class="token class-name">list_h_t</span> so_frelst<span class="token punctuation">;</span>      <span class="token comment">//内存对象容器中空闲的对象链表头</span>
    <span class="token class-name">list_h_t</span> so_alclst<span class="token punctuation">;</span>      <span class="token comment">//内存对象容器中分配的对象链表头</span>
    <span class="token class-name">list_h_t</span> so_mextlst<span class="token punctuation">;</span>     <span class="token comment">//内存对象容器扩展kmbext_t结构链表头</span>
    <span class="token class-name">uint_t</span> so_mextnr<span class="token punctuation">;</span>        <span class="token comment">//内存对象容器扩展kmbext_t结构个数</span>
    <span class="token class-name">msomdc_t</span> so_mc<span class="token punctuation">;</span>          <span class="token comment">//内存对象容器占用内存页面管理结构</span>
    <span class="token keyword">void</span><span class="token operator">*</span> so_privp<span class="token punctuation">;</span>          <span class="token comment">//本结构私有数据指针</span>
    <span class="token keyword">void</span><span class="token operator">*</span> so_extdp<span class="token punctuation">;</span>          <span class="token comment">//本结构扩展数据指针</span>
<span class="token punctuation">}</span><span class="token class-name">kmsob_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中设计了四个数据结构：</p><ul><li><code>kmsob_t</code> 用于表示内存对象容器，</li><li><code>kmbext_t</code> 用于表示内存对象容器的扩展内存，</li><li><code>msomdc_t</code> 和 <code>msclst_t</code> 用于管理内存对象容器占用的物理内存页面。</li></ul><p>你可能很难理解它们之间的关系，所以我为你准备了一幅图，如下所示。</p><img src="`+o+`" alt="img" style="zoom:15%;"><p>内存对象容器关系</p><p>结合图示我们可以发现，在一组连续物理内存页面（用来存放内存对象）的开始地址那里，就存放着我们 kmsob_t 和 kmbext_t 的实例变量，它们占用了几十字节的空间。</p><h2 id="初始化及管理-kmsob-c" tabindex="-1"><a class="header-anchor" href="#初始化及管理-kmsob-c" aria-hidden="true">#</a> 初始化及管理: kmsob.c</h2><p>因为 kmsob_t、kmbext_t、freobjh_t 结构的实例变量，它们是建立内存对象容器时创建并初始化的，这个过程是伴随着分配内存对象而进行的，所以内存对象管理器的初始化很简单。</p><p>但是有一点还是要初始化的，那就是<strong>管理 kmsob_t 结构的数据结构</strong>，它用于挂载不同大小的内存容器。现在我们就在 cosmos/hal/x86/ 目录下建立一个 <code>kmsob.c</code> 文件，来实现这个数据结构并初始化，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KOBLST_MAX</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span></span></span>
<span class="token comment">//挂载kmsob_t结构</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_KOBLST</span>
<span class="token punctuation">{</span>
    <span class="token class-name">list_h_t</span> ol_emplst<span class="token punctuation">;</span> <span class="token comment">//挂载kmsob_t结构的链表</span>
    <span class="token class-name">kmsob_t</span><span class="token operator">*</span> ol_cahe<span class="token punctuation">;</span>   <span class="token comment">//最近一次查找的kmsob_t结构</span>
    <span class="token class-name">uint_t</span> ol_emnr<span class="token punctuation">;</span>     <span class="token comment">//挂载kmsob_t结构的数量</span>
    <span class="token class-name">size_t</span> ol_sz<span class="token punctuation">;</span>       <span class="token comment">//kmsob_t结构中内存对象的大小</span>
<span class="token punctuation">}</span><span class="token class-name">koblst_t</span><span class="token punctuation">;</span>
<span class="token comment">//管理kmsob_t结构的数据结构</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_KMSOBMGRHED</span>
<span class="token punctuation">{</span>
    <span class="token class-name">spinlock_t</span> ks_lock<span class="token punctuation">;</span>  <span class="token comment">//保护自身的自旋锁</span>
    <span class="token class-name">list_h_t</span> ks_tclst<span class="token punctuation">;</span>   <span class="token comment">//链表</span>
    <span class="token class-name">uint_t</span> ks_tcnr<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> ks_msobnr<span class="token punctuation">;</span>    <span class="token comment">//总共多少个kmsob_t结构</span>
    <span class="token class-name">kmsob_t</span><span class="token operator">*</span> ks_msobche<span class="token punctuation">;</span> <span class="token comment">//最近分配内存对象的kmsob_t结构</span>
    <span class="token class-name">koblst_t</span> ks_msoblst<span class="token punctuation">[</span>KOBLST_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//koblst_t结构数组</span>
<span class="token punctuation">}</span><span class="token class-name">kmsobmgrhed_t</span><span class="token punctuation">;</span>
<span class="token comment">//初始化koblst_t结构体</span>
<span class="token keyword">void</span> <span class="token function">koblst_t_init</span><span class="token punctuation">(</span><span class="token class-name">koblst_t</span> <span class="token operator">*</span>initp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> koblsz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>ol_emplst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ol_cahe <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ol_emnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ol_sz <span class="token operator">=</span> koblsz<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//初始化kmsobmgrhed_t结构体</span>
<span class="token keyword">void</span> <span class="token function">kmsobmgrhed_t_init</span><span class="token punctuation">(</span><span class="token class-name">kmsobmgrhed_t</span> <span class="token operator">*</span>initp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> koblsz <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token function">knl_spinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>ks_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>ks_tclst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ks_tcnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ks_msobnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ks_msobche <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> KOBLST_MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">koblst_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>ks_msoblst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> koblsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        koblsz <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token comment">//这里并不是按照开始的图形分类的而是每次增加32字节，所以是32，64,96,128,160,192,224，256，.......</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//初始化kmsob</span>
<span class="token keyword">void</span> <span class="token function">init_kmsob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">kmsobmgrhed_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>memmgrob<span class="token punctuation">.</span>mo_kmsobmgr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码注释已经很清楚了，就是 init_kmsob 函数调用 kmsobmgrhed_t_init 函数，在其中循环初始化 koblst_t 结构体数组，不多做解释。</p><p>但是有一点我们要搞清楚：<strong>kmsobmgrhed_t 结构的实例变量是放在哪里的，它其实放在我们之前的 memmgrob_t 结构中了</strong>，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//cosmos/include/halinc/halglobal.c</span>
<span class="token function">HAL_DEFGLOB_VARIABLE</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span><span class="token punctuation">,</span>memmgrob<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_MEMMGROB</span>
<span class="token punctuation">{</span>
    <span class="token class-name">list_h_t</span> mo_list<span class="token punctuation">;</span>
    <span class="token class-name">spinlock_t</span> mo_lock<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> mo_stus<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> mo_flgs<span class="token punctuation">;</span>
    <span class="token comment">//略去很多字段</span>
    <span class="token comment">//管理kmsob_t结构的数据结构</span>
    <span class="token class-name">kmsobmgrhed_t</span> mo_kmsobmgr<span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> mo_privp<span class="token punctuation">;</span>
    <span class="token keyword">void</span><span class="token operator">*</span> mo_extp<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token class-name">memmgrob_t</span><span class="token punctuation">;</span>
<span class="token comment">//cosmos/hal/x86/memmgrinit.c</span>
<span class="token keyword">void</span> <span class="token function">init_memmgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//初始化内存页结构</span>
    <span class="token function">init_msadsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化内存区结构</span>
    <span class="token function">init_memarea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//处理内存占用</span>
    <span class="token function">init_search_krloccupymm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//合并内存页到内存区中</span>
    <span class="token function">init_memmgrob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化kmsob</span>
    <span class="token function">init_kmsob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这并没有那么难，是不是？到这里，我们在内存管理初始化 init_memmgr 函数中调用了 init_kmsob 函数，对管理内存对象容器的结构进行了初始化，这样后面我们就能分配内存对象了。</p><h2 id="分配内存对象" tabindex="-1"><a class="header-anchor" href="#分配内存对象" aria-hidden="true">#</a> 分配内存对象</h2><p>根据前面的初始化过程，我们只是初始化了 kmsobmgrhed_t 结构，却没初始化任何 kmsob_t 结构，而这个结构就是存放内存对象的容器，没有它是不能进行任何分配内存对象的操作的。</p><p>下面我们一起在分配内存对象的过程中探索，应该如何查找、建立 kmsob_t 结构，然后在 kmsob_t 结构中建立 freobjh_t 结构，最后在内存对象容器的容量不足时，一起来扩展容器的内存。</p><h3 id="分配内存对象的接口" tabindex="-1"><a class="header-anchor" href="#分配内存对象的接口" aria-hidden="true">#</a> 分配内存对象的接口</h3><p>分配内存对象的流程，仍然要从分配接口开始。分配内存对象的接口很简单，只有一个内存对象大小的参数，然后返回内存对象的首地址。下面我们先在 kmsob.c 文件中写好这个函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//分配内存对象的核心函数</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kmsob_new_core</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> msz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取kmsobmgrhed_t结构的地址</span>
    <span class="token class-name">kmsobmgrhed_t</span> <span class="token operator">*</span>kmobmgrp <span class="token operator">=</span> <span class="token operator">&amp;</span>memmgrob<span class="token punctuation">.</span>mo_kmsobmgr<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>retptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">koblst_t</span> <span class="token operator">*</span>koblp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">cpuflg_t</span> cpuflg<span class="token punctuation">;</span>
    <span class="token comment">//对kmsobmgrhed_t结构加锁</span>
    <span class="token function">knl_spinlock_cli</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmobmgrp<span class="token operator">-&gt;</span>ks_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    koblp <span class="token operator">=</span> <span class="token function">onmsz_retn_koblst</span><span class="token punctuation">(</span>kmobmgrp<span class="token punctuation">,</span> msz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> koblp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        retptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    kmsp <span class="token operator">=</span> <span class="token function">onkoblst_retn_newkmsob</span><span class="token punctuation">(</span>koblp<span class="token punctuation">,</span> msz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> kmsp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        kmsp <span class="token operator">=</span> <span class="token function">_create_kmsob</span><span class="token punctuation">(</span>kmobmgrp<span class="token punctuation">,</span> koblp<span class="token punctuation">,</span> koblp<span class="token operator">-&gt;</span>ol_sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> kmsp<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            retptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    retptr <span class="token operator">=</span> <span class="token function">kmsob_new_onkmsob</span><span class="token punctuation">(</span>kmsp<span class="token punctuation">,</span> msz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> retptr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        retptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//更新kmsobmgrhed_t结构的信息</span>
    <span class="token function">kmsob_updata_cache</span><span class="token punctuation">(</span>kmobmgrp<span class="token punctuation">,</span> koblp<span class="token punctuation">,</span> kmsp<span class="token punctuation">,</span> KUC_NEWFLG<span class="token punctuation">)</span><span class="token punctuation">;</span>
ret_step<span class="token operator">:</span>
    <span class="token comment">//解锁kmsobmgrhed_t结构</span>
    <span class="token function">knl_spinunlock_sti</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmobmgrp<span class="token operator">-&gt;</span>ks_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> retptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//内存对象分配接口</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kmsob_new</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> msz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//对于小于1 或者 大于2048字节的大小不支持 直接返回NULL表示失败</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> msz <span class="token operator">||</span> <span class="token number">2048</span> <span class="token operator">&lt;</span> msz<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//调用核心函数</span>
    <span class="token keyword">return</span> <span class="token function">kmsob_new_core</span><span class="token punctuation">(</span>msz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，内存对象分配接口很简单，只是对分配内存对象的大小进行检查，然后调用分配内存对象的核心函数，在这个核心函数中，就是围绕我们之前定义的几个数据结构，去进行一系列操作了。</p><p>但是究竟做了哪些操作呢，别急，我们继续往下看。</p><h3 id="查找内存对象容器" tabindex="-1"><a class="header-anchor" href="#查找内存对象容器" aria-hidden="true">#</a> 查找内存对象容器</h3><p>根据前面的设计，我们已经知道内存对象是放在内存对象容器中的，所以要分配内存对象，必须要先根据要分配的内存对象大小，找到内存对象容器。</p><p>同时，我们还知道，内存对象容器数据结构 kmsob_t 就挂载在 kmsobmgrhed_t 数据结构中的 ks_msoblst 数组中，所以我们要遍历 ks_msoblst 数组，我们来写一个 onmsz_retn_koblst 函数，它返回 ks_msoblst 数组元素的指针，表示先根据内存对象的大小找到挂载 kmsob_t 结构对应的 koblst_t 结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//看看内存对象容器是不是合乎要求</span>
<span class="token class-name">kmsob_t</span> <span class="token operator">*</span><span class="token function">scan_newkmsob_isok</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>    
    <span class="token comment">//只要内存对象大小小于等于内存对象容器的对象大小就行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>msz <span class="token operator">&lt;=</span> kmsp<span class="token operator">-&gt;</span>so_objsz<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> kmsp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">koblst_t</span> <span class="token operator">*</span><span class="token function">onmsz_retn_koblst</span><span class="token punctuation">(</span><span class="token class-name">kmsobmgrhed_t</span> <span class="token operator">*</span>kmmgrhlokp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//遍历ks_msoblst数组</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> kli <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> kli <span class="token operator">&lt;</span> KOBLST_MAX<span class="token punctuation">;</span> kli<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//只要大小合适就返回       </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>kmmgrhlokp<span class="token operator">-&gt;</span>ks_msoblst<span class="token punctuation">[</span>kli<span class="token punctuation">]</span><span class="token punctuation">.</span>ol_sz <span class="token operator">&gt;=</span> msz<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">&amp;</span>kmmgrhlokp<span class="token operator">-&gt;</span>ks_msoblst<span class="token punctuation">[</span>kli<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">kmsob_t</span> <span class="token operator">*</span><span class="token function">onkoblst_retn_newkmsob</span><span class="token punctuation">(</span><span class="token class-name">koblst_t</span> <span class="token operator">*</span>koblp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>tkmsp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">list_h_t</span> <span class="token operator">*</span>tmplst <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//先看看上次分配所用到的koblst_t是不是正好是这次需要的</span>
    kmsp <span class="token operator">=</span> <span class="token function">scan_newkmsob_isok</span><span class="token punctuation">(</span>koblp<span class="token operator">-&gt;</span>ol_cahe<span class="token punctuation">,</span> msz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> kmsp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> kmsp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果koblst_t中挂载的kmsob_t大于0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> koblp<span class="token operator">-&gt;</span>ol_emnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//开始遍历koblst_t中挂载的kmsob_t</span>
        <span class="token function">list_for_each</span><span class="token punctuation">(</span>tmplst<span class="token punctuation">,</span> <span class="token operator">&amp;</span>koblp<span class="token operator">-&gt;</span>ol_emplst<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tkmsp <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>tmplst<span class="token punctuation">,</span> <span class="token class-name">kmsob_t</span><span class="token punctuation">,</span> so_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//检查当前kmsob_t是否合乎要求</span>
            kmsp <span class="token operator">=</span> <span class="token function">scan_newkmsob_isok</span><span class="token punctuation">(</span>tkmsp<span class="token punctuation">,</span> msz<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> kmsp<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> kmsp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码非常好理解，就是通过 onmsz_retn_koblst 函数，它根据内存对象大小查找并返回 ks_msoblst 数组元素的指针，这个数组元素中就挂载着相应的内存对象容器，然后由 onkoblst_retn_newkmsob 函数查询其中的内存对象容器并返回。</p><h3 id="建立内存对象容器" tabindex="-1"><a class="header-anchor" href="#建立内存对象容器" aria-hidden="true">#</a> 建立内存对象容器</h3><p>不知道你发现没有，有一种情况必然会发生，那就是第一次分配内存对象时调用 onkoblst_retn_newkmsob 函数，它肯定会返回一个 NULL。因为第一次分配时肯定没有 kmsob_t 结构，所以我们在这个时候建立一个 kmsob_t 结构，即<strong>建立内存对象容器</strong>。</p><p>下面我们写一个 _create_kmsob 函数来创建 kmsob_t 结构，并执行一些初始化工作，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//初始化内存对象数据结构</span>
<span class="token keyword">void</span> <span class="token function">freobjh_t_init</span><span class="token punctuation">(</span><span class="token class-name">freobjh_t</span> <span class="token operator">*</span>initp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> stus<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>stat<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>oh_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>oh_stus <span class="token operator">=</span> stus<span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>oh_stat <span class="token operator">=</span> stat<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//初始化内存对象容器数据结构</span>
<span class="token keyword">void</span> <span class="token function">kmsob_t_init</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>initp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>so_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">knl_spinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>so_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_stus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_flgs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_vstat <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_vend <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_objsz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_objrelsz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_mobjnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_fobjnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>so_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>so_alclst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>so_mextlst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_mextnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">msomdc_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>so_mc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_privp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>so_extdp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//把内存对象容器数据结构，挂载到对应的koblst_t结构中去</span>
<span class="token class-name">bool_t</span> <span class="token function">kmsob_add_koblst</span><span class="token punctuation">(</span><span class="token class-name">koblst_t</span> <span class="token operator">*</span>koblp<span class="token punctuation">,</span> <span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>koblp<span class="token operator">-&gt;</span>ol_emplst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    koblp<span class="token operator">-&gt;</span>ol_emnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//初始化内存对象容器</span>
<span class="token class-name">kmsob_t</span> <span class="token operator">*</span><span class="token function">_create_init_kmsob</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> objsz<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> cvadrs<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> cvadre<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> relpnr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//初始化kmsob结构体</span>
    <span class="token function">kmsob_t_init</span><span class="token punctuation">(</span>kmsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置内存对象容器的开始、结束地址，内存对象大小</span>
    kmsp<span class="token operator">-&gt;</span>so_vstat <span class="token operator">=</span> cvadrs<span class="token punctuation">;</span>
    kmsp<span class="token operator">-&gt;</span>so_vend <span class="token operator">=</span> cvadre<span class="token punctuation">;</span>
    kmsp<span class="token operator">-&gt;</span>so_objsz <span class="token operator">=</span> objsz<span class="token punctuation">;</span>
    <span class="token comment">//把物理内存页面对应的msadsc_t结构加入到kmsob_t中的so_mc.mc_kmobinlst链表上</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msa<span class="token operator">-&gt;</span>md_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_mc<span class="token punctuation">.</span>mc_kmobinlst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    kmsp<span class="token operator">-&gt;</span>so_mc<span class="token punctuation">.</span>mc_kmobinpnr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>relpnr<span class="token punctuation">;</span>
    <span class="token comment">//设置内存对象的开始地址为kmsob_t结构之后，结束地址为内存对象容器的结束地址</span>
    <span class="token class-name">freobjh_t</span> <span class="token operator">*</span>fohstat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">freobjh_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>kmsp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>fohend <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">freobjh_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>cvadre<span class="token punctuation">;</span>

    <span class="token class-name">uint_t</span> ap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>fohstat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">freobjh_t</span> <span class="token operator">*</span>tmpfoh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">freobjh_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> tmpfoh <span class="token operator">&lt;</span> fohend<span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//相当在kmsob_t结构体之后建立一个freobjh_t结构体数组</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ap <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>kmsp<span class="token operator">-&gt;</span>so_objsz<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>cvadre<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment">//初始化每个freobjh_t结构体</span>
            <span class="token function">freobjh_t_init</span><span class="token punctuation">(</span>tmpfoh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>tmpfoh<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//把每个freobjh_t结构体加入到kmsob_t结构体中的so_frelst中</span>
           <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmpfoh<span class="token operator">-&gt;</span>oh_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
            kmsp<span class="token operator">-&gt;</span>so_mobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
            kmsp<span class="token operator">-&gt;</span>so_fobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ap <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>kmsp<span class="token operator">-&gt;</span>so_objsz<span class="token punctuation">;</span>
        tmpfoh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">freobjh_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> kmsp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//建立一个内存对象容器</span>
<span class="token class-name">kmsob_t</span> <span class="token operator">*</span><span class="token function">_create_kmsob</span><span class="token punctuation">(</span><span class="token class-name">kmsobmgrhed_t</span> <span class="token operator">*</span>kmmgrlokp<span class="token punctuation">,</span> <span class="token class-name">koblst_t</span> <span class="token operator">*</span>koblp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> objsz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msa <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> relpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> pages <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">128</span> <span class="token operator">&lt;</span> objsz<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        pages <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">&lt;</span> objsz<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        pages <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//为内存对象容器分配物理内存空间，这是我们之前实现的物理内存页面管理器</span>
    msa <span class="token operator">=</span> <span class="token function">mm_division_pages</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>memmgrob<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>relpnr<span class="token punctuation">,</span> MA_TYPE_KRNL<span class="token punctuation">,</span> DMF_RELDIV<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> msa<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">u64_t</span> phyadr <span class="token operator">=</span> msa<span class="token operator">-&gt;</span>md_phyadrs<span class="token punctuation">.</span>paf_padrs <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> phyade <span class="token operator">=</span> phyadr <span class="token operator">+</span> <span class="token punctuation">(</span>relpnr <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//计算它们的虚拟地址</span>
    <span class="token class-name">adr_t</span> vadrs <span class="token operator">=</span> <span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>phyadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">adr_t</span> vadre <span class="token operator">=</span> <span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>phyade<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化kmsob_t并建立内存对象</span>
    kmsp <span class="token operator">=</span> <span class="token function">_create_init_kmsob</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>vadrs<span class="token punctuation">,</span> koblp<span class="token operator">-&gt;</span>ol_sz<span class="token punctuation">,</span> vadrs<span class="token punctuation">,</span> vadre<span class="token punctuation">,</span> msa<span class="token punctuation">,</span> relpnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把kmsob_t结构，挂载到对应的koblst_t结构中去</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kmsob_add_koblst</span><span class="token punctuation">(</span>koblp<span class="token punctuation">,</span> kmsp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">&quot; _create_kmsob kmsob_add_koblst FALSE\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//增加计数</span>
    kmmgrlokp<span class="token operator">-&gt;</span>ks_msobnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> kmsp<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_create_kmsob 函数就是根据分配内存对象大小，建立一个内存对象容器。</p><p>首先，这个函数会找物理内存页面管理器申请一块连续内存页面。然后，在其中的开始部分建立 kmsob_t 结构的实例变量，又在 kmsob_t 结构的后面建立 freobjh_t 结构数组，并把每个 freobjh_t 结构挂载到 kmsob_t 结构体中的 so_frelst 中。最后再把 kmsob_t 结构，挂载到 kmsobmgrhed_t 结构对应的 koblst_t 结构中去。</p><p>上面的注释已经很清楚了，我相信你看得懂。</p><h3 id="扩容内存对象容器" tabindex="-1"><a class="header-anchor" href="#扩容内存对象容器" aria-hidden="true">#</a> 扩容内存对象容器</h3><p>如果我们不断重复分配同一大小的内存对象，那么那个内存对象容器中的内存对象，迟早要分配完的。一旦内存对象分配完，内存对象容器就没有空闲的内存空间产生内存对象了。这时，我们就要为内存对象容器扩展内存空间了。</p><p>下面我们来写代码实现，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//初始化kmbext_t结构</span>
<span class="token keyword">void</span> <span class="token function">kmbext_t_init</span><span class="token punctuation">(</span><span class="token class-name">kmbext_t</span> <span class="token operator">*</span>initp<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> vstat<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> vend<span class="token punctuation">,</span> <span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>mt_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mt_vstat <span class="token operator">=</span> vstat<span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mt_vend <span class="token operator">=</span> vend<span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mt_kmsb <span class="token operator">=</span> kmsp<span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mt_mobjnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//扩展内存页面</span>
<span class="token class-name">bool_t</span> <span class="token function">kmsob_extn_pages</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msa <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> relpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> pages <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">128</span> <span class="token operator">&lt;</span> kmsp<span class="token operator">-&gt;</span>so_objsz<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        pages <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">&lt;</span> kmsp<span class="token operator">-&gt;</span>so_objsz<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        pages <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//找物理内存页面管理器分配2或者4个连续的页面</span>
    msa <span class="token operator">=</span> <span class="token function">mm_division_pages</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>memmgrob<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>relpnr<span class="token punctuation">,</span> MA_TYPE_KRNL<span class="token punctuation">,</span> DMF_RELDIV<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> msa<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">u64_t</span> phyadr <span class="token operator">=</span> msa<span class="token operator">-&gt;</span>md_phyadrs<span class="token punctuation">.</span>paf_padrs <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> phyade <span class="token operator">=</span> phyadr <span class="token operator">+</span> <span class="token punctuation">(</span>relpnr <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">adr_t</span> vadrs <span class="token operator">=</span> <span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>phyadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">adr_t</span> vadre <span class="token operator">=</span> <span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>phyade<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//求出物理内存页面数对应在kmsob_t的so_mc.mc_lst数组中下标</span>
    <span class="token class-name">sint_t</span> mscidx <span class="token operator">=</span> <span class="token function">retn_mscidx</span><span class="token punctuation">(</span>relpnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把物理内存页面对应的msadsc_t结构加入到kmsob_t的so_mc.mc_lst数组中</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msa<span class="token operator">-&gt;</span>md_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_mc<span class="token punctuation">.</span>mc_lst<span class="token punctuation">[</span>mscidx<span class="token punctuation">]</span><span class="token punctuation">.</span>ml_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    kmsp<span class="token operator">-&gt;</span>so_mc<span class="token punctuation">.</span>mc_lst<span class="token punctuation">[</span>mscidx<span class="token punctuation">]</span><span class="token punctuation">.</span>ml_msanr<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token class-name">kmbext_t</span> <span class="token operator">*</span>bextp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">kmbext_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>vadrs<span class="token punctuation">;</span>
    <span class="token comment">//初始化kmbext_t数据结构</span>
    <span class="token function">kmbext_t_init</span><span class="token punctuation">(</span>bextp<span class="token punctuation">,</span> vadrs<span class="token punctuation">,</span> vadre<span class="token punctuation">,</span> kmsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置内存对象的开始地址为kmbext_t结构之后，结束地址为扩展内存页面的结束地址</span>
    <span class="token class-name">freobjh_t</span> <span class="token operator">*</span>fohstat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">freobjh_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bextp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>fohend <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">freobjh_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>vadre<span class="token punctuation">;</span>

    <span class="token class-name">uint_t</span> ap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>fohstat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">freobjh_t</span> <span class="token operator">*</span>tmpfoh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">freobjh_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> tmpfoh <span class="token operator">&lt;</span> fohend<span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ap <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>kmsp<span class="token operator">-&gt;</span>so_objsz<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>vadre<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment">//在扩展的内存空间中建立内存对象</span>
            <span class="token function">freobjh_t_init</span><span class="token punctuation">(</span>tmpfoh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>tmpfoh<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmpfoh<span class="token operator">-&gt;</span>oh_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
            kmsp<span class="token operator">-&gt;</span>so_mobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
            kmsp<span class="token operator">-&gt;</span>so_fobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
            bextp<span class="token operator">-&gt;</span>mt_mobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ap <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>kmsp<span class="token operator">-&gt;</span>so_objsz<span class="token punctuation">;</span>
        tmpfoh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">freobjh_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bextp<span class="token operator">-&gt;</span>mt_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_mextlst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    kmsp<span class="token operator">-&gt;</span>so_mextnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了前面建立内存对象容器的经验，加上这里的注释，我们理解上述代码并不难：不过是分配了另一块连续的内存空间，作为空闲的内存对象，并且把这块内存空间加内存对象容器中统一管理。</p><h3 id="分配内存对象-1" tabindex="-1"><a class="header-anchor" href="#分配内存对象-1" aria-hidden="true">#</a> 分配内存对象</h3><p>有了内存对象容器，就可以分配内存对象了。由于我们前面精心设计了内存对象容器、内存对象等数据结构，这使得我们的内存对象分配代码时极其简单，而且性能极高。</p><p>下面我们来实现它吧！代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//判断内存对象容器中有没有内存对象</span>
<span class="token class-name">uint_t</span> <span class="token function">scan_kmob_objnr</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> kmsp<span class="token operator">-&gt;</span>so_fobjnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> kmsp<span class="token operator">-&gt;</span>so_fobjnr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//实际分配内存对象</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kmsob_new_opkmsob</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取kmsob_t中的so_frelst链表头的第一个空闲内存对象</span>
    <span class="token class-name">freobjh_t</span> <span class="token operator">*</span>fobh <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>kmsp<span class="token operator">-&gt;</span>so_frelst<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token class-name">freobjh_t</span><span class="token punctuation">,</span> oh_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从链表中脱链</span>
    <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fobh<span class="token operator">-&gt;</span>oh_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//kmsob_t中的空闲对象计数减一</span>
    kmsp<span class="token operator">-&gt;</span>so_fobjnr<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token comment">//返回内存对象首地址</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>fobh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kmsob_new_onkmsob</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>retptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">cpuflg_t</span> cpuflg<span class="token punctuation">;</span>
    <span class="token function">knl_spinlock_cli</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//如果内存对象容器中没有空闲的内存对象了就需要扩展内存对象容器的内存了</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">scan_kmsob_objnr</span><span class="token punctuation">(</span>kmsp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//扩展内存对象容器的内存</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kmsob_extn_pages</span><span class="token punctuation">(</span>kmsp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            retptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//实际分配内存对象</span>
    retptr <span class="token operator">=</span> <span class="token function">kmsob_new_opkmsob</span><span class="token punctuation">(</span>kmsp<span class="token punctuation">,</span> msz<span class="token punctuation">)</span><span class="token punctuation">;</span>
ret_step<span class="token operator">:</span>
    <span class="token function">knl_spinunlock_sti</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> retptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分配内存对象的核心操作就是，<strong>kmsob_new_opkmsob 函数从空闲内存对象链表头中取出第一个内存对象，返回它的首地址</strong>。这个算法非常高效，无论内存对象容器中的内存对象有多少，kmsob_new_opkmsob 函数的操作始终是固定的，而如此高效的算法得益于我们先进的数据结构设计。</p><p>好了，到这里内存对象的分配就已经完成了，下面我们去实现内存对象的释放。</p><h2 id="释放内存对象" tabindex="-1"><a class="header-anchor" href="#释放内存对象" aria-hidden="true">#</a> 释放内存对象</h2><p>释放内存对象，就是要把内存对象还给它所归属的内存对象容器。其逻辑就是根据释放内存对象的地址和大小，找到对应的内存对象容器，然后把该内存对象加入到对应内存对象容器的空闲链表上，最后看一看要不要释放内存对象容器占用的物理内存页面。</p><h3 id="释放内存对象的接口" tabindex="-1"><a class="header-anchor" href="#释放内存对象的接口" aria-hidden="true">#</a> 释放内存对象的接口</h3><p>这里我们依然要从释放内存对象的接口开始实现，下面我们在 <code>kmsob.c</code> 文中写下这个函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">bool_t</span> <span class="token function">kmsob_delete_core</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>fadrs<span class="token punctuation">,</span> <span class="token class-name">size_t</span> fsz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">kmsobmgrhed_t</span> <span class="token operator">*</span>kmobmgrp <span class="token operator">=</span> <span class="token operator">&amp;</span>memmgrob<span class="token punctuation">.</span>mo_kmsobmgr<span class="token punctuation">;</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token class-name">koblst_t</span> <span class="token operator">*</span>koblp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">cpuflg_t</span> cpuflg<span class="token punctuation">;</span>
    <span class="token function">knl_spinlock_cli</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmobmgrp<span class="token operator">-&gt;</span>ks_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//根据释放内存对象的大小在kmsobmgrhed_t中查找并返回koblst_t，在其中挂载着对应的kmsob_t，这个在前面已经写好了</span>
    koblp <span class="token operator">=</span> <span class="token function">onmsz_retn_koblst</span><span class="token punctuation">(</span>kmobmgrp<span class="token punctuation">,</span> fsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> koblp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    kmsp <span class="token operator">=</span> <span class="token function">onkoblst_retn_delkmsob</span><span class="token punctuation">(</span>koblp<span class="token punctuation">,</span> fadrs<span class="token punctuation">,</span> fsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> kmsp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rets <span class="token operator">=</span> <span class="token function">kmsob_delete_onkmsob</span><span class="token punctuation">(</span>kmsp<span class="token punctuation">,</span> fadrs<span class="token punctuation">,</span> fsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FALSE <span class="token operator">==</span> rets<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_destroy_kmsob</span><span class="token punctuation">(</span>kmobmgrp<span class="token punctuation">,</span> koblp<span class="token punctuation">,</span> kmsp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rets <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
ret_step<span class="token operator">:</span>
    <span class="token function">knl_spinunlock_sti</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmobmgrp<span class="token operator">-&gt;</span>ks_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//释放内存对象接口</span>
<span class="token class-name">bool_t</span> <span class="token function">kmsob_delete</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>fadrs<span class="token punctuation">,</span> <span class="token class-name">size_t</span> fsz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//对参数进行检查，但是多了对内存对象地址的检查 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fadrs <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">&gt;</span> fsz <span class="token operator">||</span> <span class="token number">2048</span> <span class="token operator">&lt;</span> fsz<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//调用释放内存对象的核心函数</span>
    <span class="token keyword">return</span> <span class="token function">kmsob_delete_core</span><span class="token punctuation">(</span>fadrs<span class="token punctuation">,</span> fsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，等到 kmsob_delete 函数检查参数通过之后，就调用释放内存对象的核心函数 kmsob_delete_core，在这个函数中，一开始根据释放内存对象大小，找到挂载其 kmsob_t 结构的 koblst_t 结构，接着又做了一系列的操作，这些操作正是我们接下来要实现的。</p><h3 id="查找内存对象容器-1" tabindex="-1"><a class="header-anchor" href="#查找内存对象容器-1" aria-hidden="true">#</a> 查找内存对象容器</h3><p>释放内存对象，首先要找到这个将要释放的内存对象所属的内存对象容器。释放时的查找和分配时的查找不一样，因为要检查<strong>释放的内存对象是不是属于该内存对象容器。</strong></p><p>下面我们一起来实现这个函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//检查释放的内存对象是不是在kmsob_t结构中</span>
<span class="token class-name">kmsob_t</span> <span class="token operator">*</span><span class="token function">scan_delkmsob_isok</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>fadrs<span class="token punctuation">,</span> <span class="token class-name">size_t</span> fsz<span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token comment">//检查释放内存对象的地址是否落在kmsob_t结构的地址区间</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>fadrs <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>kmsp<span class="token operator">-&gt;</span>so_vstat <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>fadrs <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>fsz<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> kmsp<span class="token operator">-&gt;</span>so_vend<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>    <span class="token comment">//检查释放内存对象的大小是否小于等于kmsob_t内存对象容器的对象大小 </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fsz <span class="token operator">&lt;=</span> kmsp<span class="token operator">-&gt;</span>so_objsz<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> kmsp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> kmsp<span class="token operator">-&gt;</span>so_mextnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//如果kmsob_t结构没有扩展空间，直接返回</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">kmbext_t</span> <span class="token operator">*</span>bexp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">list_h_t</span> <span class="token operator">*</span>tmplst <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//遍历kmsob_t结构中的每个扩展空间</span>
    <span class="token function">list_for_each</span><span class="token punctuation">(</span>tmplst<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_mextlst<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        bexp <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>tmplst<span class="token punctuation">,</span> <span class="token class-name">kmbext_t</span><span class="token punctuation">,</span> mt_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//检查释放内存对象的地址是否落在扩展空间的地址区间</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>fadrs <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>bexp<span class="token operator">-&gt;</span>mt_vstat <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">kmbext_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>fadrs <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>fsz<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> bexp<span class="token operator">-&gt;</span>mt_vend<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment">//同样的要检查大小</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fsz <span class="token operator">&lt;=</span> kmsp<span class="token operator">-&gt;</span>so_objsz<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> kmsp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//查找释放内存对象所属的kmsob_t结构</span>
<span class="token class-name">kmsob_t</span> <span class="token operator">*</span><span class="token function">onkoblst_retn_delkmsob</span><span class="token punctuation">(</span><span class="token class-name">koblst_t</span> <span class="token operator">*</span>koblp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>fadrs<span class="token punctuation">,</span> <span class="token class-name">size_t</span> fsz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    v <span class="token operator">*</span>kmsp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>tkmsp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">list_h_t</span> <span class="token operator">*</span>tmplst <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//看看上次刚刚操作的kmsob_t结构</span>
    kmsp <span class="token operator">=</span> <span class="token function">scan_delkmsob_isok</span><span class="token punctuation">(</span>koblp<span class="token operator">-&gt;</span>ol_cahe<span class="token punctuation">,</span> fadrs<span class="token punctuation">,</span> fsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> kmsp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> kmsp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> koblp<span class="token operator">-&gt;</span>ol_emnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>    <span class="token comment">//遍历挂载koblp-&gt;ol_emplst链表上的每个kmsob_t结构</span>
        <span class="token function">list_for_each</span><span class="token punctuation">(</span>tmplst<span class="token punctuation">,</span> <span class="token operator">&amp;</span>koblp<span class="token operator">-&gt;</span>ol_emplst<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            tkmsp <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>tmplst<span class="token punctuation">,</span> <span class="token class-name">kmsob_t</span><span class="token punctuation">,</span> so_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//检查释放的内存对象是不是属于这个kmsob_t结构</span>
            kmsp <span class="token operator">=</span> <span class="token function">scan_delkmsob_isok</span><span class="token punctuation">(</span>tkmsp<span class="token punctuation">,</span> fadrs<span class="token punctuation">,</span> fsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> kmsp<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> kmsp<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码注释已经很明白了，搜索对应 koblst_t 结构中的每个 kmsob_t 结构体，随后进行检查，检查了 kmsob_t 结构的自身内存区域和扩展内存区域。即比较释放内存对象的地址是不是落在它们的内存区间中，其大小是否合乎要求。</p><h3 id="释放内存对象-1" tabindex="-1"><a class="header-anchor" href="#释放内存对象-1" aria-hidden="true">#</a> 释放内存对象</h3><p>如果不出意外，会找到释放内存对象的 kmsob_t 结构，这样就可以释放内存对象了，就是把这块内存空间还给内存对象容器，这个过程的具体代码实现如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">bool_t</span> <span class="token function">kmsob_del_opkmsob</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>fadrs<span class="token punctuation">,</span> <span class="token class-name">size_t</span> fsz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kmsp<span class="token operator">-&gt;</span>so_fobjnr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> kmsp<span class="token operator">-&gt;</span>so_mobjnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//让freobjh_t结构重新指向要释放的内存空间</span>
    <span class="token class-name">freobjh_t</span> <span class="token operator">*</span>obhp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">freobjh_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>fadrs<span class="token punctuation">;</span>
    <span class="token comment">//重新初始化块内存空间</span>
    <span class="token function">freobjh_t_init</span><span class="token punctuation">(</span>obhp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> obhp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//加入kmsob_t结构的空闲链表</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>obhp<span class="token operator">-&gt;</span>oh_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//kmsob_t结构的空闲对象计数加一</span>
    kmsp<span class="token operator">-&gt;</span>so_fobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//释放内存对象</span>
<span class="token class-name">bool_t</span> <span class="token function">kmsob_delete_onkmsob</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>fadrs<span class="token punctuation">,</span> <span class="token class-name">size_t</span> fsz<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token class-name">cpuflg_t</span> cpuflg<span class="token punctuation">;</span>
    <span class="token comment">//对kmsob_t结构加锁</span>
    <span class="token function">knl_spinlock_cli</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//实际完成内存对象释放</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kmsob_del_opkmsob</span><span class="token punctuation">(</span>kmsp<span class="token punctuation">,</span> fadrs<span class="token punctuation">,</span> fsz<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rets <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
ret_step<span class="token operator">:</span>
    <span class="token comment">//对kmsob_t结构解锁</span>
    <span class="token function">knl_spinunlock_sti</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合上述代码和注释，我们现在明白了 kmsob_delete_onkmsob 函数调用 kmsob_del_opkmsob 函数。其核心机制就是<strong>把要释放内存对象的空间，重新初始化，变成一个 freobjh_t 结构的实例变量，最后把这个 freobjh_t 结构加入到 kmsob_t 结构中空闲链表中</strong>，这就实现了内存对象的释放。</p><h3 id="销毁内存对象容器" tabindex="-1"><a class="header-anchor" href="#销毁内存对象容器" aria-hidden="true">#</a> 销毁内存对象容器</h3><p>如果我们释放了所有的内存对象，就会出现空的内存对象容器。如果下一次请求同样大小的内存对象，那么这个空的内存对象容器还能继续复用，提高性能。</p><p>但是你有没有想到，频繁请求的是不同大小的内存对象，那么空的内存对象容器会越来越多，这会占用大量内存，所以我们必须要把空的内存对象容器销毁。</p><p>下面我们写代码实现销毁内存对象容器。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">uint_t</span> <span class="token function">scan_freekmsob_isok</span><span class="token punctuation">(</span><span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//当内存对象容器的总对象个数等于空闲对象个数时，说明这内存对象容器空闲</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>kmsp<span class="token operator">-&gt;</span>so_mobjnr <span class="token operator">==</span> kmsp<span class="token operator">-&gt;</span>so_fobjnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">bool_t</span> <span class="token function">_destroy_kmsob_core</span><span class="token punctuation">(</span><span class="token class-name">kmsobmgrhed_t</span> <span class="token operator">*</span>kmobmgrp<span class="token punctuation">,</span> <span class="token class-name">koblst_t</span> <span class="token operator">*</span>koblp<span class="token punctuation">,</span> <span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">list_h_t</span> <span class="token operator">*</span>tmplst <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msa <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">msclst_t</span> <span class="token operator">*</span>mscp <span class="token operator">=</span> kmsp<span class="token operator">-&gt;</span>so_mc<span class="token punctuation">.</span>mc_lst<span class="token punctuation">;</span>
    <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    koblp<span class="token operator">-&gt;</span>ol_emnr<span class="token operator">--</span><span class="token punctuation">;</span>
    kmobmgrp<span class="token operator">-&gt;</span>ks_msobnr<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token comment">//释放内存对象容器扩展空间的物理内存页面</span>
    <span class="token comment">//遍历kmsob_t结构中的so_mc.mc_lst数组</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> MSCLST_MAX<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> mscp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ml_msanr<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment">//遍历每个so_mc.mc_lst数组中的msadsc_t结构</span>
            <span class="token function">list_for_each_head_dell</span><span class="token punctuation">(</span>tmplst<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mscp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ml_list<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                msa <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>tmplst<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span><span class="token punctuation">,</span> md_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msa<span class="token operator">-&gt;</span>md_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//msadsc_t脱链</span>
                <span class="token comment">//释放msadsc_t对应的物理内存页面</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mm_merge_pages</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>memmgrob<span class="token punctuation">,</span> msa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>mscp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ml_ompnr<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">&quot;_destroy_kmsob_core mm_merge_pages FALSE2\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//释放内存对象容器本身占用的物理内存页面</span>
    <span class="token comment">//遍历每个so_mc.mc_kmobinlst中的msadsc_t结构。它只会遍历一次</span>
    <span class="token function">list_for_each_head_dell</span><span class="token punctuation">(</span>tmplst<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kmsp<span class="token operator">-&gt;</span>so_mc<span class="token punctuation">.</span>mc_kmobinlst<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        msa <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>tmplst<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span><span class="token punctuation">,</span> md_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msa<span class="token operator">-&gt;</span>md_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//msadsc_t脱链</span>
        <span class="token comment">//释放msadsc_t对应的物理内存页面</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mm_merge_pages</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>memmgrob<span class="token punctuation">,</span> msa<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>kmsp<span class="token operator">-&gt;</span>so_mc<span class="token punctuation">.</span>mc_kmobinpnr<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">&quot;_destroy_kmsob_core mm_merge_pages FALSE2\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//</span>
\`\`\`销毁内存对象容器
<span class="token class-name">bool_t</span> <span class="token function">_destroy_kmsob</span><span class="token punctuation">(</span><span class="token class-name">kmsobmgrhed_t</span> <span class="token operator">*</span>kmobmgrp<span class="token punctuation">,</span> <span class="token class-name">koblst_t</span> <span class="token operator">*</span>koblp<span class="token punctuation">,</span> <span class="token class-name">kmsob_t</span> <span class="token operator">*</span>kmsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//看看能不能销毁</span>
    <span class="token class-name">uint_t</span> screts <span class="token operator">=</span> <span class="token function">scan_freekmsob_isok</span><span class="token punctuation">(</span>kmsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> screts<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//调用销毁内存对象容器的核心函数</span>
        <span class="token keyword">return</span> <span class="token function">_destroy_kmsob_core</span><span class="token punctuation">(</span>kmobmgrp<span class="token punctuation">,</span> koblp<span class="token punctuation">,</span> kmsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，首先会检查一下内存对象容器是不是空闲的，如果空闲，就调用<strong>销毁内存对象容器的核心函数 _destroy_kmsob_core</strong>。在 _destroy_kmsob_core 函数中，首先要释放内存对象容器的扩展空间所占用的物理内存页面，最后才可以释放内存对象容器自身占用物理内存页面。</p><p>请注意。<strong>这个顺序不能前后颠倒</strong>，这是因为扩展空间的物理内存页面对应的 msadsc_t 结构，它就挂载在 kmsob_t 结构的 so_mc.mc_lst 数组中。</p><p>好了，到这里我们内存对象释放的流程就完成了，这意味着我们整个内存对象管理也告一段落了。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>今天我们从 malloc 函数入手，思考内核要怎样分配大量小块内存。我们把物理内存页面进一步细分成内存对象，为了表示和管理内存对象，又设计了内存对象、内存对象容器等一系列数据结构，随后写代码把它们初始化，最后我们依赖这些数据结构实现了内存对象管理算法。</p><p>下面我们来回顾一下这节课的重点。</p><p>\\1. 我们发现，在应用程序中可以使用 malloc 函数动态分配一些小块内存，其实这样的场景在内核中也是比比皆是。比如，内核经常要动态创建数据结构的实例变量，就需要分配小块的内存空间。</p><p>\\2. 为了实现内存对象的表示、分配和释放功能，我们定义了内存对象和内存对象容器的数据结构 freobjh_t、kmsob_t，并为了管理 kmsob_t 结构又定义了 kmsobmgrhed_t 结构。</p><p>\\3. 我们写好了初始化 kmsobmgrhed_t 结构的函数，并在 init_kmsob 中调用了它，进而又被 init_memmgr 函数调用，由于 kmsobmgrhed_t 结构是为了管理 kmsob_t 结构的所以在一开始就要被初始化。</p><p>\\4. 我们基于这些数据结构实现了内存对象的分配和释放。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>为什么我们在分配内存对象大小时要按照 Cache 行大小的倍数分配呢？</p><p>欢迎你在留言区分享你的思考或疑问。如果这节课对你有帮助，也欢迎你分享给自己的同事、朋友，跟他一起交流讨论。</p><p>好，我是 LMOS，我们下节课见！</p>`,107),l=[c];function i(u,k){return s(),a("div",null,l)}const d=n(e,[["render",i],["__file","H19-容器管理内存对象.html.vue"]]);export{d as default};
