import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as n,b as s,e as c,d as i}from"./app-cdabc73c.js";const l="/assets/597acba3c7e67366edceaef0bbaacaaf-e71ec14e.jpg",u="/assets/d6b2f562841768c117e512e7e98b4a19-68dfa8d8.jpg",r="/assets/e2d8d5404ca3e5fdecc0daf73cd36b5f-63b6b8de.jpg",k="/assets/e9270cbc54ee3e765c3e0096de7a09d4-147cd1bc.jpg",d="/assets/9f9a8aa170ed3b5b411de136c2cfffe0-27aa6f8e.jpg",m="/assets/11c754199144744496f3ee827777yyaa-6c38e44a.jpg",v={},b=n("h1",{id:"_36-linux文件系统-二-linux如何存放文件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_36-linux文件系统-二-linux如何存放文件","aria-hidden":"true"},"#"),s(" 36｜Linux文件系统（二）：Linux如何存放文件？")],-1),_=n("p",null,"你好，我是 LMOS。",-1),f=n("p",null,"通过上节课的学习，我们已经对 Ext3 文件系统的结构非常了解了。这种了解究竟正确与否，还是需要通过写代码来验证。这节课我会带你读取 Ext3 文件系统中的文件，帮你加深对 Ext3 的理解。",-1),g={href:"https://gitee.com/lmos/Geek-time-computer-foundation/tree/master/lesson35~36",target:"_blank",rel:"noopener noreferrer"},x=i(`<h2 id="打开虚拟硬盘" tabindex="-1"><a class="header-anchor" href="#打开虚拟硬盘" aria-hidden="true">#</a> 打开虚拟硬盘</h2><p>想要从虚拟硬盘读取文件，首先要做的当然是打开虚拟硬盘。但我们的硬盘是个文件，所以这就变成了打开了一个文件，然后对文件进行读写就行。这些操作我们已经非常熟悉了，不过多展开。</p><p>这次我们不用 read 命令来读取虚拟硬盘文件数据，因为那样做还需要处理分配临时内容和文件定位的问题，操作比较繁琐。这里我们直接用 mmap 将整个文件映射到虚拟文件中，这样就能像访问内存一样很方便地访问文件了。</p><p>下面我们首先实现 mmap 映射读取文件这个功能，代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">init_in_hdfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">stat</span> filestat<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">// 打开虚拟硬盘文件</span>
  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;./hd.img&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">,</span> S_IRWXU<span class="token operator">|</span>S_IRWXG<span class="token operator">|</span>S_IRWXO<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;打开文件失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 获取文件信息，比如文件大小</span>
  <span class="token function">fstat</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>filestat<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取文件大小</span>
  len <span class="token operator">=</span> filestat<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>
  <span class="token comment">// 映射整个文件到进程的虚拟内存中</span>
  buf <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ<span class="token operator">|</span>PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>buf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;映射文件失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 保存地址 长度大小 文件句柄 到全局变量</span>
  hdaddr <span class="token operator">=</span> buf<span class="token punctuation">;</span>
  hdsize <span class="token operator">=</span> len<span class="token punctuation">;</span>
  hdfilefd <span class="token operator">=</span> fd<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们把打开硬盘文件以及将其映射到进程的虚拟内存中的功能，封装在 init_in_hdfile 函数中，并把映射返回的地址、文件长度、文件句柄保存到全局变量中，以便后面使用。</p><h2 id="获取-ext3-文件系统超级块" tabindex="-1"><a class="header-anchor" href="#获取-ext3-文件系统超级块" aria-hidden="true">#</a> 获取 Ext3 文件系统超级块</h2><p>好，作为硬盘的文件已经完成映射，下面我们就来获取其中的 Ext3 文件系统<mark>超级块</mark>。</p><p>Ext3 文件系统超级块固定存放在硬盘 2 号扇区的开始地址，硬盘扇区从 0 开始计数。我们需要把扇区号转换成文件中对应的偏移量，然后把这个偏移量转换成文件映射虚拟内存中的地址，才能访问到正确的数据。</p><p>下面我们开始写代码，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 将扇区号转换成文件映射的虚拟内存地址</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">sector_to_addr</span><span class="token punctuation">(</span>__u64 nr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__u64<span class="token punctuation">)</span>hdaddr <span class="token operator">+</span> <span class="token punctuation">(</span>nr <span class="token operator">*</span> SECTOR_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 将储存块号转换成文件映射的虚拟内存地址</span>
<span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">block_to_addr</span><span class="token punctuation">(</span>__u64 nr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__u64<span class="token punctuation">)</span>hdaddr <span class="token operator">+</span> <span class="token punctuation">(</span>nr <span class="token operator">*</span> block_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取超级块的地址</span>
<span class="token keyword">struct</span> <span class="token class-name">ext3_super_block</span><span class="token operator">*</span> <span class="token function">get_superblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_super_block</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sector_to_addr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ext3 的超级级块结构，定义在工程目录下的 <code>ext3fs.h</code> 头文件中。代码的 <code>get_superblock</code> 函数中正是通过 <code>sector_to_addr</code> 函数对第二号扇区做了转换，之后还加上了映射文件的首地址，才能访问硬盘文件中的超级块。</p><p>我们可以调用 <code>dump_super_block</code> 函数，打印超级块的一些信息，如下图所示：</p><figure><img src="`+l+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上面的截图，我们能知道<u>文件系统的全局信息</u>，也就是该文件系统<mark>有多少个储存块</mark>、<mark>inode、储存块大小</mark>，<mark>每个块组多少个储存块</mark>等相关信息。</p><h2 id="获取-ext3-文件系统块组描述符表" tabindex="-1"><a class="header-anchor" href="#获取-ext3-文件系统块组描述符表" aria-hidden="true">#</a> 获取 Ext3 文件系统块组描述符表</h2><p>我们知道，Ext3 文件系统将硬盘分区划分成一个个块组，在超级块的下一个储存块中保存着<mark>块组描述符表</mark>。如果超级块在 0 号储存块中，块组描述符表就是 1 号储存块中；如果超级块在 1 号储存块，块组描述符表就在 2 号储存块中。</p><p>一个块组中有储存块位图块，有 inode 节点位图块，也有 inode 节点表。要获取 Ext3 文件系统块组描述符表，我们只要知道它所在的储存块，就能读取其中的信息。</p><p>下面我们用代码实现这一步：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">get_group_table</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_group_desc</span><span class="token operator">*</span><span class="token operator">*</span> outgtable<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> outnr <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 计算总块组数</span>
  <span class="token keyword">int</span> gnr <span class="token operator">=</span> super<span class="token operator">-&gt;</span>s_blocks_count <span class="token operator">/</span> super<span class="token operator">-&gt;</span>s_blocks_per_group<span class="token punctuation">;</span>
  <span class="token comment">// 获取块组描述表的首地址</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext3_group_desc</span><span class="token operator">*</span> group <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_group_desc</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token function">block_to_addr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>outgtable <span class="token operator">=</span> group<span class="token punctuation">;</span>
  <span class="token operator">*</span>outnr <span class="token operator">=</span> gnr<span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上获取块组描述符表的函数，我们可以通过参数，返回两个块组描述符表的首地址和个数。</p><p>这里我已经为你写好了 <code>dump_all_group</code> 函数，你只要调用它，就可以直接获取块组描述符表信息了。</p><p>接下来我们看看打印出来的块组描述符表信息，如下所示：</p><figure><img src="`+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="获取-ext3-文件系统根目录" tabindex="-1"><a class="header-anchor" href="#获取-ext3-文件系统根目录" aria-hidden="true">#</a> 获取 Ext3 文件系统根目录</h2><p>要想在文件系统中读取文件，就必须从其根目录开始，一层一层查找，直到找到文件的 inode 节点。</p><p>可是根目录在哪里呢？它就在第一个块组中 inode 节点表中的第 2 个 inode，也就是根目录的 inode 节点，这个 inode 节点对应的数据块中储存的目录项数据。目录项可以指向一个目录，也可以指向一个文件，就这样一层层将目录或者文件组织起来了。</p><p>下面我们就来写代码实现这一步，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 获取根目录的inode的地址</span>
<span class="token keyword">struct</span> <span class="token class-name">ext3_inode</span><span class="token operator">*</span> <span class="token function">get_rootinode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 获取第1个块组描述符</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext3_group_desc</span><span class="token operator">*</span> group <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_group_desc</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token function">block_to_addr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 获取该块组的inode表的块号</span>
  __u32 ino <span class="token operator">=</span> group<span class="token operator">-&gt;</span>bg_inode_table<span class="token punctuation">;</span>
  <span class="token comment">// 获取第二个inode</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext3_inode</span><span class="token operator">*</span> inp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_inode</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__u64<span class="token punctuation">)</span><span class="token function">block_to_addr</span><span class="token punctuation">(</span>ino<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>super<span class="token operator">-&gt;</span>s_inode_size<span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> inp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 获取根目录的开始的数据项的地址</span>
<span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span> <span class="token function">get_rootdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 获取根目录的inode</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext3_inode</span><span class="token operator">*</span> inp <span class="token operator">=</span> <span class="token function">get_rootinode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 返回根目录的inode中第一个数据块的地址，就是根目录的数据</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">block_to_addr</span><span class="token punctuation">(</span>inp<span class="token operator">-&gt;</span>i_block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中有两个函数，一个是获取根目录 inode 的地址，有了它才能获取根目录的数据，由于我们的文件系统没有太多目录和文件，所以只用一块储存块就能放下所有的目录项目。</p><p>我已经为你写好了代码，用于显示根目录下所有的目录和文件，现在你只要调用 <code>dump_dirs</code> 函数可以了，如下所示：</p><figure><img src="`+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由上可知，根目录下有 5 个子目录，分别是：.、…、lost+found、ext3fs、info。ext3fs 和 info 是我主动建立的，用于测试。我还在 ext3fs 目录下建立了一个 ext3.txt 文件，并在其中写入了“Hello EXT3 File System!!”数据，下面我们就去读取它的文件数据。</p><h2 id="获取-ext3-文件系统文件" tabindex="-1"><a class="header-anchor" href="#获取-ext3-文件系统文件" aria-hidden="true">#</a> 获取 Ext3 文件系统文件</h2><p>现在我们要读取 Ext3 文件系统中的 /ext3fs/ext3.txt 文件，但是我们必须要从根目录开始，查找 ext3fs 目录对应 inode 节点。然后在 ext3fs 目录数据中，找到 ext3.txt 文件对应的 inode 节点，读取该 inode 中直接或者间接地址块中块号对应的储存块，那里就是文件的真实数据。</p><p>目前我们已经能读取根目录的数据了，只要再操作两步，就可以查到 ext3.txt 对应的 inode。</p><p>下面我们开始写代码，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 判定文件和目录</span>
<span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span> <span class="token function">dir_file_is_ok</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span> dire<span class="token punctuation">,</span> __u8 type<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 比较文件和目录类型和名称</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>dire<span class="token operator">-&gt;</span>file_type <span class="token operator">==</span> type<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> dire<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> dire<span class="token operator">-&gt;</span>name_len<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">return</span> dire<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 查找一个块中的目录项</span>
<span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span> <span class="token function">find_dirs_on_block</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> blk<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> __u8 type<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span> dire <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span><span class="token operator">*</span> end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__u64<span class="token punctuation">)</span>blk <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> dir <span class="token operator">=</span> blk<span class="token punctuation">;</span> dir <span class="token operator">&lt;</span> end<span class="token punctuation">;</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 判定是否找到</span>
    dire <span class="token operator">=</span> <span class="token function">dir_file_is_ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span><span class="token punctuation">)</span>dir<span class="token punctuation">,</span> type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dire <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">return</span> dire<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取下一个目录项地址</span>
    dir <span class="token operator">=</span> <span class="token function">get_next_dir_addr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span><span class="token punctuation">)</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 在一个目录文件中查找目录或者文件</span>
<span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span> <span class="token function">find_dirs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_inode</span><span class="token operator">*</span> inode<span class="token punctuation">,</span>  __u8 type<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span> dir <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  __s64 filesize <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">;</span>
  <span class="token comment">// 查找每个直接块</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>EXT3_N_BLOCKS <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>filesize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> filesize <span class="token operator">-=</span> <span class="token punctuation">(</span>__s64<span class="token punctuation">)</span>block_size<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 查找一个储存块</span>
    dir <span class="token operator">=</span> <span class="token function">find_dirs_on_block</span><span class="token punctuation">(</span><span class="token function">block_to_addr</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>filesize<span class="token punctuation">,</span> type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">return</span> dir<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的三个函数的作用就是查找我们需要的目录和文件。具体是这样的：<code>find_dirs</code> 用来查找整个 inode；<code>find_dirs_on_block</code> 用来查找 inode 中一个储存块；<code>dir_file_is_ok</code> 用于判定每个查找到的目录项，如果找到就返回对应的地址，否则返回 NULL。</p><p>下面我们在 read_file 函数中调用上述函数，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">read_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span> dir <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token comment">// 查找ext3fs目录</span>
  dir <span class="token operator">=</span> <span class="token function">find_dirs</span><span class="token punctuation">(</span>rootinode<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;ext3fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;没有找到ext3fs目录\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 显示ext3fs目录的目录项信息</span>
  <span class="token function">dump_one_dir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 查找ext3fs目录下的ext3.txt文件</span>
  dir <span class="token operator">=</span> <span class="token function">find_dirs</span><span class="token punctuation">(</span><span class="token function">get_inode</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>inode<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;ext3.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;没有找到ext3.txt\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 显示ext3.txt文件的目录项信息</span>
  <span class="token function">dump_one_dir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码的作用是这样的：第一步查找 ext3fs 目录，第二步查找 ext3fs 目录下的 ext3.txt 文件，并把它们相应的信息显示出来。</p><p>我们把程序运行一下，如下所示：</p><figure><img src="`+k+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图中已经显示了 ext3.txt 文件的 inode 号，根据这个 inode 号，我们就能找到对应 inode 节点，下面我们进一步写代码读取文件中的数据。代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">dump_inode_data</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext3_inode</span><span class="token operator">*</span> inode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">// 获取文件大小</span>
  __s64 filesize <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_size<span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;----------------------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 展示文件inode的元信息</span>
  <span class="token function">dump_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;----------------------------------------\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>EXT3_N_BLOCKS <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>filesize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> filesize <span class="token operator">-=</span> <span class="token punctuation">(</span>__s64<span class="token punctuation">)</span>block_size<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// 读取并打印每个储存块中数据内部</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">block_to_addr</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">read_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext3_dir_entry</span><span class="token operator">*</span> dir <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token comment">// 查找ext3fs目录</span>
  dir <span class="token operator">=</span> <span class="token function">find_dirs</span><span class="token punctuation">(</span>rootinode<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;ext3fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;没有找到ext3fs目录\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 显示ext3fs目录的目录项信息</span>
  <span class="token function">dump_one_dir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 查找ext3fs目录下的ext3.txt文件</span>
  dir <span class="token operator">=</span> <span class="token function">find_dirs</span><span class="token punctuation">(</span><span class="token function">get_inode</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>inode<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;ext3.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>dir <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;没有找到ext3.txt\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 显示ext3.txt文件的目录项信息</span>
  <span class="token function">dump_one_dir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 显示ext3.txt文件的内容信息</span>
  <span class="token function">dump_inode_data</span><span class="token punctuation">(</span><span class="token function">get_inode</span><span class="token punctuation">(</span>dir<span class="token operator">-&gt;</span>inode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的 <code>dump_inode_data</code> 函数中，我之所以能用 printf 打印文件内存，是因为我清楚 ext3.txt 文件存放写入的是文本数据。如果是其它别的数据就不能这样做了。</p><p>除了打印文件内容，我们还展示了文件元信息。让我们运行一下，看看结果：</p><figure><img src="`+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上图，我们已经清楚地看到<mark>文件大小</mark>、<mark>创建时间</mark>、<mark>所属用户</mark>、<mark>占用哪个储存块</mark>，最后还打印出了<mark>文件的内容</mark>——Hello EXT3 File System!!，这与我们之前写入的数据分毫不差。到这里，我们已经验证了 Ext3 文件系统结构，也完成了读文件信息的各类实践。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>只要认真学完这两节课，我相信你对 Ext3 文件系统已经有了更深入的了解，硬件上的数据修改是完全可以做到的，成为数据修复大师也指日可待。不过，不能利用这些知识去干坏事哦。</p><p>今天，为了验证上节课学到的一系列 Ext3 结构，我们通过写代码的方式，在文件系统中读取了文件数据。我们通过获取超级块、块组的描述符表，一步步完整地把文件内容读取出来，打印在屏幕上。对比之下，这正好跟我们先前输入的内容是一样的，也就验证了 Ext3 文件系统结构。</p><p>这节课的导图如下所示，供你参考：</p><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请问 inode 号是对应于硬盘分区全局，还是相对于块组的？</p><p>进入下个章节之前，希望你可以留言说说学习的感受，或者向我提问。如果觉得课程还不错，别忘了分享给身边更多朋友。</p><blockquote><p>可以通过innode节点来恢复数据，innode节点在发生变化的时候会记录在日志文件中，如果存储改文件的快还没有被覆盖，就可以通过日志文件来恢复innode节点这样文件就恢复了。老师放心，我比较老实不会去做坏事的，嘿嘿……<br> 作者回复: 66666</p><hr><p>有几个疑问想请教一下老师：<br> 1、根目录的目录项存放在inode节点列表的第二个inode这是规范吗？第一个inode存放什么呢？<br> 2、如果目录项个数超过一个inode能表示的范围是不是像数据节点inode那样使用一级间接存储块、二级间接存储卡以及三级呢？<br> 作者回复: 文件系统规定的</p><hr><p>inode相对于块组的啊<br> 作者回复: 嗯嗯</p></blockquote>',59);function y(w,h){const a=p("ExternalLinkIcon");return e(),o("div",null,[b,_,f,n("p",null,[s("我假定你已经学会了怎么建立一个虚拟硬盘并将其格式化为 Ext3 文件系统。如果记不清了，请回到上节课复习一下。课程的配套代码，"),n("a",g,[s("你需要从这里下载"),c(a)]),s("。")]),x])}const E=t(v,[["render",y],["__file","N36-Linux文件系统（二）.html.vue"]]);export{E as default};
