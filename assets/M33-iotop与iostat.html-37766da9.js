import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c as i,a as s,b as n,e as c,d as a}from"./app-cdabc73c.js";const l="/assets/85b54c995a12f4f8773ee6b242837747-ac200349.jpg",u="/assets/c60e6956yya017b4a13ca032f85e3173-23c875e7.jpg",r="/assets/fca83a26f99d08f232a86cd48b27c76c-d656e01c.jpg",d="/assets/27b79610c300db9ea574f7fef979b6f9-f383aac8.jpg",k="/assets/578cb07d235db604aab4b3d2e41025d8-3f0b1fd4.jpg",v="/assets/9fcd00a82138e7eb6d616b8a64b5f26c-c6ea43c5.jpg",m="/assets/cba228bba08df159dcf93cb7441f6118-9b02002f.jpg",f="/assets/823ac3f66b9570beyy7e18d9139604ee-d1d0e789.jpg",b="/assets/c295f50ecdf305243babd6d9ae93bc96-789f0102.jpg",h="/assets/ce250ff381ee749ce10c463911acc97e-75ebcf6b.jpg",g="/assets/b926993ed18ded06950bdb72a3a1ea8f-1372e1d6.jpg",_="/assets/d923aec7181053f26666e8a4edc28781-90477d39.jpg",y={},w=a(`<h1 id="_33-iotop与iostat命令-聊聊命令背后的故事与工作原理" tabindex="-1"><a class="header-anchor" href="#_33-iotop与iostat命令-聊聊命令背后的故事与工作原理" aria-hidden="true">#</a> 33｜iotop与iostat命令：聊聊命令背后的故事与工作原理</h1><p>你好，我是 LMOS。</p><p>前面的课程里，我们学习了 IO Cache、IO 调度和 IO 管理的相关知识，但怎样度量和检测一个应用使用 IO 的情况呢？我们今天就来聊聊这个问题。</p><p>这节课我想带你认识两大监控 IO 操作的神器—— <mark>iostat</mark> 与 <mark>iotop</mark>，让你掌握安装、使用它们的方法以及它们的工作原理。在 Linux 系统上，iostat 和 iotop 这两个 IO 数据工具非常常用。<em>它们都是性能分析领域中不可缺少的工具性软件</em>，也经常被 Linux 网络服务器运维人员，用于分析某些服务器的 IO 类性能与故障。</p><h2 id="安装-iostat-与-iotop" tabindex="-1"><a class="header-anchor" href="#安装-iostat-与-iotop" aria-hidden="true">#</a> 安装 iostat 与 iotop</h2><p>在带你安装这两个工具之前，我先简单介绍下这两个工具的功能。</p><ol><li><mark>iostat</mark> 可以用来分析 Linux <u>系统整体</u> IO 的使用情况；</li><li>而 <mark>iotop</mark> 作为 iostat 增强版和功能升级版，可以分析 Linux 系统<u>每一个进程</u>使用 IO 的情况。</li></ol><p>在我们日常使用的 Linux 发行版中，是不包含 iostat 与 iotop 两个 IO 工具软件包的，需要我们自行安装它们才可以使用。</p><p>各大 Linux 发行版软件包管理方法并不统一，导致安装应用软件的方式不尽相同。考虑到 Ubuntu、Deepin 都是基于 Debain 开发的，所以我们这里<strong>以 Debain 系的 Linux 发行版为例</strong>进行操作。</p><p>我们只要在终端中输入如下命令，就可以安装 iostat 与 iotop 了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//安装iostat
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> sysstat
//安装iotop
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> iotop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，我们并不能直接安装 iostat，这样会提示找不到 iostat 软件包，因为它是包含在 <mark>sysstat</mark> 软件包中，所以我们必须<strong>先安装 sysstat</strong>；而 <mark>iotop</mark> 却是独立的软件包，直接安装它就好了。如果你的 Linux 系统软件源和网络没有问题，肯定能安装成功。</p><p>你可能对这两个命令的使用方法不熟悉，没事，我们不妨在终端里输入这两个命令试一试，看看会出现什么效果。后面截图展示的是我自己机器上的情况：</p><figure><img src="`+l+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图中左边是 iostat 命令执行的结果，右边是 iotop 命令执行的结果。如果你现在还看不懂这些信息，也没有关系，我们后面再介绍，这里仅仅是为了给你一个参考，你输入命令后显示效果类似上图的话，就说明安装成功了。</p><h2 id="iostat-命令" tabindex="-1"><a class="header-anchor" href="#iostat-命令" aria-hidden="true">#</a> iostat 命令</h2><p>在前面我们已经成功安装了 iostat 命令，接下来我们重点聊聊它的使用方法，还有输出的数据表示的是什么。</p><p>iostat 命令，是用来展示<u>系统中的 IO 设备和 CPU 使用情况的</u>。它的最大优势在于<em>能汇报所有块设备活动的统计情况，同时也能汇报出 CPU 使用情况</em>。但是 iostat 命令有一个缺陷，就是它不能对每个应用程序进程进行深入分析，只能分析系统的整体情况。</p><h3 id="选项参数" tabindex="-1"><a class="header-anchor" href="#选项参数" aria-hidden="true">#</a> 选项参数</h3><p>我们先来看 iostat 如何使用，它的使用形式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>iostat [选项] [参数]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>“[]”中的内容可以省略，我们直接在终端中输入 iostat，就会输出相关的全部信息。但是我们如果要观察特定信息，就需要使用相关选项了，我给你列了一个表梳理了最常用的部分，如下所示：</p><img src="`+u+'" alt="img" style="zoom:33%;"><p>了解了选项，还有个参数我们可能用得上，这个参数可以指定为设备名，比如 /dev/sda。如果不带参数，就会默认显示所有 IO 储存设备的情况。</p><p>好，我们就这来练练手，使用 iostat 命令看看我们自己机器上的 IO 设备，主要是硬盘的使用情况。这里我们使用 <code>iostat -d -m -p -x</code> 这个命令，该命令可以显示所有硬盘及其分区的信息，在我的机器上情况如下所示：</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="信息" tabindex="-1"><a class="header-anchor" href="#信息" aria-hidden="true">#</a> 信息</h3><p>上图中展示了所有硬盘及其分区的 IO 情况，第一列就是设备名，后面几列的相关说明，我用表格方式给你做了梳理：</p><img src="'+d+'" alt="img" style="zoom:33%;"><h3 id="用处" tabindex="-1"><a class="header-anchor" href="#用处" aria-hidden="true">#</a> ##用处</h3><blockquote><p>有了这些量化数据，我们就能判断<u>每个硬盘分区的 IO 使用情况</u>，从而分析出<u>哪个设备</u>占用 IO 请求量高或者低、占用时间多少、读取或者写入的数据量有多少。这样，<u>性能瓶颈出现在哪个设备上</u>，我们心中就有数了。</p></blockquote><h3 id="工作原理-proc-diskstats-设备文件" tabindex="-1"><a class="header-anchor" href="#工作原理-proc-diskstats-设备文件" aria-hidden="true">#</a> 工作原理：/proc/diskstats 设备文件</h3><p>接下来我们继续讲解 iostat 的工作原理。iostat 命令只是一个应用软件，它的功能就是计算统计数据并且显示。IO 设备操作的数据肯定来源于内核，那 iostat 怎么获取这些数据就成了关键。</p><p>Linux 的内核数据，都是以文件的形式提供的。换句话说，就是我们想要获取什么数据，就相应去读取什么文件。</p><p>下面我们手动读取一些文件，体验一下具体是什么情况，如下所示：</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>对比 iostat 产生的数据，是不是感觉和上面读取的三个文件得到的数据很相似？是的，你猜的没有错，这些文件就是 iostat 命令的数据来源，<strong>主要的数据来源是 <mark>/proc/diskstats 文件</mark>，它记录着块设备 IO 操作的全部统计信息</strong>。</p><p>下面我列了一个表，梳理了文件名和对应的统计信息，你可以看看：</p><img src="'+v+'" alt="img" style="zoom:33%;"><p>我们来看一看 /proc/diskstats 文件的数据结构，它的每一行代表一个块设备或者块设备的分区，总共 20 列数据，每一列的内容如下表：</p><img src="'+m+`" alt="img" style="zoom:33%;"><p><em>Linux 块设备层在处理每个 IO 请求的时候，都会更新这些数据</em>，具体的流程这里不展开了，iostat 只使用了其中部分数据。由于这些数据是线性增加的，<u>iostat 只需要经过多次采集，进行简单的运算就可以了</u>。</p><p>iostat 只是负责的工作其实很简单，<strong>就是采集数据并计算显示</strong>。我们通过一段时间的 IO 请求数据、写入和读取的数据量、IO 请求等待时间等等这些数据，<strong>就可以评估一个设备的 IO 性能了</strong>。好了关于 iostat 的工作原理我们讲到这里，我们接着探索 iotop 命令。</p><h2 id="iotop-命令" tabindex="-1"><a class="header-anchor" href="#iotop-命令" aria-hidden="true">#</a> iotop 命令</h2><p>我们前面刚学过的 iostat 这个 IO 工具，只能收集量化到每个块设备的读写情况，但如果我们想知道<u>每个进程</u>是如何使用 IO 的就做不到，这就要用到 <mark>iotop</mark> 命令了。</p><p><mark>iotop</mark> 命令是一个 top 类工具，可以监视磁盘 I/O 使用状况，还可以作为 iostat 的升级工具使用。iotop 命令具有与 Linux 系统自带的 top 相似的 UI，<em>只是 top 更关注进程，而 iotop 更关注 IO</em>。</p><p>iotop 命令它是使用 Python 语言编写而成，需要用 Python2.5 以上的版本和 Linux 内核 2.6 以上的版本。iotop 提供了源代码和二进制软件包，可以自己选择安装。在前面我们已经安装了 iotop，如果你没有安装好，请回到前面看看怎么安装的。</p><h3 id="选项参数-1" tabindex="-1"><a class="header-anchor" href="#选项参数-1" aria-hidden="true">#</a> 选项参数</h3><p>像 iostat 一样，我们一起看看 iotop 如何使用，它的使用形式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>iotop [选项]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>“[]”中的内容可以省略，直接在终端中输入 iotop 就会输出相关的全部信息，这一点与 iostat 相同，但是我们如果要观察特定信息，就需要使用相关选项了。我给你列了一个表梳理选项，如下所示：</p><img src="`+f+'" alt="img" style="zoom:33%;"><p>我们马上来测试一下，使用 sudo iotop 命令，注意该命令需要 root 权限才能运行，在前面要加上 sudo。这条不带任何选项的命令，会显示所有用户的所有进程使用 IO 的情况，在我的机器上情况如下所示：</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="信息-1" tabindex="-1"><a class="header-anchor" href="#信息-1" aria-hidden="true">#</a> 信息</h3><p>上图中展示了所有进程读写硬盘的情况，头部的数据显示了每一秒钟，所有硬盘和当前硬盘的读写数据量。而下面的每一行代表一个进程，每一行的第一列就是进程 id，也可以在运行过程中近“p”切换为线程 id，那一行就表示一个线程。后面几列的相关说明，我给你列出了一个表格，如下所示：</p><img src="'+h+`" alt="img" style="zoom:33%;"><h3 id="用处-1" tabindex="-1"><a class="header-anchor" href="#用处-1" aria-hidden="true">#</a> ##用处</h3><blockquote><p>有了这些量化数据，<u>我们就能判断哪些进程是 IO 型进程，哪些进程是计算型进程</u>，每个进程的访问 IO 的数据一目了然。根据这些数据，我们还能进一步分析出<u>哪个进程使用 IO 的量是高或者低、占用时间多少、进程优先级多少</u>。IO 性能瓶颈出现在哪个进程上，<u>需要优化哪个进程的 IO 模型</u>，我们心中就有底了。</p></blockquote><h3 id="工作原理-proc-目录中对应进程文件" tabindex="-1"><a class="header-anchor" href="#工作原理-proc-目录中对应进程文件" aria-hidden="true">#</a> 工作原理：/proc 目录中对应进程文件</h3><p>我们已经了解 iotop 的作用是观察所有进程的 IO 操作情况，那 iotop 的工作原理是什么呢？与 iostat 命令一样，iotop 只是一个应用软件，用来统计所有进程的 IO 数据并显示。进程和 IO 操作数据必定来源于 Linux 内核，那 iotop 怎么获取这些数据呢？</p><p>在 Linux 上这些内核数据，都是以<strong>文件的形式</strong>提供的，即要获取什么数据，就读取什么文件。为了验证这个想法，下面我们试验一下，看看 iotop 是不是也是读取了一些 /proc 目录下的文件呢。</p><p>其实 iotop 是开源的，我们不妨下载它的代码来研究一下，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//下载
<span class="token function">wget</span> http://guichaz.free.fr/iotop/files/iotop-0.4.4.tar.gz  
//解压
<span class="token function">tar</span> zxf iotop-0.4.4.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,64),x={href:"http://iotop.py",target:"_blank",rel:"noopener noreferrer"},I=a(`<p>在 iotop/ui.pi 里，这个文件中会调用主函数 main，主函数进而会调用 run_iotop_window 函数执行主要功能。在 run_iotop_window 函数中会调用 ProcessList 对象，获取所有进程的相关信息。</p><p>我们不妨看一看它的代码片段，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>class <span class="token function">ProcessList</span><span class="token punctuation">(</span>DumpableObject<span class="token punctuation">)</span><span class="token operator">:</span>
    def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> taskstats_connection<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token operator">:</span>
        # <span class="token punctuation">{</span>pid<span class="token operator">:</span> ProcessInfo<span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>processes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>taskstats_connection <span class="token operator">=</span> taskstats_connection
        self<span class="token punctuation">.</span>options <span class="token operator">=</span> options
        self<span class="token punctuation">.</span>timestamp <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>vmstat <span class="token operator">=</span> vmstat<span class="token punctuation">.</span><span class="token function">VmStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">A first time as we are interested in the delta</span></span>
        self<span class="token punctuation">.</span><span class="token function">update_process_counts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    def <span class="token function">get_process</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token string">&quot;&quot;</span>&quot;Either get the specified PID from self<span class="token punctuation">.</span>processes or build a new
        ProcessInfo <span class="token keyword">if</span> we see this PID <span class="token keyword">for</span> the first time<span class="token string">&quot;&quot;</span>&quot;
        process <span class="token operator">=</span> self<span class="token punctuation">.</span>processes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> None<span class="token punctuation">)</span>
        <span class="token keyword">if</span> not process<span class="token operator">:</span>
            process <span class="token operator">=</span> <span class="token function">ProcessInfo</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>processes<span class="token punctuation">[</span>pid<span class="token punctuation">]</span> <span class="token operator">=</span> process

        <span class="token keyword">if</span> process<span class="token punctuation">.</span><span class="token function">is_monitored</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>options<span class="token punctuation">)</span><span class="token operator">:</span>
            <span class="token keyword">return</span> process

    def <span class="token function">list_tgids</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>pids<span class="token operator">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>pids

        tgids <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">listdir</span><span class="token punctuation">(</span><span class="token char">&#39;/proc&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>processes<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span>tgid<span class="token punctuation">)</span> <span class="token keyword">for</span> tgid in tgids <span class="token keyword">if</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&lt;=</span> tgid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">]</span>

        tids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> tgid in tgids<span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&lt;=</span> tgid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token operator">:</span>
                try<span class="token operator">:</span>
                    tids<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span><span class="token function">listdir</span><span class="token punctuation">(</span><span class="token char">&#39;/proc/&#39;</span> <span class="token operator">+</span> tgid <span class="token operator">+</span> <span class="token char">&#39;/task&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                except OSError<span class="token operator">:</span>
                    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">The PID went away</span></span>
                    pass
        <span class="token keyword">return</span> tids

    def <span class="token function">list_tids</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tgid<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token keyword">if</span> not self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>processes<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span>tgid<span class="token punctuation">]</span>

        try<span class="token operator">:</span>
            tids <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span><span class="token function">listdir</span><span class="token punctuation">(</span><span class="token char">&#39;/proc/%d/task&#39;</span> <span class="token operator">%</span> tgid<span class="token punctuation">)</span><span class="token punctuation">)</span>
        except OSError<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token keyword">if</span> self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>pids<span class="token operator">:</span>
            tids <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>pids<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span><span class="token function">set</span><span class="token punctuation">(</span>tids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> tids

    def <span class="token function">update_process_counts</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>
        new_timestamp <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>duration <span class="token operator">=</span> new_timestamp <span class="token operator">-</span> self<span class="token punctuation">.</span>timestamp
        self<span class="token punctuation">.</span>timestamp <span class="token operator">=</span> new_timestamp

        <span class="token keyword">for</span> tgid in self<span class="token punctuation">.</span><span class="token function">list_tgids</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
            process <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">get_process</span><span class="token punctuation">(</span>tgid<span class="token punctuation">)</span>
            <span class="token keyword">if</span> not process<span class="token operator">:</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">for</span> tid in self<span class="token punctuation">.</span><span class="token function">list_tids</span><span class="token punctuation">(</span>tgid<span class="token punctuation">)</span><span class="token operator">:</span>
                thread <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">get_thread</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> self<span class="token punctuation">.</span>taskstats_connection<span class="token punctuation">)</span>
                stats <span class="token operator">=</span> self<span class="token punctuation">.</span>taskstats_connection<span class="token punctuation">.</span><span class="token function">get_single_task_stats</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span>
                <span class="token keyword">if</span> stats<span class="token operator">:</span>
                    thread<span class="token punctuation">.</span><span class="token function">update_stats</span><span class="token punctuation">(</span>stats<span class="token punctuation">)</span>
                    thread<span class="token punctuation">.</span>mark <span class="token operator">=</span> False

        <span class="token keyword">return</span> self<span class="token punctuation">.</span>vmstat<span class="token punctuation">.</span><span class="token function">delta</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来梳理一下上述代码都做了什么。在 ProcessList 类的构造方法 <strong>init</strong> 中，会调用 update_process_counts 方法，接着在其中调用 list_tgids 方法，该方法会打开 <mark>/proc 目录</mark>获取所有以数字命名的目录名称，那就是 TGID。</p><p>TGID 就是线程组 ID，<strong>对于同一进程中的所有线程，TGID 都是一致的，也就是该进程的进程 ID</strong>。接着循环调用 get_process 方法，在该方法中会构造 ProcessInfo 对象以获取每个进程的数据。</p><p>ProcessInfo 类的代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>class <span class="token function">ProcessInfo</span><span class="token punctuation">(</span>DumpableObject<span class="token punctuation">)</span><span class="token operator">:</span>
    def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token operator">:</span>
        self<span class="token punctuation">.</span>pid <span class="token operator">=</span> pid
        self<span class="token punctuation">.</span>uid <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>user <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>threads <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> # <span class="token punctuation">{</span>tid<span class="token operator">:</span> ThreadInfo<span class="token punctuation">}</span>
        self<span class="token punctuation">.</span>stats_delta <span class="token operator">=</span> Stats<span class="token punctuation">.</span><span class="token function">build_all_zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stats_accum <span class="token operator">=</span> Stats<span class="token punctuation">.</span><span class="token function">build_all_zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stats_accum_timestamp <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    def <span class="token function">get_uid</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>uid<span class="token operator">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>uid
        try<span class="token operator">:</span>
            uid <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token char">&#39;/proc/%d&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">[</span>stat<span class="token punctuation">.</span>ST_UID<span class="token punctuation">]</span>
        except OSError<span class="token operator">:</span>
            <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">The process disappeared</span></span>
            uid <span class="token operator">=</span> None
        <span class="token keyword">if</span> uid <span class="token operator">!=</span> self<span class="token punctuation">.</span>uid<span class="token operator">:</span>
            <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Maybe the process called <span class="token function">setuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
            self<span class="token punctuation">.</span>user <span class="token operator">=</span> None
            self<span class="token punctuation">.</span>uid <span class="token operator">=</span> uid
        <span class="token keyword">return</span> uid

    def <span class="token function">get_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>
        uid <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">get_uid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> uid is not None and not self<span class="token punctuation">.</span>user<span class="token operator">:</span>
            try<span class="token operator">:</span>
                self<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token function">safe_utf8_decode</span><span class="token punctuation">(</span>pwd<span class="token punctuation">.</span><span class="token function">getpwuid</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">.</span>pw_name<span class="token punctuation">)</span>
            except KeyError<span class="token operator">:</span>
                self<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token function">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>user or <span class="token char">&#39;{none}&#39;</span>

    def <span class="token function">get_proc_status_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>
        try<span class="token operator">:</span>
            first_line <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token char">&#39;/proc/%d/status&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        except IOError<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token char">&#39;{no such process}&#39;</span>
        prefix <span class="token operator">=</span> <span class="token char">&#39;Name:\\t&#39;</span>
        <span class="token keyword">if</span> first_line<span class="token punctuation">.</span><span class="token function">startswith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token operator">:</span>
            name <span class="token operator">=</span> first_line<span class="token punctuation">[</span><span class="token number">6</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token operator">:</span>
            name <span class="token operator">=</span> <span class="token char">&#39;&#39;</span>
        <span class="token keyword">if</span> name<span class="token operator">:</span>
            name <span class="token operator">=</span> <span class="token char">&#39;[%s]&#39;</span> <span class="token operator">%</span> name
        <span class="token keyword">else</span><span class="token operator">:</span>
            name <span class="token operator">=</span> <span class="token char">&#39;{no name}&#39;</span>
        <span class="token keyword">return</span> name

    def <span class="token function">get_cmdline</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">A process may exec<span class="token punctuation">,</span> so we must always reread its cmdline</span></span>
        try<span class="token operator">:</span>
            proc_cmdline <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token char">&#39;/proc/%d/cmdline&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>
            cmdline <span class="token operator">=</span> proc_cmdline<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span>
        except IOError<span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token char">&#39;{no such process}&#39;</span>
        #……
        <span class="token keyword">return</span> <span class="token function">safe_utf8_decode</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">)</span>

    def <span class="token function">did_some_io</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> accumulated<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token keyword">if</span> accumulated<span class="token operator">:</span>
            <span class="token keyword">return</span> not self<span class="token punctuation">.</span>stats_accum<span class="token punctuation">.</span><span class="token function">is_all_zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> t in self<span class="token punctuation">.</span>threads<span class="token punctuation">.</span><span class="token function">itervalues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
            <span class="token keyword">if</span> not t<span class="token punctuation">.</span>stats_delta<span class="token punctuation">.</span><span class="token function">is_all_zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
                <span class="token keyword">return</span> True
        <span class="token keyword">return</span> False

    def <span class="token function">get_ioprio</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>
        priorities <span class="token operator">=</span> <span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">get_ioprio</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t in self<span class="token punctuation">.</span>threads<span class="token punctuation">.</span><span class="token function">itervalues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>priorities<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">return</span> priorities<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token char">&#39;?dif&#39;</span>

    def <span class="token function">set_ioprio</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ioprio_class<span class="token punctuation">,</span> ioprio_data<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token keyword">for</span> thread in self<span class="token punctuation">.</span>threads<span class="token punctuation">.</span><span class="token function">itervalues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
            thread<span class="token punctuation">.</span><span class="token function">set_ioprio</span><span class="token punctuation">(</span>ioprio_class<span class="token punctuation">,</span> ioprio_data<span class="token punctuation">)</span>

    def <span class="token function">ioprio_sort_key</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token keyword">return</span> ioprio<span class="token punctuation">.</span><span class="token function">sort_key</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">get_ioprio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    def <span class="token function">get_thread</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tid<span class="token punctuation">,</span> taskstats_connection<span class="token punctuation">)</span><span class="token operator">:</span>
        thread <span class="token operator">=</span> self<span class="token punctuation">.</span>threads<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> None<span class="token punctuation">)</span>
        <span class="token keyword">if</span> not thread<span class="token operator">:</span>
            thread <span class="token operator">=</span> <span class="token function">ThreadInfo</span><span class="token punctuation">(</span>tid<span class="token punctuation">,</span> taskstats_connection<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>threads<span class="token punctuation">[</span>tid<span class="token punctuation">]</span> <span class="token operator">=</span> thread
        <span class="token keyword">return</span> thread

    def <span class="token function">update_stats</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token operator">:</span>
        stats_delta <span class="token operator">=</span> Stats<span class="token punctuation">.</span><span class="token function">build_all_zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> tid<span class="token punctuation">,</span> thread in self<span class="token punctuation">.</span>threads<span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
            <span class="token keyword">if</span> thread<span class="token punctuation">.</span>mark<span class="token operator">:</span>
                del self<span class="token punctuation">.</span>threads<span class="token punctuation">[</span>tid<span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token operator">:</span>
                stats_delta<span class="token punctuation">.</span><span class="token function">accumulate</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span>stats_delta<span class="token punctuation">,</span> stats_delta<span class="token punctuation">)</span>

        nr_threads <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>threads<span class="token punctuation">)</span>
        <span class="token keyword">if</span> not nr_threads<span class="token operator">:</span>
            <span class="token keyword">return</span> False

        stats_delta<span class="token punctuation">.</span>blkio_delay_total <span class="token operator">/=</span> nr_threads
        stats_delta<span class="token punctuation">.</span>swapin_delay_total <span class="token operator">/=</span> nr_threads

        self<span class="token punctuation">.</span>stats_delta <span class="token operator">=</span> stats_delta
        self<span class="token punctuation">.</span>stats_accum<span class="token punctuation">.</span><span class="token function">accumulate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stats_delta<span class="token punctuation">,</span> self<span class="token punctuation">.</span>stats_accum<span class="token punctuation">)</span>

        <span class="token keyword">return</span> True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码，无一例外都是从 /proc 目录下那些数字命名的子目录里获取数据。我们不妨打开 proc 目录观察一下，并且我们还要选择一个特定的、数字命名的子目录进入，如下所示：</p><figure><img src="`+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这是谷歌浏览器的进程，里面包含很多子目录，这些子目录中包括了<strong>进程的状态、属性、应用程序命令、打开的文件、IO、网络、虚拟内存空间、工作目录、权限、调度信息等大量信息数据</strong>。<u>关于进程的所有信息，我们从这里都可以找到</u>。而 iotop 也正是从这里获取数据，然后计算和显示的，这就是 iotop 的工作原理。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>这节课我们一起学习了两大监控 IO 操作的神器，即 iostat 和 iotop。它们俩在以后的性能调优路上，将是我们最忠诚的伙伴，一个观察系统全局 IO 情况，另一个用来查看单个进程的 IO 情况。有了它们，我们就能精确定位 Linux 服务器上 IO 性能瓶颈所在。</p><p>现在，让我们一起来回顾一下今天所学。首先我们安装了 iostat 和 iotop。由于 iostat 包含在 sysstat 中，需要安装 sysstat 软件包，才能得到 iostat。安装成功后，别忘了进行测试。</p><p>然后，我们学习了 iostat 怎么用，熟悉了它的选项和参数，以及 iostat 输出的数据表示什么。之后我们研究了 iostat 实现原理，它是通过读取 /proc 目录下的一些文件做到的。</p><p>iotop 工具是一个用 python 语言编写的工具，它能监视全局硬盘的 IO 性能和每个进程的 IO 情况，是一个全面的 IO 监视工具。和 iostat 一样，它也是通过读取 /proc 目录下每个进程目录中的一些文件，获取其中的数据，再经过计算把数据展示给我们。</p><p>这节课的导图如下所示，供你参考：</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>你是否想对 /proc 文件系统有更深的了解，写出更强大的监视工具呢？其实你需要的大部分数据源，都可以在 /proc 目录中找到，读取它们就能做出更符合自己业务需求的监视工具，赶快去大胆尝试吧。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请说一说 iostat 与 iotop 的不同之处？</p><p>欢迎你在留言区记录自己的收获或疑问，如果觉得这节课还不错，也别忘了推荐给自己身边的朋友。</p><blockquote><p>请教老师几个问题：<br> Q1：iostat显示的“4 CPU”是4个物理CPU还是四个核？<br> 文中的例子，在老师的电脑上，用iostat显示的是“4 CPU”，这应该是一个CPU的四个核吧。<br> Q2：“合并”的读/写请求是什么意思？<br> Q3：sda和sdb是两个硬盘吗？ 还是一个硬盘的两个不同分区？<br> 文中例子中，老师电脑上显示了sda和sdb，它们是两个硬盘吗？ 还是一个硬盘的两个不同分区？（一般认为电脑只会有一个硬盘，我猜想老师的电脑也是一个硬盘）<br> 作者回复:<br> 1、4核<br> 2、多个读写操作合并成一 个<br> 3、两个</p><hr><p>iotop需要启动su，会显示root下的详单，更详细的啊<br> 但缺点也明显，启动完需要关闭terminal然后再重启才行！<br> 作者回复: 是的</p></blockquote>',22);function O(z,L){const t=e("ExternalLinkIcon");return o(),i("div",null,[w,s("p",null,[n("我已经帮你下载好了代码，放在了课程的工程目录中。我们进入工程目录，就可以发现 iotop 是用 python 写的，入口点是 "),s("a",x,[n("iotop.py"),c(t)]),n(" 文件。")]),I])}const D=p(y,[["render",O],["__file","M33-iotop与iostat.html.vue"]]);export{D as default};
