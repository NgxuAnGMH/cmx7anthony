import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as p,c as a,d as o}from"./app-cdabc73c.js";const r="/assets/dd88d0dbf3a88b09d5e8fb6d9e3aea13-2973b611.jpeg",t="/assets/85f15ec667d09fd2d368822904029b32-5fee0e82.jpeg",c="/assets/2e96fe0985a4ae3bd7a58c345def29d3-4c4d92d2.jpeg",n="/assets/22b3f723ceee5950ac20a7b874dabbde-0baae989.jpeg",m="/assets/f16a1ae443418caca0dc2fc3cec200f6-739a2833.jpeg",s={},d=o('<h1 id="_26-superscalar和vliw-如何让cpu的吞吐率超过1" tabindex="-1"><a class="header-anchor" href="#_26-superscalar和vliw-如何让cpu的吞吐率超过1" aria-hidden="true">#</a> 26 | Superscalar和VLIW：如何让CPU的吞吐率超过1？</h1><p>到今天为止，专栏已经过半了。过去的 20 多讲里，我给你讲的内容，很多都是围绕着怎么提升 CPU 的性能这个问题展开的。</p><p>我们先回顾一下第 4 讲，不知道你是否还记得这个公式：</p><p>程序的 CPU 执行时间 = 指令数 × CPI × Clock Cycle Time</p><p>这个公式里，有一个叫 CPI 的指标。我们知道，CPI 的倒数，又叫作 IPC（Instruction Per Clock），也就是一个时钟周期里面能够执行的指令数，代表了 CPU 的吞吐率。那么，这个指标，放在我们前面几节反复优化流水线架构的 CPU 里，能达到多少呢？</p><p>答案是，最佳情况下，IPC 也只能到 1。因为无论做了哪些流水线层面的优化，即使做到了指令执行层面的乱序执行，<em>CPU 仍然只能在一个时钟周期里面，取一条指令</em>。</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这说明，无论指令后续能优化得多好，一个时钟周期也只能执行完这样一条指令，CPI 只能是 1。但是，我们现在用的 Intel CPU 或者 ARM 的 CPU，一般的 IPC 都能做到 2 以上，这是怎么做到的呢？</p><p>今天，我们就一起来看看，现代 CPU 都使用了什么“<code>黑科技</code>”。</p><h2 id="多发射与超标量-同一时间执行的两条指令" tabindex="-1"><a class="header-anchor" href="#多发射与超标量-同一时间执行的两条指令" aria-hidden="true">#</a> 多发射与超标量：同一时间执行的两条指令</h2><p>之前讲 CPU 的硬件组成的时候，我们把所有算术和逻辑运算都抽象出来，变成了一个 ALU 这样的“黑盒子”。你应该还记得第 13 讲到第 16 讲，关于加法器、乘法器、乃至浮点数计算的部分，其实整数的计算和浮点数的计算过程差异还是不小的。实际上，整数和浮点数计算的电路，在 CPU 层面也是分开的。</p><p>一直到 80386，我们的 CPU 都是没有专门的浮点数计算的电路的。当时的浮点数计算，都是用软件进行模拟的。所以，在 80386 时代，Intel 给 386 配了单独的 387 芯片，专门用来做浮点数运算。那个时候，你买 386 芯片的话，会有 386sx 和 386dx 这两种芯片可以选择。386dx 就是带了 387 浮点数计算芯片的，而 sx 就是不带浮点数计算芯片的。</p><p>其实，我们现在用的 Intel CPU 芯片也是一样的。虽然浮点数计算已经变成 CPU 里的一部分，但并不是所有计算功能都在一个 ALU 里面，真实的情况是，<em>我们会有多个 ALU</em>。这也是为什么，在第 24 讲讲乱序执行的时候，你会看到，其实指令的执行阶段，<em>是由很多个功能单元（FU）并行（Parallel）进行的</em>。</p><p>不过，在指令乱序执行的过程中，我们的<mark>取指令</mark>（IF）和<mark>指令译码</mark>（ID）部分并不是并行进行的。</p><p>既然指令的执行层面可以并行进行，为什么取指令和指令译码不行呢？<em>如果想要实现并行，该怎么办呢</em>？</p><p>其实只要我们把取指令和指令译码，<em>也一样通过增加硬件的方式，并行进行就好了</em>。我们可以一次性从内存里面取出多条指令，<em>然后分发给多个并行的指令译码器，进行译码</em>，然后对应交给不同的功能单元去处理。这样，我们在一个时钟周期里，能够完成的指令就不只一条了。IPC 也就能做到大于 1 了。</p><figure><img src="'+t+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这种 CPU 设计，我们叫作<strong>多发射</strong>（Mulitple Issue）和<strong>超标量</strong>（Superscalar）。</p><p>什么叫多发射呢？这个词听起来很抽象，其实它意思就是说，我们同一个时间，可能会同时把<code>多条指令</code>发射（Issue）到<code>不同的译码器</code>或者<code>不同的后续处理的流水线</code>中去。</p><p>在超标量的 CPU 里面，<em>有很多条并行的流水线</em>，而不是只有一条流水线。“超标量“这个词是说，本来我们在一个时钟周期里面，只能执行一个标量（Scalar）的运算。<em>在多发射的情况下</em>，我们就能够超越这个限制，同时进行多次计算。</p><figure><img src="'+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>你可以看我画的这个超标量设计的流水线示意图。仔细看，你应该能看到一个有意思的现象，<em>每一个功能单元（FU）的流水线的长度是不同的</em>。事实上，不同的功能单元的流水线长度本来就不一样。我们平时所说的 <code>14</code> 级流水线，指的通常是<code>进行整数计算指令</code>的流水线长度。如果是<strong>浮点数运算</strong>，实际的流水线长度<strong>则会更长一些</strong>。</p><h2 id="intel-的失败之作-安腾的超长指令字设计" tabindex="-1"><a class="header-anchor" href="#intel-的失败之作-安腾的超长指令字设计" aria-hidden="true">#</a> Intel 的失败之作：安腾的超长指令字设计</h2><p>无论是之前几讲里讲的乱序执行，还是现在更进一步的超标量技术，在实际的硬件层面，其实实施起来都挺麻烦的。这是因为，<em>在乱序执行和超标量的体系里面，我们的 CPU 要解决依赖冲突的问题</em>。这也就是前面几讲我们讲的冒险问题。</p><p>CPU 需要在指令执行之前，<em>去判断指令之间是否有依赖关系</em>。如果有对应的依赖关系，指令就不能分发到执行阶段。因为这样，上面我们所说的超标量 CPU 的多发射功能，又被称为<strong>动态多发射处理器</strong>。<code>这些对于依赖关系的检测，都会使得我们的 CPU 电路变得更加复杂</code>。</p><p>于是，计算机科学家和工程师们就又有了一个大胆的想法。我们能不能不把<em>分析和解决依赖关系</em>的事情，放在硬件里面，<em>而是放到软件里面来干呢</em>？</p><p>如果你还记得的话，我在第 4 讲也讲过，要想优化 CPU 的执行时间，关键就是拆解这个公式：</p><p>程序的 CPU 执行时间 = 指令数 × CPI × Clock Cycle Time</p><p>当时我们说过，这个公式里面，我们可以通过改进编译器来优化指令数这个指标。那接下来，我们就来看看一个非常大胆的 CPU 设计想法，叫作<strong>超长指令字设计</strong>（Very Long Instruction Word，VLIW）。这个设计呢，<em>不仅想让编译器来优化<code>指令数</code>，还想直接通过编译器，来优化 <code>CPI</code></em>。</p><p>围绕着这个设计的，是 Intel 一个著名的“史诗级”失败，也就是著名的 IA-64 架构的安腾（Itanium）处理器。只不过，这一次，责任不全在 Intel，还要拉上可以称之为硅谷起源的另一家公司，也就是惠普。</p><p>之所以称为“史诗”级失败，这个说法来源于惠普最早给这个架构取的名字，<strong>显式并发指令运算</strong>（Explicitly Parallel Instruction Computer），这个名字的缩写 <strong>EPIC</strong>，正好是“史诗”的意思。</p><p>好巧不巧，安腾处理器和和我之前给你介绍过的 Pentium 4 一样，在市场上是一个失败的产品。在经历了 12 年之久的设计研发之后，安腾一代只卖出了几千套。而安腾二代，在从 2002 年开始反复挣扎了 16 年之后，最终在 2018 年被 Intel 宣告放弃，退出了市场。自此，世上再也没有这个“史诗”服务器了。</p><p>那么，我们就来看看，这个超长指令字的安腾处理器是怎么回事儿。</p><p>在乱序执行和超标量的 CPU 架构里，<em>指令的前后依赖关系</em>，是由 <em>CPU 内部的硬件电路</em>来检测的。而到了<strong>超长指令字</strong>的架构里面，这个工作交给了<strong>编译器</strong>这个软件。</p><figure><img src="'+n+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我从专栏第 5 讲开始，就给你看了不少 C 代码到汇编代码和机器代码的对照。<em>编译器在这个过程中，其实也能够知道前后数据的依赖</em>。于是，我们可以让编译器<em>把没有依赖关系的代码位置进行交换</em>。然后，再把多条连续的指令<em>打包成一个指令包</em>。安腾的 CPU 就是把 3 条指令变成一个指令包。</p><img src="'+m+'" alt="img" style="zoom:25%;"><p>CPU 在运行的时候，不再是取一条指令，<em>而是取出一个指令包</em>。然后，<em>译码解析整个指令包</em>，解析出 3 条指令直接<em>并行运行</em>。可以看到，使用<strong>超长指令字</strong>架构的 CPU，同样是采用流水线架构的。也就是说，一组（Group）指令，仍然要经历多个时钟周期。同样的，下一组指令并不是等上一组指令执行完成之后再执行，而是在上一组指令的指令译码阶段，就开始取指令了。</p><p>值得注意的一点是，流水线停顿这件事情在<strong>超长指令字</strong>里面，很多时候也是由编译器来做的。除了停下整个处理器流水线，<strong>超长指令字</strong>的 CPU 不能在某个时钟周期停顿一下，等待前面依赖的操作执行完成。<em>编译器需要在适当的位置插入 NOP 操作，直接在编译出来的机器码里面</em>，就把流水线停顿这个事情在软件层面就安排妥当。</p><p>虽然安腾的设想很美好，Intel 也曾经希望能够让安腾架构成为替代 x86 的新一代架构，但是最终安腾还是在前前后后折腾将近 30 年后失败了。2018 年，Intel 宣告安腾 9500 会在 2021 年停止供货。</p><p>安腾失败的原因有很多，其中有一个重要的原因就是“<code>向前兼容</code>”。</p><p>一方面，<code>安腾处理器的指令集和 x86 是不同的</code>。这就意味着，原来 x86 上的所有程序是没有办法在安腾上运行的，而需要通过编译器重新编译才行。</p><p>另一方面，安腾处理器的 VLIW 架构决定了，<code>如果安腾需要提升并行度，就需要增加一个指令包里包含的指令数量</code>，比方说从 3 个变成 6 个。一旦这么做了，虽然同样是 VLIW 架构，<code>同样指令集的安腾 CPU，程序也需要重新编译</code>。因为原来编译器判断的依赖关系是在 3 个指令以及由 3 个指令组成的指令包之间，现在要变成 6 个指令和 6 个指令组成的指令包。<code>编译器需要重新编译</code>，交换指令顺序以及 NOP 操作，才能满足条件。<code>甚至，我们需要重新来写编译器</code>，才能让程序在新的 CPU 上跑起来。</p><p>于是，安腾就变成了<code>一个既不容易向前兼容，又不容易向后兼容的 CPU</code>。那么，它的失败也就不足为奇了。</p><p>可以看到，技术思路上的先进想法，在实际的业界应用上会遇到更多具体的实践考验。<strong>无论是指令集向前兼容性，还是对应 CPU 未来的扩展，在设计的时候，都需要更多地去考虑实践因素</strong>。</p><h2 id="总结延伸" tabindex="-1"><a class="header-anchor" href="#总结延伸" aria-hidden="true">#</a> 总结延伸</h2><p>这一讲里，我和你一起向 CPU 的性能发起了一个新的挑战：<em>让 CPU 的吞吐率，也就是 IPC 能够超过 1</em>。</p><p>我先是为你介绍了超标量，也就是 <code>Superscalar</code> 这个方法。超标量可以让 CPU <em>不仅</em>在指令执行阶段是并行的，在取指令和指令译码的时候，<em>也是并行的</em>。通过超标量技术，可以使得你所使用的 CPU 的 IPC 超过 1。</p><p>在 Intel 的 x86 的 CPU 里，从 Pentium 时代，第一次开始引入超标量技术，整个 CPU 的性能上了一个台阶。对应的技术，一直沿用到了现在。超标量技术和你之前看到的其他流水线技术一样，<em>依赖于在硬件层面，能够检测到对应的指令的先后依赖关系</em>，解决“冒险”问题。所以，它也使得 CPU 的电路变得更复杂了。</p><hr><p>因为这些复杂性，惠普和 Intel 又共同推出了著名的安腾处理器。通过在<mark>编译器</mark>层面，直接分析出指令的<em>前后依赖关系</em>。于是，硬件在代码编译之后，<em>就可以直接拿到调换好先后顺序的指令</em>。并且这些指令中，可以并行执行的部分，会打包在一起组成<mark>一个指令包</mark>。安腾处理器在取指令和指令译码的时候，拿到的不再是单个指令，而是这样一个指令包。并且在指令执行阶段，<em>可以并行执行指令包里所有的指令</em>。</p><p>虽然看起来，VLIW 在技术层面更具有颠覆性，不仅仅只是一个硬件层面的改造，<em>而且利用了软件层面的编译器</em>，来组合解决提升 CPU 指令吞吐率的问题。然而，最终 VLIW 却没有得到市场和业界的认可。（前后的扩展兼容问题）</p><p>惠普和 Intel 强强联合开发的安腾处理器命运多舛。从 1989 开始研发，直到 2001 年才发布了第一代安腾处理器。然而 12 年的开发过程后，第一代安腾处理器最终只卖出了几千套。而 2002 年发布的安腾 2 处理器，也没能拯救自己的命运。最终在 2018 年，Intel 宣布安腾退出市场。自此之后，市面上再没有能够大规模商用的 VLIW 架构的处理器了。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2><p>关于超标量和多发射的相关知识，你可以多看一看《<code>计算机组成与设计：硬件 / 软件接口</code>》的 4.10 部分。其中，4.10.1 和 4.10.2 的推测和静态多发射，其实就是今天我们讲的超长指令字（VLIW）的知识点。4.10.2 的动态多发射，其实就是今天我们讲的超标量（Superscalar）的知识点。</p><blockquote><p>在《计算机组成与设计：硬件、软件接口（第三版中文）》中，“指令级并行”和“多发射”应是属于章节6.9。</p></blockquote><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考" aria-hidden="true">#</a> 课后思考</h2><p>在超长指令字架构的 CPU 里面，我之前给你讲到的各种应对流水线冒险的方案还是有效的么？操作数前推、乱序执行，分支预测能用在这样的体系架构下么？安腾 CPU 里面是否有用到这些相关策略呢？</p><p>欢迎留言和我分享你的疑惑和见解。你也可以把今天的内容，分享给你的朋友，和他一起学习和进步。</p><blockquote><p>不能叫VLIW的失败，只能说是EPIC的失败。VLIW在配套专用编译器的专用芯片上，应用上来说应该是有前途的。只是不适合用在涉及到前后兼容的通用芯片上。</p><p>想知道在cpu里边是怎么并行执行的？一直觉得cpu是一个单线程的工作模式。<br> 作者回复: 你好，多核CPU、流水线、超线程、Superscalar都是各种“并行”执行的方式呀，可以仔细读一下这几讲。</p><p>虽然虽然VLIW失败了，但是有编译器优化的乱序指令这个做法应该一致沿用到现在吧。由编译器将没有依赖的指令放到一起执行，可以降低CPU硬件处理冲突的机会，也可以降低CPU乱序执行对指令预读长度的要求</p></blockquote>',60),i=[d];function l(g,C){return p(),a("div",null,i)}const I=e(s,[["render",l],["__file","D26-多发射与超标量.html.vue"]]);export{I as default};
