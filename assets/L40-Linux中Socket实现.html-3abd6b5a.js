import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,e as p,d as l}from"./app-cdabc73c.js";const i="/assets/313d5d8c3b3224633fab2bd121006aef-e60d4b7d.jpg",u={},r=l('<h1 id="_40-瞧一瞧linux-详解socket的接口实现" tabindex="-1"><a class="header-anchor" href="#_40-瞧一瞧linux-详解socket的接口实现" aria-hidden="true">#</a> 40 | 瞧一瞧Linux：详解socket的接口实现</h1><p>你好，我是 LMOS。</p><p>上节课，我们一起了解了套接字的工作机制和数据结构，但套接字有哪些基本接口实现呢？相信学完这节课，你就能够解决这个问题了。</p><p>今天我会和你探讨套接字从创建、协议接口注册与初始化过程，还会为你深入分析套接字系统，是怎样调用各个功能函数的。通过这节课，相信你可以学会基于套接字来编写网络应用程序。有了之前的基础，想理解这节课并不难，让我们正式开始吧。</p><h2 id="套接字接口-socket" tabindex="-1"><a class="header-anchor" href="#套接字接口-socket" aria-hidden="true">#</a> 套接字接口: socket</h2><p>套接字接口最初是 BSD 操作系统的一部分，在应用层与 TCP/IP 协议栈之间接供了一套标准的独立于协议的接口。</p><p>Linux 内核实现的套接字接口，将 UNIX 的“一切都是文件操作”的概念应用在了网络连接访问上，让应用程序可以用<mark>常规文件操作 API</mark> 访问<mark>网络连接</mark>。</p><p>从 TCP/IP 协议栈的角度来看，传输层以上的都是应用程序的一部分，Linux 与传统的 UNIX 类似，TCP/IP 协议栈驻留在内核中，与内核的其他组件共享内存。传输层以上执行的网络功能，都是在用户地址空间完成的。</p><p>Linux 使用内核套接字概念与用户空间套接字通信，这样可以让实现和操作变得更简单。Linux 提供了一套 API 和套接字数据结构，这些服务<strong>向下</strong>与内核接口，<strong>向上</strong>与用户空间接口，应用程序正是使用这一套 API 访问内核中的网络功能。</p><h2 id="套接字的创建-create" tabindex="-1"><a class="header-anchor" href="#套接字的创建-create" aria-hidden="true">#</a> 套接字的创建: create</h2><p>在应用程序使用 TCP/IP 协议栈的功能之前，我们必须调用<mark>套接字库函数 API</mark> 创建一个新的套接字，创建好以后，对库函数创建套接字的调用，就会转换为内核套接字创建函数的系统调用。</p><p>这时，完成的是通用套接字创建的初始化功能，<strong>跟具体的协议族并不相关</strong>。</p><p>这个过程具体是这样的，在<strong>应用程序</strong>中执行 socket 函数，socket 产生<mark>系统调用</mark>中断执行<strong>内核</strong>的<mark>套接字分路函数 sys_socketcall</mark>，在 sys_socketcall 套接字函数分路器中将调用传送到 <mark>sys_socket 函数</mark>，由 sys_socket 函数调用套接字的<mark>通用创建函数 sock_create</mark>。</p><p>sock_create 函数完成通用套接字创建、初始化任务后，再调用特定协议族的套接字创建函数。</p><p>这样描述你可能还没有直观感受，我特意画了图，帮你梳理 socket 创建的流程，你可以对照图片仔细体会调用过程。</p><img src="'+i+`" alt="img" style="zoom:15%;"><p>socket创建示意图</p><p>结合图解，我再用一个具体例子帮你加深理解，比如由 AF_INET 协议族的 inet_create 函数完成套接字与特定协议族的关联。</p><p>一个新的 struct socket 数据结构起始由 sock_create 函数创建，<strong>该函数直接调用 __sock_create 函数，__sock_create 函数的任务是为套接字预留需要的内存空间，由 sock_alloc 函数完成这项功能。</strong></p><p>这个 sock_alloc 函数不仅会为 struct socket 数据结构实例预留空间，也会为 struct inode 数据结构实例分配需要的内存空间，这样可以使两个数据结构的实例相关联。__sock_create 函数代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__sock_create</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">int</span> family<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> protocol<span class="token punctuation">,</span>
 <span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span><span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> kern<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">net_proto_family</span> <span class="token operator">*</span>pf<span class="token punctuation">;</span>
<span class="token comment">// 首先检验是否支持协议族</span>
<span class="token comment">/*
* 检查是否在内核支持的socket范围内
*/</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>family <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> family <span class="token operator">&gt;=</span> NPROTO<span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token operator">-</span>EAFNOSUPPORT<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> type <span class="token operator">&gt;=</span> SOCK_MAX<span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
<span class="token comment">/*
* 为新的套接字分配内存空间，分配成功后返回新的指针
*/</span>

sock <span class="token operator">=</span> <span class="token function">sock_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sock_alloc 函数如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span><span class="token function">sock_alloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">;</span>
    <span class="token comment">// 初始化一个可用的inode节点， 在fs/inode.c中</span>
    inode <span class="token operator">=</span> <span class="token function">new_inode</span><span class="token punctuation">(</span>sock_mnt<span class="token operator">-&gt;</span>mnt_sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">// 实际创建的是socket_alloc复合对象，因此要使用SOCKET_I宏从inode中取出关联的socket对象用于返回</span>
    sock <span class="token operator">=</span> <span class="token function">SOCKET_I</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">kmemcheck_annotate_bitfield</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 文件类型为套接字</span>
    inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">=</span> S_IFSOCK <span class="token operator">|</span> S_IRWXUGO<span class="token punctuation">;</span>
    inode<span class="token operator">-&gt;</span>i_uid <span class="token operator">=</span> <span class="token function">current_fsuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    inode<span class="token operator">-&gt;</span>i_gid <span class="token operator">=</span> <span class="token function">current_fsgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">percpu_add</span><span class="token punctuation">(</span>sockets_in_use<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> sock<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当<code>具体的协议</code>与新套接字相连时</strong>，其内部状态的管理由协议自身维护。</p><p>现在，函数将 struct socket 数据结构的 struct proto_ops *ops 设置为 NULL。随后，当某个协议族中的协议成员的套接字创建函数被调用时，ops 将指向协议实例的操作函数。这时将 struct socket 数据结构的 flags 数据域设置为 0，创建时还没有任何标志需要设置。</p><p>在之后的调用中，应用程序调用 send 或 receive 套接字库函数时会设置 flags 数据域。最后将其他两个数据域 sk 和 file 初始化为 NULL。sk 数据域随后会把由协议特有的套接字创建函数设置为指向内部套接字结构。file 将在调用 sock_ma_fd 函数时设置为分配的文件返回的指针。</p><p>文件指针用于访问打开套接字的虚拟文件系统的文件状态。在 sock_alloc 函数返回后，sock_create 函数调用协议族的套接字创建函数 err =pf-&gt;create(net, sock, protocol)，它通过访问 net_families 数组获取协议族的创建函数，对于 TCP/IP 协议栈，协议族将设置为 AF_INET。</p><h2 id="套接字的绑定-bind" tabindex="-1"><a class="header-anchor" href="#套接字的绑定-bind" aria-hidden="true">#</a> 套接字的绑定: bind</h2><p>创建完套接字后，应用程序需要调用 sys_bind 函数把套接字和地址绑定起来，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>asmlinkage <span class="token keyword">long</span> <span class="token function">sysbind</span> <span class="token punctuation">(</span>bind<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> umyaddr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> addrlen<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> address<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">,</span> fput_needed<span class="token punctuation">;</span>
 
  <span class="token comment">/*
   * 获取socket实例。
   */</span>
  sock <span class="token operator">=</span> <span class="token function">sockfd_lookup_light</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fput_needed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    err <span class="token operator">=</span> <span class="token function">move_addr_to_kernel</span><span class="token punctuation">(</span>umyaddr<span class="token punctuation">,</span> addrlen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      err <span class="token operator">=</span> <span class="token function">security_socket_bind</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>
               <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span>
               addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/*
       * 如果是TCP套接字，sock-&gt;ops指向的是inet_stream_ops，
       * sock-&gt;ops是在inet_create()函数中初始化，所以bind接口
       * 调用的是inet_bind()函数。
       */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span>
        err <span class="token operator">=</span> sock<span class="token operator">-&gt;</span>ops<span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span>
                  <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span>
                  <span class="token operator">&amp;</span>address<span class="token punctuation">,</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fput_light</span><span class="token punctuation">(</span>sock<span class="token operator">-&gt;</span>file<span class="token punctuation">,</span> fput_needed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合代码，我们可以看到，sys_bind 函数首先会查找套接字对应的 socket 实例，调用 <strong>sockfd_lookup_light</strong>。在绑定之前，将用户空间的地址拷贝到内核空间的缓冲区中，在拷贝过程中会检查用户传入的地址是否正确。</p><p>等上述的准备工作完成后，就会调用 <strong>inet_bind 函数</strong>来完成绑定操作。<strong>inet_bind</strong> 函数代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">inet_bind</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>uaddr<span class="token punctuation">,</span> <span class="token keyword">int</span> addr_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token operator">*</span><span class="token punctuation">)</span>uaddr<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk <span class="token operator">=</span> sock<span class="token operator">-&gt;</span>sk<span class="token punctuation">;</span>  
    <span class="token keyword">struct</span> <span class="token class-name">inet_sock</span> <span class="token operator">*</span>inet <span class="token operator">=</span> <span class="token function">inet_sk</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> snum<span class="token punctuation">;</span>
    <span class="token keyword">int</span> chk_addr_ret<span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token operator">-&gt;</span>sk_prot<span class="token operator">-&gt;</span>bind<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* 如果传输层接口上实现了bind调用，则回调它。目前只有SOCK_RAW类型的传输层实现了该接口raw_bind */</span>
        err <span class="token operator">=</span> sk<span class="token operator">-&gt;</span>sk_prot<span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> uaddr<span class="token punctuation">,</span> addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    err <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>addr_len <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    err <span class="token operator">=</span> <span class="token operator">-</span>EADDRNOTAVAIL<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sysctl_ip_nonlocal_bind <span class="token operator">&amp;&amp;</span><span class="token comment">/* 必须绑定到本地接口的地址 */</span>
        <span class="token operator">!</span>inet<span class="token operator">-&gt;</span>freebind <span class="token operator">&amp;&amp;</span>
        addr<span class="token operator">-&gt;</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">!=</span> INADDR_ANY <span class="token operator">&amp;&amp;</span><span class="token comment">/* 绑定地址不合法 */</span>
        chk_addr_ret <span class="token operator">!=</span> RTN_LOCAL <span class="token operator">&amp;&amp;</span>
        chk_addr_ret <span class="token operator">!=</span> RTN_MULTICAST <span class="token operator">&amp;&amp;</span>
        chk_addr_ret <span class="token operator">!=</span> RTN_BROADCAST<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>

    snum <span class="token operator">=</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>addr<span class="token operator">-&gt;</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    err <span class="token operator">=</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>snum <span class="token operator">&amp;&amp;</span> snum <span class="token operator">&lt;</span> PROT_SOCK <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">capable</span><span class="token punctuation">(</span>CAP_NET_BIND_SERVICE<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>

    <span class="token function">lock_sock</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 对套接口进行加锁，因为后面要对其状态进行判断 */</span>

    <span class="token comment">/* Check these errors (active socket, double bind). */</span>
    err <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token comment">/**
     * 如果状态不为CLOSE，表示套接口已经处于活动状态，不能再绑定
     * 或者已经指定了本地端口号，也不能再绑定
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token operator">-&gt;</span>sk_state <span class="token operator">!=</span> TCP_CLOSE <span class="token operator">||</span> inet<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span>
        <span class="token keyword">goto</span> out_release_sock<span class="token punctuation">;</span>

    <span class="token comment">/* 设置地址到传输控制块中 */</span>
    inet<span class="token operator">-&gt;</span>rcv_saddr <span class="token operator">=</span> inet<span class="token operator">-&gt;</span>saddr <span class="token operator">=</span> addr<span class="token operator">-&gt;</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">;</span>
    <span class="token comment">/* 如果是广播或者多播地址，则源地址使用设备地址。 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>chk_addr_ret <span class="token operator">==</span> RTN_MULTICAST <span class="token operator">||</span> chk_addr_ret <span class="token operator">==</span> RTN_BROADCAST<span class="token punctuation">)</span>
        inet<span class="token operator">-&gt;</span>saddr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/* Use device */</span>

    <span class="token comment">/* 调用传输层的get_port来进行地址绑定。如tcp_v4_get_port或udp_v4_get_port */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token operator">-&gt;</span>sk_prot<span class="token operator">-&gt;</span><span class="token function">get_port</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> snum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        …
    <span class="token punctuation">}</span>

    <span class="token comment">/* 设置标志，表示已经绑定了本地地址和端口 */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>inet<span class="token operator">-&gt;</span>rcv_saddr<span class="token punctuation">)</span>
        sk<span class="token operator">-&gt;</span>sk_userlocks <span class="token operator">|=</span> SOCK_BINDADDR_LOCK<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>snum<span class="token punctuation">)</span>
        sk<span class="token operator">-&gt;</span>sk_userlocks <span class="token operator">|=</span> SOCK_BINDPORT_LOCK<span class="token punctuation">;</span>
    inet<span class="token operator">-&gt;</span>sport <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>inet<span class="token operator">-&gt;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 还没有连接到对方，清除远端地址和端口 */</span>
    inet<span class="token operator">-&gt;</span>daddr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    inet<span class="token operator">-&gt;</span>dport <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">/* 清除路由缓存 */</span>
    <span class="token function">sk_dst_reset</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
out_release_sock<span class="token operator">:</span>
    <span class="token function">release_sock</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token operator">:</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="主动连接-connect" tabindex="-1"><a class="header-anchor" href="#主动连接-connect" aria-hidden="true">#</a> 主动连接: connect</h2><p>因为应用程序处理的是面向连接的网络服务（SOCK_STREAM 或 SOCK_SEQPACKET），所以在交换数据之前，需要在请求连接服务的进程（客户）与提供服务的进程（服务器）之间建立连接。</p><p>当应用程序调用 <strong>connect</strong> 函数发出连接请求时，内核会启动函数 <strong>sys_connect</strong>，详细代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">__sys_connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> __user <span class="token operator">*</span>uservaddr<span class="token punctuation">,</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">fd</span> f<span class="token punctuation">;</span>
  f <span class="token operator">=</span> <span class="token function">fdget</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> address<span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">move_addr_to_kernel</span><span class="token punctuation">(</span>uservaddr<span class="token punctuation">,</span> addrlen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span>
            <span class="token comment">// 调用__sys_connect_file</span>
      ret <span class="token operator">=</span> <span class="token function">__sys_connect_file</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">,</span> addrlen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fdput</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连接成功会返回 socket 的描述符，否则会返回一个错误码。</p><h2 id="监听套接字-listen" tabindex="-1"><a class="header-anchor" href="#监听套接字-listen" aria-hidden="true">#</a> 监听套接字: listen</h2><p>调用 listen 函数时，应用程序触发内核的 <strong>sys_listen</strong> 函数，把套接字描述符 fd 对应的套接字设置为监听模式，观察连接请求。详细代码你可以看看后面的内容。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">__sys_listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">,</span> fput_needed<span class="token punctuation">;</span>
  <span class="token keyword">int</span> somaxconn<span class="token punctuation">;</span>
    <span class="token comment">// 通过套接字描述符找到struct socket</span>
  sock <span class="token operator">=</span> <span class="token function">sockfd_lookup_light</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fput_needed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    somaxconn <span class="token operator">=</span> <span class="token function">sock_net</span><span class="token punctuation">(</span>sock<span class="token operator">-&gt;</span>sk<span class="token punctuation">)</span><span class="token operator">-&gt;</span>core<span class="token punctuation">.</span>sysctl_somaxconn<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>backlog <span class="token operator">&gt;</span> somaxconn<span class="token punctuation">)</span>
      backlog <span class="token operator">=</span> somaxconn<span class="token punctuation">;</span>
    err <span class="token operator">=</span> <span class="token function">security_socket_listen</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span>
            <span class="token comment">// 根据套接字类型调用监听函数</span>
      err <span class="token operator">=</span> sock<span class="token operator">-&gt;</span>ops<span class="token operator">-&gt;</span><span class="token function">listen</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fput_light</span><span class="token punctuation">(</span>sock<span class="token operator">-&gt;</span>file<span class="token punctuation">,</span> fput_needed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="被动接收连接-accept" tabindex="-1"><a class="header-anchor" href="#被动接收连接-accept" aria-hidden="true">#</a> 被动接收连接: accept</h2><p>前面说过主动连接，我们再来看看被动接受连接的情况。接受一个客户端的连接请求会调用 <strong>accept</strong> 函数，应用程序触发内核函数 <strong>sys_accept</strong>，等待接收连接请求。如果允许连接，则重新创建一个代表该连接的套接字，并返回其套接字描述符，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">__sys_accept4_file</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> file_flags<span class="token punctuation">,</span>
           <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> __user <span class="token operator">*</span>upeer_sockaddr<span class="token punctuation">,</span>
           <span class="token keyword">int</span> __user <span class="token operator">*</span>upeer_addrlen<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>
           <span class="token keyword">unsigned</span> <span class="token keyword">long</span> nofile<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">,</span> <span class="token operator">*</span>newsock<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>newfile<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">,</span> len<span class="token punctuation">,</span> newfd<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> address<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>SOCK_CLOEXEC <span class="token operator">|</span> SOCK_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>SOCK_NONBLOCK <span class="token operator">!=</span> O_NONBLOCK <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> SOCK_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">)</span>
    flags <span class="token operator">=</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> <span class="token operator">~</span>SOCK_NONBLOCK<span class="token punctuation">)</span> <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">;</span>
  sock <span class="token operator">=</span> <span class="token function">sock_from_file</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sock<span class="token punctuation">)</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  err <span class="token operator">=</span> <span class="token operator">-</span>ENFILE<span class="token punctuation">;</span>
    <span class="token comment">// 创建一个新套接字</span>
  newsock <span class="token operator">=</span> <span class="token function">sock_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newsock<span class="token punctuation">)</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  newsock<span class="token operator">-&gt;</span>type <span class="token operator">=</span> sock<span class="token operator">-&gt;</span>type<span class="token punctuation">;</span>
  newsock<span class="token operator">-&gt;</span>ops <span class="token operator">=</span> sock<span class="token operator">-&gt;</span>ops<span class="token punctuation">;</span>
  <span class="token function">__module_get</span><span class="token punctuation">(</span>newsock<span class="token operator">-&gt;</span>ops<span class="token operator">-&gt;</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
  newfd <span class="token operator">=</span> <span class="token function">__get_unused_fd_flags</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> nofile<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>newfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    err <span class="token operator">=</span> newfd<span class="token punctuation">;</span>
    <span class="token function">sock_release</span><span class="token punctuation">(</span>newsock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  newfile <span class="token operator">=</span> <span class="token function">sock_alloc_file</span><span class="token punctuation">(</span>newsock<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> sock<span class="token operator">-&gt;</span>sk<span class="token operator">-&gt;</span>sk_prot_creator<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>newfile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    err <span class="token operator">=</span> <span class="token function">PTR_ERR</span><span class="token punctuation">(</span>newfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put_unused_fd</span><span class="token punctuation">(</span>newfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  err <span class="token operator">=</span> <span class="token function">security_socket_accept</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> newsock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token keyword">goto</span> out_fd<span class="token punctuation">;</span>
    <span class="token comment">// 根据套接字类型调用不同的函数inet_accept</span>
  err <span class="token operator">=</span> sock<span class="token operator">-&gt;</span>ops<span class="token operator">-&gt;</span><span class="token function">accept</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> newsock<span class="token punctuation">,</span> sock<span class="token operator">-&gt;</span>file<span class="token operator">-&gt;</span>f_flags <span class="token operator">|</span> file_flags<span class="token punctuation">,</span>
          false<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> out_fd<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>upeer_sockaddr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    len <span class="token operator">=</span> newsock<span class="token operator">-&gt;</span>ops<span class="token operator">-&gt;</span><span class="token function">getname</span><span class="token punctuation">(</span>newsock<span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      err <span class="token operator">=</span> <span class="token operator">-</span>ECONNABORTED<span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out_fd<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        <span class="token comment">// 从内核复制到用户空间</span>
    err <span class="token operator">=</span> <span class="token function">move_addr_to_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span>
          len<span class="token punctuation">,</span> upeer_sockaddr<span class="token punctuation">,</span> upeer_addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> out_fd<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">/* File flags are not inherited via accept() unlike another OSes. */</span>
  <span class="token function">fd_install</span><span class="token punctuation">(</span>newfd<span class="token punctuation">,</span> newfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
  err <span class="token operator">=</span> newfd<span class="token punctuation">;</span>
out<span class="token operator">:</span>
  <span class="token keyword">return</span> err<span class="token punctuation">;</span>
out_fd<span class="token operator">:</span>
  <span class="token function">fput</span><span class="token punctuation">(</span>newfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">put_unused_fd</span><span class="token punctuation">(</span>newfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个新的套接字描述符与最初创建套接字时，设置的套接字地址族与套接字类型、使用的协议一样。原来创建的套接字不与连接关联，它继续在原套接字上侦听，以便接收其他连接请求。</p><h2 id="发送数据-send" tabindex="-1"><a class="header-anchor" href="#发送数据-send" aria-hidden="true">#</a> 发送数据: send</h2><p>套接字应用中最简单的传送函数是 <strong>send</strong>，send 函数的作用类似于 write，但 send 函数允许应用程序指定标志，规定如何对待传送数据。调用 send 函数时，会触发内核的 <strong>sys_send</strong> 函数，把发送缓冲区的数据发送出去。</p><p><strong>sys_send</strong> 函数具体调用流程如下。</p><ul><li><p>\\1. 应用程序的数据被复制到内核后，sys_send 函数调用 <strong>sock_sendmsg</strong>，依据协议族类型来执行发送操作。</p></li><li><p>\\2. 如果是 INET 协议族套接字，sock_sendmsg 将调用 inet_sendmsg 函数。</p></li><li><p>\\3. 如果采用 TCP 协议，inet_sendmsg 函数将调用 tcp_sendmsg，并按照 TCP 协议规则来发送数据包。</p></li></ul><p>send 函数返回发送成功，并不意味着在连接的另一端的进程可以收到数据，这里只能保证发送 send 函数执行成功，发送给网络设备驱动程序的数据没有出错。</p><h2 id="接收数据-recv" tabindex="-1"><a class="header-anchor" href="#接收数据-recv" aria-hidden="true">#</a> 接收数据: recv</h2><p><strong>recv</strong> 函数与文件读 read 函数类似，recv 函数中可以指定标志来控制如何接收数据，调用 recv 函数时，应用程序会触发内核的 sys_recv 函数，把网络中的数据递交到应用程序。当然，read、recvfrom 函数也会触发 sys_recv 函数。具体流程如下。</p><ul><li><p>\\1. 为把内核的网络数据转入应用程序的接收缓冲区，sys_recv 函数依次调用 <strong>sys_recvfrom、sock_recvfrom 和 __sock_recvmsg</strong>，并依据协议族类型来执行具体的接收操作。</p></li><li><p>\\2. 如果是 INET 协议族套接字，__sock_recvmsg 将调用 sock_common_recvmsg 函数。</p></li><li><p>\\3. 如果采用 TCP 协议，sock_common_recvmsg 函数将调用 tcp_recvmsg，按照 TCP 协议规则来接收数据包</p></li></ul><p>如果接收方想获取数据包发送端的标识符，应用程序可以调用 <strong>sys_recvfrom</strong> 函数来获取数据包发送方的源地址，下面是 <strong>sys_recvfrom</strong> 函数的实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">__sys_recvfrom</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> __user <span class="token operator">*</span>ubuf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>
       <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> __user <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> __user <span class="token operator">*</span>addr_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">iovec</span> iov<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> msg<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sockaddr_storage</span> address<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">,</span> err2<span class="token punctuation">;</span>
  <span class="token keyword">int</span> fput_needed<span class="token punctuation">;</span>
  err <span class="token operator">=</span> <span class="token function">import_single_range</span><span class="token punctuation">(</span>READ<span class="token punctuation">,</span> ubuf<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token operator">&amp;</span>iov<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">.</span>msg_iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token comment">// 通过套接字描述符找到struct socket</span>
  sock <span class="token operator">=</span> <span class="token function">sockfd_lookup_light</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fput_needed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sock<span class="token punctuation">)</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  msg<span class="token punctuation">.</span>msg_control <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  msg<span class="token punctuation">.</span>msg_controllen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">/* Save some cycles and don&#39;t copy the address if not needed */</span>
  msg<span class="token punctuation">.</span>msg_name <span class="token operator">=</span> addr <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>address <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token comment">/* We assume all kernel code knows the size of sockaddr_storage */</span>
  msg<span class="token punctuation">.</span>msg_namelen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  msg<span class="token punctuation">.</span>msg_iocb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  msg<span class="token punctuation">.</span>msg_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sock<span class="token operator">-&gt;</span>file<span class="token operator">-&gt;</span>f_flags <span class="token operator">&amp;</span> O_NONBLOCK<span class="token punctuation">)</span>
    flags <span class="token operator">|=</span> MSG_DONTWAIT<span class="token punctuation">;</span>
    <span class="token comment">// sock_recvmsg为具体的接收函数</span>
  err <span class="token operator">=</span> <span class="token function">sock_recvmsg</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> addr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从内核复制到用户空间</span>
    err2 <span class="token operator">=</span> <span class="token function">move_addr_to_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address<span class="token punctuation">,</span>
           msg<span class="token punctuation">.</span>msg_namelen<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      err <span class="token operator">=</span> err2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">fput_light</span><span class="token punctuation">(</span>sock<span class="token operator">-&gt;</span>file<span class="token punctuation">,</span> fput_needed<span class="token punctuation">)</span><span class="token punctuation">;</span>
out<span class="token operator">:</span>
  <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关闭连接-close-shutdown" tabindex="-1"><a class="header-anchor" href="#关闭连接-close-shutdown" aria-hidden="true">#</a> 关闭连接: close/shutdown</h2><p>最后，我们来看看如何关闭连接。当应用程序调用 shutdown 函数关闭连接时，内核会启动函数 sys_shutdown，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">__sys_shutdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> how<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> err<span class="token punctuation">,</span> fput_needed<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">;</span>
  sock <span class="token operator">=</span> <span class="token function">sockfd_lookup_light</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fput_needed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 通过套接字，描述符找到对应的结构*/</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sock <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    err <span class="token operator">=</span> <span class="token function">security_socket_shutdown</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> how<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span>
             <span class="token comment">/* 根据套接字协议族调用关闭函数*/</span>
      err <span class="token operator">=</span> sock<span class="token operator">-&gt;</span>ops<span class="token operator">-&gt;</span><span class="token function">shutdown</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> how<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">fput_light</span><span class="token punctuation">(</span>sock<span class="token operator">-&gt;</span>file<span class="token punctuation">,</span> fput_needed<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>好，这节课的内容告一段落了，我来给你做个总结。这节课我们继续研究了套接字在 Linux 内核中的实现。</p><p>套接字是 UNIX 兼容系统的一大特色，Linux 在此基础上实现了内核套接字与应用程序套接字接口，在用户地址空间与内核地址空间之间提供了一套标准接口，实现应用套接字库函数与内核功能之间的一一对应，简化了用户地址空间与内核地址空间交换数据的过程。</p><p>通过应用套接字 API 编写网络应用程序，我们可以利用 Linux 内核 TCP/IP 协议栈提供的网络通信服务，在网络上实现应用数据快速、有效的传送。除此之外，套接字编程还可以使我们获取网络、主机的各种管理、统计信息。</p><p>创建套接字应用程序一般要经过后面这 6 个步骤。</p><ul><li><p>\\1. 创建套接字。</p></li><li><p>\\2. 将套接字与地址绑定，设置套接字选项。</p></li><li><p>\\3. 建立套接字之间的连接。</p></li><li><p>\\4. 监听套接字</p></li><li><p>\\5. 接收、发送数据。</p></li><li><p>\\6. 关闭、释放套接字。</p></li></ul><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>我们了解的 TCP 三次握手，发生在 socket 的哪几个函数中呢？</p>`,66),k={href:"https://blog.csdn.net/tennysonsky/article/details/45621341",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"课后讨论",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#课后讨论","aria-hidden":"true"},"#"),s(" 课后讨论")],-1),v=n("p",null,[s("老师，有一个问题，tcp在调用listen的时候，有全连接队列的概念，一般上限是128。但是问题是，我们比如实现单机百万链接的时候，一个server端的源组（server_ip+port），比如有65535个client，那会不会受限于这个全连接队列？"),n("br"),s(" 作者回复: 会，但 linux可以修改 /proc/sys/net/core/somaxconn")],-1),m={href:"https://mp.weixin.qq.com/s/vlrzGc5bFrPIr9a7HIr2eA",target:"_blank",rel:"noopener noreferrer"};function b(_,f){const a=e("ExternalLinkIcon");return o(),c("div",null,[r,n("blockquote",null,[n("p",null,[s("今天的问题不好回答，因为文中无明显三次握手的代码，而且三次握手的机制其实比较复杂，涉及到几个状态和几个队列之间的切换，笼统的 connect 和 accept 函数是说不清楚的，感兴趣可以看看这里： "),n("a",k,[s("https://blog.csdn.net/tennysonsky/article/details/45621341"),p(a)]),s(" 当然这些不能全信，所以还是得自己看linux内核代码，待我看了再来补充")])]),d,v,n("p",null,[s("这里有一篇三次握手的源码图解："),n("a",m,[s("https://mp.weixin.qq.com/s/vlrzGc5bFrPIr9a7HIr2eA"),p(a)])])])}const w=t(u,[["render",b],["__file","L40-Linux中Socket实现.html.vue"]]);export{w as default};
