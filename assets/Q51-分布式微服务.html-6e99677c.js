import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c,a as e,b as a,e as n,d as l}from"./app-cdabc73c.js";const t="/assets/a5b27a27cbd17eae12cba3132e18f9d4-f4c40264.jpg",o="/assets/f4771dc10e9ff54dcae40bd47dbe4566-ad32ea37.jpg",p="/assets/d3ea66eebfeb6924fb3cfc8d85f6f5c4-235527a2.jpg",u="/assets/8317bff45ce57f0637793592eyy30078-13ce9213.jpg",m="/assets/30d0ed9c4c373ec8bcf3c1ed666b1114-73a4c78b.jpg",b="/assets/38ef6659e89035cd925c3b2071fac9a4-8c034ec1.jpg",v="/assets/a8ff057c39670f4a6888bef3886b71d7-7e3834b4.jpg",h={},g=l('<h1 id="加餐05-分布式微服务与智能saas" tabindex="-1"><a class="header-anchor" href="#加餐05-分布式微服务与智能saas" aria-hidden="true">#</a> 加餐05｜分布式微服务与智能SaaS</h1><p>你好，我是 LMOS。</p><p>在之前的课程中，我们学习到了云计算的 IaaS、PaaS 层的技术。</p><p>这节课，让我们一起了解一下分布式微服务和智能 SaaS 层应用开发技术吧。它们可以帮助你构建出可扩展、可维护更强的应用程序，这对于任何计算机开发人员来说，都是很有价值的。</p><h2 id="初识微服务架构" tabindex="-1"><a class="header-anchor" href="#初识微服务架构" aria-hidden="true">#</a> 初识微服务架构</h2><p>我们先简单聊聊微服务架构是什么，优缺点有哪些。</p><h3 id="什么是微服务架构" tabindex="-1"><a class="header-anchor" href="#什么是微服务架构" aria-hidden="true">#</a> 什么是微服务架构</h3><p>微服务架构是一种架构风格，它提倡将单个应用拆分成若干个小的服务，每个服务运行在其独立的进程中，并且通过网络调用来协同工作。每个服务都围绕着特定的业务能力构建，并且通常会使用不同的技术栈来实现。</p><p>这种架构风格有利于维护和开发，因为每个服务都相对较小，团队可以独立开发和部署。同时，微服务架构也支持快速迭代和持续交付，因为单个服务的变更不会影响整个系统的稳定性。</p><p>微服务架构当然也不是银弹，它也有自己的优点和缺点，为了方便理解，我整理了一张表格来帮你做对比。</p><img src="'+t+'" alt="img" style="zoom:25%;"><h3 id="微服务架构的关键要素" tabindex="-1"><a class="header-anchor" href="#微服务架构的关键要素" aria-hidden="true">#</a> 微服务架构的关键要素</h3><p>接下来，我们看看微服务架构中有哪些关键要素。后面是简化版的微服务架构图。</p><figure><img src="'+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从图中我们可以看出，微服务架构的核心要素包括五个部分。</p><ol><li><p>第一部分是<mark>服务注册与发现</mark>，微服务架构中的服务需要使用服务注册中心进行注册和发现，使得服务之间能够互相调用。</p></li><li><p>第二部分是<mark>负载均衡</mark>。在微服务架构中，负载均衡组件会将请求按照一定规则，转发到不同的服务实例上，从而提高系统的吞吐量和可用性。</p></li><li><p>第三部分是<mark>服务调用</mark>。微服务架构中的服务之间通常使用远程过程调用（RPC）或者 HTTP 接口来进行通信。</p></li><li><p>第四部分是<mark>服务熔断和降级</mark>。在微服务架构中，服务之间的依赖关系非常复杂，为了防止出现故障扩散并保证系统可用性，我们需要使用服务熔断和降级机制来保护服务。</p></li><li><p>最后还有第五部分，<mark>监控和日志</mark>。在微服务架构中，需要对每个服务的性能和故障情况进行监控和记录，以便及时发现和解决问题。</p></li></ol><p>这里我也列出了微服务架构的其他要素，你可以参考后面的表格。</p><img src="'+p+'" alt="img" style="zoom:25%;"><p>看完上面构成微服务的关键要素之后，不知道你会不会发出感叹——这么多组件，我要是一个一个实现一遍，那需要花多长时间啊！</p><p>其实不用慌，目前业界已经有了很多优秀的开源实践了，基于 Spring Cloud 框架的 Spring Cloud Alibaba 就是最佳实践之一，接下来我们就来简单了解一下这个框架。</p><h2 id="spring-cloud-alibaba-的架构与核心组件" tabindex="-1"><a class="header-anchor" href="#spring-cloud-alibaba-的架构与核心组件" aria-hidden="true">#</a> Spring Cloud Alibaba 的架构与核心组件</h2><p>Spring Cloud Alibaba 是一个基于 Spring Cloud 实现的分布式微服务框架，它整合了阿里巴巴的中间件产品，并提供了与 Spring Cloud 相似的编程模型和开发体验。Spring Cloud Alibaba 的架构基于 Spring Cloud 实现，主要组件可以参考后面的表格。</p><img src="'+u+'" alt="img" style="zoom:25%;"><p>Spring Cloud Alibaba 的开发模型基于 Spring Cloud 的注解驱动开发，<em>使用者通过在代码中使用注解的方式，即可使用这些组件的功能</em>。例如，使用者可以用 <code>@EnableNacosDiscovery 注解</code>来启用 Nacos 服务发现功能，使用 <code>@SentinelResource 注解</code>来保护服务的流量和熔断降级等。</p><p>Spring Cloud Alibaba 还提供了与 Spring Cloud 相似的编程模型和开发体验，方便使用者将 Spring Cloud Alibaba 与现有的 Spring Cloud 应用轻松地集成起来。比方说，可以使用 Spring Cloud 的 Feign 客户端来调用 Dubbo 服务，或者使用 Spring Cloud 的 Stream 框架来使用 RocketMQ 等。</p><p>Spring Cloud Alibaba 这个框架还提供了许多辅助工具和插件。例如，使用者可以使用 Alibaba Cloud 的扩展来快速部署应用到阿里云服务器，或者使用 Seata 扩展来实现分布式事务处理。</p><p>总之，Spring Cloud Alibaba 是一个功能强大的分布式微服务框架，可以帮助使用者快速构建基于阿里巴巴中间件的微服务应用。它提供了丰富的组件和工具，方便我们轻松地实现服务注册、发现、负载均衡、流量控制、熔断降级、分布式事务等功能。</p><h2 id="为什么选择-spring-cloud-alibaba-构建微服务" tabindex="-1"><a class="header-anchor" href="#为什么选择-spring-cloud-alibaba-构建微服务" aria-hidden="true">#</a> 为什么选择 Spring Cloud Alibaba 构建微服务</h2><p>使用 Spring Cloud Alibaba 的优势，我同样梳理了表格，你可以参考一下。</p><img src="'+m+'" alt="img" style="zoom:25%;"><p>然而正是因为 Spring Cloud Alibaba 功能太过强大，组件比较多，为了节约搭建微服务脚手架的时间精力，我们选择了 RuoYi-Cloud 这款脚手架进行二次开发。</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图来自 RuoYi-Cloud 官网，RuoYi-Cloud 是一套基于 Spring Cloud Alibaba 的企业级快速开发脚手架，你会在里面发现很多经典技术的组合（Spring Boot、Spring Cloud Alibaba、Vue、Element）。</p>',33),k={href:"http://doc.ruoyi.vip/",target:"_blank",rel:"noopener noreferrer"},f=l('<p>RuoYi-Cloud 功能十分强大，<em>非常适合我们专注于业务进行 SaaS 应用开发。里面内置了很多开箱即用的模块</em>，比如系统参数、日志管理、菜单及按钮授权、数据权限、部门管理、角色用户、代码生成等等。此外，它还支持在线定时任务的配置和集群部署以及多数据源的管理。</p><h2 id="智能-saas-应用开发" tabindex="-1"><a class="header-anchor" href="#智能-saas-应用开发" aria-hidden="true">#</a> 智能 SaaS 应用开发</h2><p>前面聊到的这些技术具体怎么落地应用呢？我们接着往下看。</p><p>SCRM（Social Customer Relationship Management）系统是一种分布式智能的软件即服务（SaaS）应用，旨在帮助企业管理和提升客户关系。</p><p>SCRM 系统通常涵盖<em>跨越多个渠道的客户互动</em>，如<u>电子邮件、IM、社交媒体、网站、移动应用</u>等。这些互动可以是实时的，也可以是异步的，因为面向的用户量比较大、业务逻辑比较复杂，<strong>所以比较适合使用分布式微服务架构进行设计</strong>。</p><p>而 LinkWeChat 则是一款基于<mark>企业微信</mark>的<mark>开源 SCRM 系统</mark>，是我参与设计与开发的。它比较适合作为分布式微服务架构在业务中落地实践的学习案例，这里也简单分享一下。</p><h3 id="linkwechat" tabindex="-1"><a class="header-anchor" href="#linkwechat" aria-hidden="true">#</a> LinkWechat</h3><p>LinkWeChat 项目基于 RuoYi-Cloud 后台开发框架，这离不开 RuoYi-Cloud 的开源。</p><p>前后端的技术栈你可以对照表格简单了解一下。</p><img src="'+v+`" alt="img" style="zoom:25%;"><p>这里也简单列了一下这个项目的结构。首先是前端结构。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── linkwe-pc      // 后台项目
├── linkwe-mobile    // 移动端项目包含移动工作台、任务宝、群裂变等H5）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是后端结构。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── linkwe-api                // 系统业务接口模块
├── linkwe-auth               // 角色权限部门用户认证等模块
├── linkwe-common             // 公共组件模块
├── linkwe-fileservice        // 文件服务模块
├── linkwe-framework        // 框架配置
├── linkwe-gateway            // 网关服务
├── linkwe-scheduler        // 定时任务相关模块
├── linkwe-service            // 系统service层抽取，与数据库相关交互
├── linkwe-wecome             // 企微接口实现
├── linkwe-wx-api             // 系统中设计微信公众号相关接口模块
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于容器的-linkwechat-项目部署实践" tabindex="-1"><a class="header-anchor" href="#基于容器的-linkwechat-项目部署实践" aria-hidden="true">#</a> 基于容器的 LinkWechat 项目部署实践</h3><p>大概了解了这个项目，怎么启动它呢？</p><p>首先，你需要按照加餐 03 的步骤安装好 docker 和 docker-compose。然后，创建目录并拉取代码。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mkdir link-wechat &amp;&amp; cd link-wechat
git clone https://gitee.com/LinkWeChat/link-wechat
git clone https://gitee.com/LinkWeChat/link-we-chat-front
git clone https://gitee.com/LinkWeChat_admin/linkwechat-docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来开始打包文件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 服务端打包
cd link-wechat
# 重要
cp ../docker-compose/bootstrap.yml config/run/bootstrap.yml
mvn clean package
# pc前端
cd link-we-chat-front/linkwe-pc
yarn install
yarn build
# mobile前端
cd link-we-chat-front/linkwe-mobile
yarn install
yarn build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，还需要修改配置和 SQL。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sql文件
没有变动不需要操作，有需要就加到mysql/db文件夹内
增加nacos配置文件
默认已添加到 mysql/db/config.sql
增加xxl-job配置文件
默认已添加
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后打开 linkwechat-docker 目录依次运行。这样，LinkWechat 项目就启动起来啦。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 拷贝指定文件到对应目录
sh copy.sh
# 启动基础模块
sh deploy.sh base
# 启动项目其他模块
sh deploy.sh modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>这节课我们学到了在之前的 IaaS、PaaS 的架构思路的基础上是如何演进出分布式微服务技术，来为智能 SaaS 应用提供支撑的。</p>`,26),S={href:"https://gitee.com/LinkWeChat/link-wechat",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"到这里，我们的技术雷达加餐就结束了。恭喜你学完全部内容，也期待你在留言区和我交流互动。",-1);function x(C,w){const i=s("ExternalLinkIcon");return r(),c("div",null,[g,e("blockquote",null,[e("p",null,[e("a",k,[a("RuoYi - Vue 前后端分离版"),n(i)])])]),f,e("p",null,[a("作为一个开源的工业级 SaaS 应用，这个项目可以帮助你初步了解一款分布式 SaaS 产品是如何设计开发，并通过微服务架构落地的。如果学完这节课之后还觉得意犹未尽，想要进一步学习分布式、微服务和智能 SaaS 产品方面的业务经验，"),e("a",S,[a("欢迎加入 LinkWechat 项目，一起共同建设"),n(i)]),a("。")]),_])}const L=d(h,[["render",x],["__file","Q51-分布式微服务.html.vue"]]);export{L as default};
