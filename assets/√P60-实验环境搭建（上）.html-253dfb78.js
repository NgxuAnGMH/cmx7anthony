import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c,a as n,b as s,e,w as p,d as o}from"./app-cdabc73c.js";const i={},k=o(`<h1 id="√60-搭建操作系统实验环境-上-授人以鱼不如授人以渔" tabindex="-1"><a class="header-anchor" href="#√60-搭建操作系统实验环境-上-授人以鱼不如授人以渔" aria-hidden="true">#</a> √60 | 搭建操作系统实验环境（上）：授人以鱼不如授人以渔</h1><p>操作系统的理论部分我们就讲完了，但是计算机这门学科是实验性的。为了更加深入地了解操作系统的本质，我们必须能够做一些上手实验。操作系统的实验，相比其他计算机课程的实验要更加复杂一些。</p><p>我们做任何实验，都需要一个实验环境。这个实验环境要搭建在操作系统之上，但是，我们这个课程本身就是操作系统实验，难不成要自己 debug 自己？到底该咋整呢？</p><p>我们有一个利器，那就是 <code>qemu</code> 啊，不知道你还记得吗？它可以在操作系统之上模拟一个操作系统，就像一个普通的进程。那我们是否可以像 debug 普通进程那样，通过 qemu 来 debug 虚拟机里面的操作系统呢？</p><p>这一节和下一节，我们就按照这个思路，来试试看，搭建一个操作系统的实验环境。</p><p>运行一个 qemu 虚拟机，首先我们要有一个虚拟机的镜像。咱们在虚拟机那一节，已经制作了一个虚拟机的镜像。假设我们要基于 ubuntu-18.04.2-live-server-amd64.iso，它对应的内核版本是 linux-source-4.15.0。</p><p>当时我们启动虚拟机的过程很复杂，设置参数的时候也很复杂，以至于解析这些参数就花了我们一章的时间。所以，这里我介绍一个简单的创建和管理虚拟机的方法。</p><p>在CPU 虚拟化那一节，我留过一个思考题，OpenStack 是如何创建和管理虚拟机的？当时我给了你一个提示，就是用 <code>libvirt</code>。没错，这一节，我们就用 libvirt 来创建和管理虚拟机。</p><h2 id="创建虚拟机" tabindex="-1"><a class="header-anchor" href="#创建虚拟机" aria-hidden="true">#</a> 创建虚拟机</h2><p>首先，在宿主机上，我们需要一个网桥。我们用下面的命令创建一个网桥，并且设置一个 IP 地址。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>brctl addbr br0
ip link set br0 up
ifconfig br0 <span class="token number">192.168</span><span class="token number">.57</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了访问外网，这里还需要设置 /etc/sysctl.conf 文件中 net.ipv4.ip_forward=1 参数，并且执行以下的命令，设置 NAT。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>iptables <span class="token operator">-</span>t nat <span class="token operator">-</span>A POSTROUTING <span class="token operator">-</span>o eth0 <span class="token operator">-</span>j MASQUERADE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，就要创建虚拟机了。这次我们就不再一个个指定虚拟机启动的参数，而是用 libvirt。首先，使用下面的命令，安装 libvirt。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>apt<span class="token operator">-</span>get install libvirt<span class="token operator">-</span>bin
apt<span class="token operator">-</span>get install virtinst
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>libvirt 管理 qemu 虚拟机，是基于 XML 文件，这样容易维护。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">&lt;</span>domain type<span class="token operator">=</span><span class="token char">&#39;qemu&#39;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>ubuntutest<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>uuid<span class="token operator">&gt;</span><span class="token number">0f</span><span class="token number">0806</span>ab<span class="token operator">-</span><span class="token number">531</span>d<span class="token operator">-</span><span class="token number">6134</span><span class="token operator">-</span><span class="token number">5</span>def<span class="token operator">-</span>c5b4955292aa<span class="token operator">&lt;</span><span class="token operator">/</span>uuid<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>memory unit<span class="token operator">=</span><span class="token char">&#39;GiB&#39;</span><span class="token operator">&gt;</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>memory<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>currentMemory unit<span class="token operator">=</span><span class="token char">&#39;GiB&#39;</span><span class="token operator">&gt;</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>currentMemory<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>vcpu placement<span class="token operator">=</span><span class="token char">&#39;static&#39;</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>vcpu<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>os<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>type arch<span class="token operator">=</span><span class="token char">&#39;x86_64&#39;</span> machine<span class="token operator">=</span><span class="token char">&#39;pc-i440fx-trusty&#39;</span><span class="token operator">&gt;</span>hvm<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>boot dev<span class="token operator">=</span><span class="token char">&#39;hd&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>os<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>features<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>acpi<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>apic<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>pae<span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>features<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>clock offset<span class="token operator">=</span><span class="token char">&#39;utc&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>on_poweroff<span class="token operator">&gt;</span>destroy<span class="token operator">&lt;</span><span class="token operator">/</span>on_poweroff<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>on_reboot<span class="token operator">&gt;</span>restart<span class="token operator">&lt;</span><span class="token operator">/</span>on_reboot<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>on_crash<span class="token operator">&gt;</span>restart<span class="token operator">&lt;</span><span class="token operator">/</span>on_crash<span class="token operator">&gt;</span>
 <span class="token operator">&lt;</span>devices<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>emulator<span class="token operator">&gt;</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>qemu<span class="token operator">-</span>system<span class="token operator">-</span>x86_64<span class="token operator">&lt;</span><span class="token operator">/</span>emulator<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>disk type<span class="token operator">=</span><span class="token char">&#39;file&#39;</span> device<span class="token operator">=</span><span class="token char">&#39;disk&#39;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>driver name<span class="token operator">=</span><span class="token char">&#39;qemu&#39;</span> type<span class="token operator">=</span><span class="token char">&#39;qcow2&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>source file<span class="token operator">=</span><span class="token char">&#39;/mnt/vdc/ubuntutest.img&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>target dev<span class="token operator">=</span><span class="token char">&#39;vda&#39;</span> bus<span class="token operator">=</span><span class="token char">&#39;virtio&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>disk<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>controller type<span class="token operator">=</span><span class="token char">&#39;pci&#39;</span> index<span class="token operator">=</span><span class="token char">&#39;0&#39;</span> model<span class="token operator">=</span><span class="token char">&#39;pci-root&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>interface type<span class="token operator">=</span><span class="token char">&#39;bridge&#39;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>mac address<span class="token operator">=</span><span class="token char">&#39;fa:16:3e:6e:89:ce&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>source bridge<span class="token operator">=</span><span class="token char">&#39;br0&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>target dev<span class="token operator">=</span><span class="token char">&#39;tap1&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>model type<span class="token operator">=</span><span class="token char">&#39;virtio&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>interface<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>serial type<span class="token operator">=</span><span class="token char">&#39;pty&#39;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>target port<span class="token operator">=</span><span class="token char">&#39;0&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>serial<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>console type<span class="token operator">=</span><span class="token char">&#39;pty&#39;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>target type<span class="token operator">=</span><span class="token char">&#39;serial&#39;</span> port<span class="token operator">=</span><span class="token char">&#39;0&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>console<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>graphics type<span class="token operator">=</span><span class="token char">&#39;vnc&#39;</span> port<span class="token operator">=</span><span class="token char">&#39;-1&#39;</span> autoport<span class="token operator">=</span><span class="token char">&#39;yes&#39;</span> listen<span class="token operator">=</span><span class="token char">&#39;0.0.0.0&#39;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>listen type<span class="token operator">=</span><span class="token char">&#39;address&#39;</span> address<span class="token operator">=</span><span class="token char">&#39;0.0.0.0&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>graphics<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>video<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>model type<span class="token operator">=</span><span class="token char">&#39;cirrus&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>video<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>devices<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>domain<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个 XML 文件中，/mnt/vdc/ubuntutest.img 就是虚拟机的镜像，br0 就是我们创建的网桥，连接到网桥上的网卡 libvirt 会自动帮我们创建。</p><p>接下来，需要将这个 XML 保存为 domain.xml，然后调用下面的命令，交给 libvirt 进行管理。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>virsh define domain<span class="token punctuation">.</span>xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，运行 virsh list --all，我们就可以看到这个定义好的虚拟机了，然后我们调用 virsh start ubuntutest，启动这个虚拟机。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">virsh</span> <span class="token expression">list</span></span>
 Id    Name                           State
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
 <span class="token number">1</span>     ubuntutest                     running
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过 ps 查看 libvirt 启动的 qemu 进程。这个命令行是不是很眼熟？我们之前花了一章来讲解。如果不记得了，你可以回去看看前面的内容。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ps</span> <span class="token expression">aux <span class="token operator">|</span> grep qemu</span></span>
libvirt<span class="token operator">+</span>  <span class="token number">9343</span> <span class="token number">85.1</span> <span class="token number">34.7</span> <span class="token number">10367352</span> <span class="token number">5699400</span> <span class="token operator">?</span>    Sl   Jul27 <span class="token number">1239</span><span class="token operator">:</span><span class="token number">18</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>qemu<span class="token operator">-</span>system<span class="token operator">-</span>x86_64 <span class="token operator">-</span>name ubuntutest <span class="token operator">-</span>S <span class="token operator">-</span>machine pc<span class="token operator">-</span>i440fx<span class="token operator">-</span>trusty<span class="token punctuation">,</span>accel<span class="token operator">=</span>tcg<span class="token punctuation">,</span>usb<span class="token operator">=</span>off <span class="token operator">-</span>m <span class="token number">4096</span> <span class="token operator">-</span>realtime mlock<span class="token operator">=</span>off <span class="token operator">-</span>smp <span class="token number">2</span><span class="token punctuation">,</span>sockets<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>cores<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>threads<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span>uuid <span class="token number">0f</span><span class="token number">0806</span>ab<span class="token operator">-</span><span class="token number">531</span>d<span class="token operator">-</span><span class="token number">6134</span><span class="token operator">-</span><span class="token number">5</span>def<span class="token operator">-</span>c5b4955292aa <span class="token operator">-</span>no<span class="token operator">-</span>user<span class="token operator">-</span>config <span class="token operator">-</span>nodefaults <span class="token operator">-</span>chardev socket<span class="token punctuation">,</span>id<span class="token operator">=</span>charmonitor<span class="token punctuation">,</span>path<span class="token operator">=</span><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>libvirt<span class="token operator">/</span>qemu<span class="token operator">/</span>domain<span class="token operator">-</span>ubuntutest<span class="token operator">/</span>monitor<span class="token punctuation">.</span>sock<span class="token punctuation">,</span>server<span class="token punctuation">,</span>nowait <span class="token operator">-</span>mon chardev<span class="token operator">=</span>charmonitor<span class="token punctuation">,</span>id<span class="token operator">=</span>monitor<span class="token punctuation">,</span>mode<span class="token operator">=</span>control <span class="token operator">-</span>rtc base<span class="token operator">=</span>utc <span class="token operator">-</span>no<span class="token operator">-</span>shutdown <span class="token operator">-</span>boot strict<span class="token operator">=</span>on <span class="token operator">-</span>device piix3<span class="token operator">-</span>usb<span class="token operator">-</span>uhci<span class="token punctuation">,</span>id<span class="token operator">=</span>usb<span class="token punctuation">,</span>bus<span class="token operator">=</span>pci<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token number">0x1.0</span>x2 <span class="token operator">-</span>drive file<span class="token operator">=</span><span class="token operator">/</span>mnt<span class="token operator">/</span>vdc<span class="token operator">/</span>ubuntutest<span class="token punctuation">.</span>img<span class="token punctuation">,</span>format<span class="token operator">=</span>qcow2<span class="token punctuation">,</span><span class="token keyword">if</span><span class="token operator">=</span>none<span class="token punctuation">,</span>id<span class="token operator">=</span>drive<span class="token operator">-</span>virtio<span class="token operator">-</span>disk0 <span class="token operator">-</span>device virtio<span class="token operator">-</span>blk<span class="token operator">-</span>pci<span class="token punctuation">,</span>scsi<span class="token operator">=</span>off<span class="token punctuation">,</span>bus<span class="token operator">=</span>pci<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token number">0x4</span><span class="token punctuation">,</span>drive<span class="token operator">=</span>drive<span class="token operator">-</span>virtio<span class="token operator">-</span>disk0<span class="token punctuation">,</span>id<span class="token operator">=</span>virtio<span class="token operator">-</span>disk0<span class="token punctuation">,</span>bootindex<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span>netdev tap<span class="token punctuation">,</span>fd<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">,</span>id<span class="token operator">=</span>hostnet0 <span class="token operator">-</span>device virtio<span class="token operator">-</span>net<span class="token operator">-</span>pci<span class="token punctuation">,</span>netdev<span class="token operator">=</span>hostnet0<span class="token punctuation">,</span>id<span class="token operator">=</span>net0<span class="token punctuation">,</span>mac<span class="token operator">=</span>fa<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">3</span>e<span class="token operator">:</span><span class="token number">6</span>e<span class="token operator">:</span><span class="token number">89</span><span class="token operator">:</span>ce<span class="token punctuation">,</span>bus<span class="token operator">=</span>pci<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token number">0x3</span> <span class="token operator">-</span>chardev pty<span class="token punctuation">,</span>id<span class="token operator">=</span>charserial0 <span class="token operator">-</span>device isa<span class="token operator">-</span>serial<span class="token punctuation">,</span>chardev<span class="token operator">=</span>charserial0<span class="token punctuation">,</span>id<span class="token operator">=</span>serial0 <span class="token operator">-</span>vnc <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">:</span><span class="token number">0</span> <span class="token operator">-</span>device cirrus<span class="token operator">-</span>vga<span class="token punctuation">,</span>id<span class="token operator">=</span>video0<span class="token punctuation">,</span>bus<span class="token operator">=</span>pci<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token number">0x2</span> <span class="token operator">-</span>device virtio<span class="token operator">-</span>balloon<span class="token operator">-</span>pci<span class="token punctuation">,</span>id<span class="token operator">=</span>balloon0<span class="token punctuation">,</span>bus<span class="token operator">=</span>pci<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token number">0x5</span> <span class="token operator">-</span>msg timestamp<span class="token operator">=</span>on
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从这里，我们可以看到，VNC 的设置为 0.0.0.0:0。我们可以用 VNCViewer 工具登录到这个虚拟机的界面，但是这样实在是太麻烦了，其实 virsh 有一个特别好的工具，但是需要在虚拟机里面配置一些东西。</p><p>在虚拟机里面，我们修改 /boot/grub/ 里面的两个文件，一个是 <code>grub.cfg</code>，另一个是 menu.lst，这里面就是咱们在<code>系统初始化</code>的时候，讲过的那个<mark>启动列表</mark>。</p><p>在 grub.cfg 中，在 submenu ‘Advanced options for Ubuntu’ 这一项，在这一行的 linux /boot/vmlinuz-4.15.0-55-generic root=UUID=470f3a42-7a97-4b9d-aaa0-26deb3d234f9 ro console=ttyS0 maybe-ubiquity 中，加上了 console=ttyS0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>submenu <span class="token char">&#39;Advanced options for Ubuntu&#39;</span> $menuentry_id_option &#39;gnulinux<span class="token operator">-</span>advanced<span class="token operator">-</span><span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9&#39; <span class="token punctuation">{</span>
    menuentry &#39;Ubuntu<span class="token punctuation">,</span> with Linux <span class="token number">4.15</span><span class="token number">.0</span><span class="token operator">-</span><span class="token number">55</span><span class="token operator">-</span>generic&#39; <span class="token operator">--</span>class ubuntu <span class="token operator">--</span>class gnu<span class="token operator">-</span>linux <span class="token operator">--</span>class gnu <span class="token operator">--</span>class os $menuentry_id_option &#39;gnulinux<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.0</span><span class="token operator">-</span><span class="token number">55</span><span class="token operator">-</span>generic<span class="token operator">-</span>advanced<span class="token operator">-</span><span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9&#39; <span class="token punctuation">{</span>
        recordfail
        load_video
        gfxmode $linux_gfx_mode
        insmod gzio
        <span class="token keyword">if</span> <span class="token punctuation">[</span> x$grub_platform <span class="token operator">=</span> xxen <span class="token punctuation">]</span><span class="token punctuation">;</span> then insmod xzio<span class="token punctuation">;</span> insmod lzopio<span class="token punctuation">;</span> fi
        insmod part_gpt
        insmod ext2
        set root<span class="token operator">=</span><span class="token char">&#39;hd0,gpt2&#39;</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> x$feature_platform_search_hint <span class="token operator">=</span> xy <span class="token punctuation">]</span><span class="token punctuation">;</span> then
            search <span class="token operator">--</span>no<span class="token operator">-</span>floppy <span class="token operator">--</span>fs<span class="token operator">-</span>uuid <span class="token operator">--</span>set<span class="token operator">=</span>root <span class="token operator">--</span>hint<span class="token operator">-</span>bios<span class="token operator">=</span>hd0<span class="token punctuation">,</span>gpt2 <span class="token operator">--</span>hint<span class="token operator">-</span>efi<span class="token operator">=</span>hd0<span class="token punctuation">,</span>gpt2 <span class="token operator">--</span>hint<span class="token operator">-</span>baremetal<span class="token operator">=</span>ahci0<span class="token punctuation">,</span>gpt2  <span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9
        <span class="token keyword">else</span>
            search <span class="token operator">--</span>no<span class="token operator">-</span>floppy <span class="token operator">--</span>fs<span class="token operator">-</span>uuid <span class="token operator">--</span>set<span class="token operator">=</span>root <span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9
        fi
        echo    &#39;Loading Linux <span class="token number">4.15</span><span class="token number">.0</span><span class="token operator">-</span><span class="token number">55</span><span class="token operator">-</span>generic <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&#39;
        linux   <span class="token operator">/</span>boot<span class="token operator">/</span>vmlinuz<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.0</span><span class="token operator">-</span><span class="token number">55</span><span class="token operator">-</span>generic root<span class="token operator">=</span>UUID<span class="token operator">=</span><span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9 ro console<span class="token operator">=</span>ttyS0 maybe<span class="token operator">-</span>ubiquity
        echo    <span class="token char">&#39;Loading initial ramdisk ...&#39;</span>
        initrd  <span class="token operator">/</span>boot<span class="token operator">/</span>initrd<span class="token punctuation">.</span>img<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.0</span><span class="token operator">-</span><span class="token number">55</span><span class="token operator">-</span>generic
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 menu.lst 文件中，在 Ubuntu 18.04.2 LTS, kernel 4.15.0-55-generic 这一项，在 kernel /boot/vmlinuz-4.15.0-55-generic root=/dev/hda1 ro console=hvc0 console=ttyS0 这一行加入 console=ttyS0。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>title           Ubuntu <span class="token number">18.04</span><span class="token number">.2</span> LTS<span class="token punctuation">,</span> kernel <span class="token number">4.15</span><span class="token number">.0</span><span class="token operator">-</span><span class="token number">55</span><span class="token operator">-</span>generic
<span class="token function">root</span>            <span class="token punctuation">(</span>hd0<span class="token punctuation">)</span>
kernel          <span class="token operator">/</span>boot<span class="token operator">/</span>vmlinuz<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.0</span><span class="token operator">-</span><span class="token number">55</span><span class="token operator">-</span>generic root<span class="token operator">=</span><span class="token operator">/</span>dev<span class="token operator">/</span>hda1 ro console<span class="token operator">=</span>hvc0 console<span class="token operator">=</span>ttyS0 
initrd          <span class="token operator">/</span>boot<span class="token operator">/</span>initrd<span class="token punctuation">.</span>img<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.0</span><span class="token operator">-</span><span class="token number">55</span><span class="token operator">-</span>generic
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们重启虚拟机，重启后上面的配置就起作用了。这时候，我们可以通过下面的命令，进入机器的控制台，可以不依赖于 SSH 和 IP 地址进行登录。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">virsh</span> <span class="token expression">console ubuntutest</span></span>
Connected to domain ubuntutest
Escape character is <span class="token operator">^</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面，我们可以配置这台机器的 IP 地址了。对于 ubuntu-18.04 来讲，IP 地址的配置方式为修改 /etc/netplan/50-cloud-init.yaml 文件。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>network<span class="token operator">:</span>
    ethernets<span class="token operator">:</span>
        ens3<span class="token operator">:</span>
                addresses<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">192.168</span><span class="token number">.57</span><span class="token number">.100</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">]</span>
                gateway4<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.57</span><span class="token number">.1</span>
                dhcp4<span class="token operator">:</span> no
                nameservers<span class="token operator">:</span>
                        addresses<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span><span class="token number">114.114</span><span class="token number">.114</span><span class="token number">.114</span><span class="token punctuation">]</span>
                optional<span class="token operator">:</span> true
    version<span class="token operator">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们可以通过 netplan apply，让配置生效，这样，虚拟机里面的 IP 地址就配置好了。现在，我们应该能 ping 得通公网的一个网站了。</p><p>虚拟机就此创建好了，接下来我们需要<em>下载源代码重新编译</em>。</p><h2 id="下载源代码" tabindex="-1"><a class="header-anchor" href="#下载源代码" aria-hidden="true">#</a> 下载源代码</h2><p>首先，我们先下载源代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>apt<span class="token operator">-</span>get install linux<span class="token operator">-</span>source<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行命令会将代码下载到 /usr/src/ 目录下，我们可以通过下面的命令解压缩。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>tar vjxkf linux<span class="token operator">-</span>source<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.0</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>bz2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>至此，路径 /usr/src/linux-source-4.15.0 下，就是解压好的内核代码。</p><p>准备工作都做好了。这一节，我们先来做第一个实验，也就是，<em>在原有内核代码的基础上加一个我们自己的系统调用</em>。</p><p>在哪里加代码呢？如果你忘了，请出门左转，回顾一下<code>系统调用</code>那一节。</p><p>第一个要加的地方是 <code>arch/x86/entry/syscalls/syscall_64.tbl</code>。这里面登记了所有的系统调用号以及相应的处理函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">332</span>     common  statx                   sys_statx
<span class="token number">333</span>     <span class="token number">64</span>      sayhelloworld           sys_sayhelloworld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们找到 332 号系统调用 sys_statx，然后照猫画虎，添加一个 sys_sayhelloworld，这里我们只添加 64 位操作系统的。</p><p>第二个要加的地方是 <code>include/linux/syscalls.h</code>，也就是系统调用的头文件，然后添加一个系统调用的声明。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>asmlinkage <span class="token keyword">long</span> <span class="token function">sys_statx</span><span class="token punctuation">(</span><span class="token keyword">int</span> dfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> flags<span class="token punctuation">,</span>
                          <span class="token keyword">unsigned</span> mask<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">statx</span> __user <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

asmlinkage <span class="token keyword">int</span> <span class="token function">sys_sayhelloworld</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> words<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样，我们找到 sys_statx 的声明，照猫画虎，声明一个 sys_sayhelloworld。其中，words 参数是用户态传递给内核态的文本的指针，count 是数目。</p><p>第三个就是对于这个系统调用的实现，方便起见，我们不再用 SYSCALL_DEFINEx 系列的宏来定义了，直接在 <code>kernel/sys.c</code> 中实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>asmlinkage <span class="token keyword">int</span> <span class="token function">sys_sayhelloworld</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> words<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&gt;=</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">copy_from_user</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> words<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ret<span class="token operator">=</span><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;User Mode says %s to the Kernel Mode!&quot;</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就要开始编译内核了。</p><h2 id="编译内核" tabindex="-1"><a class="header-anchor" href="#编译内核" aria-hidden="true">#</a> 编译内核</h2><p>编译之前，我们需要安装<em>一些编译要依赖的包</em>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>apt<span class="token operator">-</span>get install libncurses5<span class="token operator">-</span>dev libssl<span class="token operator">-</span>dev bison flex libelf<span class="token operator">-</span>dev gcc make openssl libc6<span class="token operator">-</span>dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先，我们要定义<em>编译选项</em>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>make menuconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们能通过选中下面的选项，激活 <code>CONFIG_DEBUG_INFO</code> 和 <code>CONFIG_FRAME_POINTER</code> 选项。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Kernel hacking  <span class="token operator">--</span><span class="token operator">-&gt;</span>
Compile<span class="token operator">-</span>time checks and compiler options  <span class="token operator">--</span><span class="token operator">-&gt;</span>
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Compile the kernel with debug info 
<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Compile the kernel with frame pointers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择完毕之后，配置会保存在.config 文件中。如果我们打开看，能看到这样的配置：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>CONFIG_FRAME_POINTER<span class="token operator">=</span>y
CONFIG_DEBUG_INFO<span class="token operator">=</span>y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们编译内核。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>nohup make <span class="token operator">-</span>j8 <span class="token operator">&gt;</span> make1<span class="token punctuation">.</span>log <span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span>
nohup make modules_install <span class="token operator">&gt;</span> make2<span class="token punctuation">.</span>log <span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span>
nohup make install <span class="token operator">&gt;</span> make3<span class="token punctuation">.</span>log <span class="token number">2</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个非常长的过程，请耐心等待，可能需要数个小时，因而这里用了 <em>nohup</em>，你可以去干别的事情。</p><p>当编译完毕之后，grub 和 menu.lst 都会发生改变。例如，grub.conf 里面会多<em>一个新内核</em>的项。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>submenu <span class="token char">&#39;Advanced options for Ubuntu&#39;</span> $menuentry_id_option &#39;gnulinux<span class="token operator">-</span>advanced<span class="token operator">-</span><span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9&#39; <span class="token punctuation">{</span>
        menuentry <span class="token char">&#39;Ubuntu, with Linux 4.15.18&#39;</span> <span class="token operator">--</span>class ubuntu <span class="token operator">--</span>class gnu<span class="token operator">-</span>linux <span class="token operator">--</span>class gnu <span class="token operator">--</span>class os $menuentry_id_option &#39;gnulinux<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.18</span><span class="token operator">-</span>advanced<span class="token operator">-</span><span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9&#39; <span class="token punctuation">{</span>
                recordfail
                load_video
                gfxmode $linux_gfx_mode
                insmod gzio
                <span class="token keyword">if</span> <span class="token punctuation">[</span> x$grub_platform <span class="token operator">=</span> xxen <span class="token punctuation">]</span><span class="token punctuation">;</span> then insmod xzio<span class="token punctuation">;</span> insmod lzopio<span class="token punctuation">;</span> fi
                insmod part_gpt
                insmod ext2
                <span class="token keyword">if</span> <span class="token punctuation">[</span> x$feature_platform_search_hint <span class="token operator">=</span> xy <span class="token punctuation">]</span><span class="token punctuation">;</span> then
                  search <span class="token operator">--</span>no<span class="token operator">-</span>floppy <span class="token operator">--</span>fs<span class="token operator">-</span>uuid <span class="token operator">--</span>set<span class="token operator">=</span>root  <span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9
                <span class="token keyword">else</span>
                  search <span class="token operator">--</span>no<span class="token operator">-</span>floppy <span class="token operator">--</span>fs<span class="token operator">-</span>uuid <span class="token operator">--</span>set<span class="token operator">=</span>root <span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9
                fi
                echo    <span class="token char">&#39;Loading Linux 4.15.18 ...&#39;</span>
                linux   <span class="token operator">/</span>boot<span class="token operator">/</span>vmlinuz<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.18</span> root<span class="token operator">=</span>UUID<span class="token operator">=</span><span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9 ro console<span class="token operator">=</span>ttyS0 maybe<span class="token operator">-</span>ubiquity
                echo    <span class="token char">&#39;Loading initial ramdisk ...&#39;</span>
                initrd  <span class="token operator">/</span>boot<span class="token operator">/</span>initrd<span class="token punctuation">.</span>img<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.18</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，menu.lst 也多了新的内核的项。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>title           Ubuntu <span class="token number">18.04</span><span class="token number">.2</span> LTS<span class="token punctuation">,</span> kernel <span class="token number">4.15</span><span class="token number">.18</span>
<span class="token function">root</span>            <span class="token punctuation">(</span>hd0<span class="token punctuation">)</span>
kernel          <span class="token operator">/</span>boot<span class="token operator">/</span>vmlinuz<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.18</span> root<span class="token operator">=</span><span class="token operator">/</span>dev<span class="token operator">/</span>hda1 ro console<span class="token operator">=</span>hvc0 console<span class="token operator">=</span>ttyS0
initrd          <span class="token operator">/</span>boot<span class="token operator">/</span>initrd<span class="token punctuation">.</span>img<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>别忘了，这里面都要加上 console=ttyS0。</p><p>下面，我们要做的就是重启虚拟机。进入的时候，会出现 GRUB 界面。我们选择 Ubuntu 高级选项，然后选择第一项进去，通过 uname 命令，我们就进入了新的内核。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">uname</span> <span class="token expression"><span class="token operator">-</span>a</span></span>
Linux popsuper <span class="token number">4.15</span><span class="token number">.18</span> #<span class="token number">1</span> SMP Sat Jul <span class="token number">27</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">42</span> UTC <span class="token number">2019</span> x86_64 x86_64 x86_64 GNU<span class="token operator">/</span>Linux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>进入新的系统后，我们写一个测试程序。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span> words <span class="token operator">=</span> <span class="token string">&quot;I am liuchao from user mode.&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
  ret <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">,</span> words<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;return %d from kernel mode.\\n&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们能利用 gcc 编译器编译后运行。如果我们查看日志 <code>/var/log/syslog</code>，就能够看到里面打印出来下面的日志，这说明我们的系统调用已经添加成功了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Aug  <span class="token number">1</span> <span class="token number">06</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">12</span> popsuper kernel<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">2048.873393</span><span class="token punctuation">]</span> User Mode says I am liuchao from user mode<span class="token punctuation">.</span> to the Kernel Mode<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>这一节是一节实战课，我们创建了一台虚拟机，在里面下载源代码，尝试修改了 Linux 内核，添加了一个自己的系统调用，并且进行了编译并安装了新内核。如果你按照这个过程做下来，你会惊喜地发现，原来令我们敬畏的内核，也是能够加以干预，为我而用的呢。没错，这就是你开始逐渐掌握内核的重要一步。</p><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>这一节的课堂练习，希望你能够按照整个过程，一步一步操作下来。毕竟看懂不算懂，做出来才算入门啊。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2>`,82),u=o("<p>1、apt安装qemu-kvm，使用/usr/bin/kvm作为domain.xml中的emulator, 然后更改domain节点的type值为kvm，这样虚拟机的速度会更快。<br> 2、创建ubuntutest.img文件时，size至少30G，否则kernel的编译中间结果很大，会造成编译失败。<br> 3、将虚拟机的内存改大一些，否则在make install后使用带有debug info的内核启动系统时，unpack initramfs会失败。<br> 作者回复: 赞，实战派<br> 其他网友：更改type为kvm，确实快多了。没早点看到评论，加大了虚拟机的磁盘和内存，又重头做了一遍，好处是第二次熟练多了。</p><hr><p>如果使用 virt-install 加上 &quot;--graphics none --extra-args=&#39;console=ttyS0&#39;&quot; 就能直接 virsh console 上了。</p><hr><p>可以在虚拟机里运行虚拟机吗？<br> 作者回复: 可以，就是慢的一塌糊涂了</p><hr><p>我在自己的Ubuntu20虚拟机上编译了linux-5.4.214。我编译成功的步骤和老师不同的地方：</p><ol><li>333 64 sayhelloworld sys_sayhelloworld 按照已经存在的调用格式，在sys_sayhelloworld前面加<code>__64_</code> ，即<code>__64_sys_sayhelloworld</code>；</li><li>kernel/sys.c 中的实现也改成了：<br> SYSCALL_DEFINE0(sayhelloworld)<br> {<br> printk(&quot;printfmsg SYSTEM CALL IS ALIVE\\n&quot;);<br> return 0;<br> }</li><li>所以头文件里也改成asmlinkage long sys_(void);<br> 这样就编译通过了，想快速验证可以只编译vmlinux。 使用make vmlinux，总比每次都编译整个内核好。<br> 我遇到的坑：</li><li>没有规则可制作“debian/canonical-certs.pem&quot;......<br> 这个能百度到，在内核的主目录里打开.config 文件，删除CONFIG_SYSTEM_TRUSTED_KEYS =“debian/canonical-certs.pem&quot; 这一项里冒号里的内容就好</li><li>undefined reference to &#39;__x64_sys_sayhelloworld&#39;<br> 这个错误对我来说最麻烦，试了google找到的好几种方式都不行，最后还是改成宏定义而且没有额外参数的实现最后编译成功</li></ol><hr>",9),d=n("br",null,null,-1),m=n("hr",null,null,-1),b=n("p",null,"我们OS课第一个作业也是编译Linux内核，Module是写Fork函数实现一些递归功能和执行",-1),v=n("hr",null,null,-1),g=n("p",null,[s("请问下老师 每次修改内核都需要全部编译吗？ 可以部分编译吗？"),n("br"),s(" 作者回复: 如果是模块，可以部分编译，然后加载，核心的部分，就需要全部编译了")],-1);function h(y,f){const a=r("emulator");return l(),c("div",null,[k,n("blockquote",null,[u,n("p",null,[s("在定义xml文件时， "),e(a,null,{default:p(()=>[s("/usr/bin/qemu-system-x86_64")]),_:1}),s("里面为什么是/usr/bin/qemu-system-x86_64？我看还有的文档说用 "),e(a,null,{default:p(()=>[s("/usr/bin/kvm")]),_:1}),s("， 或 "),e(a,null,{default:p(()=>[s("/usr/libexec/qemu-kvm")]),_:1}),s("? 请问这几个的区别？各个的适合使用场景？谢谢！"),d,s(" 作者回复: ls一下，看是不是指向同一个文件，不同系统安装完，名字不一定一样")]),m,b,v,g])])}const w=t(i,[["render",h],["__file","√P60-实验环境搭建（上）.html.vue"]]);export{w as default};
