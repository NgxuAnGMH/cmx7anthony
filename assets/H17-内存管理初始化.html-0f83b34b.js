import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t={},e=p(`<h1 id="_17-划分土地-中-如何实现内存页面初始化" tabindex="-1"><a class="header-anchor" href="#_17-划分土地-中-如何实现内存页面初始化" aria-hidden="true">#</a> 17 | 划分土地（中）：如何实现内存页面初始化？</h1><p>你好，我是 LMOS。</p><p>上节课，我们确定了用分页方式管理内存，并且一起动手设计了表示内存页、内存区相关的内存管理数据结构。不过，虽然内存管理相关的数据结构已经定义好了，但是我们还没有在内存中建立对应的<strong>实例变量</strong>。</p><p>我们都知道，在代码中实际操作的数据结构必须在内存中有相应的变量，这节课我们就去建立对应的实例变量，并初始化它们。</p><h2 id="初始化-memmgrinit-c" tabindex="-1"><a class="header-anchor" href="#初始化-memmgrinit-c" aria-hidden="true">#</a> 初始化: memmgrinit.c</h2><p>前面的课里，我们在 hal 层初始化中，初始化了从二级引导器中获取的内存布局信息，也就是那个 <strong>e820map_t 数组</strong>，并把这个数组转换成了 phymmarge_t 结构数组，还对它做了排序。</p><p>但是，我们 Cosmos 物理内存管理器剩下的部分还没有完成初始化，下面我们就去实现它。</p><p>Cosmos 的物理内存管理器，我们依然要放在 Cosmos 的 hal 层。</p><p>因为物理内存还和硬件平台相关，所以我们要在 cosmos/hal/x86/ 目录下建立一个 <code>memmgrinit.c</code> 文件，在这个文件中写入一个 Cosmos <strong>物理内存管理器初始化的大总管</strong>——init_memmgr 函数，并在 init_halmm 函数中调用它，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//cosmos/hal/x86/halmm.c中</span>
<span class="token comment">//hal层的内存初始化函数</span>
<span class="token keyword">void</span> <span class="token function">init_halmm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">init_phymmarge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_memmgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//Cosmos物理内存管理器初始化</span>
<span class="token keyword">void</span> <span class="token function">init_memmgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//初始化内存页结构msadsc_t</span>
    <span class="token comment">//初始化内存区结构memarea_t</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据前面我们对内存管理相关数据结构的设计，你应该不难想到，在 init_memmgr 函数中应该要完成<strong>内存页结构 msadsc_t 和内存区结构 memarea_t 的初始化</strong>，下面就分别搞定这两件事。</p><h2 id="内存页结构初始化-msadsc-c" tabindex="-1"><a class="header-anchor" href="#内存页结构初始化-msadsc-c" aria-hidden="true">#</a> 内存页结构初始化: msadsc.c</h2><p>内存页结构的初始化，其实就是初始化 msadsc_t 结构对应的变量。因为一个 msadsc_t 结构体变量代表一个物理内存页，而物理内存由多个页组成，所以最终会形成一个 msadsc_t 结构体数组。</p><p>这会让我们的工作变得简单，我们只需要找一个内存地址，作为 msadsc_t 结构体数组的开始地址，当然这个内存地址必须是可用的，而且之后内存空间足以存放 msadsc_t 结构体数组。</p><p>然后，我们要扫描 phymmarge_t 结构体数组中的信息，只要它的类型是可用内存，就建立一个 msadsc_t 结构体，并把其中的开始地址作为第一个页面地址。</p><p>接着，要给这个开始地址加上 0x1000，如此循环，直到其结束地址。</p><p>当这个 phymmarge_t 结构体的地址区间，它对应的所有 msadsc_t 结构体都建立完成之后，就开始下一个 phymmarge_t 结构体。依次类推，最后，我们就能建好<strong>所有可用物理内存页面对应的 msadsc_t 结构体</strong>。</p><p>下面，我们去 <code>cosmos/hal/x86/</code> 目录下建立一个 <code>msadsc.c</code> 文件。在这里写下完成这些功能的代码，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">write_one_msadsc</span><span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msap<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> phyadr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//对msadsc_t结构做基本的初始化，比如链表、锁、标志位</span>
    <span class="token function">msadsc_t_init</span><span class="token punctuation">(</span>msap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//这是把一个64位的变量地址转换成phyadrflgs_t*类型方便取得其中的地址位段</span>
    <span class="token class-name">phyadrflgs_t</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">phyadrflgs_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>phyadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//把页的物理地址写入到msadsc_t结构中</span>
    msap<span class="token operator">-&gt;</span>md_phyadrs<span class="token punctuation">.</span>paf_padrs <span class="token operator">=</span> tmp<span class="token operator">-&gt;</span>paf_padrs<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">u64_t</span> <span class="token function">init_msadsc_core</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msavstart<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> msanr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取phymmarge_t结构数组开始地址</span>
    <span class="token class-name">phymmarge_t</span> <span class="token operator">*</span>pmagep <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">phymmarge_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-&gt;</span>mb_e820expadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> mdindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//扫描phymmarge_t结构数组</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mbsp<span class="token operator">-&gt;</span>mb_e820exnr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//判断phymmarge_t结构的类型是不是可用内存</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>PMR_T_OSAPUSERRAM <span class="token operator">==</span> pmagep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pmr_type<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//遍历phymmarge_t结构的地址区间</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> start <span class="token operator">=</span> pmagep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pmr_saddr<span class="token punctuation">;</span> start <span class="token operator">&lt;</span> pmagep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pmr_end<span class="token punctuation">;</span> start <span class="token operator">+=</span> <span class="token number">4096</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//每次加上4KB-1比较是否小于等于phymmarge_t结构的结束地址</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">4096</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> pmagep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pmr_end<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token comment">//与当前地址为参数写入第mdindx个msadsc结构</span>
                    <span class="token function">write_one_msadsc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msavstart<span class="token punctuation">[</span>mdindx<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mdindx<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> mdindx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init_msadsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">u64_t</span> coremdnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> msadscnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msadscvp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp <span class="token operator">=</span> <span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">;</span>
    <span class="token comment">//计算msadsc_t结构数组的开始地址和数组元素个数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ret_msadsc_vadrandsz</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msadscvp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msadscnr<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">&quot;init_msadsc ret_msadsc_vadrandsz err\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//开始真正初始化msadsc_t结构数组</span>
    coremdnr <span class="token operator">=</span> <span class="token function">init_msadsc_core</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> msadscvp<span class="token punctuation">,</span> msadscnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>coremdnr <span class="token operator">!=</span> msadscnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">&quot;init_msadsc init_msadsc_core err\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//将msadsc_t结构数组的开始的物理地址写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-&gt;</span>mb_memmappadr <span class="token operator">=</span> <span class="token function">viradr_to_phyadr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>msadscvp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将msadsc_t结构数组的元素个数写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-&gt;</span>mb_memmapnr <span class="token operator">=</span> coremdnr<span class="token punctuation">;</span>
    <span class="token comment">//将msadsc_t结构数组的大小写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-&gt;</span>mb_memmapsz <span class="token operator">=</span> coremdnr <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">msadsc_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//计算下一个空闲内存的开始地址 </span>
    mbsp<span class="token operator">-&gt;</span>mb_nextwtpadr <span class="token operator">=</span> <span class="token function">PAGE_ALIGN</span><span class="token punctuation">(</span>mbsp<span class="token operator">-&gt;</span>mb_memmappadr <span class="token operator">+</span> mbsp<span class="token operator">-&gt;</span>mb_memmapsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码量很少，逻辑也很简单，再配合注释，相信你看得懂。其中的 ret_msadsc_vadrandsz 函数也是遍历 phymmarge_t 结构数组，计算出有多大的可用内存空间，可以分成多少个页面，需要多少个 msadsc_t 结构。</p><h2 id="内存区结构初始化-memarea-c" tabindex="-1"><a class="header-anchor" href="#内存区结构初始化-memarea-c" aria-hidden="true">#</a> 内存区结构初始化: memarea.c</h2><p>前面我们将整个物理地址空间在逻辑上分成了三个区，分别是**：硬件区、内核区、用户区**，这就要求我们要在内存中建立三个 memarea_t 结构体的实例变量。</p><p>就像建立 msadsc_t 结构数组一样，我们只需要在内存中找个空闲空间，存放这三个 memarea_t 结构体就行。相比建立 msadsc_t 结构数组这更为简单，因为 memarea_t 结构体是顶层结构，并不依赖其它数据结构，只是对其本身进行初始化就好了。</p><p>但是由于它自身包含了其它数据结构，在初始化它时，要对其中的其它数据结构进行初始化，所以要小心一些。</p><p>下面我们去 <code>cosmos/hal/x86/</code> 目录下建立一个 <code>memarea.c</code> 文件，写下完成这些功能的代码，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">bafhlst_t_init</span><span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>initp<span class="token punctuation">,</span> <span class="token class-name">u32_t</span> stus<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> oder<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> oderpnr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//初始化bafhlst_t结构体的基本数据</span>
    <span class="token function">knl_spinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>af_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>af_stus <span class="token operator">=</span> stus<span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>af_oder <span class="token operator">=</span> oder<span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>af_oderpnr <span class="token operator">=</span> oderpnr<span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>af_fobjnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>af_mobjnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>af_alcindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>af_freindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>af_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>af_alclst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>af_ovelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">memdivmer_t_init</span><span class="token punctuation">(</span><span class="token class-name">memdivmer_t</span> <span class="token operator">*</span>initp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//初始化medivmer_t结构体的基本数据</span>
    <span class="token function">knl_spinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>dm_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>dm_stus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>dm_divnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>dm_mernr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//循环初始化memdivmer_t结构体中dm_mdmlielst数组中的每个bafhlst_t结构的基本数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> li <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> li <span class="token operator">&lt;</span> MDIVMER_ARR_LMAX<span class="token punctuation">;</span> li<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">bafhlst_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>dm_mdmlielst<span class="token punctuation">[</span>li<span class="token punctuation">]</span><span class="token punctuation">,</span> BAFH_STUS_DIVM<span class="token punctuation">,</span> li<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">bafhlst_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>dm_onemsalst<span class="token punctuation">,</span> BAFH_STUS_ONEM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1UL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">memarea_t_init</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>initp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//初始化memarea_t结构体的基本数据</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>ma_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">knl_spinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>ma_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_stus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_flgs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_type <span class="token operator">=</span> MA_TYPE_INIT<span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_maxpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_allocpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_freepages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_resvpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_horizline <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_logicstart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_logicend <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_logicsz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化memarea_t结构体中的memdivmer_t结构体</span>
    <span class="token function">memdivmer_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>ma_mdmdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>ma_privp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">bool_t</span> <span class="token function">init_memarea_core</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取memarea_t结构开始地址</span>
    <span class="token class-name">u64_t</span> phymarea <span class="token operator">=</span> mbsp<span class="token operator">-&gt;</span>mb_nextwtpadr<span class="token punctuation">;</span>
    <span class="token comment">//检查内存空间够不够放下MEMAREA_MAX个memarea_t结构实例变量</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">initchkadr_is_ok</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">,</span> phymarea<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span><span class="token punctuation">)</span> <span class="token operator">*</span> MEMAREA_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">memarea_t</span> <span class="token operator">*</span>virmarea <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>phymarea<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> mai <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mai <span class="token operator">&lt;</span> MEMAREA_MAX<span class="token punctuation">;</span> mai<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>   <span class="token comment">//循环初始化每个memarea_t结构实例变量</span>
        <span class="token function">memarea_t_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>virmarea<span class="token punctuation">[</span>mai<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//设置硬件区的类型和空间大小</span>
    virmarea<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_type <span class="token operator">=</span> MA_TYPE_HWAD<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicstart <span class="token operator">=</span> MA_HWAD_LSTART<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicend <span class="token operator">=</span> MA_HWAD_LEND<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicsz <span class="token operator">=</span> MA_HWAD_LSZ<span class="token punctuation">;</span>
    <span class="token comment">//设置内核区的类型和空间大小</span>
    virmarea<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_type <span class="token operator">=</span> MA_TYPE_KRNL<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicstart <span class="token operator">=</span> MA_KRNL_LSTART<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicend <span class="token operator">=</span> MA_KRNL_LEND<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicsz <span class="token operator">=</span> MA_KRNL_LSZ<span class="token punctuation">;</span>
    <span class="token comment">//设置应用区的类型和空间大小</span>
    virmarea<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_type <span class="token operator">=</span> MA_TYPE_PROC<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicstart <span class="token operator">=</span> MA_PROC_LSTART<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicend <span class="token operator">=</span> MA_PROC_LEND<span class="token punctuation">;</span>
    virmarea<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ma_logicsz <span class="token operator">=</span> MA_PROC_LSZ<span class="token punctuation">;</span>
    <span class="token comment">//将memarea_t结构的开始的物理地址写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-&gt;</span>mb_memznpadr <span class="token operator">=</span> phymarea<span class="token punctuation">;</span>
    <span class="token comment">//将memarea_t结构的个数写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-&gt;</span>mb_memznnr <span class="token operator">=</span> MEMAREA_MAX<span class="token punctuation">;</span>
    <span class="token comment">//将所有memarea_t结构的大小写入kmachbsp结构中 </span>
    mbsp<span class="token operator">-&gt;</span>mb_memznsz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span><span class="token punctuation">)</span> <span class="token operator">*</span> MEMAREA_MAX<span class="token punctuation">;</span>
    <span class="token comment">//计算下一个空闲内存的开始地址 </span>
    mbsp<span class="token operator">-&gt;</span>mb_nextwtpadr <span class="token operator">=</span> <span class="token function">PAGE_ALIGN</span><span class="token punctuation">(</span>phymarea <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span><span class="token punctuation">)</span> <span class="token operator">*</span> MEMAREA_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//初始化内存区</span>
<span class="token keyword">void</span> <span class="token function">init_memarea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//真正初始化内存区</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">init_memarea_core</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">&quot;init_memarea_core fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于这些数据结构很大，所以代码有点长，但是重要的代码我都做了详细注释。</p><p>在 init_memarea_core 函数的开始，我们调用了 memarea_t_init 函数，对 MEMAREA_MAX 个 memarea_t 结构进行了基本的初始化。</p><p>然后，在 memarea_t_init 函数中又调用了 memdivmer_t_init 函数，而在 memdivmer_t_init 函数中又调用了 bafhlst_t_init 函数，这保证了那些被包含的数据结构得到了初始化。</p><p>最后，我们给三个区分别设置了类型和地址空间。</p><h2 id="处理初始内存占用问题-msadsc-c" tabindex="-1"><a class="header-anchor" href="#处理初始内存占用问题-msadsc-c" aria-hidden="true">#</a> 处理初始内存占用问题: msadsc.c</h2><p>我们初始化了内存页和内存区对应的数据结构，已经可以组织好内存页面了。现在看似已经万事俱备了，其实这有个重大的问题，你知道是什么吗？我给你分析一下。</p><p>目前我们的内存中已经有很多数据了，有 Cosmos 内核本身的执行文件，有字体文件，有 MMU 页表，有打包的内核映像文件，还有刚刚建立的内存页和内存区的数据结构，这些数据都要占用实际的物理内存。</p><p>再回头看看我们建立内存页结构 msadsc_t，<strong>所有的都是空闲状态</strong>，而它们每一个都表示一个实际的物理内存页。</p><p>假如在这种情况下，对调用内存分配接口进行内存分配，<strong>它按既定的分配算法查找空闲的 msadsc_t 结构，那它一定会找到内核占用的内存页所对应的 msadsc_t 结构，并把这个内存页分配出去，然后得到这个页面的程序对其进行改写。这样内核数据就会被覆盖，这种情况是我们绝对不能允许的。</strong></p><p>所以，我们要把这些已经占用的内存页面所对应的 msadsc_t 结构标记出来，标记成<strong>已分配</strong>，这样内存分配算法就不会找到它们了。</p><p>要解决这个问题，我们只要给出被占用内存的起始地址和结束地址，然后从起始地址开始查找对应的 msadsc_t 结构，再把它标记为已经分配，最后直到查找到结束地址为止。</p><p>下面我们在 <code>msadsc.c</code> 文件中来实现这个方案，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//搜索一段内存地址空间所对应的msadsc_t结构</span>
<span class="token class-name">u64_t</span> <span class="token function">search_segment_occupymsadsc</span><span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msastart<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> msanr<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> ocpystat<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> ocpyend<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">u64_t</span> mphyadr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fsmsnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fstatmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> mnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mnr <span class="token operator">&lt;</span> msanr<span class="token punctuation">;</span> mnr<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msastart<span class="token punctuation">[</span>mnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_padrs <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">)</span> <span class="token operator">==</span> ocpystat<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//找出开始地址对应的第一个msadsc_t结构，就跳转到step1</span>
            fstatmp <span class="token operator">=</span> <span class="token operator">&amp;</span>msastart<span class="token punctuation">[</span>mnr<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> step1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
step1<span class="token operator">:</span>
    fsmsnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fstatmp<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">u64_t</span> tmpadr <span class="token operator">=</span> ocpystat<span class="token punctuation">;</span> tmpadr <span class="token operator">&lt;</span> ocpyend<span class="token punctuation">;</span> tmpadr <span class="token operator">+=</span> PAGESIZE<span class="token punctuation">,</span> fsmsnr<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//从开始地址对应的第一个msadsc_t结构开始设置，直到结束地址对应的最后一个masdsc_t结构</span>
        mphyadr <span class="token operator">=</span> fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_padrs <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mphyadr <span class="token operator">!=</span> tmpadr<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>MF_MOCTY_FREE <span class="token operator">!=</span> fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_mocty <span class="token operator">||</span>
            <span class="token number">0</span> <span class="token operator">!=</span> fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx <span class="token operator">||</span>
            PAF_NO_ALLOC <span class="token operator">!=</span> fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//设置msadsc_t结构为已经分配，已经分配给内核</span>
        fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_mocty <span class="token operator">=</span> MF_MOCTY_KRNL<span class="token punctuation">;</span>
        fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">++</span><span class="token punctuation">;</span>
        fstatmp<span class="token punctuation">[</span>fsmsnr<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_ALLOC<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//进行一些数据的正确性检查</span>
    <span class="token class-name">u64_t</span> ocpysz <span class="token operator">=</span> ocpyend <span class="token operator">-</span> ocpystat<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ocpysz <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ocpysz <span class="token operator">&gt;&gt;</span> PSHRSIZE<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> fsmsnr<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> fsmsnr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ocpysz <span class="token operator">&gt;&gt;</span> PSHRSIZE<span class="token punctuation">)</span> <span class="token operator">!=</span> fsmsnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> fsmsnr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token class-name">bool_t</span> <span class="token function">search_krloccupymsadsc_core</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">u64_t</span> retschmnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msadstat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-&gt;</span>mb_memmappadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">u64_t</span> msanr <span class="token operator">=</span> mbsp<span class="token operator">-&gt;</span>mb_memmapnr<span class="token punctuation">;</span>
    <span class="token comment">//搜索BIOS中断表占用的内存页所对应msadsc_t结构</span>
    retschmnr <span class="token operator">=</span> <span class="token function">search_segment_occupymsadsc</span><span class="token punctuation">(</span>msadstat<span class="token punctuation">,</span> msanr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> retschmnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//搜索内核栈占用的内存页所对应msadsc_t结构</span>
    retschmnr <span class="token operator">=</span> <span class="token function">search_segment_occupymsadsc</span><span class="token punctuation">(</span>msadstat<span class="token punctuation">,</span> msanr<span class="token punctuation">,</span> mbsp<span class="token operator">-&gt;</span>mb_krlinitstack <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0xfffUL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mbsp<span class="token operator">-&gt;</span>mb_krlinitstack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> retschmnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//搜索内核占用的内存页所对应msadsc_t结构</span>
    retschmnr <span class="token operator">=</span> <span class="token function">search_segment_occupymsadsc</span><span class="token punctuation">(</span>msadstat<span class="token punctuation">,</span> msanr<span class="token punctuation">,</span> mbsp<span class="token operator">-&gt;</span>mb_krlimgpadr<span class="token punctuation">,</span> mbsp<span class="token operator">-&gt;</span>mb_nextwtpadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> retschmnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//搜索内核映像文件占用的内存页所对应msadsc_t结构</span>
    retschmnr <span class="token operator">=</span> <span class="token function">search_segment_occupymsadsc</span><span class="token punctuation">(</span>msadstat<span class="token punctuation">,</span> msanr<span class="token punctuation">,</span> mbsp<span class="token operator">-&gt;</span>mb_imgpadr<span class="token punctuation">,</span> mbsp<span class="token operator">-&gt;</span>mb_imgpadr <span class="token operator">+</span> mbsp<span class="token operator">-&gt;</span>mb_imgsz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> retschmnr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//初始化搜索内核占用的内存页面</span>
<span class="token keyword">void</span> <span class="token function">init_search_krloccupymm</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//实际初始化搜索内核占用的内存页面</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">search_krloccupymsadsc_core</span><span class="token punctuation">(</span>mbsp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">&quot;search_krloccupymsadsc_core fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这三个函数逻辑很简单，由 init_search_krloccupymm 函数入口，search_krloccupymsadsc_core 函数驱动，由 search_segment_occupymsadsc 函数完成实际的工作。</p><p>由于初始化阶段各种数据占用的开始、结束地址和大小，这些信息都保存在 machbstart_t 类型的 kmachbsp 变量中，所以函数与 machbstart_t 类型的指针为参数。</p><p>其实 phymmarge_t、msadsc_t、memarea_t 这些结构的实例变量和 MMU 页表，它们所占用的内存空间已经涵盖在了内核自身占用的内存空间。</p><p>好了，这个问题我们已经完美解决，只要在初始化内存页结构和内存区结构之后调用 init_search_krloccupymm 函数即可。</p><h2 id="合并内存页到内存区-memarea-c" tabindex="-1"><a class="header-anchor" href="#合并内存页到内存区-memarea-c" aria-hidden="true">#</a> 合并内存页到内存区: memarea.c</h2><p>我们做了这么多前期工作，依然没有让内存页和内存区联系起来，即让 msadsc_t 结构挂载到内存区对应的数组中。只有这样，我们才能提高内存管理器的分配速度。</p><p>让我们来着手干这件事情，这件事情有点复杂，但是我给你梳理以后就会清晰很多。整体上可以分成两步。</p><p>1.<strong>确定内存页属于哪个区</strong>，即标定一系列 msadsc_t 结构是属于哪个 memarea_t 结构的。</p><p>2.<strong>把特定的内存页合并</strong>，然后挂载到特定的内存区下的 memdivmer_t 结构中的 dm_mdmlielst 数组中。</p><p>我们先来做第一件事，这件事比较简单，我们只要遍历每个 memarea_t 结构，遍历过程中根据特定的 memarea_t 结构，然后去扫描整个 msadsc_t 结构数组，最后依次对比 msadsc_t 的物理地址，看它是否落在 memarea_t 结构的地址区间中。</p><p>如果是，就把这个 memarea_t 结构的类型值写入 msadsc_t 结构中，这样就一个一个打上了标签，遍历 memarea_t 结构结束之后，每个 msadsc_t 结构就只归属于某一个 memarea_t 结构了。</p><p>我们在 <code>memarea.c</code> 文件中写几个函数，来实现前面这个步骤，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//给msadsc_t结构打上标签</span>
<span class="token class-name">uint_t</span> <span class="token function">merlove_setallmarflgs_onmemarea</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mstat<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> msanr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">u32_t</span> muindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadflgs_t</span> <span class="token operator">*</span>mdfp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//获取内存区类型</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>mareap<span class="token operator">-&gt;</span>ma_type<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> MA_TYPE_HWAD<span class="token operator">:</span>
        muindx <span class="token operator">=</span> MF_MARTY_HWD <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//硬件区标签</span>
        mdfp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadflgs_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>muindx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> MA_TYPE_KRNL<span class="token operator">:</span>
        muindx <span class="token operator">=</span> MF_MARTY_KRL <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//内核区标签</span>
        mdfp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadflgs_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>muindx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> MA_TYPE_PROC<span class="token operator">:</span>
        muindx <span class="token operator">=</span> MF_MARTY_PRC <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//应用区标签</span>
        mdfp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadflgs_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>muindx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">u64_t</span> phyadr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> retnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//扫描所有的msadsc_t结构</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> mix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mix <span class="token operator">&lt;</span> msanr<span class="token punctuation">;</span> mix<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>MF_MARTY_INIT <span class="token operator">==</span> mstat<span class="token punctuation">[</span>mix<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_marty<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>    <span class="token comment">//获取msadsc_t结构对应的地址</span>
            phyadr <span class="token operator">=</span> mstat<span class="token punctuation">[</span>mix<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_padrs <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">;</span>
            <span class="token comment">//和内存区的地址区间比较 </span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>phyadr <span class="token operator">&gt;=</span> mareap<span class="token operator">-&gt;</span>ma_logicstart <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>phyadr <span class="token operator">+</span> PAGESIZE<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> mareap<span class="token operator">-&gt;</span>ma_logicend<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//设置msadsc_t结构的标签</span>
                mstat<span class="token punctuation">[</span>mix<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_marty <span class="token operator">=</span> mdfp<span class="token operator">-&gt;</span>mf_marty<span class="token punctuation">;</span>
                retnr<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> retnr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">bool_t</span> <span class="token function">merlove_mem_core</span><span class="token punctuation">(</span><span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取msadsc_t结构的首地址</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mstatp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-&gt;</span>mb_memmappadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取msadsc_t结构的个数</span>
    <span class="token class-name">uint_t</span> msanr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-&gt;</span>mb_memmapnr<span class="token punctuation">,</span> maxp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//获取memarea_t结构的首地址</span>
    <span class="token class-name">memarea_t</span> <span class="token operator">*</span>marea <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-&gt;</span>mb_memznpadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> sretf <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token punctuation">,</span> tretf <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token punctuation">;</span>
    <span class="token comment">//遍历每个memarea_t结构</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> mi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mi <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-&gt;</span>mb_memznnr<span class="token punctuation">;</span> mi<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//针对其中一个memarea_t结构给msadsc_t结构打上标签</span>
        sretf <span class="token operator">=</span> <span class="token function">merlove_setallmarflgs_onmemarea</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>marea<span class="token punctuation">[</span>mi<span class="token punctuation">]</span><span class="token punctuation">,</span> mstatp<span class="token punctuation">,</span> msanr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0UL</span><span class="token punctuation">)</span> <span class="token operator">==</span> sretf<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
     <span class="token comment">//遍历每个memarea_t结构</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> maidx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> maidx <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-&gt;</span>mb_memznnr<span class="token punctuation">;</span> maidx<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//针对其中一个memarea_t结构对msadsc_t结构进行合并</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">merlove_mem_onmemarea</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>marea<span class="token punctuation">[</span>maidx<span class="token punctuation">]</span><span class="token punctuation">,</span> mstatp<span class="token punctuation">,</span> msanr<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        maxp <span class="token operator">+=</span> marea<span class="token punctuation">[</span>maidx<span class="token punctuation">]</span><span class="token punctuation">.</span>ma_maxpages<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//初始化页面合并</span>
<span class="token keyword">void</span> <span class="token function">init_merlove_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">merlove_mem_core</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">&quot;merlove_mem_core fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们一下子写了三个函数，它们的作用且听我一一道来。从 init_merlove_mem 函数开始，但是它并不实际干活，作为入口函数，它调用的 merlove_mem_core 函数才是真正干活的。</p><p>这个 merlove_mem_core 函数有两个遍历内存区，第一次遍历是为了完成上述第一步：确定内存页属于哪个区。</p><p>当确定内存页属于哪个区之后，就来到了第二次遍历 memarea_t 结构，合并其中的 msadsc_t 结构，并把它们挂载到其中的 memdivmer_t 结构下的 dm_mdmlielst 数组中。</p><p>这个操作就稍微有点复杂了。<strong>第一，它要保证其中所有的 msadsc_t 结构挂载到 dm_mdmlielst 数组中合适的 bafhlst_t 结构中。</strong></p><p><strong>第二，它要保证多个 msadsc_t 结构有最大的连续性。</strong></p><p>举个例子，比如一个内存区中有 12 个页面，其中 10 个页面是连续的地址为 0～0x9000，还有两个页面其中一个地址为 0xb000，另一个地址为 0xe000。</p><p>这样的情况下，需要多个页面保持最大的连续性，还有在 m_mdmlielst 数组中找到合适的 bafhlst_t 结构。</p><p>那么：0～0x7000 这 8 个页面就要挂载到 m_mdmlielst 数组中第 3 个 bafhlst_t 结构中；0x8000～0x9000 这 2 个页面要挂载到 m_mdmlielst 数组中第 1 个 bafhlst_t 结构中，而 0xb000 和 0xe000 这 2 个页面都要挂载到 m_mdmlielst 数组中第 0 个 bafhlst_t 结构中。</p><p>从上述代码可以看出，遍历每个内存区，然后针对其中每一个内存区进行 msadsc_t 结构的合并操作，完成这个操作的是 <strong>merlove_mem_onmemarea</strong>，我们这就去写好这个函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">bool_t</span> <span class="token function">continumsadsc_add_bafhlst</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fstat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fend<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> fmnr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    fstat<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
    <span class="token comment">//开始的msadsc_t结构指向最后的msadsc_t结构 </span>
    fstat<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> fend<span class="token punctuation">;</span>
    fend<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_BAFH<span class="token punctuation">;</span>
    <span class="token comment">//最后的msadsc_t结构指向它属于的bafhlst_t结构 </span>
    fend<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> bafhp<span class="token punctuation">;</span>
    <span class="token comment">//把多个地址连续的msadsc_t结构的的开始的那个msadsc_t结构挂载到bafhlst_t结构的af_frelst中</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fstat<span class="token operator">-&gt;</span>md_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bafhp<span class="token operator">-&gt;</span>af_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//更新bafhlst_t的统计数据</span>
    bafhp<span class="token operator">-&gt;</span>af_fobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    bafhp<span class="token operator">-&gt;</span>af_mobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">//更新内存区的统计数据</span>
    mareap<span class="token operator">-&gt;</span>ma_maxpages <span class="token operator">+=</span> fmnr<span class="token punctuation">;</span>
    mareap<span class="token operator">-&gt;</span>ma_freepages <span class="token operator">+=</span> fmnr<span class="token punctuation">;</span>
    mareap<span class="token operator">-&gt;</span>ma_allmsadscnr <span class="token operator">+=</span> fmnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">bool_t</span> <span class="token function">continumsadsc_mareabafh_core</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>rfstat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>rfend<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>rfmnr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint_t</span> retval <span class="token operator">=</span> <span class="token operator">*</span>rfmnr<span class="token punctuation">,</span> tmpmnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mstat <span class="token operator">=</span> <span class="token operator">*</span>rfstat<span class="token punctuation">,</span> <span class="token operator">*</span>mend <span class="token operator">=</span> <span class="token operator">*</span>rfend<span class="token punctuation">;</span>
    <span class="token comment">//根据地址连续的msadsc_t结构的数量查找合适bafhlst_t结构</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhp <span class="token operator">=</span> <span class="token function">find_continumsa_inbafhlst</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//判断bafhlst_t结构状态和类型对不对</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BAFH_STUS_DIVP <span class="token operator">==</span> bafhp<span class="token operator">-&gt;</span>af_stus <span class="token operator">||</span> BAFH_STUS_DIVM <span class="token operator">==</span> bafhp<span class="token operator">-&gt;</span>af_stus<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> MA_TYPE_PROC <span class="token operator">!=</span> mareap<span class="token operator">-&gt;</span>ma_type<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//看地址连续的msadsc_t结构的数量是不是正好是bafhp-&gt;af_oderpnr</span>
        tmpmnr <span class="token operator">=</span> retval <span class="token operator">-</span> bafhp<span class="token operator">-&gt;</span>af_oderpnr<span class="token punctuation">;</span>
        <span class="token comment">//根据地址连续的msadsc_t结构挂载到bafhlst_t结构中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">continumsadsc_add_bafhlst</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> bafhp<span class="token punctuation">,</span> mstat<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mstat<span class="token punctuation">[</span>bafhp<span class="token operator">-&gt;</span>af_oderpnr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bafhp<span class="token operator">-&gt;</span>af_oderpnr<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//如果地址连续的msadsc_t结构的数量正好是bafhp-&gt;af_oderpnr则完成，否则返回再次进入此函数 </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpmnr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token operator">*</span>rfmnr <span class="token operator">=</span> tmpmnr<span class="token punctuation">;</span>
            <span class="token operator">*</span>rfend <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//挂载bafhp-&gt;af_oderpnr地址连续的msadsc_t结构到bafhlst_t中</span>
        <span class="token operator">*</span>rfstat <span class="token operator">=</span> <span class="token operator">&amp;</span>mstat<span class="token punctuation">[</span>bafhp<span class="token operator">-&gt;</span>af_oderpnr<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//还剩多少个地址连续的msadsc_t结构</span>
        <span class="token operator">*</span>rfmnr <span class="token operator">=</span> tmpmnr<span class="token punctuation">;</span>
        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">bool_t</span> <span class="token function">merlove_continumsadsc_mareabafh</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mstat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mend<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> mnr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint_t</span> mnridx <span class="token operator">=</span> mnr<span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fstat <span class="token operator">=</span> mstat<span class="token punctuation">,</span> <span class="token operator">*</span>fend <span class="token operator">=</span> mend<span class="token punctuation">;</span>
    <span class="token comment">//如果mnridx &gt; 0并且NULL != fend就循环调用continumsadsc_mareabafh_core函数，而mnridx和fend由这个函数控制</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>mnridx <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> fend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token comment">//为一段地址连续的msadsc_t结构寻找合适m_mdmlielst数组中的bafhlst_t结构</span>
        <span class="token function">continumsadsc_mareabafh_core</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fstat<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fend<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mnridx<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token class-name">bool_t</span> <span class="token function">merlove_scan_continumsadsc</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fmstat<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>fntmsanr<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> fmsanr<span class="token punctuation">,</span>
                                         <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>retmsastatp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>retmsaendp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retfmnr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">u32_t</span> muindx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadflgs_t</span> <span class="token operator">*</span>mdfp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msastat <span class="token operator">=</span> fmstat<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> retfindmnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> tmidx <span class="token operator">=</span> <span class="token operator">*</span>fntmsanr<span class="token punctuation">;</span>
    <span class="token comment">//从外层函数的fntmnr变量开始遍历所有msadsc_t结构</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> tmidx <span class="token operator">&lt;</span> fmsanr<span class="token punctuation">;</span> tmidx<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token comment">//一个msadsc_t结构是否属于这个内存区，是否空闲</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_marty <span class="token operator">==</span> mdfp<span class="token operator">-&gt;</span>mf_marty <span class="token operator">&amp;&amp;</span>
            <span class="token number">0</span> <span class="token operator">==</span> msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx <span class="token operator">&amp;&amp;</span>
            MF_MOCTY_FREE <span class="token operator">==</span> msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_mocty <span class="token operator">&amp;&amp;</span>
            PAF_NO_ALLOC <span class="token operator">==</span> msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token comment">//返回从这个msadsc_t结构开始到下一个非空闲、地址非连续的msadsc_t结构对应的msadsc_t结构索引号到retfindmnr变量中</span>
            rets <span class="token operator">=</span> <span class="token function">scan_len_msadsc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">,</span> mdfp<span class="token punctuation">,</span> fmsanr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retfindmnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//下一轮开始的msadsc_t结构索引</span>
            <span class="token operator">*</span>fntmsanr <span class="token operator">=</span> tmidx <span class="token operator">+</span> retfindmnr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">//当前地址连续msadsc_t结构的开始地址</span>
            <span class="token operator">*</span>retmsastatp <span class="token operator">=</span> <span class="token operator">&amp;</span>msastat<span class="token punctuation">[</span>tmidx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//当前地址连续msadsc_t结构的结束地址</span>
            <span class="token operator">*</span>retmsaendp <span class="token operator">=</span> <span class="token operator">&amp;</span>msastat<span class="token punctuation">[</span>tmidx <span class="token operator">+</span> retfindmnr<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//当前有多少个地址连续msadsc_t结构</span>
            <span class="token operator">*</span>retfmnr <span class="token operator">=</span> retfindmnr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">bool_t</span> <span class="token function">merlove_mem_onmemarea</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mstat<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> msanr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retstatmsap <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>retendmsap <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>fntmsap <span class="token operator">=</span> mstat<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> retfindmnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> fntmnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">bool_t</span> retscan <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> fntmnr <span class="token operator">&lt;</span> msanr<span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//获取最多且地址连续的msadsc_t结构体的开始、结束地址、一共多少个msadsc_t结构体，下一次循环的fntmnr</span>
        retscan <span class="token operator">=</span> <span class="token function">merlove_scan_continumsadsc</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> fntmsap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fntmnr<span class="token punctuation">,</span> msanr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retstatmsap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retendmsap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retfindmnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> retstatmsap <span class="token operator">&amp;&amp;</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> retendmsap<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token comment">//把一组连续的msadsc_t结构体挂载到合适的m_mdmlielst数组中的bafhlst_t结构中</span>
        <span class="token function">merlove_continumsadsc_mareabafh</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> retstatmsap<span class="token punctuation">,</span> retendmsap<span class="token punctuation">,</span> retfindmnr<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了节约篇幅，我删除了大量检查错误的代码，你可以在我提供的源代码里自行查看。</p><p>上述代码中，整体上分为两步。</p><p>第一步，通过 merlove_scan_continumsadsc 函数，返回最多且地址连续的 msadsc_t 结构体的开始、结束地址、一共多少个 msadsc_t 结构体，下一轮开始的 msadsc_t 结构体的索引号。</p><p>第二步，根据第一步获取的信息调用 merlove_continumsadsc_mareabafh 函数，把第一步返回那一组连续的 msadsc_t 结构体，挂载到合适的 m_mdmlielst 数组中的 bafhlst_t 结构中。详细的逻辑已经在注释中说明。</p><p>好，内存页已经按照规定的方式组织起来了，这表示物理内存管理器的初始化工作已经进入尾声。</p><h2 id="初始化汇总-次序很重要" tabindex="-1"><a class="header-anchor" href="#初始化汇总-次序很重要" aria-hidden="true">#</a> 初始化汇总: 次序很重要</h2><p>别急！先别急着写内存分配相关的代码。到目前为止，我们一起写了这么多的内存初始化相关的代码，但是我们没有调用它们。</p><p>根据前面内存管理数据结构的关系，很显然，**它们的调用次序很重要，谁先谁后都有严格的规定，这关乎内存管理初始化的成败。**所以，现在我们就在先前的 init_memmgr 函数中去调用它们，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init_memmgr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//初始化内存页结构</span>
    <span class="token function">init_msadsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//初始化内存区结构</span>
    <span class="token function">init_memarea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//处理内存占用</span>
    <span class="token function">init_search_krloccupymm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//合并内存页到内存区中</span>
    <span class="token function">init_merlove_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_memmgrob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，init_msadsc、init_memarea 函数是可以交换次序的，它们俩互不影响，但它们俩必须最先开始调用，而后面的函数要依赖它们生成的数据结构。</p><p>但是 init_search_krloccupymm 函数必须要在 init_merlove_mem 函数之前被调用，因为 init_merlove_mem 函数在合并页面时，必须先知道哪些页面被占用了。</p><p>等一等，init_memmgrob 是什么函数，这个我们还没写呢。下面我们就来现实它。</p><p>不知道你发现没有，我们的 phymmarge_t 结构体的地址和数量、msadsc_t 结构体的地址和数据、memarea_t 结构体的地址和数量都保存在了 <strong>kmachbsp 变量</strong>中，这个变量其实不是用来管理内存的，而且它里面放的是<strong>物理地址</strong>。</p><p>但内核使用的是虚拟地址，每次都要转换极不方便，所以我们要设计一个专用的数据结构，用于内存管理。我们来定义一下这个结构，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//cosmos/include/halinc/halglobal.c</span>
<span class="token function">HAL_DEFGLOB_VARIABLE</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span><span class="token punctuation">,</span>memmgrob<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_MEMMGROB</span>
<span class="token punctuation">{</span>
    <span class="token class-name">list_h_t</span> mo_list<span class="token punctuation">;</span>
    <span class="token class-name">spinlock_t</span> mo_lock<span class="token punctuation">;</span>        <span class="token comment">//保护自身自旋锁</span>
    <span class="token class-name">uint_t</span> mo_stus<span class="token punctuation">;</span>            <span class="token comment">//状态</span>
    <span class="token class-name">uint_t</span> mo_flgs<span class="token punctuation">;</span>            <span class="token comment">//标志</span>
    <span class="token class-name">u64_t</span> mo_memsz<span class="token punctuation">;</span>            <span class="token comment">//内存大小</span>
    <span class="token class-name">u64_t</span> mo_maxpages<span class="token punctuation">;</span>         <span class="token comment">//内存最大页面数</span>
    <span class="token class-name">u64_t</span> mo_freepages<span class="token punctuation">;</span>        <span class="token comment">//内存最大空闲页面数</span>
    <span class="token class-name">u64_t</span> mo_alocpages<span class="token punctuation">;</span>        <span class="token comment">//内存最大分配页面数</span>
    <span class="token class-name">u64_t</span> mo_resvpages<span class="token punctuation">;</span>        <span class="token comment">//内存保留页面数</span>
    <span class="token class-name">u64_t</span> mo_horizline<span class="token punctuation">;</span>        <span class="token comment">//内存分配水位线</span>
    <span class="token class-name">phymmarge_t</span><span class="token operator">*</span> mo_pmagestat<span class="token punctuation">;</span> <span class="token comment">//内存空间布局结构指针</span>
    <span class="token class-name">u64_t</span> mo_pmagenr<span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span><span class="token operator">*</span> mo_msadscstat<span class="token punctuation">;</span>   <span class="token comment">//内存页面结构指针</span>
    <span class="token class-name">u64_t</span> mo_msanr<span class="token punctuation">;</span>
    <span class="token class-name">memarea_t</span><span class="token operator">*</span> mo_mareastat<span class="token punctuation">;</span>   <span class="token comment">//内存区结构指针 </span>
    <span class="token class-name">u64_t</span> mo_mareanr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token class-name">memmgrob_t</span><span class="token punctuation">;</span>

<span class="token comment">//cosmos/hal/x86/memmgrinit.c</span>

<span class="token keyword">void</span> <span class="token function">memmgrob_t_init</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>initp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>mo_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">knl_spinlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initp<span class="token operator">-&gt;</span>mo_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_stus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_flgs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_memsz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_maxpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_freepages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_alocpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_resvpages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_horizline <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_pmagestat <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_pmagenr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_msadscstat <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_msanr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_mareastat <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    initp<span class="token operator">-&gt;</span>mo_mareanr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init_memmgrob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">machbstart_t</span> <span class="token operator">*</span>mbsp <span class="token operator">=</span> <span class="token operator">&amp;</span>kmachbsp<span class="token punctuation">;</span>
    <span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>mobp <span class="token operator">=</span> <span class="token operator">&amp;</span>memmgrob<span class="token punctuation">;</span>
    <span class="token function">memmgrob_t_init</span><span class="token punctuation">(</span>mobp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mobp<span class="token operator">-&gt;</span>mo_pmagestat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">phymmarge_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-&gt;</span>mb_e820expadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mobp<span class="token operator">-&gt;</span>mo_pmagenr <span class="token operator">=</span> mbsp<span class="token operator">-&gt;</span>mb_e820exnr<span class="token punctuation">;</span>
    mobp<span class="token operator">-&gt;</span>mo_msadscstat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-&gt;</span>mb_memmappadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mobp<span class="token operator">-&gt;</span>mo_msanr <span class="token operator">=</span> mbsp<span class="token operator">-&gt;</span>mb_memmapnr<span class="token punctuation">;</span>
    mobp<span class="token operator">-&gt;</span>mo_mareastat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">phyadr_to_viradr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>mbsp<span class="token operator">-&gt;</span>mb_memznpadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mobp<span class="token operator">-&gt;</span>mo_mareanr <span class="token operator">=</span> mbsp<span class="token operator">-&gt;</span>mb_memznnr<span class="token punctuation">;</span>
    mobp<span class="token operator">-&gt;</span>mo_memsz <span class="token operator">=</span> mbsp<span class="token operator">-&gt;</span>mb_memmapnr <span class="token operator">&lt;&lt;</span> PSHRSIZE<span class="token punctuation">;</span>
    mobp<span class="token operator">-&gt;</span>mo_maxpages <span class="token operator">=</span> mbsp<span class="token operator">-&gt;</span>mb_memmapnr<span class="token punctuation">;</span>
    <span class="token class-name">uint_t</span> aidx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mobp<span class="token operator">-&gt;</span>mo_msanr<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> mobp<span class="token operator">-&gt;</span>mo_msadscstat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx <span class="token operator">&amp;&amp;</span>
            MF_MOCTY_KRNL <span class="token operator">==</span> mobp<span class="token operator">-&gt;</span>mo_msadscstat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>md_indxflgs<span class="token punctuation">.</span>mf_mocty <span class="token operator">&amp;&amp;</span>
            PAF_ALLOC <span class="token operator">==</span> mobp<span class="token operator">-&gt;</span>mo_msadscstat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            aidx<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    mobp<span class="token operator">-&gt;</span>mo_alocpages <span class="token operator">=</span> aidx<span class="token punctuation">;</span>
    mobp<span class="token operator">-&gt;</span>mo_freepages <span class="token operator">=</span> mobp<span class="token operator">-&gt;</span>mo_maxpages <span class="token operator">-</span> mobp<span class="token operator">-&gt;</span>mo_alocpages<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些代码非常容易理解，我们就不再讨论了，无非是将内存管理核心数据结构的地址和数量放在其中，并计算了一些统计信息，这没有任何难度，相信你会轻松理解。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>今天课程的重点工作是初始化我们设计的内存管理数据结构，在内存中建立它们的实例变量，我来为你梳理一下重点。</p><ol><li><p>首先，我们从初始化 msadsc_t 结构开始，在内存中建立 msadsc_t 结构的实例变量，每个物理内存页面一个 msadsc_t 结构的实例变量。</p></li><li><p>然后是初始化 memarea_t 结构，在 msadsc_t 结构的实例变量之后，每个内存区一个 memarea_t 结构实例变量。</p></li><li><p>接着标记哪些 msadsc_t 结构对应的物理内存被内核占用了，这些被标记 msadsc_t 结构是不能纳入内存管理结构中去的。</p></li><li><p>最后，把所有的空闲 msadsc_t 结构按最大地址连续的形式组织起来，挂载到 memarea_t 结构下的 memdivmer_t 结构中，对应的 dm_mdmlielst 数组中。</p></li></ol><p>不知道你是否想过，随着物理内存不断增加，msadsc_t 结构实例变量本身占用的内存空间就会增加，那你有办法降低 msadsc_t 结构实例变量占用的内存空间吗？期待你的实现。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请问在 4GB 的物理内存的情况下，msadsc_t 结构实例变量本身占用多大的内存空间？</p><p>欢迎你在留言区跟我交流互动，也希望你能把这节课分享给你的同事、朋友。</p><p>好，我是 LMOS，我们下节课见！</p>`,86),o=[e];function c(l,i){return s(),a("div",null,o)}const m=n(t,[["render",c],["__file","H17-内存管理初始化.html.vue"]]);export{m as default};
