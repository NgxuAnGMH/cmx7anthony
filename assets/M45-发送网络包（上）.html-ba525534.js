import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-cdabc73c.js";const p="/assets/9ad34c3c748978f915027d5085a858b8-06b25571.png",e="/assets/404a6c5041452c0641ae3cba5319dc1f-7878979e.png",o="/assets/9791e2f9ff63a9d8f849df7cd55fe965-4bed33ad.png",c="/assets/b62eea403e665bb196dceba571392531-c067669d.png",i="/assets/be225a97816a664367f29be9046aa30e-ef0d1e0d.png",l="/assets/dc66535fa7e1a10fd6d728865f6c9344-c860cb5e.png",u={},k=t(`<h1 id="_45-发送网络包-上-如何表达我们想让合作伙伴做什么" tabindex="-1"><a class="header-anchor" href="#_45-发送网络包-上-如何表达我们想让合作伙伴做什么" aria-hidden="true">#</a> 45 | 发送网络包（上）：如何表达我们想让合作伙伴做什么？</h1><p>上一节，我们通过 socket 函数、bind 函数、listen 函数、accept 函数以及 connect 函数，在内核建立好了数据结构，并完成了 TCP 连接建立的三次握手过程。这一节，我们接着来分析，发送一个网络包的过程。</p><p>【这一节主要讲从 VFS 层一直到 IP 层的流程，下一节再补充 IP 层和 MAC 层是如何发送数据的。】</p><h2 id="解析-socket-的-write-操作" tabindex="-1"><a class="header-anchor" href="#解析-socket-的-write-操作" aria-hidden="true">#</a> <strong>解析 socket 的 Write 操作</strong></h2><p>socket 对于用户来讲，是一个文件一样的存在，拥有一个文件描述符。因而对于网络包的发送，我们可以使用对于 socket 文件的写入系统调用，也就是 write 系统调用。</p><p>write 系统调用对于一个文件描述符的操作，大致过程都是类似的。在文件系统那一节，我们已经详细解析过，这里不再多说。对于每一个打开的文件都有一个 struct file 结构，write 系统调用会最终调用 stuct file 结构指向的 file_operations 操作。</p><p>对于 socket 来讲，它的 file_operations 定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> socket_file_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>owner <span class="token operator">=</span>  THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>llseek <span class="token operator">=</span>  no_llseek<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>read_iter <span class="token operator">=</span>  sock_read_iter<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write_iter <span class="token operator">=</span>  sock_write_iter<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>poll <span class="token operator">=</span>    sock_poll<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>unlocked_ioctl <span class="token operator">=</span> sock_ioctl<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>mmap <span class="token operator">=</span>    sock_mmap<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>release <span class="token operator">=</span>  sock_close<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fasync <span class="token operator">=</span>  sock_fasync<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>sendpage <span class="token operator">=</span>  sock_sendpage<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>splice_write <span class="token operator">=</span> generic_splice_sendpage<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>splice_read <span class="token operator">=</span>  sock_splice_read<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照文件系统的写入流程，调用的是 sock_write_iter。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">sock_write_iter</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span>iocb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>from<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file <span class="token operator">=</span> iocb<span class="token operator">-&gt;</span>ki_filp<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock <span class="token operator">=</span> file<span class="token operator">-&gt;</span>private_data<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> msg <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">.</span>msg_iter <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token punctuation">,</span>
           <span class="token punctuation">.</span>msg_iocb <span class="token operator">=</span> iocb<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token class-name">ssize_t</span> res<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  res <span class="token operator">=</span> <span class="token function">sock_sendmsg</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>from <span class="token operator">=</span> msg<span class="token punctuation">.</span>msg_iter<span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 sock_write_iter 中，我们通过 VFS 中的 struct file，将创建好的 socket 结构拿出来，然后调用 sock_sendmsg。而 sock_sendmsg 会调用 sock_sendmsg_nosec。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sock_sendmsg_nosec</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> sock<span class="token operator">-&gt;</span>ops<span class="token operator">-&gt;</span><span class="token function">sendmsg</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token function">msg_data_left</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里调用了 socket 的 ops 的 sendmsg，我们在上一节已经遇到它好几次了。根据 inet_stream_ops 的定义，我们这里调用的是 inet_sendmsg。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">inet_sendmsg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">socket</span> <span class="token operator">*</span>sock<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk <span class="token operator">=</span> sock<span class="token operator">-&gt;</span>sk<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> sk<span class="token operator">-&gt;</span>sk_prot<span class="token operator">-&gt;</span><span class="token function">sendmsg</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面，从 socket 结构中，我们可以得到更底层的 sock 结构，然后调用 sk_prot 的 sendmsg 方法。这个我们同样在上一节遇到好几次了。</p><h2 id="解析-tcp-sendmsg-函数" tabindex="-1"><a class="header-anchor" href="#解析-tcp-sendmsg-函数" aria-hidden="true">#</a> <strong>解析 tcp_sendmsg 函数</strong></h2><p>根据 tcp_prot 的定义，我们调用的是 tcp_sendmsg。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">tcp_sendmsg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">msghdr</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">tcp_sock</span> <span class="token operator">*</span>tp <span class="token operator">=</span> <span class="token function">tcp_sk</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">;</span>
  <span class="token keyword">int</span> flags<span class="token punctuation">,</span> err<span class="token punctuation">,</span> copied <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> mss_now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size_goal<span class="token punctuation">,</span> copied_syn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">long</span> timeo<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/* Ok commence sending. */</span>
  copied <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
restart<span class="token operator">:</span>
  mss_now <span class="token operator">=</span> <span class="token function">tcp_send_mss</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size_goal<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">msg_data_left</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> copy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> size_goal<span class="token punctuation">;</span>

    skb <span class="token operator">=</span> <span class="token function">tcp_write_queue_tail</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcp_send_head</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>skb<span class="token operator">-&gt;</span>ip_summed <span class="token operator">==</span> CHECKSUM_NONE<span class="token punctuation">)</span>
        max <span class="token operator">=</span> mss_now<span class="token punctuation">;</span>
      copy <span class="token operator">=</span> max <span class="token operator">-</span> skb<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>copy <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">tcp_skb_can_collapse_to</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      bool first_skb<span class="token punctuation">;</span>

new_segment<span class="token operator">:</span>
      <span class="token comment">/* Allocate new segment. If the interface is SG,
       * allocate skb fitting to single page.
       */</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sk_stream_memory_free</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> wait_for_sndbuf<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      first_skb <span class="token operator">=</span> <span class="token function">skb_queue_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sk<span class="token operator">-&gt;</span>sk_write_queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      skb <span class="token operator">=</span> <span class="token function">sk_stream_alloc_skb</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span>
              <span class="token function">select_size</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> first_skb<span class="token punctuation">)</span><span class="token punctuation">,</span>
              sk<span class="token operator">-&gt;</span>sk_allocation<span class="token punctuation">,</span>
              first_skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token function">skb_entail</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
      copy <span class="token operator">=</span> size_goal<span class="token punctuation">;</span>
      max <span class="token operator">=</span> size_goal<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Try to append data to the end of skb. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>copy <span class="token operator">&gt;</span> <span class="token function">msg_data_left</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>
      copy <span class="token operator">=</span> <span class="token function">msg_data_left</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Where to copy to? */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">skb_availroom</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">/* We have some space in skb head. Superb! */</span>
      copy <span class="token operator">=</span> <span class="token class-name">min_t</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token function">skb_availroom</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      err <span class="token operator">=</span> <span class="token function">skb_add_data_nocache</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token operator">-&gt;</span>msg_iter<span class="token punctuation">,</span> copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      bool merge <span class="token operator">=</span> true<span class="token punctuation">;</span>
      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">skb_shinfo</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>nr_frags<span class="token punctuation">;</span>
      <span class="token keyword">struct</span> <span class="token class-name">page_frag</span> <span class="token operator">*</span>pfrag <span class="token operator">=</span> <span class="token function">sk_page_frag</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      copy <span class="token operator">=</span> <span class="token class-name">min_t</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> pfrag<span class="token operator">-&gt;</span>size <span class="token operator">-</span> pfrag<span class="token operator">-&gt;</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      err <span class="token operator">=</span> <span class="token function">skb_copy_to_page_nocache</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token operator">-&gt;</span>msg_iter<span class="token punctuation">,</span> skb<span class="token punctuation">,</span>
                   pfrag<span class="token operator">-&gt;</span>page<span class="token punctuation">,</span>
                   pfrag<span class="token operator">-&gt;</span>offset<span class="token punctuation">,</span>
                   copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      pfrag<span class="token operator">-&gt;</span>offset <span class="token operator">+=</span> copy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    tp<span class="token operator">-&gt;</span>write_seq <span class="token operator">+=</span> copy<span class="token punctuation">;</span>
    <span class="token function">TCP_SKB_CB</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>end_seq <span class="token operator">+=</span> copy<span class="token punctuation">;</span>
    <span class="token function">tcp_skb_pcount_set</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    copied <span class="token operator">+=</span> copy<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">msg_data_left</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> MSG_EOR<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">TCP_SKB_CB</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>eor <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>skb<span class="token operator">-&gt;</span>len <span class="token operator">&lt;</span> max <span class="token operator">||</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> MSG_OOB<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">unlikely</span><span class="token punctuation">(</span>tp<span class="token operator">-&gt;</span>repair<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">forced_push</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">tcp_mark_push</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">__tcp_push_pending_frames</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> mss_now<span class="token punctuation">,</span> TCP_NAGLE_PUSH<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>skb <span class="token operator">==</span> <span class="token function">tcp_send_head</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">tcp_push_one</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> mss_now<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tcp_sendmsg 的实现还是很复杂的，这里面做了这样几件事情。</p><p>msg 是用户要写入的数据，这个数据要拷贝到内核协议栈里面去发送；在内核协议栈里面，网络包的数据都是由 struct sk_buff 维护的，因而第一件事情就是找到一个空闲的内存空间，将用户要写入的数据，拷贝到 struct sk_buff 的管辖范围内。而第二件事情就是发送 struct sk_buff。</p><p>在 tcp_sendmsg 中，我们首先通过强制类型转换，将 sock 结构转换为 struct tcp_sock，这个是维护 TCP 连接状态的重要数据结构。</p><p>接下来是 tcp_sendmsg 的第一件事情，把数据拷贝到 struct sk_buff。</p><p>我们先声明一个变量 copied，初始化为 0，这表示拷贝了多少数据。紧接着是一个循环，while (msg_data_left(msg))，也即如果用户的数据没有发送完毕，就一直循环。循环里声明了一个 copy 变量，表示这次拷贝的数值，在循环的最后有 copied += copy，将每次拷贝的数量都加起来。</p><p>我们这里只需要看一次循环做了哪些事情。</p><p><strong>第一步</strong>，tcp_write_queue_tail 从 TCP 写入队列 sk_write_queue 中拿出最后一个 struct sk_buff，在这个写入队列中排满了要发送的 struct sk_buff，为什么要拿最后一个呢？这里面只有最后一个，可能会因为上次用户给的数据太少，而没有填满。</p><p><strong>第二步</strong>，tcp_send_mss 会计算 MSS，也即 Max Segment Size。这是什么呢？这个意思是说，我们在网络上传输的网络包的大小是有限制的，而这个限制在最底层开始就有。</p><p><strong>MTU</strong>（Maximum Transmission Unit，最大传输单元）是二层的一个定义。以以太网为例，MTU 为 1500 个 Byte，前面有 6 个 Byte 的目标 MAC 地址，6 个 Byte 的源 MAC 地址，2 个 Byte 的类型，后面有 4 个 Byte 的 CRC 校验，共 1518 个 Byte。</p><p>在 IP 层，一个 IP 数据报在以太网中传输，如果它的长度大于该 MTU 值，就要进行分片传输。</p><p>在 TCP 层有个 <strong>MSS</strong>（Maximum Segment Size，最大分段大小），等于 MTU 减去 IP 头，再减去 TCP 头。也就是，在不分片的情况下，TCP 里面放的最大内容。</p><p>在这里，max 是 struct sk_buff 的最大数据长度，skb-&gt;len 是当前已经占用的 skb 的数据长度，相减得到当前 skb 的剩余数据空间。</p><p><strong>第三步</strong>，如果 copy 小于 0，说明最后一个 struct sk_buff 已经没地方存放了，需要调用 sk_stream_alloc_skb，重新分配 struct sk_buff，然后调用 skb_entail，将新分配的 sk_buff 放到队列尾部。</p><p>struct sk_buff 是存储网络包的重要的数据结构，在应用层数据包叫 data，在 TCP 层我们称为 segment，在 IP 层我们叫 packet，在数据链路层称为 frame。在 struct sk_buff，首先是一个链表，将 struct sk_buff 结构串起来。</p><p>接下来，我们从 headers_start 开始，到 headers_end 结束，里面都是各层次的头的位置。这里面有二层的 mac_header、三层的 network_header 和四层的 transport_header。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token punctuation">{</span>
  <span class="token keyword">union</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token punctuation">{</span>
      <span class="token comment">/* These two members must be first. */</span>
      <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span>    <span class="token operator">*</span>next<span class="token punctuation">;</span>
      <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span>    <span class="token operator">*</span>prev<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rb_node</span>  rbnode<span class="token punctuation">;</span> <span class="token comment">/* used in netem &amp; tcp stack */</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/* private: */</span>
  __u32      headers_start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">/* public: */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  __u32      priority<span class="token punctuation">;</span>
  <span class="token keyword">int</span>      skb_iif<span class="token punctuation">;</span>
  __u32      hash<span class="token punctuation">;</span>
  __be16      vlan_proto<span class="token punctuation">;</span>
  __u16      vlan_tci<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">union</span> <span class="token punctuation">{</span>
    __u32    mark<span class="token punctuation">;</span>
    __u32    reserved_tailroom<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">union</span> <span class="token punctuation">{</span>
    __be16    inner_protocol<span class="token punctuation">;</span>
    __u8    inner_ipproto<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  __u16      inner_transport_header<span class="token punctuation">;</span>
  __u16      inner_network_header<span class="token punctuation">;</span>
  __u16      inner_mac_header<span class="token punctuation">;</span>

  __be16      protocol<span class="token punctuation">;</span>
  __u16      transport_header<span class="token punctuation">;</span>
  __u16      network_header<span class="token punctuation">;</span>
  __u16      mac_header<span class="token punctuation">;</span>

  <span class="token comment">/* private: */</span>
  __u32      headers_end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">/* public: */</span>

  <span class="token comment">/* These elements must be at the end, see alloc_skb() for details.  */</span>
  <span class="token class-name">sk_buff_data_t</span>    tail<span class="token punctuation">;</span>
  <span class="token class-name">sk_buff_data_t</span>    end<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span>    <span class="token operator">*</span>head<span class="token punctuation">,</span>
        <span class="token operator">*</span>data<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    truesize<span class="token punctuation">;</span>
  <span class="token class-name">refcount_t</span>    users<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后几项， head 指向分配的内存块起始地址。data 这个指针指向的位置是可变的。它有可能随着报文所处的层次而变动。当接收报文时，从网卡驱动开始，通过协议栈层层往上传送数据报，通过增加 skb-&gt;data 的值，来逐步剥离协议首部。而要发送报文时，各协议会创建 sk_buff{}，在经过各下层协议时，通过减少 skb-&gt;data 的值来增加协议首部。tail 指向数据的结尾，end 指向分配的内存块的结束地址。</p><p>要分配这样一个结构，sk_stream_alloc_skb 会最终调用到 __alloc_skb。在这个函数里面，除了分配一个 sk_buff 结构之外，还要分配 sk_buff 指向的数据区域。这段数据区域分为下面这几个部分。</p><p>第一部分是连续的数据区域。紧接着是第二部分，一个 struct skb_shared_info 结构。这个结构是对于网络包发送过程的一个优化，因为传输层之上就是应用层了。按照 TCP 的定义，应用层感受不到下面的网络层的 IP 包是一个个独立的包的存在的。反正就是一个流，往里写就是了，可能一下子写多了，超过了一个 IP 包的承载能力，就会出现上面 MSS 的定义，拆分成一个个的 Segment 放在一个个的 IP 包里面，也可能一次写一点，一次写一点，这样数据是分散的，在 IP 层还要通过内存拷贝合成一个 IP 包。</p><p>为了减少内存拷贝的代价，有的网络设备支持<strong>分散聚合</strong>（Scatter/Gather）I/O，顾名思义，就是 IP 层没必要通过内存拷贝进行聚合，让散的数据零散的放在原处，在设备层进行聚合。如果使用这种模式，网络包的数据就不会放在连续的数据区域，而是放在 struct skb_shared_info 结构里面指向的离散数据，skb_shared_info 的成员变量 skb_frag_t frags[MAX_SKB_FRAGS]，会指向一个数组的页面，就不能保证连续了。</p><img src="`+p+`" alt="img" style="zoom:25%;"><p>于是我们就有了<strong>第四步</strong>。在注释 /* Where to copy to? */ 后面有个 if-else 分支。if 分支就是 skb_add_data_nocache 将数据拷贝到连续的数据区域。else 分支就是 skb_copy_to_page_nocache 将数据拷贝到 struct skb_shared_info 结构指向的不需要连续的页面区域。</p><p><strong>第五步</strong>，就是要发生网络包了。第一种情况是积累的数据报数目太多了，因而我们需要通过调用 __tcp_push_pending_frames 发送网络包。第二种情况是，这是第一个网络包，需要马上发送，调用 tcp_push_one。无论 __tcp_push_pending_frames 还是 tcp_push_one，都会调用 tcp_write_xmit 发送网络包。</p><p>至此，tcp_sendmsg 解析完了。</p><h2 id="解析-tcp-write-xmit-函数" tabindex="-1"><a class="header-anchor" href="#解析-tcp-write-xmit-函数" aria-hidden="true">#</a> <strong>解析 tcp_write_xmit 函数</strong></h2><p>接下来我们来看，tcp_write_xmit 是如何发送网络包的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> bool <span class="token function">tcp_write_xmit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> mss_now<span class="token punctuation">,</span> <span class="token keyword">int</span> nonagle<span class="token punctuation">,</span> <span class="token keyword">int</span> push_one<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> gfp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">tcp_sock</span> <span class="token operator">*</span>tp <span class="token operator">=</span> <span class="token function">tcp_sk</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tso_segs<span class="token punctuation">,</span> sent_pkts<span class="token punctuation">;</span>
  <span class="token keyword">int</span> cwnd_quota<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  max_segs <span class="token operator">=</span> <span class="token function">tcp_tso_segs</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> mss_now<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>skb <span class="token operator">=</span> <span class="token function">tcp_send_head</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    tso_segs <span class="token operator">=</span> <span class="token function">tcp_init_tso_segs</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> mss_now<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    cwnd_quota <span class="token operator">=</span> <span class="token function">tcp_cwnd_test</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tcp_snd_wnd_test</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> mss_now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      is_rwnd_limited <span class="token operator">=</span> true<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    limit <span class="token operator">=</span> mss_now<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tso_segs <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">tcp_urg_mode</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span><span class="token punctuation">)</span>
            limit <span class="token operator">=</span> <span class="token function">tcp_mss_split_point</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> mss_now<span class="token punctuation">,</span> <span class="token class-name">min_t</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> cwnd_quota<span class="token punctuation">,</span> max_segs<span class="token punctuation">)</span><span class="token punctuation">,</span> nonagle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>skb<span class="token operator">-&gt;</span>len <span class="token operator">&gt;</span> limit <span class="token operator">&amp;&amp;</span>
        <span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">tso_fragment</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> mss_now<span class="token punctuation">,</span> gfp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span><span class="token function">tcp_transmit_skb</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> gfp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>

repair<span class="token operator">:</span>
    <span class="token comment">/* Advance the send_head.  This one is sent out.
     * This call will increment packets_out.
     */</span>
    <span class="token function">tcp_event_new_data_sent</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">tcp_minshall_update</span><span class="token punctuation">(</span>tp<span class="token punctuation">,</span> mss_now<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sent_pkts <span class="token operator">+=</span> <span class="token function">tcp_skb_pcount</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>push_one<span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面主要的逻辑是一个循环，用来处理发送队列，只要队列不空，就会发送。</p><p>在一个循环中，涉及 TCP 层的很多传输算法，我们来一一解析。</p><p>第一个概念是 <strong>TSO</strong>（TCP Segmentation Offload）。如果发送的网络包非常大，就像上面说的一样，要进行分段。分段这个事情可以由协议栈代码在内核做，但是缺点是比较费 CPU，另一种方式是延迟到硬件网卡去做，需要网卡支持对大数据包进行自动分段，可以降低 CPU 负载。</p><p>在代码中，tcp_init_tso_segs 会调用 tcp_set_skb_tso_segs。这里面有这样的语句：DIV_ROUND_UP(skb-&gt;len, mss_now)。也就是 sk_buff 的长度除以 mss_now，应该分成几个段。如果算出来要分成多个段，接下来就是要看，是在这里（协议栈的代码里面）分好，还是等待到了底层网卡再分。</p><p>于是，调用函数 tcp_mss_split_point，开始计算切分的 limit。这里面会计算 max_len = mss_now * max_segs，根据现在不切分来计算 limit，所以下一步的判断中，大部分情况下 tso_fragment 不会被调用，等待到了底层网卡来切分。</p><p>第二个概念是<strong>拥塞窗口</strong>的概念（cwnd，congestion window），也就是说为了避免拼命发包，把网络塞满了，定义一个窗口的概念，在这个窗口之内的才能发送，超过这个窗口的就不能发送，来控制发送的频率。</p><p>那窗口大小是多少呢？就是遵循下面这个著名的拥塞窗口变化图。</p><img src="`+e+'" alt="img" style="zoom:25%;"><p>一开始的窗口只有一个 mss 大小叫作 slow start（慢启动）。一开始的增长速度的很快的，翻倍增长。一旦到达一个临界值 ssthresh，就变成线性增长，我们就称为<strong>拥塞避免</strong>。什么时候算真正拥塞呢？就是出现了丢包。一旦丢包，一种方法是马上降回到一个 mss，然后重复先翻倍再线性对的过程。如果觉得太过激进，也可以有第二种方法，就是降到当前 cwnd 的一半，然后进行线性增长。</p><p>在代码中，tcp_cwnd_test 会将当前的 snd_cwnd，减去已经在窗口里面尚未发送完毕的网络包，那就是剩下的窗口大小 cwnd_quota，也即就能发送这么多了。</p><p>第三个概念就是<strong>接收窗口</strong>rwnd 的概念（receive window），也叫滑动窗口。如果说拥塞窗口是为了怕把网络塞满，在出现丢包的时候减少发送速度，那么滑动窗口就是为了怕把接收方塞满，而控制发送速度。</p><img src="'+o+'" alt="img" style="zoom:25%;"><p>滑动窗口，其实就是接收方告诉发送方自己的网络包的接收能力，超过这个能力，我就受不了了。因为滑动窗口的存在，将发送方的缓存分成了四个部分。</p><ul><li>第一部分：发送了并且已经确认的。这部分是已经发送完毕的网络包，这部分没有用了，可以回收。</li><li>第二部分：发送了但尚未确认的。这部分，发送方要等待，万一发送不成功，还要重新发送，所以不能删除。</li><li>第三部分：没有发送，但是已经等待发送的。这部分是接收方空闲的能力，可以马上发送，接收方收得了。</li><li>第四部分：没有发送，并且暂时还不会发送的。这部分已经超过了接收方的接收能力，再发送接收方就收不了了。</li></ul><img src="'+c+`" alt="img" style="zoom:25%;"><p>因为滑动窗口的存在，接收方的缓存也要分成了三个部分。</p><ul><li>第一部分：接受并且确认过的任务。这部分完全接收成功了，可以交给应用层了。</li><li>第二部分：还没接收，但是马上就能接收的任务。这部分有的网络包到达了，但是还没确认，不算完全完毕，有的还没有到达，那就是接收方能够接受的最大的网络包数量。</li><li>第三部分：还没接收，也没法接收的任务。这部分已经超出接收方能力。</li></ul><p>在网络包的交互过程中，接收方会将第二部分的大小，作为 AdvertisedWindow 发送给发送方，发送方就可以根据他来调整发送速度了。</p><p>在 tcp_snd_wnd_test 函数中，会判断 sk_buff 中的 end_seq 和 tcp_wnd_end(tp) 之间的关系，也即这个 sk_buff 是否在滑动窗口的允许范围之内。如果不在范围内，说明发送要受限制了，我们就要把 is_rwnd_limited 设置为 true。</p><p>接下来，tcp_mss_split_point 函数要被调用了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">tcp_mss_split_point</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span>
                                        <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span>
                                        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> mss_now<span class="token punctuation">,</span>
                                        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> max_segs<span class="token punctuation">,</span>
                                        <span class="token keyword">int</span> nonagle<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">tcp_sock</span> <span class="token operator">*</span>tp <span class="token operator">=</span> <span class="token function">tcp_sk</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
        u32 partial<span class="token punctuation">,</span> needed<span class="token punctuation">,</span> window<span class="token punctuation">,</span> max_len<span class="token punctuation">;</span>

        window <span class="token operator">=</span> <span class="token function">tcp_wnd_end</span><span class="token punctuation">(</span>tp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">TCP_SKB_CB</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token operator">-&gt;</span>seq<span class="token punctuation">;</span>
        max_len <span class="token operator">=</span> mss_now <span class="token operator">*</span> max_segs<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>max_len <span class="token operator">&lt;=</span> window <span class="token operator">&amp;&amp;</span> skb <span class="token operator">!=</span> <span class="token function">tcp_write_queue_tail</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> max_len<span class="token punctuation">;</span>

        needed <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>skb<span class="token operator">-&gt;</span>len<span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>max_len <span class="token operator">&lt;=</span> needed<span class="token punctuation">)</span>
                <span class="token keyword">return</span> max_len<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">return</span> needed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面除了会判断上面讲的，是否会因为超出 mss 而分段，还会判断另一个条件，就是是否在滑动窗口的运行范围之内，如果小于窗口的大小，也需要分段，也即需要调用 tso_fragment。</p><p>在一个循环的最后，是调用 tcp_transmit_skb，真的去发送一个网络包。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">tcp_transmit_skb</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sock</span> <span class="token operator">*</span>sk<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> <span class="token keyword">int</span> clone_it<span class="token punctuation">,</span>
                <span class="token class-name">gfp_t</span> gfp_mask<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">inet_connection_sock</span> <span class="token operator">*</span>icsk <span class="token operator">=</span> <span class="token function">inet_csk</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">inet_sock</span> <span class="token operator">*</span>inet<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">tcp_sock</span> <span class="token operator">*</span>tp<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">tcp_skb_cb</span> <span class="token operator">*</span>tcb<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">tcphdr</span> <span class="token operator">*</span>th<span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>

    tp <span class="token operator">=</span> <span class="token function">tcp_sk</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>

    skb<span class="token operator">-&gt;</span>skb_mstamp <span class="token operator">=</span> tp<span class="token operator">-&gt;</span>tcp_mstamp<span class="token punctuation">;</span>
    inet <span class="token operator">=</span> <span class="token function">inet_sk</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tcb <span class="token operator">=</span> <span class="token function">TCP_SKB_CB</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>opts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    tcp_header_size <span class="token operator">=</span> tcp_options_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tcphdr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">skb_push</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> tcp_header_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Build TCP header and checksum it. */</span>
    th <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tcphdr</span> <span class="token operator">*</span><span class="token punctuation">)</span>skb<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
    th<span class="token operator">-&gt;</span>source      <span class="token operator">=</span> inet<span class="token operator">-&gt;</span>inet_sport<span class="token punctuation">;</span>
    th<span class="token operator">-&gt;</span>dest        <span class="token operator">=</span> inet<span class="token operator">-&gt;</span>inet_dport<span class="token punctuation">;</span>
    th<span class="token operator">-&gt;</span>seq         <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>tcb<span class="token operator">-&gt;</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    th<span class="token operator">-&gt;</span>ack_seq     <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>tp<span class="token operator">-&gt;</span>rcv_nxt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__be16 <span class="token operator">*</span><span class="token punctuation">)</span>th<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tcp_header_size <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span>
                    tcb<span class="token operator">-&gt;</span>tcp_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>

    th<span class="token operator">-&gt;</span>check       <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    th<span class="token operator">-&gt;</span>urg_ptr     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">tcp_options_write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__be32 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>th <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    th<span class="token operator">-&gt;</span>window  <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>tp<span class="token operator">-&gt;</span>rcv_wnd<span class="token punctuation">,</span> <span class="token number">65535U</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    err <span class="token operator">=</span> icsk<span class="token operator">-&gt;</span>icsk_af_ops<span class="token operator">-&gt;</span><span class="token function">queue_xmit</span><span class="token punctuation">(</span>sk<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>inet<span class="token operator">-&gt;</span>cork<span class="token punctuation">.</span>fl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tcp_transmit_skb 这个函数比较长，主要做了两件事情，第一件事情就是填充 TCP 头，如果我们对着 TCP 头的格式。</p><img src="`+i+`" alt="img" style="zoom:25%;"><p>这里面有源端口，设置为 inet_sport，有目标端口，设置为 inet_dport；有序列号，设置为 tcb-&gt;seq；有确认序列号，设置为 tp-&gt;rcv_nxt。我们把所有的 flags 设置为 tcb-&gt;tcp_flags。设置选项为 opts。设置窗口大小为 tp-&gt;rcv_wnd。</p><p>全部设置完毕之后，就会调用 icsk_af_ops 的 queue_xmit 方法，icsk_af_ops 指向 ipv4_specific，也即调用的是 ip_queue_xmit 函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">inet_connection_sock_af_ops</span> ipv4_specific <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>queue_xmit        <span class="token operator">=</span> ip_queue_xmit<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>send_check        <span class="token operator">=</span> tcp_v4_send_check<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>rebuild_header    <span class="token operator">=</span> inet_sk_rebuild_header<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>sk_rx_dst_set     <span class="token operator">=</span> inet_sk_rx_dst_set<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>conn_request      <span class="token operator">=</span> tcp_v4_conn_request<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>syn_recv_sock     <span class="token operator">=</span> tcp_v4_syn_recv_sock<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>net_header_len    <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">iphdr</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>setsockopt        <span class="token operator">=</span> ip_setsockopt<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>getsockopt        <span class="token operator">=</span> ip_getsockopt<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>addr2sockaddr     <span class="token operator">=</span> inet_csk_addr2sockaddr<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>sockaddr_len      <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>mtu_reduced       <span class="token operator">=</span> tcp_v4_mtu_reduced<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> <strong>总结时刻</strong></h2><p>这一节，我们解析了发送一个网络包的一部分过程，如下图所示。</p><figure><img src="`+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个过程分成几个层次。</p><ul><li>VFS 层(虚拟文件系统层)：write 系统调用找到 struct file，根据里面的 file_operations 的定义，调用 sock_write_iter 函数。sock_write_iter 函数调用 sock_sendmsg 函数。</li><li>Socket 层：从 struct file 里面的 private_data 得到 struct socket，根据里面 ops 的定义，调用 inet_sendmsg 函数。</li><li>Sock 层：从 struct socket 里面的 sk 得到 struct sock，根据里面 sk_prot 的定义，调用 tcp_sendmsg 函数。</li><li>TCP 层：tcp_sendmsg 函数会调用 tcp_write_xmit 函数，tcp_write_xmit 函数会调用 tcp_transmit_skb，在这里实现了 TCP 层面向连接的逻辑。</li><li>IP 层：扩展 struct sock，得到 struct inet_connection_sock，根据里面 icsk_af_ops 的定义，调用 ip_queue_xmit 函数。</li></ul><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> <strong>课堂练习</strong></h2><p>如果你对 TCP 协议的结构不太熟悉，可以使用 tcpdump 命令截取一个 TCP 的包，看看里面的结构。</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>有一次分别在服务器端和客户端抓包。服务器端的包都是好几k 十几k。客户端的包是1400多。一开始没弄明白都mtu了为什么还有好几k的包？后来查到内核可以配置网络参数，不把拆包交给网卡固件，自己分包。<br> 作者回复: 赞，学以致用</p><p>VFS: 拿到 file 中的 socket，进而得到 sock，进而调用 tcp_sendmsg<br><code>tcp_sendmsg</code>: 将用户数据拷到 sk_buff，不断循环发送，发送过程中计算 MSS，拆分成一个个的<br> Segment 放在一个个的 IP 包里面，数据可拷贝到连续的区域，也可以拷到不连续的区域<br> （ 需要网络设备支持分散聚合），最后调用 tcp_write_xmit 发送网络包<br><code>tcp_write_xmit</code>: TSO--分段可由内核做，比较耗CPU，也延迟到网卡做；<br> 拥塞窗口--避免把网络塞满；<br> 滑动窗口--避免把接收端塞满<br><code>tcp_transmit_skb</code>: 填充tcp报文，发送网络包</p><p>sk_buff已经对mss做了分片处理了，为什么还要在ip再做一次分片处理。sk_buff有最大的限制吗？<br> 作者回复: 就是mss的限制呀</p><p>老师，请教一个问题，为什么流媒体服务器发送的rtp包都要小于1500左右，也就是小于MTU，理论上不是大于1500会分片吗？但是好像实现的代码都会小于Mtu，为什么呢？<br> 作者回复: 分片再组合会增加时延。tcp会在发送的时候控制大小，分成mss段，udp不会，会在链路层进行分片，到目的段进行重组，这样就会影响接收端的性能，rtp如果大于1500.接收端就识别不了</p><p>老师好，请教一个困惑很久的问题，cpu的L1，L2，L3级cache，缓存的数据是以内存的页为单位的吗？oracle sga在大内存时，通常会配置hugepage以减少TLB的压力和swap的交换用来提高性能，linux（centos)下默认是2M，而一般cpu L1是32+32K,L2是256K，是不是就意味着没法使用这两级缓存了<br> 作者回复: Hugepage不会将页面放到缓存里面的，而是TLB缓存减少不命中的概率。<br> 网友回复：缓存的数据不是以内存页为单位置换的，而是以cache中的块置换的，一般为64kb</p>',88),r=[k];function d(m,v){return s(),a("div",null,r)}const g=n(u,[["render",d],["__file","M45-发送网络包（上）.html.vue"]]);export{g as default};
