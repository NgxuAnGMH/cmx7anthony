import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/082b742753d862cfeae520fb02aa41af-9e09fab9.png",e="/assets/20e8f4e69d47b7469f374bc9fbcf7251-ada2241d.png",o={},c=p(`<h1 id="_41-ipc-中-不同项目组之间抢资源-如何协调" tabindex="-1"><a class="header-anchor" href="#_41-ipc-中-不同项目组之间抢资源-如何协调" aria-hidden="true">#</a> 41 | IPC（中）：不同项目组之间抢资源，如何协调？</h1><p>了解了如何使用共享内存和信号量集合之后，今天我们来解析一下，内核里面都做了什么。</p><p>不知道你有没有注意到，咱们讲消息队列、共享内存、信号量的机制的时候，我们其实能够从中看到一些统一的规律：<strong>它们在使用之前都要生成 key，然后通过 key 得到唯一的 id，并且都是通过 xxxget 函数。</strong></p><p>在内核里面，这三种进程间通信机制是使用统一的机制管理起来的，都叫 ipcxxx。</p><p>为了维护这三种进程间通信进制，在内核里面，我们声明了一个有三项的数组。</p><p>我们通过这段代码，来具体看一看。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">ipc_ids</span>  ids<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IPC_SEM_IDS</span>  <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IPC_MSG_IDS</span>  <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IPC_SHM_IDS</span>  <span class="token expression"><span class="token number">2</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">sem_ids</span><span class="token expression"><span class="token punctuation">(</span>ns<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token operator">-&gt;</span>ids<span class="token punctuation">[</span>IPC_SEM_IDS<span class="token punctuation">]</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">msg_ids</span><span class="token expression"><span class="token punctuation">(</span>ns<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token operator">-&gt;</span>ids<span class="token punctuation">[</span>IPC_MSG_IDS<span class="token punctuation">]</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">shm_ids</span><span class="token expression"><span class="token punctuation">(</span>ns<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token operator">-&gt;</span>ids<span class="token punctuation">[</span>IPC_SHM_IDS<span class="token punctuation">]</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据代码中的定义，第 0 项用于信号量，第 1 项用于消息队列，第 2 项用于共享内存，分别可以通过 sem_ids、msg_ids、shm_ids 来访问。</p><p>这段代码里面有 ns，全称叫 namespace。可能不容易理解，你现在可以将它认为是将一台 Linux 服务器逻辑的隔离为多台 Linux 服务器的机制，它背后的原理是一个相当大的话题，我们需要在容器那一章详细讲述。现在，你就可以简单的认为没有 namespace，整个 Linux 在一个 namespace 下面，那这些 ids 也是整个 Linux 只有一份。</p><p>接下来，我们再来看 struct ipc_ids 里面保存了什么。</p><p>首先，in_use 表示当前有多少个 ipc；其次，seq 和 next_id 用于一起生成 ipc 唯一的 id，因为信号量，共享内存，消息队列，它们三个的 id 也不能重复；ipcs_idr 是一棵基数树，我们又碰到它了，一旦涉及从一个整数查找一个对象，它都是最好的选择。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">ipc_ids</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> in_use<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span> seq<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> rwsem<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">idr</span> ipcs_idr<span class="token punctuation">;</span>
  <span class="token keyword">int</span> next_id<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">idr</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">radix_tree_root</span>  idr_rt<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    idr_next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，对于 sem_ids、msg_ids、shm_ids 各有一棵基数树。那这棵树里面究竟存放了什么，能够统一管理这三类 ipc 对象呢？</p><p>通过下面这个函数 ipc_obtain_object_idr，我们可以看出端倪。这个函数根据 id，在基数树里面找出来的是 struct kern_ipc_perm。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">kern_ipc_perm</span> <span class="token operator">*</span><span class="token function">ipc_obtain_object_idr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipc_ids</span> <span class="token operator">*</span>ids<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kern_ipc_perm</span> <span class="token operator">*</span>out<span class="token punctuation">;</span>
  <span class="token keyword">int</span> lid <span class="token operator">=</span> <span class="token function">ipcid_to_idx</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  out <span class="token operator">=</span> <span class="token function">idr_find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ids<span class="token operator">-&gt;</span>ipcs_idr<span class="token punctuation">,</span> lid<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们看用于表示信号量、消息队列、共享内存的结构，就会发现，这三个结构的第一项都是 struct kern_ipc_perm。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sem_array</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kern_ipc_perm</span>  sem_perm<span class="token punctuation">;</span>  <span class="token comment">/* permissions .. see ipc.h */</span>
  <span class="token class-name">time_t</span>      sem_ctime<span class="token punctuation">;</span>  <span class="token comment">/* create/last semctl() time */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  pending_alter<span class="token punctuation">;</span>  <span class="token comment">/* pending operations */</span>
                            <span class="token comment">/* that alter the array */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  pending_const<span class="token punctuation">;</span>  <span class="token comment">/* pending complex operations */</span>
            <span class="token comment">/* that do not alter semvals */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  list_id<span class="token punctuation">;</span>  <span class="token comment">/* undo requests on this array */</span>
  <span class="token keyword">int</span>      sem_nsems<span class="token punctuation">;</span>  <span class="token comment">/* no. of semaphores in array */</span>
  <span class="token keyword">int</span>      complex_count<span class="token punctuation">;</span>  <span class="token comment">/* pending complex operations */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>    use_global_lock<span class="token punctuation">;</span><span class="token comment">/* &gt;0: global lock required */</span>

  <span class="token keyword">struct</span> <span class="token class-name">sem</span>    sems<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> __randomize_layout<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">msg_queue</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kern_ipc_perm</span> q_perm<span class="token punctuation">;</span>
  <span class="token class-name">time_t</span> q_stime<span class="token punctuation">;</span>      <span class="token comment">/* last msgsnd time */</span>
  <span class="token class-name">time_t</span> q_rtime<span class="token punctuation">;</span>      <span class="token comment">/* last msgrcv time */</span>
  <span class="token class-name">time_t</span> q_ctime<span class="token punctuation">;</span>      <span class="token comment">/* last change time */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> q_cbytes<span class="token punctuation">;</span>    <span class="token comment">/* current number of bytes on queue */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> q_qnum<span class="token punctuation">;</span>    <span class="token comment">/* number of messages in queue */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> q_qbytes<span class="token punctuation">;</span>    <span class="token comment">/* max number of bytes on queue */</span>
  <span class="token class-name">pid_t</span> q_lspid<span class="token punctuation">;</span>      <span class="token comment">/* pid of last msgsnd */</span>
  <span class="token class-name">pid_t</span> q_lrpid<span class="token punctuation">;</span>      <span class="token comment">/* last receive pid */</span>

  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> q_messages<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> q_receivers<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> q_senders<span class="token punctuation">;</span>
<span class="token punctuation">}</span> __randomize_layout<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">shmid_kernel</span> <span class="token comment">/* private to the kernel */</span>
<span class="token punctuation">{</span>  
  <span class="token keyword">struct</span> <span class="token class-name">kern_ipc_perm</span>  shm_perm<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span>    <span class="token operator">*</span>shm_file<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span>    shm_nattch<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span>    shm_segsz<span class="token punctuation">;</span>
  <span class="token class-name">time_t</span>      shm_atim<span class="token punctuation">;</span>
  <span class="token class-name">time_t</span>      shm_dtim<span class="token punctuation">;</span>
  <span class="token class-name">time_t</span>      shm_ctim<span class="token punctuation">;</span>
  <span class="token class-name">pid_t</span>      shm_cprid<span class="token punctuation">;</span>
  <span class="token class-name">pid_t</span>      shm_lprid<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">user_struct</span>  <span class="token operator">*</span>mlock_user<span class="token punctuation">;</span>

  <span class="token comment">/* The task created the shm object.  NULL if the task is dead. */</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_struct</span>  <span class="token operator">*</span>shm_creator<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  shm_clist<span class="token punctuation">;</span>  <span class="token comment">/* list by creator */</span>
<span class="token punctuation">}</span> __randomize_layout<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，我们完全可以通过 struct kern_ipc_perm 的指针，通过进行强制类型转换后，得到整个结构。做这件事情的函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">sem_array</span> <span class="token operator">*</span><span class="token function">sem_obtain_object</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kern_ipc_perm</span> <span class="token operator">*</span>ipcp <span class="token operator">=</span> <span class="token function">ipc_obtain_object_idr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">sem_ids</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">container_of</span><span class="token punctuation">(</span>ipcp<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sem_array</span><span class="token punctuation">,</span> sem_perm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">msg_queue</span> <span class="token operator">*</span><span class="token function">msq_obtain_object</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kern_ipc_perm</span> <span class="token operator">*</span>ipcp <span class="token operator">=</span> <span class="token function">ipc_obtain_object_idr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">msg_ids</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">container_of</span><span class="token punctuation">(</span>ipcp<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">msg_queue</span><span class="token punctuation">,</span> q_perm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">shmid_kernel</span> <span class="token operator">*</span><span class="token function">shm_obtain_object</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kern_ipc_perm</span> <span class="token operator">*</span>ipcp <span class="token operator">=</span> <span class="token function">ipc_obtain_object_idr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">shm_ids</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">container_of</span><span class="token punctuation">(</span>ipcp<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">shmid_kernel</span><span class="token punctuation">,</span> shm_perm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种机制，我们就可以将信号量、消息队列、共享内存抽象为 ipc 类型进行统一处理。你有没有觉得，这有点儿面向对象编程中抽象类和实现类的意思？没错，如果你试图去了解 C++ 中类的实现机制，其实也是这么干的。</p><img src="`+t+`" alt="img" style="zoom:25%;"><p>有了抽象类，接下来我们来看共享内存和信号量的具体实现。</p><h2 id="如何创建共享内存" tabindex="-1"><a class="header-anchor" href="#如何创建共享内存" aria-hidden="true">#</a> <strong>如何创建共享内存？</strong></h2><p>首先，我们来看创建共享内存的的系统调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>shmget<span class="token punctuation">,</span> <span class="token class-name">key_t</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> shmflg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">ipc_ops</span> shm_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>getnew <span class="token operator">=</span> newseg<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>associate <span class="token operator">=</span> shm_security<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>more_checks <span class="token operator">=</span> shm_more_checks<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ipc_params</span> shm_params<span class="token punctuation">;</span>
  ns <span class="token operator">=</span> current<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>ipc_ns<span class="token punctuation">;</span>
  shm_params<span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
  shm_params<span class="token punctuation">.</span>flg <span class="token operator">=</span> shmflg<span class="token punctuation">;</span>
  shm_params<span class="token punctuation">.</span>u<span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">ipcget</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">shm_ids</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>shm_ops<span class="token punctuation">,</span> <span class="token operator">&amp;</span>shm_params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面调用了抽象的 ipcget、参数分别为共享内存对应的 shm_ids、对应的操作 shm_ops 以及对应的参数 shm_params。</p><p>如果 key 设置为 IPC_PRIVATE 则永远创建新的，如果不是的话，就会调用 ipcget_public。ipcget 的具体代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">ipcget</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ipc_ids</span> <span class="token operator">*</span>ids<span class="token punctuation">,</span>
      <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">ipc_ops</span> <span class="token operator">*</span>ops<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ipc_params</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token operator">-&gt;</span>key <span class="token operator">==</span> IPC_PRIVATE<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">ipcget_new</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> ids<span class="token punctuation">,</span> ops<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token function">ipcget_public</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> ids<span class="token punctuation">,</span> ops<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ipcget_public</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ipc_ids</span> <span class="token operator">*</span>ids<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">ipc_ops</span> <span class="token operator">*</span>ops<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ipc_params</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kern_ipc_perm</span> <span class="token operator">*</span>ipcp<span class="token punctuation">;</span>
  <span class="token keyword">int</span> flg <span class="token operator">=</span> params<span class="token operator">-&gt;</span>flg<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
  ipcp <span class="token operator">=</span> <span class="token function">ipc_findkey</span><span class="token punctuation">(</span>ids<span class="token punctuation">,</span> params<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ipcp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>flg <span class="token operator">&amp;</span> IPC_CREAT<span class="token punctuation">)</span><span class="token punctuation">)</span>
      err <span class="token operator">=</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      err <span class="token operator">=</span> ops<span class="token operator">-&gt;</span><span class="token function">getnew</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flg <span class="token operator">&amp;</span> IPC_CREAT <span class="token operator">&amp;&amp;</span> flg <span class="token operator">&amp;</span> IPC_EXCL<span class="token punctuation">)</span>
      err <span class="token operator">=</span> <span class="token operator">-</span>EEXIST<span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ops<span class="token operator">-&gt;</span>more_checks<span class="token punctuation">)</span>
        err <span class="token operator">=</span> ops<span class="token operator">-&gt;</span><span class="token function">more_checks</span><span class="token punctuation">(</span>ipcp<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ipcget_public 中，我们会按照 key，去查找 struct kern_ipc_perm。如果没有找到，那就看是否设置了 IPC_CREAT；如果设置了，就创建一个新的。如果找到了，就将对应的 id 返回。</p><p>我们这里重点看，如何按照参数 shm_ops，创建新的共享内存，会调用 newseg。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">newseg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ipc_params</span> <span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">key_t</span> key <span class="token operator">=</span> params<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
  <span class="token keyword">int</span> shmflg <span class="token operator">=</span> params<span class="token operator">-&gt;</span>flg<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> size <span class="token operator">=</span> params<span class="token operator">-&gt;</span>u<span class="token punctuation">.</span>size<span class="token punctuation">;</span>
  <span class="token keyword">int</span> error<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">shmid_kernel</span> <span class="token operator">*</span>shp<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> numpages <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">+</span> PAGE_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> PAGE_SHIFT<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">;</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token class-name">vm_flags_t</span> acctflag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  shp <span class="token operator">=</span> <span class="token function">kvmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>shp<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  shp<span class="token operator">-&gt;</span>shm_perm<span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
  shp<span class="token operator">-&gt;</span>shm_perm<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token punctuation">(</span>shmflg <span class="token operator">&amp;</span> S_IRWXUGO<span class="token punctuation">)</span><span class="token punctuation">;</span>
  shp<span class="token operator">-&gt;</span>mlock_user <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

  shp<span class="token operator">-&gt;</span>shm_perm<span class="token punctuation">.</span>security <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  file <span class="token operator">=</span> <span class="token function">shmem_kernel_file_setup</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> size<span class="token punctuation">,</span> acctflag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  shp<span class="token operator">-&gt;</span>shm_cprid <span class="token operator">=</span> <span class="token function">task_tgid_vnr</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
  shp<span class="token operator">-&gt;</span>shm_lprid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  shp<span class="token operator">-&gt;</span>shm_atim <span class="token operator">=</span> shp<span class="token operator">-&gt;</span>shm_dtim <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  shp<span class="token operator">-&gt;</span>shm_ctim <span class="token operator">=</span> <span class="token function">get_seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  shp<span class="token operator">-&gt;</span>shm_segsz <span class="token operator">=</span> size<span class="token punctuation">;</span>
  shp<span class="token operator">-&gt;</span>shm_nattch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  shp<span class="token operator">-&gt;</span>shm_file <span class="token operator">=</span> file<span class="token punctuation">;</span>
  shp<span class="token operator">-&gt;</span>shm_creator <span class="token operator">=</span> current<span class="token punctuation">;</span>

  error <span class="token operator">=</span> <span class="token function">ipc_addid</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">shm_ids</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>shp<span class="token operator">-&gt;</span>shm_perm<span class="token punctuation">,</span> ns<span class="token operator">-&gt;</span>shm_ctlmni<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shp<span class="token operator">-&gt;</span>shm_clist<span class="token punctuation">,</span> <span class="token operator">&amp;</span>current<span class="token operator">-&gt;</span>sysvshm<span class="token punctuation">.</span>shm_clist<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">file_inode</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i_ino <span class="token operator">=</span> shp<span class="token operator">-&gt;</span>shm_perm<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

  ns<span class="token operator">-&gt;</span>shm_tot <span class="token operator">+=</span> numpages<span class="token punctuation">;</span>
  error <span class="token operator">=</span> shp<span class="token operator">-&gt;</span>shm_perm<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> error<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**newseg 函数的第一步，通过 kvmalloc 在直接映射区分配一个 struct shmid_kernel 结构。**这个结构就是用来描述共享内存的。这个结构最开始就是上面说的 struct kern_ipc_perm 结构。接下来就是填充这个 struct shmid_kernel 结构，例如 key、权限等。</p><p><strong>newseg 函数的第二步，共享内存需要和文件进行关联</strong> 为什么要做这个呢？我们在讲内存映射的时候讲过，虚拟地址空间可以和物理内存关联，但是物理内存是某个进程独享的。虚拟地址空间也可以映射到一个文件，文件是可以跨进程共享的。</p><p>咱们这里的共享内存需要跨进程共享，也应该借鉴文件映射的思路。只不过不应该映射一个硬盘上的文件，而是映射到一个内存文件系统上的文件。mm/shmem.c 里面就定义了这样一个基于内存的文件系统。这里你一定要注意区分 shmem 和 shm 的区别，前者是一个文件系统，后者是进程通信机制。</p><p>在系统初始化的时候，shmem_init 注册了 shmem 文件系统 shmem_fs_type，并且挂在到了 shm_mnt 下面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> __init <span class="token function">shmem_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> error<span class="token punctuation">;</span>
  error <span class="token operator">=</span> <span class="token function">shmem_init_inodecache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  error <span class="token operator">=</span> <span class="token function">register_filesystem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shmem_fs_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  shm_mnt <span class="token operator">=</span> <span class="token function">kern_mount</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shmem_fs_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> shmem_fs_type <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>owner    <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>name    <span class="token operator">=</span> <span class="token string">&quot;tmpfs&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>mount    <span class="token operator">=</span> shmem_mount<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>kill_sb  <span class="token operator">=</span> kill_litter_super<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fs_flags  <span class="token operator">=</span> FS_USERNS_MOUNT<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，newseg 函数会调用 shmem_kernel_file_setup，其实就是在 shmem 文件系统里面创建一个文件。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * shmem_kernel_file_setup - get an unlinked file living in tmpfs which must be kernel internal.  
 * @name: name for dentry (to be seen in /proc/&lt;pid&gt;/maps
 * @size: size to be set for the file
 * @flags: VM_NORESERVE suppresses pre-accounting of the entire object size */</span>
<span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token function">shmem_kernel_file_setup</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">__shmem_file_setup</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> size<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> S_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token function">__shmem_file_setup</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> size<span class="token punctuation">,</span>
               <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i_flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>res<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">path</span> path<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span>sb<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">qstr</span> this<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  this<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  this<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  this<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* will go */</span>
  sb <span class="token operator">=</span> shm_mnt<span class="token operator">-&gt;</span>mnt_sb<span class="token punctuation">;</span>
  path<span class="token punctuation">.</span>mnt <span class="token operator">=</span> <span class="token function">mntget</span><span class="token punctuation">(</span>shm_mnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  path<span class="token punctuation">.</span>dentry <span class="token operator">=</span> <span class="token function">d_alloc_pseudo</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">d_set_d_op</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>dentry<span class="token punctuation">,</span> <span class="token operator">&amp;</span>anon_ops<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  inode <span class="token operator">=</span> <span class="token function">shmem_get_inode</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> S_IFREG <span class="token operator">|</span> S_IRWXUGO<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  inode<span class="token operator">-&gt;</span>i_flags <span class="token operator">|=</span> i_flags<span class="token punctuation">;</span>
  <span class="token function">d_instantiate</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>dentry<span class="token punctuation">,</span> inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  inode<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> size<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  res <span class="token operator">=</span> <span class="token function">alloc_file</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">,</span> FMODE_WRITE <span class="token operator">|</span> FMODE_READ<span class="token punctuation">,</span>
      <span class="token operator">&amp;</span>shmem_file_operations<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__shmem_file_setup 会创建新的 shmem 文件对应的 dentry 和 inode，并将它们两个关联起来，然后分配一个 struct file 结构，来表示新的 shmem 文件，并且指向独特的 shmem_file_operations。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> shmem_file_operations <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>mmap    <span class="token operator">=</span> shmem_mmap<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>get_unmapped_area <span class="token operator">=</span> shmem_get_unmapped_area<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_TMPFS</span></span>
  <span class="token punctuation">.</span>llseek    <span class="token operator">=</span> shmem_file_llseek<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>read_iter  <span class="token operator">=</span> shmem_file_read_iter<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write_iter  <span class="token operator">=</span> generic_file_write_iter<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fsync    <span class="token operator">=</span> noop_fsync<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>splice_read  <span class="token operator">=</span> generic_file_splice_read<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>splice_write  <span class="token operator">=</span> iter_file_splice_write<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fallocate  <span class="token operator">=</span> shmem_fallocate<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>newseg 函数的第三步，通过 ipc_addid 将新创建的 struct shmid_kernel 结构挂到 shm_ids 里面的基数树上，并返回相应的 id，并且将 struct shmid_kernel 挂到当前进程的 sysvshm 队列中。</strong></p><p>至此，共享内存的创建就完成了。</p><h2 id="如何将共享内存映射到虚拟地址空间" tabindex="-1"><a class="header-anchor" href="#如何将共享内存映射到虚拟地址空间" aria-hidden="true">#</a> <strong>如何将共享内存映射到虚拟地址空间？</strong></h2><p>从上面的代码解析中，我们知道，共享内存的数据结构 struct shmid_kernel，是通过它的成员 struct file *shm_file，来管理内存文件系统 shmem 上的内存文件的。无论这个共享内存是否被映射，shm_file 都是存在的。</p><p>接下来，我们要将共享内存映射到虚拟地址空间中。调用的是 shmat，对应的系统调用如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>shmat<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> shmid<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> shmaddr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> shmflg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">long</span> err<span class="token punctuation">;</span>
    err <span class="token operator">=</span> <span class="token function">do_shmat</span><span class="token punctuation">(</span>shmid<span class="token punctuation">,</span> shmaddr<span class="token punctuation">,</span> shmflg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">,</span> SHMLBA<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">force_successful_syscall_return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">long</span> <span class="token function">do_shmat</span><span class="token punctuation">(</span><span class="token keyword">int</span> shmid<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>shmaddr<span class="token punctuation">,</span> <span class="token keyword">int</span> shmflg<span class="token punctuation">,</span>
        ulong <span class="token operator">*</span>raddr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> shmlba<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">shmid_kernel</span> <span class="token operator">*</span>shp<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>shmaddr<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">;</span>
  <span class="token keyword">int</span>    err<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags <span class="token operator">=</span> MAP_SHARED<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> prot<span class="token punctuation">;</span>
  <span class="token keyword">int</span> acc_mode<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ipc_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">shm_file_data</span> <span class="token operator">*</span>sfd<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">path</span> path<span class="token punctuation">;</span>
  <span class="token class-name">fmode_t</span> f_mode<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> populate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  prot <span class="token operator">=</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">;</span>
  acc_mode <span class="token operator">=</span> S_IRUGO <span class="token operator">|</span> S_IWUGO<span class="token punctuation">;</span>
  f_mode <span class="token operator">=</span> FMODE_READ <span class="token operator">|</span> FMODE_WRITE<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ns <span class="token operator">=</span> current<span class="token operator">-&gt;</span>nsproxy<span class="token operator">-&gt;</span>ipc_ns<span class="token punctuation">;</span>
  shp <span class="token operator">=</span> <span class="token function">shm_obtain_object_check</span><span class="token punctuation">(</span>ns<span class="token punctuation">,</span> shmid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  path <span class="token operator">=</span> shp<span class="token operator">-&gt;</span>shm_file<span class="token operator">-&gt;</span>f_path<span class="token punctuation">;</span>
  <span class="token function">path_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  shp<span class="token operator">-&gt;</span>shm_nattch<span class="token operator">++</span><span class="token punctuation">;</span>
  size <span class="token operator">=</span> <span class="token function">i_size_read</span><span class="token punctuation">(</span><span class="token function">d_inode</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>dentry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  sfd <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>sfd<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  file <span class="token operator">=</span> <span class="token function">alloc_file</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>path<span class="token punctuation">,</span> f_mode<span class="token punctuation">,</span>
        <span class="token function">is_file_hugepages</span><span class="token punctuation">(</span>shp<span class="token operator">-&gt;</span>shm_file<span class="token punctuation">)</span> <span class="token operator">?</span>
        <span class="token operator">&amp;</span>shm_file_operations_huge <span class="token operator">:</span>
        <span class="token operator">&amp;</span>shm_file_operations<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  file<span class="token operator">-&gt;</span>private_data <span class="token operator">=</span> sfd<span class="token punctuation">;</span>
  file<span class="token operator">-&gt;</span>f_mapping <span class="token operator">=</span> shp<span class="token operator">-&gt;</span>shm_file<span class="token operator">-&gt;</span>f_mapping<span class="token punctuation">;</span>
  sfd<span class="token operator">-&gt;</span>id <span class="token operator">=</span> shp<span class="token operator">-&gt;</span>shm_perm<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
  sfd<span class="token operator">-&gt;</span>ns <span class="token operator">=</span> <span class="token function">get_ipc_ns</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sfd<span class="token operator">-&gt;</span>file <span class="token operator">=</span> shp<span class="token operator">-&gt;</span>shm_file<span class="token punctuation">;</span>
  sfd<span class="token operator">-&gt;</span>vm_ops <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  addr <span class="token operator">=</span> <span class="token function">do_mmap_pgoff</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> prot<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>populate<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>raddr <span class="token operator">=</span> addr<span class="token punctuation">;</span>
  err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个函数里面，shm_obtain_object_check 会通过共享内存的 id，在基数树中找到对应的 struct shmid_kernel 结构，通过它找到 shmem 上的内存文件。</p><p>接下来，我们要分配一个 struct shm_file_data，来表示这个内存文件。将 shmem 中指向内存文件的 shm_file 赋值给 struct shm_file_data 中的 file 成员。</p><p>然后，我们创建了一个 struct file，指向的也是 shmem 中的内存文件。</p><p>为什么要再创建一个呢？这两个的功能不同，shmem 中 shm_file 用于管理内存文件，是一个中立的，独立于任何一个进程的角色。而新创建的 struct file 是专门用于做内存映射的，就像咱们在讲内存映射那一节讲过的，一个硬盘上的文件要映射到虚拟地址空间中的时候，需要在 vm_area_struct 里面有一个 struct file *vm_file 指向硬盘上的文件，现在变成内存文件了，但是这个结构还是不能少。</p><p>新创建的 struct file 的 private_data，指向 struct shm_file_data，这样内存映射那部分的数据结构，就能够通过它来访问内存文件了。</p><p>新创建的 struct file 的 file_operations 也发生了变化，变成了 shm_file_operations。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> shm_file_operations <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>mmap    <span class="token operator">=</span> shm_mmap<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fsync    <span class="token operator">=</span> shm_fsync<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>release  <span class="token operator">=</span> shm_release<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>get_unmapped_area  <span class="token operator">=</span> shm_get_unmapped_area<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>llseek    <span class="token operator">=</span> noop_llseek<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fallocate  <span class="token operator">=</span> shm_fallocate<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，do_mmap_pgoff 函数我们遇到过，原来映射硬盘上的文件的时候，也是调用它。这里我们不再详细解析了。它会分配一个 vm_area_struct 指向虚拟地址空间中没有分配的区域，它的 vm_file 指向这个内存文件，然后它会调用 shm_file_operations 的 mmap 函数，也即 shm_mmap 进行映射。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">shm_mmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">shm_file_data</span> <span class="token operator">*</span>sfd <span class="token operator">=</span> <span class="token function">shm_file_data</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
  ret <span class="token operator">=</span> <span class="token function">__shm_open</span><span class="token punctuation">(</span>vma<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ret <span class="token operator">=</span> <span class="token function">call_mmap</span><span class="token punctuation">(</span>sfd<span class="token operator">-&gt;</span>file<span class="token punctuation">,</span> vma<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sfd<span class="token operator">-&gt;</span>vm_ops <span class="token operator">=</span> vma<span class="token operator">-&gt;</span>vm_ops<span class="token punctuation">;</span>
  vma<span class="token operator">-&gt;</span>vm_ops <span class="token operator">=</span> <span class="token operator">&amp;</span>shm_vm_ops<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shm_mmap 中调用了 shm_file_data 中的 file 的 mmap 函数，这次调用的是 shmem_file_operations 的 mmap，也即 shmem_mmap。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">shmem_mmap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">file_accessed</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vma<span class="token operator">-&gt;</span>vm_ops <span class="token operator">=</span> <span class="token operator">&amp;</span>shmem_vm_ops<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面，vm_area_struct 的 vm_ops 指向 shmem_vm_ops。等从 call_mmap 中返回之后，shm_file_data 的 vm_ops 指向了 shmem_vm_ops，而 vm_area_struct 的 vm_ops 改为指向 shm_vm_ops。</p><p>我们来看一下，shm_vm_ops 和 shmem_vm_ops 的定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">vm_operations_struct</span> shm_vm_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>open  <span class="token operator">=</span> shm_open<span class="token punctuation">,</span>  <span class="token comment">/* callback for a new vm-area open */</span>
  <span class="token punctuation">.</span>close  <span class="token operator">=</span> shm_close<span class="token punctuation">,</span>  <span class="token comment">/* callback for when the vm-area is released */</span>
  <span class="token punctuation">.</span>fault  <span class="token operator">=</span> shm_fault<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">vm_operations_struct</span> shmem_vm_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>fault    <span class="token operator">=</span> shmem_fault<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>map_pages  <span class="token operator">=</span> filemap_map_pages<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们里面最关键的就是 fault 函数，也即访问虚拟内存的时候，访问不到应该怎么办。</p><p>当访问不到的时候，先调用 vm_area_struct 的 vm_ops，也即 shm_vm_ops 的 fault 函数 shm_fault。然后它会转而调用 shm_file_data 的 vm_ops，也即 shmem_vm_ops 的 fault 函数 shmem_fault。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">shm_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vm_fault</span> <span class="token operator">*</span>vmf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file <span class="token operator">=</span> vmf<span class="token operator">-&gt;</span>vma<span class="token operator">-&gt;</span>vm_file<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">shm_file_data</span> <span class="token operator">*</span>sfd <span class="token operator">=</span> <span class="token function">shm_file_data</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> sfd<span class="token operator">-&gt;</span>vm_ops<span class="token operator">-&gt;</span><span class="token function">fault</span><span class="token punctuation">(</span>vmf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然基于内存的文件系统，已经为这个内存文件分配了 inode，但是内存也却是一点儿都没分配，只有在发生缺页异常的时候才进行分配。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">shmem_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vm_fault</span> <span class="token operator">*</span>vmf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma <span class="token operator">=</span> vmf<span class="token operator">-&gt;</span>vma<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode <span class="token operator">=</span> <span class="token function">file_inode</span><span class="token punctuation">(</span>vma<span class="token operator">-&gt;</span>vm_file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">gfp_t</span> gfp <span class="token operator">=</span> <span class="token function">mapping_gfp_mask</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  error <span class="token operator">=</span> <span class="token function">shmem_getpage_gfp</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> vmf<span class="token operator">-&gt;</span>pgoff<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vmf<span class="token operator">-&gt;</span>page<span class="token punctuation">,</span> sgp<span class="token punctuation">,</span>
          gfp<span class="token punctuation">,</span> vma<span class="token punctuation">,</span> vmf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * shmem_getpage_gfp - find page in cache, or get from swap, or allocate
 *
 * If we allocate a new one we do not mark it dirty. That&#39;s up to the
 * vm. If we swap it in we mark it dirty since we also free the swap
 * entry since a page cannot live in both the swap and page cache.
 *
 * fault_mm and fault_type are only supplied by shmem_fault:
 * otherwise they are NULL.
 */</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">shmem_getpage_gfp</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token class-name">pgoff_t</span> index<span class="token punctuation">,</span>
  <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token operator">*</span>pagep<span class="token punctuation">,</span> <span class="token keyword">enum</span> <span class="token class-name">sgp_type</span> sgp<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> gfp<span class="token punctuation">,</span>
  <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span>vma<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vm_fault</span> <span class="token operator">*</span>vmf<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>fault_type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    page <span class="token operator">=</span> <span class="token function">shmem_alloc_and_acct_page</span><span class="token punctuation">(</span>gfp<span class="token punctuation">,</span> info<span class="token punctuation">,</span> sbinfo<span class="token punctuation">,</span>
          index<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shmem_fault 会调用 shmem_getpage_gfp 在 page cache 和 swap 中找一个空闲页，如果找不到就通过 shmem_alloc_and_acct_page 分配一个新的页，他最终会调用内存管理系统的 alloc_page_vma 在物理内存中分配一个页。</p><p>至此，共享内存才真的映射到了虚拟地址空间中，进程可以像访问本地内存一样访问共享内存。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> <strong>总结时刻</strong></h2><p>我们来总结一下共享内存的创建和映射过程。</p><ul><li>1.调用 shmget 创建共享内存。</li><li>2.先通过 ipc_findkey 在基数树中查找 key 对应的共享内存对象 shmid_kernel 是否已经被创建过，如果已经被创建，就会被查询出来，例如 producer 创建过，在 consumer 中就会查询出来。</li><li>3.如果共享内存没有被创建过，则调用 shm_ops 的 newseg 方法，创建一个共享内存对象 shmid_kernel。例如，在 producer 中就会新建。</li><li>4.在 shmem 文件系统里面创建一个文件，共享内存对象 shmid_kernel 指向这个文件，这个文件用 struct file 表示，我们姑且称它为 file1。</li><li>5.调用 shmat，将共享内存映射到虚拟地址空间。</li><li>6.shm_obtain_object_check 先从基数树里面找到 shmid_kernel 对象。</li><li>7.创建用于内存映射到文件的 file 和 shm_file_data，这里的 struct file 我们姑且称为 file2。</li><li>8.关联内存区域 vm_area_struct 和用于内存映射到文件的 file，也即 file2，调用 file2 的 mmap 函数。</li><li>9.file2 的 mmap 函数 shm_mmap，会调用 file1 的 mmap 函数 shmem_mmap，设置 shm_file_data 和 vm_area_struct 的 vm_ops。</li><li>10.内存映射完毕之后，其实并没有真的分配物理内存，当访问内存的时候，会触发缺页异常 do_page_fault。</li><li>11.vm_area_struct 的 vm_ops 的 shm_fault 会调用 shm_file_data 的 vm_ops 的 shmem_fault。</li><li>12.在 page cache 中找一个空闲页，或者创建一个空闲页。</li></ul><figure><img src="`+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> <strong>课堂练习</strong></h2><p>在这里，我们只分析了 shm_ids 的结构，消息队列的程序我们写过了，但是 msg_ids 的结构没有解析，你可以试着解析一下。</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>文章一遍看不懂但底下总结的图很好，终于明白了为什么需要两个file。file1是shmem内存文件系统里的文件，file2是进程虚拟内存里映射的文件，所以file1是属于共享内存的，file2是属于某个进程的。</p><p>工作了几年 ，业务代码写多了，框架与API调来调去的，遇到很多疑难杂症，还是不明所以。<br> 回过头再看下 操作系统真是核心，很多人说操作系统就是功夫里面的易筋经，内功章法。学习了操作系统，再看很多其他的技术，感觉更自然，理解的更深刻了。一直想读内核代码，但是啃起来很费劲，这个专栏一直再看，越看越喜欢，很多篇章都会反复的看。相信看完专栏后，再去看一些深入理解linux内核，会清晰很多。</p><hr><p>共享内存:<br> 创建共享内存,通过shmget系统调用来创建一个共享内存,主要是通过key来创建一个struct kern_ipc_perm,信号量 队列和共享内存的结构都是一样的,可以通过强制类型转换来转化成任意一个类型.然后接下来去填充这个结构,然后将一个文件与共享内存关联,内存映射有两种方式一种是匿名映射 一种是映射到一个文件,物理内存是不能共享的,文件可以跨进程共享,所以要映射到文件.但这里的文件是一个特殊的文件系统内存文件系统上的文件,这个内存文件系统也会在系统初始化的时候注册 挂载, 该文件也有目录项和inode以及其fs_operation,然后会将新创建的共享内存对象加入到shm_ids基数上,并将其加到当前进程的sysvshm队列中.<br> 现在共享内存其实还只是内核中的一个结构体,我们只有共享内存的id,要想使用共享内存还要通过id来将其映射到使用者的用户态的进程空间中,通过shmat系统调用可以做到这一点,该系统调用的主要工作如下:<br> 1 通过共享内存的ip在 shm_ids基数树上找到该共享内存的结构体,然后取出内存文件系统里file并将其赋值给新创建的struct shm_file_data-&gt;file,这里我们已经有了可以共享的文件&quot;file&quot;,然后在用户进程虚拟空间的mmap映射区分配一个vm_area struct来做文件映射就可以了,将vm_area_struct里的vm_file的private_data指向shm_file_data,为什么不能直接用file呢?private_data貌似只有共享内存才有用,不太理解,可能因为vm_file有其独特的file_operation的问题吧,两个file&#39;虽然可以是同一类结构体,但差异还是很大.在创建vm_file的过程中应该可以找到答案,略过,映射内存时还会将vm_area的vm_ops先指向shmem_vm_ops,然后在指向shm_vm_ops, 将shm_file_data的vm_ops指向shmem_vm_ops即内存文件系统的文件的vm_ops,到这里就完成了.后面进程读或写数据时,如果对应的页表项没有建立会触发缺页异常,跟之前的缺页异常流程差不多,最终会调用内存文件系统的缺页异常函数来分配对应的物理页,并建立页表项.<br> 作者回复: 赞</p><hr><p>文章两遍读下来蒙蒙的，最后对着总结图把共享内存的创建和在用户态映射的流程理顺了。关键就是因为共享内存刚开始申请的物理内存无法在进程中共享，所以先要把物理内存的shmid_kernel对应到shmem文件系统的一个文件，这样shmem中的文件可以再进程中共享；然后在shmat函数时，相当于将shm映射到shmem的file2，先映射到shmem文件系统的文件file1，然后再通过file1的mmap函数完成shm_file_data和vm_area_struct的ops设置。这样内存映射完毕后，并没有真的分配物理内存，当访问内存会触发缺页异常。然后vm_area_struct的vm_ops的shm_fault会调用shm_file_data的vm_ops的shmem_fault。最后在page cache中找一个空闲页，或者创建一个空闲页。</p><p>补充下该查了下file是VFS框架的一个基本概念，一切皆文件指的就是这个,f,然后在这个file下面会有各种各样的实现,比如设备是文件 sock是文件 pipe是文件 共享内存也是文件,file结构体里面都是一些通用的属性,而private_data里面是一些各个披着文件外衣的各种结构体的一个独特的东西,因此这里会有两个file,vm_file就是这个外壳,其private_data里就是共享内存的相关数据<br> 作者回复: 对的，</p><p>将本节所讲的共享内存实现流程与文件内存映那节所讲的流程对比着梳理一下，感觉明朗了好多</p>',83),l=[c];function i(u,r){return n(),a("div",null,l)}const m=s(o,[["render",i],["__file","L41-IPC（中）.html.vue"]]);export{m as default};
