import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as l,a as n,b as a,e as o,d as s}from"./app-cdabc73c.js";const c="/assets/f3d8b95e8c1563466d31f385bb42aab3-552cdd59.jpg",u="/assets/image-20220705204632622-78690c81.png",r="/assets/b92dyy0f686e730ffcb606ed17e5b785-9d500f50.jpg",m="/assets/cb36d637ce0a0d7c38788102e139604b-57df3fdb.jpg",d="/assets/image-20220705204513139-3ebe65e4.png",k="/assets/22a83b33b4eededec109bda203133830-658bfce5.jpg",b={},v=s('<h1 id="_14-linux初始化-上-grub与vmlinuz的结构" tabindex="-1"><a class="header-anchor" href="#_14-linux初始化-上-grub与vmlinuz的结构" aria-hidden="true">#</a> 14 | Linux初始化（上）：GRUB与vmlinuz的结构</h1><p>你好，我是 LMOS。</p><p>在前面的课程中，我们建好了二级引导器，启动了我们的 Cosmos，并进行了我们 Cosmos 的 Hal 层初始化。</p><p>我会用两节课带你领会 Linux 怎样做初始化。虽然我们自己具体实现过了初始化，不过我们也不妨看看 Linux 的初始化流程，借鉴一下 Linux 开发者的玩法。</p><p>这节课，我会先为你梳理启动的整体流程，重点为你解读 Linux 上 GRUB 是怎样启动，以及内核里的“实权人物”——<mark>vmlinuz 内核文件</mark>是如何产生和运转的。下节课，我们从 <mark>setup.bin 文件</mark>的 <code>_start 函数</code>入手，研究 Linux 初始化流程。</p><p>好，接下来我们从全局流程讲起，正式进入今天的学习。</p><h2 id="全局流程" tabindex="-1"><a class="header-anchor" href="#全局流程" aria-hidden="true">#</a> 全局流程</h2><p>x86 平台的启动流程，是非常复杂的。为了帮助你理解，我们先从全局粗略地看一看整体流程，然后一步步细化。</p><p>在机器加电后，BIOS 会进行自检，然后由 BIOS 加载<mark>引导设备</mark>中<mark>引导扇区</mark>。在安装有 Linux 操作系统的情况下，在引导扇区里，通常是安装的 <mark>GRUB 的一小段程序</mark>（安装 windows 的情况则不同）。最后，<strong>GRUB 会加载 Linux 的<mark>内核映像 vmlinuz</mark></strong>，如下图所示。</p><img src="'+c+'" alt="img" style="zoom:15%;"><p>x86的全局启动流程示意图</p><p>上图中的<mark>引导设备</mark>通常是机器中的硬盘，但也可以是 U 盘或者光盘甚至是软盘。BIOS 会自动读取保存在 CMOS 中的引导设备信息。</p><h2 id="从-bios-到-grub" tabindex="-1"><a class="header-anchor" href="#从-bios-到-grub" aria-hidden="true">#</a> 从 BIOS 到 GRUB</h2><p>从前面的课程我们已经知道，CPU 被设计成只能运行内存中的程序，没有办法直接运行储存在硬盘或者 U 盘中的操作系统程序。</p><p>如果想要运行硬盘或者 U 盘中的程序，就必须要先加载到内存（RAM）中才能运行。这是因为硬盘、U 盘（外部储存器）并不和 CPU 直接相连，它们的访问机制和寻址方式与内存截然不同。</p><h3 id="加电-bios" tabindex="-1"><a class="header-anchor" href="#加电-bios" aria-hidden="true">#</a> 加电 -&gt; BIOS</h3><p>内存在断电后就没法保存数据了，那 BIOS 又是如何启动的呢？硬件工程师设计 CPU 时，硬性地规定在加电的瞬间(<strong>启动通电时</strong>)，强制将 CS 寄存器的值设置为 0XF000，IP 寄存器的值设置为 0XFFF0。</p><p>这样一来，CS:IP 就指向了 0XFFFF0 这个物理地址。在这个物理地址上连接了主板上的一块小的 ROM 芯片。这种芯片的访问机制和寻址方式和内存一样，只是它在断电时不会丢失数据，在常规下也不能往这里写入数据，它是一种<strong>只读内存</strong>，<mark>BIOS 程序就<strong>被固化</strong>在该 ROM 芯片里</mark>。</p><p>现在，CS:IP 指向了 0XFFFF0 这个位置，正是 BIOS 程序的入口地址。这意味着 BIOS 正式开始启动。</p><h3 id="bios-引导设备的引导扇区" tabindex="-1"><a class="header-anchor" href="#bios-引导设备的引导扇区" aria-hidden="true">#</a> BIOS -&gt; 引导设备的引导扇区</h3><p>BIOS 一开始会初始化 CPU，接着检查并初始化内存，然后将自己的一部分复制到内存，最后跳转到内存中运行。BIOS 的下一步就是枚举本地设备进行初始化，并进行相关的检查，检查硬件是否损坏，这期间 BIOS 会调用其它设备上的固件程序，如显卡、网卡等设备上的固件程序。</p><p>当设备初始化和检查步骤完成之后，<strong>BIOS 会在内存中建立<code>中断表</code>和<code>中断服务程序</code></strong>，这是启动 Linux 至关重要的工作，因为 Linux 会用到它们。</p><p>具体是怎么操作的呢？BIOS 会从内存地址（0x00000）开始用 1KB 的内存空间（0x00000~0x003FF）构建<mark>中断表</mark>，在紧接着中断表的位置，用 256KB 的内存空间构建 <mark>BIOS 数据区</mark>（0x00400~0x004FF），并在 0x0e05b 的地址加载了 8KB 大小的与中断表对应的<mark>中断服务程序</mark>。</p><p>中断表中有 256 个条目，每个条目占用 4 个字节，其中两个字节是 CS 寄存器的值，两个字节是 IP 寄存器的值。每个条目都指向一个具体的中断服务程序。</p><img src="'+u+'" alt="image-20220705204632622" style="zoom:25%;"><h3 id="引导设备的引导扇区-加载-grub" tabindex="-1"><a class="header-anchor" href="#引导设备的引导扇区-加载-grub" aria-hidden="true">#</a> 引导设备的引导扇区 -&gt; 加载 GRUB</h3><p>为了启动外部储存器中的程序，BIOS 会搜索可引导的设备，搜索的顺序是由 CMOS 中的设置信息决定的（这也是我们平时讲的，所谓的在 BIOS 中设置的启动设备顺序）。一个是软驱，一个是光驱，一个是硬盘上，还可以是网络上的设备甚至是一个 usb 接口的 U 盘，都可以作为一个启动设备。</p><p>当然，Linux 通常是从硬盘中启动的。硬盘上的第 1 个扇区（每个扇区 512 字节空间），被称为 <strong>MBR（主启动记录）</strong>，其中包含有基本的 GRUB 启动程序和分区表，安装 GRUB 时会自动写入到这个扇区，当 MBR 被 BIOS 装载到 0x7c00 地址开始的内存空间中后，BIOS 就会将控制权转交给了 MBR。在当前的情况下，其实是交给了 GRUB。</p><p>到这里，BIOS 到 GRUB 的过程结束。</p><h2 id="grub-是如何启动的-boot-img-core-img" tabindex="-1"><a class="header-anchor" href="#grub-是如何启动的-boot-img-core-img" aria-hidden="true">#</a> GRUB 是如何启动的: boot.img + core.img</h2><p>根据前面内容可以发现，BIOS 只会加载硬盘上的第 1 个扇区。不过这个扇区仅有 <mark>512 字节</mark>，这 512 字节中还有 <mark>64 字节的分区表</mark>加 <mark>2 字节的启动标志</mark>，很显然，剩下 446 字节的空间，是装不下 GRUB 这种大型通用引导器的。</p><p>于是，GRUB 的加载分成了多个步骤，同时 GRUB 也分成了多个文件，其中有两个<strong>重要的文件 boot.img 和 core.img</strong>，如下所示：</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>GRUB核心文件</p><ol><li><p>其中，<code>boot.img</code> 被 GRUB 的安装程序写入到硬盘的 <strong>MBR(主启动记录)</strong> 中，</p><p>同时在 boot.img 文件中的一个位置写入 core.img 文件占用的第一个扇区的扇区号(具体位置)。</p></li><li><p>而 <code>core.img</code> 文件是由 GRUB 安装程序根据安装时环境信息，用其它 GRUB 的模块文件<strong>动态生成</strong>。如下图所示：</p></li></ol><img src="'+m+'" alt="img" style="zoom:15%;"><img src="'+d+`" alt="image-20220705204513139" style="zoom:20%;"><p>GRUB-coreimg格式</p><p>如果是从硬盘启动的话，core.img 中的第一个扇区的内容就是 <code>diskboot.img</code> 文件。diskboot.img 文件的作用是，<strong>读取 core.img 中剩余的部分到内存中。</strong></p><p>由于这时 diskboot.img 文件还不识别文件系统，所以我们将 core.img 文件的全部位置，都用<strong>文件块列表</strong>的方式保存到 diskboot.img 文件中。这样就能确保 diskboot.img 文件找到 core.img 文件的剩余内容，最后将控制权交给 <code>kernel.img</code> 文件。</p><p>因为这时 core.img 文件中嵌入了<strong>足够多的功能模块</strong>，所以可以保证 GRUB 识别出硬盘分区上文件系统，能够访问 <code>/boot/grub 目录</code>，并且可以加载相关的配置文件和功能模块，<strong>来实现相关的功能</strong>，例如加载启动菜单、加载目标操作系统等。</p><p>正因为 GRUB2 大量使用了<strong>动态加载功能模块</strong>，这使得 core.img 文件的体积变得足够小。而 GRUB 的 core.img 文件一旦开始工作，就可以加载 Linux 系统的 <mark>vmlinuz 内核文件</mark>了。</p><h2 id="详解-vmlinuz-文件结构" tabindex="-1"><a class="header-anchor" href="#详解-vmlinuz-文件结构" aria-hidden="true">#</a> 详解 vmlinuz 文件结构</h2><p>我们在 /boot 目录下会发现 vmlinuz 文件，这个文件是怎么来的呢？</p><p>其实它是由 Linux 编译生成的 bzImage 文件复制而来的，你自己可以下载最新的 Linux 代码.</p><p>我们一致把 Linux 源码解压到一个 linux 目录中，也就是说我们后面查找 Linux 源代码文件总是从 linux 目录开始的，切换到代码目录执行 <code>make ARCH=x86_64</code>，再执行 <code>make install</code>，就会产生 <mark>vmlinuz 文件</mark>，你可以参考后面的 <mark>makefile 代码</mark>。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment">#linux/arch/x86/boot/Makefile</span>
<span class="token target symbol">install</span><span class="token punctuation">:</span>    sh <span class="token variable">$</span><span class="token punctuation">(</span>srctree<span class="token punctuation">)</span>/<span class="token variable">$</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>/install.sh <span class="token variable">$</span><span class="token punctuation">(</span>KERNELRELEASE<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/bzImage \\        System.map <span class="token string">&quot;$(INSTALL_PATH)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,47),g={href:"http://install.sh",target:"_blank",rel:"noopener noreferrer"},x=s('<p>那么 bzImage 文件又是怎么来的呢？我们只要研究 bzImage 文件在 Makefile 中的生成规则，就会恍然大悟，代码如下 ：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment">#linux/arch/x86/boot/Makefile</span>\n<span class="token target symbol"><span class="token variable">$</span>(obj)/bzImage</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/setup.bin <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/vmlinux.bin <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/tools/build FORCE    <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,image<span class="token punctuation">)</span>    <span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>kecho<span class="token punctuation">)</span> <span class="token string">&#39;Kernel: $@ is ready&#39;</span> <span class="token string">&#39; (#&#39;</span>`cat .version`<span class="token string">&#39;)&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从前面的代码可以知道，生成 <mark>bzImage 文件</mark>需要三个依赖文件：<mark>1 setup.bin</mark>、<mark>2 vmlinux.bin</mark>，<strong>linux/arch/x86/boot/tools 目录</strong>下的 <mark>3 build</mark>。让我们挨个来分析一下。</p><p>其实，build 只是一个 HOSTOS（正在使用的 Linux）下的应用程序，它的作用就是将 setup.bin、vmlinux.bin 两个文件拼接成一个 bzImage 文件，如下图所示：</p><img src="'+k+`" alt="img" style="zoom:15%;"><p>bzImage文件结构示意图</p><p>剩下的就是搞清楚 setup.bin、vmlinux.bin 这两个文件的的结构，先来看看 setup.bin 文件，setup.bin 文件是由 objcopy 命令根据 setup.elf 生成的。</p><p>setup.elf 文件又怎么生成的呢？我们结合后面的代码来看看。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment">#这些目标文件正是由/arch/x86/boot/目录下对应的程序源代码文件编译产生</span>
setup-y     <span class="token operator">+=</span> a20.o bioscall.o cmdline.o copy.o cpu.o cpuflags.o cpucheck.o
setup-y     <span class="token operator">+=</span> early_serial_console.o edd.o header.o main.o memory.o
setup-y     <span class="token operator">+=</span> pm.o pmjump.o printf.o regs.o string.o tty.o video.o
setup-y     <span class="token operator">+=</span> video-mode.o version.o

<span class="token comment">#……</span>
SETUP_OBJS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>addprefix <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/,<span class="token variable">$</span><span class="token punctuation">(</span>setup-y<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#……</span>
LDFLAGS_setup.elf   <span class="token operator">:=</span> -m elf_i386 -T<span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/setup.elf<span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>/setup.ld <span class="token variable">$</span><span class="token punctuation">(</span>SETUP_OBJS<span class="token punctuation">)</span> FORCE    <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,ld<span class="token punctuation">)</span>
<span class="token comment">#……</span>
OBJCOPYFLAGS_setup.bin  <span class="token operator">:=</span> -O binary<span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/setup.bin<span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/setup.elf FORCE    <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,objcopy<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据这段代码，不难发现 <mark>setup.bin 文件</mark>正是由 <strong>/arch/x86/boot/ 目录</strong>下一系列对应的<mark>程序源代码文件</mark>编译链接产生，其中的 <strong>head.S 文件</strong>和 <strong>main.c 文件</strong>格外重要，别急，这个我之后会讲。</p><p>下面我们先看看 <mark>vmlinux.bin</mark> 是怎么产生的，构建 vmlinux.bin 的规则依然在 <strong>linux/arch/x86/boot/ 目录</strong>下的 <mark>Makefile 文件</mark>中，如下所示：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment">#linux/arch/x86/boot/Makefile</span>
OBJCOPYFLAGS_vmlinux.bin <span class="token operator">:=</span> -O binary -R .note -R .comment -S<span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/vmlinux.bin<span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/compressed/vmlinux FORCE    <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,objcopy<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的意思是，<mark>vmlinux.bin 文件</mark>依赖于 <strong>linux/arch/x86/boot/compressed/ 目录</strong>下的 <mark>vmlinux</mark> 目标，下面让我们切换到 linux/arch/x86/boot/compressed/ 目录下继续追踪。打开该目录下的 <mark>Makefile</mark>，会看到如下代码。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment">#linux/arch/x86/boot/compressed/Makefile</span>
<span class="token comment">#……</span>
<span class="token comment">#这些目标文件正是由/arch/x86/boot/compressed/目录下对应的程序源代码文件编译产生$(BITS)取值32或者64</span>
vmlinux-objs-y <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/vmlinux.lds <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/kernel_info.o <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/head_<span class="token variable">$</span><span class="token punctuation">(</span>BITS<span class="token punctuation">)</span>.o \\    <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/misc.o <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/string.o <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/cmdline.o <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/error.o \\    <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/piggy.o <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/cpuflags.o
vmlinux-objs-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_EARLY_PRINTK<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/early_serial_console.o
vmlinux-objs-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_RANDOMIZE_BASE<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/kaslr.o
<span class="token keyword">ifdef</span> CONFIG_X86_64    
vmlinux-objs-y <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/ident_map_64.o    
vmlinux-objs-y <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/idt_64.o <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/idt_handlers_64.o    vmlinux-objs-y <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/mem_encrypt.o    
vmlinux-objs-y <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/pgtable_64.o    
vmlinux-objs-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_AMD_MEM_ENCRYPT<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/sev-es.o
<span class="token keyword">endif</span>
<span class="token comment">#……</span>
<span class="token target symbol"><span class="token variable">$</span>(obj)/vmlinux</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>vmlinux-objs-y<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>efi-obj-y<span class="token punctuation">)</span> FORCE  
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,ld<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合这段代码我们发现，linux/arch/x86/boot/compressed 目录下的 vmlinux 是由该目录下的 <mark>1 head_32.o 或者 head_64.o</mark>、<mark>2 cpuflags.o</mark>、<mark>3 error.o</mark>、<mark>4 kernel.o</mark>、<mark>5 misc.o</mark>、<mark>6 string.o</mark> 、<mark>7 cmdline.o</mark> 、<mark>8 early_serial_console.o</mark> 等文件以及 <mark>9 piggy.o</mark> 链接而成的。</p><p>其中，vmlinux.lds 是<strong>链接脚本文件</strong>。在没做任何编译动作前，前面依赖列表中任何一个目标文件的源文件（除了 piggy.o 源码），我们几乎都可以在 Linux 内核源码里找到。</p><p>比如说，head_64.o 对应源文件 head_64.S、string.o 对应源文件 string.c、misc.o 对应源文件 misc.c 等。</p><p>那么问题来了，为啥找不到 piggy.o 对应的源文件，比如 piggy.c、piggy.S 或其他文件呢？你需要在 Makefile 文件仔细观察一下，才能发现有个创建文件 piggy.S 的规则，代码如下所示：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment">#linux/arch/x86/boot/compressed/Makefile</span>
<span class="token comment">#……</span>
quiet_cmd_mkpiggy <span class="token operator">=</span> MKPIGGY <span class="token variable">$@</span>      
cmd_mkpiggy <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/mkpiggy <span class="token variable">$&lt;</span> &gt; <span class="token variable">$@</span>

targets <span class="token operator">+=</span> piggy.S
<span class="token target symbol"><span class="token variable">$</span>(obj)/piggy.S</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/vmlinux.bin.<span class="token variable">$</span><span class="token punctuation">(</span>suffix-y<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/mkpiggy FORCE    <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,mkpiggy<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到上面的规则，我们豁然开朗，原来 piggy.o 是由 piggy.S 汇编代码生成而来，而 piggy.S 是编译 Linux 内核时由 mkpiggy 工作（HOST OS 下的应用程序）动态创建的，这就是我们找不到它的原因。</p><p>piggy.S 的第一个依赖文件 vmlinux.bin.$(suffix-y) 中的 suffix-y，它表示<strong>内核压缩方式</strong>对应的后缀。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment">#linux/arch/x86/boot/compressed/Makefile</span>
<span class="token comment">#……</span>
vmlinux.bin.all-y <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/vmlinux.bin
vmlinux.bin.all-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_X86_NEED_RELOCS<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>/vmlinux.relocs
<span class="token target symbol"><span class="token variable">$</span>(obj)/vmlinux.bin.gz</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>vmlinux.bin.all-y<span class="token punctuation">)</span> FORCE    
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,gzip<span class="token punctuation">)</span>
<span class="token target symbol"><span class="token variable">$</span>(obj)/vmlinux.bin.bz2</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>vmlinux.bin.all-y<span class="token punctuation">)</span> FORCE    
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,bzip2<span class="token punctuation">)</span>
<span class="token target symbol"><span class="token variable">$</span>(obj)/vmlinux.bin.lzma</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>vmlinux.bin.all-y<span class="token punctuation">)</span> FORCE    
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,lzma<span class="token punctuation">)</span>
<span class="token target symbol"><span class="token variable">$</span>(obj)/vmlinux.bin.xz</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>vmlinux.bin.all-y<span class="token punctuation">)</span> FORCE   
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,xzkern<span class="token punctuation">)</span>
<span class="token target symbol"><span class="token variable">$</span>(obj)/vmlinux.bin.lzo</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>vmlinux.bin.all-y<span class="token punctuation">)</span> FORCE    
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,lzo<span class="token punctuation">)</span>
<span class="token target symbol"><span class="token variable">$</span>(obj)/vmlinux.bin.lz4</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>vmlinux.bin.all-y<span class="token punctuation">)</span> FORCE    
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,lz4<span class="token punctuation">)</span>
<span class="token target symbol"><span class="token variable">$</span>(obj)/vmlinux.bin.zst</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>vmlinux.bin.all-y<span class="token punctuation">)</span> FORCE    
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,zstd22<span class="token punctuation">)</span>
suffix-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_KERNEL_GZIP<span class="token punctuation">)</span>    <span class="token operator">:=</span> gz
suffix-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_KERNEL_BZIP2<span class="token punctuation">)</span>   <span class="token operator">:=</span> bz2
suffix-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_KERNEL_LZMA<span class="token punctuation">)</span>    <span class="token operator">:=</span> lzma
suffix-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_KERNEL_XZ<span class="token punctuation">)</span>  <span class="token operator">:=</span> xz
suffix-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_KERNEL_LZO<span class="token punctuation">)</span>     <span class="token operator">:=</span> lzo
suffix-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_KERNEL_LZ4<span class="token punctuation">)</span>     <span class="token operator">:=</span> lz4
suffix-<span class="token variable">$</span><span class="token punctuation">(</span>CONFIG_KERNEL_ZSTD<span class="token punctuation">)</span>    <span class="token operator">:=</span> zst
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由前面内容可以发现，<strong><code>Linux 内核可以被压缩成多种格式</code></strong>。虽然现在我们依然没有搞清楚 vmlinux.bin 文件是怎么来的，但是我们可以发现，linux/arch/x86/boot/compressed 目录下的 Makefile 文件中，有下面这样的代码。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment">#linux/arch/x86/boot/compressed/Makefile</span>
<span class="token comment">#……</span>
OBJCOPYFLAGS_vmlinux.bin <span class="token operator">:=</span>  -R .comment -S
<span class="token target symbol"><span class="token variable">$</span>(obj)/vmlinux.bin</span><span class="token punctuation">:</span> vmlinux FORCE 
<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">call</span> if_changed,objcopy<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，arch/x86/boot/compressed 目录下的 vmlinux.bin，它是由 <mark>objcopy 工具</mark>通过 vmlinux 目标生成。而 vmlinux 目标没有任何修饰前缀和依赖的目标，这说明它就是<strong>最顶层目录下的一个 vmlinux 文件</strong>。</p><p>我们继续深究一步就会发现，objcopy 工具在处理过程中只是删除了 vmlinux 文件中“.comment”段，以及符号表和重定位表（通过参数 -S 指定），而 vmlinux 文件的格式依然是 <mark>ELF 格式</mark>的，如果不需要使用 ELF 格式的内核，这里添加“-O binary”选项就可以了。</p><h2 id="梳理内核文件-vmlinux-创建流程" tabindex="-1"><a class="header-anchor" href="#梳理内核文件-vmlinux-创建流程" aria-hidden="true">#</a> 梳理内核文件 vmlinux 创建流程</h2><p>我们现在来梳理一下，vmlinux 文件是如何创建的。</p><p>其实，vmlinux 文件就是编译整个 Linux 内核源代码文件生成的，Linux 的代码分布在各个代码目录下，这些目录之下又存在目录，Linux 的 <mark>kbuild（内核编译）系统</mark>，会递归进入到每个目录，<strong>由该目录下的 Makefile 决定要编译哪些文件</strong>。</p><p>在编译完具体文件之后，<strong>就会在该目录下</strong>，把已经编译了的文件链接成一个该目录下的 built-in.o 文件，这个 built-in.o 文件<strong>也会与上层目录的</strong> built-in.o 文件<strong>链接在一起</strong>。</p><p>再然后，<strong>层层目录返回到顶层目录</strong>，所有的 built-in.o 文件会链接生成一个 <mark>vmlinux 文件</mark>，这个 vmlinux 文件会通过前面的方法转换成 <mark>vmlinux.bin 文件</mark>。但是请注意，vmlinux.bin 文件它依然是 <mark>ELF 格式</mark>的文件。</p><p>最后，工具软件会压缩成 vmlinux.bin.gz 文件，这里我们以 gzip 方式压缩。</p><p>让我们再次回到 <code>mkpiggy</code> 命令，其中 mkpiggy 是内核自带的一个工具程序，它把输出方式重定向到文件，从而产生 <mark>piggy.S 汇编文件</mark>，源码如下：</p><div class="language-assembly line-numbers-mode" data-ext="assembly"><pre class="language-assembly"><code>int main(int argc, char *argv[]){ 
    uint32_t olen;    
    long ilen;    
    FILE *f = NULL;    
    int retval = 1;
    f = fopen(argv[1], &quot;r&quot;);    
    if (!f) {        
        perror(argv[1]);        
        goto bail;    
    }
    //……为节约篇幅略去部分代码
    printf(&quot;.section \\&quot;.rodata..compressed\\&quot;,\\&quot;a\\&quot;,@progbits\\n&quot;);
    printf(&quot;.globl z_input_len\\n&quot;);    
    printf(&quot;z_input_len = %lu\\n&quot;, ilen);    
    printf(&quot;.globl z_output_len\\n&quot;);    
    printf(&quot;z_output_len = %lu\\n&quot;, (unsigned long)olen);
    printf(&quot;.globl input_data, input_data_end\\n&quot;);
    printf(&quot;input_data:\\n&quot;);    
    printf(&quot;.incbin \\&quot;%s\\&quot;\\n&quot;, argv[1]);    
    printf(&quot;input_data_end:\\n&quot;);
    printf(&quot;.section \\&quot;.rodata\\&quot;,\\&quot;a\\&quot;,@progbits\\n&quot;);
    printf(&quot;.globl input_len\\n&quot;);    
    printf(&quot;input_len:\\n\\t.long %lu\\n&quot;, ilen);    
    printf(&quot;.globl output_len\\n&quot;);    
    printf(&quot;output_len:\\n\\t.long %lu\\n&quot;, (unsigned long)olen);
    retval = 0;
bail:    
    if (f)        
        fclose(f);    
    return retval;
}
//由上mkpiggy程序“写的”一个汇编程序piggy.S。
.section &quot;.rodata..compressed&quot;,&quot;a&quot;,@progbits 
.globl z_input_len
 z_input_len = 1921557 
.globl z_output_len 
z_output_len = 3421472 
.globl input_data,input_data_end
.incbin &quot;arch/x86/boot/compressed/vmlinux.bin.gz&quot; 
input_data_end:
.section &quot;.rodata&quot;,&quot;a&quot;,@progbits
.globl input_len
input_len:4421472
.globl output_len
output_len:4424772
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上述代码不难发现，这个 piggy.S 非常简单，使用汇编指令 incbin 将压缩的 vmlinux.bin.gz 毫无修改地包含进来。</p><p>除了包含了压缩的 vmlinux.bin.gz 内核映像文件外，piggy.S 中还定义了解压 vmlinux.bin.gz 时需要的各种信息，包括压缩内核映像的长度、解压后的长度等信息。</p>`,36),h=n("p",null,[n("strong",null,[a("这些信息和 vmlinux.bin.gz 文件，它们一起生成了 "),n("mark",null,"piggy.o 文件"),a("，然后 piggy.o 文件和"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"v"),n("mi",null,"m"),n("mi",null,"l"),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"u"),n("mi",null,"x"),n("mo",null,"−"),n("mi",null,"o"),n("mi",null,"b"),n("mi",null,"j"),n("mi",null,"s"),n("mo",null,"−"),n("mi",null,"y"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"(vmlinux-objs-y)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal"},"ux"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"bj"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mclose"},")")])])]),a("(efi-obj-y) 中的目标文件一起链接生成，最终生成了 linux/arch/x86/boot/compressed 目录下的 vmlinux。")])],-1),f=s('<p>说到这里，你是不是感觉，这和 Linux 的启动流程无关呢？有这种想法就大错特错了，要想搞明白 Linux 的启动流程，首先得搞懂它 vmlinuz 的文件结构。有了这些基础，才能知其然同时知其所以然。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>又到了课程尾声，这节课的学习我们就告一段落了，我来给你做个总结。</p><p>今天我们首先从全局梳理了一遍 x86 平台的启动流程，掌握了 BIOS 加载 GRUB 的过程，又一起学习了 BIOS 是如何启动的，它又是如何加载引导设备的。</p><p>接着我们研究了 GRUB 的启动流程，BIOS 加载了 GRUB 的第一个部分，这一部分加载了 GRUB 的其余部分。</p><p>最后，我们详细了解了 Linux 内核的启动文件 vmlinuz 的结构，搞清楚了它的生成过程。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请问，为什么要用 C 代码 mkpiggy 程序生成 piggy.S 文件，并包含 vmlinux.bin.gz 文件呢？</p><p>欢迎你在留言区记录你的收获和疑问，也欢迎你把这节课分享给有需要的朋友，跟他一起学习进步。</p><p>好，我是 LMOS，我们下节课见！</p>',10);function _(y,$){const e=t("ExternalLinkIcon");return p(),l("div",null,[v,n("p",null,[n("a",g,[a("install.sh"),o(e)]),a(" 脚本文件只是完成复制的功能，所以我们只要搞懂了 bzImage 文件结构，就等同于理解了 vmlinuz 文件结构。")]),x,h,f])}const B=i(b,[["render",_],["__file","D14-Linux初始化（上）.html.vue"]]);export{B as default};
