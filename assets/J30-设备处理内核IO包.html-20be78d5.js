import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/84c7837a89eb56b2863c8b30eb1217e9-bbddbda5.jpg",e="/assets/75647910ba0529e6c80ba127bbe9c247-25b3c0a6.jpg",o={},c=p(`<h1 id="_30-部门响应-设备如何处理内核i-o包" tabindex="-1"><a class="header-anchor" href="#_30-部门响应-设备如何处理内核i-o包" aria-hidden="true">#</a> 30 | 部门响应：设备如何处理内核I/O包？</h1><p>你好，我是 LMOS。</p><p>在上一课中，我们实现了建立设备的接口，这相当于制定了部门的相关法规，只要遵守这些法规就能建立一个部门。当然，建立了一个部门，是为了干活的，吃空饷可不行。</p><p>其实一个部门的职责不难确定，它应该能对上级下发的任务作出响应，并完成相关工作，而这对应到设备，就是如何处理内核的 I/O 包，这节课我们就来解决这个问题。</p><p>首先，我们需要搞清楚什么是 I/O 包，然后实现内核向设备发送 I/O 包的工作。最后，我还会带你一起来完成一个驱动实例，用于处理 I/O 包，这样你就能真正理解这里的来龙去脉了。</p><p>好，让我们开始今天的学习吧！代码你可以从这里下载。</p><h2 id="什么是-i-o-包" tabindex="-1"><a class="header-anchor" href="#什么是-i-o-包" aria-hidden="true">#</a> 什么是 I/O 包</h2><p>就像你要给部门下达任务时，需要准备材料报表之类的东西。同样，内核要求设备做什么事情，完成什么功能，必须要告诉设备的驱动程序。</p><p>内核要求设备完成任务，无非是调用设备的驱动程序函数，把完成任务的细节用参数的形式传递给设备的驱动程序。</p><p>由于参数很多，而且各种操作所需的参数又不相同，所以我们就想到了更高效的管理方法，也就是<strong>把各种操作所需的各种参数封装在一个数据结构中</strong>，称为 <mark>I/O 包</mark>，这样就可以统一驱动程序功能函数的形式了。</p><p>思路理清以后，现在我们来设计这个数据结构，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">s_OBJNODE</span>
<span class="token punctuation">{</span>
    <span class="token class-name">spinlock_t</span>  on_lock<span class="token punctuation">;</span>        <span class="token comment">//自旋锁</span>
    <span class="token class-name">list_h_t</span>    on_list<span class="token punctuation">;</span>        <span class="token comment">//链表</span>
    <span class="token class-name">sem_t</span>       on_complesem<span class="token punctuation">;</span>   <span class="token comment">//完成信号量</span>
    <span class="token class-name">uint_t</span>      on_flgs<span class="token punctuation">;</span>        <span class="token comment">//标志</span>
    <span class="token class-name">uint_t</span>      on_stus<span class="token punctuation">;</span>        <span class="token comment">//状态</span>
    <span class="token class-name">sint_t</span>      on_opercode<span class="token punctuation">;</span>    <span class="token comment">//操作码</span>
    <span class="token class-name">uint_t</span>      on_objtype<span class="token punctuation">;</span>     <span class="token comment">//对象类型</span>
    <span class="token keyword">void</span><span class="token operator">*</span>       on_objadr<span class="token punctuation">;</span>      <span class="token comment">//对象地址</span>
    <span class="token class-name">uint_t</span>      on_acsflgs<span class="token punctuation">;</span>     <span class="token comment">//访问设备、文件标志</span>
    <span class="token class-name">uint_t</span>      on_acsstus<span class="token punctuation">;</span>     <span class="token comment">//访问设备、文件状态</span>
    <span class="token class-name">uint_t</span>      on_currops<span class="token punctuation">;</span>     <span class="token comment">//对应于读写数据的当前位置</span>
    <span class="token class-name">uint_t</span>      on_len<span class="token punctuation">;</span>         <span class="token comment">//对应于读写数据的长度</span>
    <span class="token class-name">uint_t</span>      on_ioctrd<span class="token punctuation">;</span>      <span class="token comment">//IO控制码</span>
    <span class="token class-name">buf_t</span>       on_buf<span class="token punctuation">;</span>         <span class="token comment">//对应于读写数据的缓冲区</span>
    <span class="token class-name">uint_t</span>      on_bufcurops<span class="token punctuation">;</span>   <span class="token comment">//对应于读写数据的缓冲区的当前位置</span>
    <span class="token class-name">size_t</span>      on_bufsz<span class="token punctuation">;</span>       <span class="token comment">//对应于读写数据的缓冲区的大小</span>
    <span class="token class-name">uint_t</span>      on_count<span class="token punctuation">;</span>       <span class="token comment">//对应于对象节点的计数</span>
    <span class="token keyword">void</span><span class="token operator">*</span>       on_safedsc<span class="token punctuation">;</span>     <span class="token comment">//对应于对象节点的安全描述符</span>
    <span class="token keyword">void</span><span class="token operator">*</span>       on_fname<span class="token punctuation">;</span>       <span class="token comment">//对应于访问数据文件的名称</span>
    <span class="token keyword">void</span><span class="token operator">*</span>       on_finode<span class="token punctuation">;</span>      <span class="token comment">//对应于访问数据文件的结点</span>
    <span class="token keyword">void</span><span class="token operator">*</span>       on_extp<span class="token punctuation">;</span>        <span class="token comment">//用于扩展</span>
<span class="token punctuation">}</span><span class="token class-name">objnode_t</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你可能还无法从 objnode_t 这个名字看出它跟 I/O 包的关系。但你从刚才的代码里可以看出，objnode_t 的数据结构中包括了各个驱动程序功能函数的所有参数。</p><p>等我们后面讲到 API 接口时，你会发现，objnode_t 结构不单是完成了 I/O 包传递参数的功能，它在整个 I/O 生命周期中，都起着重要的作用。这里为了好理解，我们就暂且把 objnode_t 结构当作 I/O 包来看。</p><h2 id="创建和删除-i-o-包-krlobjnode-c" tabindex="-1"><a class="header-anchor" href="#创建和删除-i-o-包-krlobjnode-c" aria-hidden="true">#</a> 创建和删除 I/O 包: krlobjnode.c</h2><p>刚才，我们已经定义了 I/O 包也就是 objnode_t 结构，但若是要使用它，就必须先把它建立好。</p><p>根据以往的经验，你应该已经猜到了，这里创建 I/O 包就是在内存中建立 objnode_t 结构的实例变量并初始化它。由于这是一个全新的模块，所以我们要先在 cosmos/kernel/ 目录下建立一个新的 <code>krlobjnode.c</code> 文件，在这个文件中写代码，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//建立objnode_t结构</span>
<span class="token class-name">objnode_t</span> <span class="token operator">*</span><span class="token function">krlnew_objnode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">objnode_t</span> <span class="token operator">*</span>ondp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">objnode_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">krlnew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">objnode_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分配objnode_t结构的内存空间</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ondp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">objnode_t_init</span><span class="token punctuation">(</span>ondp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化objnode_t结构</span>
    <span class="token keyword">return</span> ondp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//删除objnode_t结构</span>
<span class="token class-name">bool_t</span> <span class="token function">krldel_objnode</span><span class="token punctuation">(</span><span class="token class-name">objnode_t</span> <span class="token operator">*</span>onodep<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">krldelete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>onodep<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">objnode_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span><span class="token comment">//删除objnode_t结构的内存空间</span>
    <span class="token punctuation">{</span>
        <span class="token function">hal_sysdie</span><span class="token punctuation">(</span><span class="token string">&quot;krldel_objnode err&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码非常简单，主要完成了建立、删除 objnode_t 结构这两件事，其实说白了就是分配和释放 objnode_t 结构的内存空间。</p><p>这里再一次体现了<strong>内存管理组件在操作系统内核之中的重要性</strong>，objnode_t_init 函数会初始化 objnode_t 结构中的字段，因为其中有自旋锁、链表、信号量，而这些结构并不能简单地初始为 0，否则可以直接使用 memset 之类的函数把那个内存空间清零就行了。</p><h2 id="向设备发送-i-o-包-krldevice-c" tabindex="-1"><a class="header-anchor" href="#向设备发送-i-o-包-krldevice-c" aria-hidden="true">#</a> 向设备发送 I/O 包: krldevice.c</h2><p>现在我们假定在上层接口函数中，已经建立了一个 I/O 包（即 objnode_t 结构），并且把操作码、操作对象和相关的参数信息填写到了 objnode_t 结构之中。那么下一步，就需要把这个 I/O 发送给具体设备的驱动程序，以便驱动程序完成具体工作。</p><p>我们需要定义实现一个函数，专门用于完成这个功能，它标志着一个设备驱动程序开始运行，经它之后内核就实际的控制权交给驱动程序，由驱动程序代表内核操控设备。</p><p>下面，我们就来写好这个函数，不过这个函数属于驱动模型函数，所以要在 <code>krldevice.c</code> 文件中实现这个函数。代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//发送设备IO</span>
<span class="token class-name">drvstus_t</span> <span class="token function">krldev_io</span><span class="token punctuation">(</span><span class="token class-name">objnode_t</span> <span class="token operator">*</span>nodep<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取设备对象 </span>
    <span class="token class-name">device_t</span> <span class="token operator">*</span>devp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>nodep<span class="token operator">-&gt;</span>on_objadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nodep<span class="token operator">-&gt;</span>on_objtype <span class="token operator">!=</span> OBJN_TY_DEV <span class="token operator">&amp;&amp;</span> nodep<span class="token operator">-&gt;</span>on_objtype <span class="token operator">!=</span> OBJN_TY_FIL<span class="token punctuation">)</span> <span class="token operator">||</span> nodep<span class="token operator">-&gt;</span>on_objadr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//检查操作对象类型是不是文件或者设备，对象地址是不是为空</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodep<span class="token operator">-&gt;</span>on_opercode <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nodep<span class="token operator">-&gt;</span>on_opercode <span class="token operator">&gt;=</span> IOIF_CODE_MAX<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//检查IO操作码是不是合乎要求</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">krldev_call_driver</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> nodep<span class="token operator">-&gt;</span>on_opercode<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> nodep<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用设备驱动</span>
<span class="token punctuation">}</span>
<span class="token comment">//调用设备驱动</span>
<span class="token class-name">drvstus_t</span> <span class="token function">krldev_call_driver</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> iocode<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> val1<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> val2<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">driver_t</span> <span class="token operator">*</span>drvp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>devp <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> iocode <span class="token operator">&gt;=</span> IOIF_CODE_MAX<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//检查设备和IO操作码</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    drvp <span class="token operator">=</span> devp<span class="token operator">-&gt;</span>dev_drv<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>drvp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//检查设备是否有驱动程序</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//用IO操作码为索引调用驱动程序功能分派函数数组中的函数</span>
    <span class="token keyword">return</span> drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>iocode<span class="token punctuation">]</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>krldev_io 函数，只接受一个参数，也就是 objnode_t 结构的指针。它会首先检查 objnode_t 结构中的 IO 操作码是不是合乎要求的，还要检查被操作的对象即设备是不是为空，然后调用 krldev_call_driver 函数。</p><p>这个 krldev_call_driver 函数会再次确认传递进来的设备和 IO 操作码，然后重点检查设备有没有驱动程序。这一切检查通过之后，我们就用 IO 操作码为索引调用驱动程序功能分派函数数组中的函数，并把设备和 objnode_t 结构传递进去。有没有觉得眼熟？没错，这正是我们前面课程中对驱动程序的设计。</p><p>好了，现在一个设备的驱动程序就能正式开始工作，开始响应处理内核发来的 I/O 包了。可是我们还没有驱动呢，所以下面我们就去实现一个驱动程序。</p><h2 id="驱动程序实例" tabindex="-1"><a class="header-anchor" href="#驱动程序实例" aria-hidden="true">#</a> 驱动程序实例</h2><p>现在我们一起来实现一个真实而且简单的设备驱动程序，就是 systick 设备驱动，它是我们 Cosmos 系统的心跳，systick 设备的主要功能和作用是每隔 1ms 产生一个中断，相当于一个定时器，每次时间到达就产生一个中断向系统报告又过了 1ms，相当于千分之一秒，即每秒钟内产生 1000 次中断。</p><p>对于现代 CPU 的速度来说，这个中断频率不算太快。x86 平台上有没有这样的定时器呢？当然有，其中 8254 就是一个古老且常用的定时器，对它进行编程设定，它就可以周期的产生定时器中断。</p><p>这里我们就以 8254 定时器为基础，实现 Cosmos 系统的 systick 设备。我们先从 systick 设备驱动程序的整体框架入手，然后建立 systick 设备，最后一步一步实现 systick 设备驱动程序。</p><h2 id="systick-设备驱动程序的整体框架-drvtick-c" tabindex="-1"><a class="header-anchor" href="#systick-设备驱动程序的整体框架-drvtick-c" aria-hidden="true">#</a> systick 设备驱动程序的整体框架: drvtick.c</h2><p>在前面的课程中，我们已经了解了在 Cosmos 系统下，一个设备驱动程序的基本框架，但是我们没有深入具体化。</p><p>所以，这里我会带你从全局好好了解一个真实的设备，它的驱动程序应该至少有哪些函数。由于这是个驱动程序，我们需要在 cosmos/drivers/ 目录下建立一个 drvtick.c 文件，在 <code>drvtick.c</code> 文件中写入以下代码，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//驱动程序入口和退出函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_entry</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span> <span class="token operator">*</span>drvp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> val<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_exit</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span> <span class="token operator">*</span>drvp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> val<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//设备中断处理函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_handle</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> ift_nr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>sframe<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCEERSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//打开、关闭设备函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_open</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_close</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//读、写设备数据函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_read</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_write</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//调整读写设备数据位置函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_lseek</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//控制设备函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_ioctrl</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//开启、停止设备函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_dev_start</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_dev_stop</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//设置设备电源函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_set_powerstus</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//枚举设备函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_enum_dev</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//刷新设备缓存函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_flush</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//设备关机函数</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_shutdown</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是一个驱动程序必不可少的函数，**在各个函数可以返回一个错误状态，而不做任何实际工作，但是必须要有这个函数。**这样在内核发来任何设备功能请求时，驱动程序才能给予适当的响应。这样，一个驱动程序的整体框架就确定了。</p><p>写好了驱动程序的整体框架，我们这个驱动就完成了一半。下面我们来一步一步来实现它。</p><h2 id="systick-设备驱动程序的入口" tabindex="-1"><a class="header-anchor" href="#systick-设备驱动程序的入口" aria-hidden="true">#</a> systick 设备驱动程序的入口</h2><p>我们先来写好 systick 设备驱动程序的入口函数。那这个函数用来做什么呢？其实我们在上一节课就详细讨论过，无非是建立设备，向内核注册设备，安装中断回调函数等操作，所以这里不再赘述。</p><p>我们直接写出这个函数，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">drvstus_t</span> <span class="token function">systick_entry</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span><span class="token operator">*</span> drvp<span class="token punctuation">,</span><span class="token class-name">uint_t</span> val<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>drvp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">//drvp是内核传递进来的参数，不能为NULL</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">device_t</span><span class="token operator">*</span> devp<span class="token operator">=</span><span class="token function">new_device_dsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立设备描述符结构的变量实例</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>devp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//不能失败</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">systick_set_driver</span><span class="token punctuation">(</span>drvp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">systick_set_device</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>drvp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//驱动程序的功能函数设置到driver_t结构中的drv_dipfun数组中</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">krldev_add_driver</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>drvp<span class="token punctuation">)</span><span class="token operator">==</span>DFCERRSTUS<span class="token punctuation">)</span><span class="token comment">//将设备挂载到驱动中</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">del_device_dsc</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token operator">==</span>DFCERRSTUS<span class="token punctuation">)</span><span class="token comment">//注意释放资源。</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">krlnew_device</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token operator">==</span>DFCERRSTUS<span class="token punctuation">)</span><span class="token comment">//向内核注册设备</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">del_device_dsc</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token operator">==</span>DFCERRSTUS<span class="token punctuation">)</span><span class="token comment">//注意释放资源</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//安装中断回调函数systick_handle</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">krlnew_devhandle</span><span class="token punctuation">(</span>devp<span class="token punctuation">,</span>systick_handle<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">==</span>DFCERRSTUS<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>  <span class="token comment">//注意释放资源。</span>
    <span class="token punctuation">}</span>
    <span class="token function">init_8254</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化物理设备 </span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">krlenable_intline</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">==</span>DFCERRSTUS<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> DFCERRSTUS<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能非常熟悉这部分代码，没错，这正是上节课中，我们的那个驱动程序入口函数的实例。</p><p>不过在上节课里，我们主要是要展示一个驱动程序入口函数的流程。这里却是要投入工作的真实设备驱动。</p><p>最后的 <strong>krlenable_intline 函数</strong>，它的主要功能是开启一个中断源上的中断。而 init_8254 函数则是为了初始化 8254，它就是一个古老且常用的定时器。这两个函数非常简单，我已经帮写好了。</p><p>但是这样还不够，有了驱动程序入口函数，驱动程序并不会自动运行。根据前面我们的设计，需要把这个驱动程序入口函数放入驱动表中。</p><p>下面我们就把这个 systick_entry 函数，放到驱动表里，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//cosmos/kernel/krlglobal.c</span>
<span class="token function">KRL_DEFGLOB_VARIABLE</span><span class="token punctuation">(</span><span class="token class-name">drventyexit_t</span><span class="token punctuation">,</span>osdrvetytabl<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>systick_entry<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有了刚才这步操作之后，Cosmos 在启动的时候，就会执行初始驱动初始化 init_krldriver 函数，接着这个函数就会启动运行 systick 设备驱动程序入口函数。我们的 systick_entry 函数一旦执行，就会建立 systick 设备，不断的产生时钟中断。</p><h2 id="配置设备和驱动" tabindex="-1"><a class="header-anchor" href="#配置设备和驱动" aria-hidden="true">#</a> 配置设备和驱动</h2><p>在驱动程序入口函数中，除了那些标准的流程之外，我们还要对设备和驱动进行适当的配置，就是设置一些标志、状态、名称、驱动功能派发函数等等。有了这些信息，设备才能加入到驱动程序中，然后注册到内核，这样才能被内核所识别。</p><p>好，让我们先来实现设置驱动程序的函数，它主要设置设备驱动程序的名称、功能派发函数，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">systick_set_driver</span><span class="token punctuation">(</span><span class="token class-name">driver_t</span> <span class="token operator">*</span>drvp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//设置驱动程序功能派发函数</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_OPEN<span class="token punctuation">]</span> <span class="token operator">=</span> systick_open<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_CLOSE<span class="token punctuation">]</span> <span class="token operator">=</span> systick_close<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_READ<span class="token punctuation">]</span> <span class="token operator">=</span> systick_read<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_WRITE<span class="token punctuation">]</span> <span class="token operator">=</span> systick_write<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_LSEEK<span class="token punctuation">]</span> <span class="token operator">=</span> systick_lseek<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_IOCTRL<span class="token punctuation">]</span> <span class="token operator">=</span> systick_ioctrl<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_DEV_START<span class="token punctuation">]</span> <span class="token operator">=</span> systick_dev_start<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_DEV_STOP<span class="token punctuation">]</span> <span class="token operator">=</span> systick_dev_stop<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_SET_POWERSTUS<span class="token punctuation">]</span> <span class="token operator">=</span> systick_set_powerstus<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_ENUM_DEV<span class="token punctuation">]</span> <span class="token operator">=</span> systick_enum_dev<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_FLUSH<span class="token punctuation">]</span> <span class="token operator">=</span> systick_flush<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_dipfun<span class="token punctuation">[</span>IOIF_CODE_SHUTDOWN<span class="token punctuation">]</span> <span class="token operator">=</span> systick_shutdown<span class="token punctuation">;</span>
    drvp<span class="token operator">-&gt;</span>drv_name <span class="token operator">=</span> <span class="token string">&quot;systick0drv&quot;</span><span class="token punctuation">;</span><span class="token comment">//设置驱动程序名称</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的功能并不复杂，我一说你就能领会。systick_set_driver 函数，无非就是将 12 个驱动功能函数的地址，分别设置到 driver_t 结构的 drv_dipfun 数组中。其中，驱动功能函数在该数组中的元素位置，正好与 IO 操作码一一对应，当内核用 IO 操作码调用驱动时，就是调用了这个数据中的函数。最后，我们将驱动程序的名称设置为 systick0drv。</p><p>新建的设备也需要配置相关的信息才能工作，比如需要指定设备，设备状态与标志，设备类型、设备名称这些信息。尤其要注意的是，设备类型非常重要，内核正是通过类型来区分各种设备的，下面我们写个函数，完成这些功能，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">systick_set_device</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token class-name">driver_t</span> <span class="token operator">*</span>drvp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    devp<span class="token operator">-&gt;</span>dev_flgs <span class="token operator">=</span> DEVFLG_SHARE<span class="token punctuation">;</span><span class="token comment">//设备可共享访问</span>
    devp<span class="token operator">-&gt;</span>dev_stus <span class="token operator">=</span> DEVSTS_NORML<span class="token punctuation">;</span><span class="token comment">//设备正常状态</span>
    devp<span class="token operator">-&gt;</span>dev_id<span class="token punctuation">.</span>dev_mtype <span class="token operator">=</span> SYSTICK_DEVICE<span class="token punctuation">;</span><span class="token comment">//设备主类型</span>
    devp<span class="token operator">-&gt;</span>dev_id<span class="token punctuation">.</span>dev_stype <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//设备子类型</span>
    devp<span class="token operator">-&gt;</span>dev_id<span class="token punctuation">.</span>dev_nr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//设备号</span>
    devp<span class="token operator">-&gt;</span>dev_name <span class="token operator">=</span> <span class="token string">&quot;systick0&quot;</span><span class="token punctuation">;</span><span class="token comment">//设置设备名称</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，systick_set_device 函数需要两个参数，但是第二个参数暂时没起作用，而第一个参数其实是一个 device_t 结构的指针，在 systick_entry 函数中调用 new_device_dsc 函数的时候，就会返回这个指针。后面我们会把设备加载到内核中，那时这个指针指向的设备才会被注册。</p><h2 id="打开与关闭设备" tabindex="-1"><a class="header-anchor" href="#打开与关闭设备" aria-hidden="true">#</a> 打开与关闭设备</h2><p>其实对于 systick 这样设备，主要功能是定时中断，还不能支持读、写、控制、刷新、电源相关的功能，就算内核对 systick 设备发起了这样的 I/O 包，systick 设备驱动程序相关的功能函数也只能返回一个错误码，表示不支持这样的功能请求。</p><p>但是，打开与关闭设备这样的功能还是应该要实现。下面我们就来实现这两个功能请求函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//打开设备</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_open</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">krldev_inc_devcount</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//增加设备计数</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span><span class="token comment">//返回成功完成的状态</span>
<span class="token punctuation">}</span>
<span class="token comment">//关闭设备</span>
<span class="token class-name">drvstus_t</span> <span class="token function">systick_close</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>iopack<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">krldev_dec_devcount</span><span class="token punctuation">(</span>devp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//减少设备计数</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span><span class="token comment">//返回成功完成的状态</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，打开与关闭设备的功能就实现了，只是简单地增加与减少设备的引用计数，然后返回成功完成的状态就行了。而增加与减少设备的引用计数，是为了统计有多少个进程打开了这个设备，当设备引用计数为 0 时，就说明没有进程使用该设备。</p><h2 id="systick-设备中断回调函数" tabindex="-1"><a class="header-anchor" href="#systick-设备中断回调函数" aria-hidden="true">#</a> systick 设备中断回调函数</h2><p>对于 systick 设备来说，重要的并不是打开、关闭，读写等操作，而是 systick 设备产生的中断，以及在中断回调函数中执行的操作，即周期性的执行系统中的某些动作，比如更新系统时间，比如控制一个进程占用 CPU 的运行时间等，这些操作都需要在 systick 设备中断回调函数中执行。</p><p>按照前面的设计，systick 设备每秒钟产生 1000 次中断，那么 1 秒钟就会调用 1000 次这个中断回调函数，这里我们只要写出这个函数就行了，因为安装中断回调函数的思路，我们在前面的课程中已经说过了（可以回顾上节课），现在我们直接实现这个中断函数，代码可以像后面这样写。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">drvstus_t</span> <span class="token function">systick_handle</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> ift_nr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>sframe<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;systick_handle run devname:%s intptnr:%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">device_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>devp<span class="token punctuation">)</span><span class="token operator">-&gt;</span>dev_name<span class="token punctuation">,</span> ift_nr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个中断回调函数，暂时什么也没干，就输出一条信息，让我们知道它运行了，为了直观观察它运行了，我们要对内核层初始化函数修改一下，禁止进程运行，以免进程输出的信息打扰我们观察结果，修改的代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init_krl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">init_krlmm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_krldevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化设备</span>
    <span class="token function">init_krldriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化驱动程序</span>
    <span class="token function">init_krlsched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//init_krlcpuidle();禁止进程运行</span>
    <span class="token function">STI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开CPU响应中断的能力</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进入死循环</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面，我们打开终端切到 Cosmos 目录下，执行 make vboxtest 指令，如果不出意外，我们将会中看到如下界面。</p><img src="`+t+`" alt="img" style="zoom:50%;"><p>测试中断回调函数</p><p>上图中的信息，会不断地滚动出现，信息中包含设备名称和中断号，这标志着我们中断回调函数的运行正确无误。</p><p>当然，如果我们费了这么功夫搞了中断回调函数，就只是为了输出信息，那也太不划算了，我们当然有更重要的事情要做，你还记得之前讲过的进程知识吗？这里我再帮你理一理思路。</p><p>我们在每个进程中都要主动调用进程调度器函数，否则进程就会永远霸占 CPU，永远运行下去。这是因为，我们没有定时器可以周期性地检查进程运行了多长时间，如果进程的运行时间超过了，就应该强制调度，让别的进程开始运行。</p><p>更新进程运行时间的代码，我已经帮你写好了，你只需要在这个中断回调函数中调用就好了，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">drvstus_t</span> <span class="token function">systick_handle</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> ift_nr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>devp<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>sframe<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">krlthd_inc_tick</span><span class="token punctuation">(</span><span class="token function">krlsched_retn_currthread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新当前进程的tick</span>
    <span class="token keyword">return</span> DFCOKSTUS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 krlthd_inc_tick 函数需要一个进程指针的参数，而 krlsched_retn_currthread 函数是返回当前正在运行进程的指针。在 krlthd_inc_tick 函数中对进程的 tick 值加 1，如果大于 20（也就是 20 毫秒）就重新置 0，并进行调度。</p><p>下面，我们把内核层初始化函数恢复到原样，重新打开终端切到 cosmos 目录下，执行 make vboxtest 指令，我们就将会看到如下界面。</p><img src="`+e+'" alt="img" style="zoom:50%;"><p>测试进程运行时间更新</p><p>我们可以看到，进程 A、进程 B，还有调度器交替输出的信息。这已经证明我们更新进程运行时间，检查其时间是否用完并进行调度的代码逻辑，都是完全正确的，恭喜你走到了这一步！</p><p>至此，我们的 systick 驱动程序就实现了，它非常简单，但却包含了一个驱动程序完整实现。同时，这个过程也一步步验证了我们对驱动模型的设计是正确的。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>又到课程的结尾，到此为止，我们了解了实现一个驱动程序完整过程，虽然我们只是驱动了一个定时器设备，使之周期性的产生定时中断。在定时器设备的中断回调函数中，我们调用了更新进程时间的函数，达到了这样的目的：在进程运行超时的情况下，内核有能力夺回 CPU，调度别的进程运行。</p><p>现在我来为你梳理一下重点。</p><p>\\1. 为了搞清楚设备如何处理 I/O 包，我们了解了什么是 I/O 包，写好了处理建立、删除 I/O 包的代码。</p><p>\\2. 要使设备完成相应的功能，内核就必须向设备驱动发送相应的 I/O 包，在 I/O 包提供相应 IO 操作码和适当的参数。所以，我们动手实现了向设备发送 I/O 包并调用设备驱动程序的机制。</p><p>\\3. 一切准备就绪之后，我们建立了 systick 驱动程序实例，这是一个完整的驱动程序，它支持打开关闭和周期性产生中断的功能请求。通过这个实例，让我们了解了一个真实设备驱动的实现以及它处理内核 I/O 包的过程。</p><p>你可能对这样简单的驱动程序不够满意，也不能肯定我们的驱动模型是不是能适应大多数场景，请不要着急，在后面讲到文件系统时，我们会实现一个更为复杂的驱动程序。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请你想一想，为什么没有 systick 设备这样周期性的产生中断，进程就有可能霸占 CPU 呢？</p><p>欢迎你在留言区跟我交流互动，也欢迎你把这节课分享给身边的同事、朋友，一起实践驱动程序的实例。</p><p>好，我是 LMOS，我们下节课见！</p>',93),i=[c];function l(u,d){return s(),a("div",null,i)}const v=n(o,[["render",l],["__file","J30-设备处理内核IO包.html.vue"]]);export{v as default};
