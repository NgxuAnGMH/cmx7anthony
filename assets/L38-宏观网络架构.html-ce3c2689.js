import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as p,c as t,a,b as e,e as i,d as s}from"./app-cdabc73c.js";const d="/assets/1cdf9edbfe9d244d75438d64021508d0-8bca5db2.jpg",c="/assets/d06de7ca8e0d693667fd93bab0cd82fc-dba3bddc.jpg",l="/assets/c5d6de358fa1a058da525206e096f086-0b278386.jpg",m="/assets/c646fc729ff1da2ab19b62f7ed0a921b-d70aa12f.png",h="/assets/940c89da5963e2d1d63c5b89576a1270-a102ed20.png",u="/assets/c4e7477dc2a7998d1ea22277274c6a63-3de6d942.png",g="/assets/aa4ed7e58fa4ea766fbbcb7dc3830a01-bbcb4759.png",b="/assets/38015c71a27996d161ca5d86153fe1ee-b5010445.jpg",k="/assets/1c59861e3052beyy5038611857c84fbc-91f1127b.jpg",f="/assets/ce7a20b977f37ab33ca0deb83b9f8639-1edd2341.jpg",S="/assets/1cb3a507398df45f6360a93a15262566-b42b2513.jpg",v="/assets/66cf13d47yy42e7c316beb15yy5bdb5c-4275e043.jpg",_="/assets/6702fb7954d2bd274667b00b5603141a-4ee5f1d6.jpg",O="/assets/d53a41311b03f22cec545440b38518d3-739301fa.jpg",N="/assets/011125f073e362b3882c6117f12447bc-4c998c36.jpg",x="/assets/f59c28556af60513060dae0c315879f9-843a8d68.jpg",L="/assets/841bd5d29410b0f9658f2f56a47df73f-79fca9a1.jpg",P={},D=s('<h1 id="_38-从单排到团战-详解操作系统的宏观网络架构" tabindex="-1"><a class="header-anchor" href="#_38-从单排到团战-详解操作系统的宏观网络架构" aria-hidden="true">#</a> 38 | 从单排到团战：详解操作系统的宏观网络架构</h1><p>你好，我是 LMOS。</p><p>上节课我们学习了单机状态下网络数据在内核中流转的全过程，并且带你一起梳理了网络栈移植的关键步骤。</p><p>这节课我会带你看看，现实世界中网络请求是如何穿过重重网络设备，实现大规模组网的。同时，我还会给你讲解网络架构的过去、现在，并展望一下将来的发展趋势。最后我会带你动手搭建一个现代互联网实验环境，通过实际的组网实践加深对网络架构的理解。</p><h2 id="从传统网络架构聊起" tabindex="-1"><a class="header-anchor" href="#从传统网络架构聊起" aria-hidden="true">#</a> 从传统网络架构聊起</h2><p>你是否好奇过，我们目前用的互联网是如何做到互联互通的呢？</p><p>让我们先来看看传统的三层网络架构，著名的通信设备厂商思科把这种架构叫做<code>分级的互联网络模型（Hierarchical Inter-networking Model）</code>。这种架构的优点是，可以把复杂的网络设计问题抽象为几个层面来解决，每个层面又聚焦于某些特定的功能。这样就能把复杂而庞大的网络问题拆解成比较好解决的子问题。</p><p>如下图所示，三层网络架构设计主要包括<strong>核心层、汇聚层、接入层</strong>这三个层。下面我分别给你说一说。</p><img src="'+d+'" alt="img" style="zoom:15%;"><p>三层网络架构示意图</p><ol><li><p>首先是<mark>核心层</mark>。交换层的核心交换机为进出数据中心的数据包提供高速转发的功能，为多个汇聚层提供连通性，同时也为整个网络提供灵活的 L3 路由网络。</p></li><li><p>然后是<mark>汇聚层</mark>。汇聚交换机与接入交换机相连，提供防火墙、SSL 卸载、入侵检测、网络分析等其他服务。</p></li><li><p>最后我们来看<mark>接入层</mark>。接入交换机通常位于机架的顶部，因此它们也被称为 ToR 交换机，并且它们与服务器物理连接。</p></li></ol><p>当然，观察这个架构我们可以发现，核心层和汇聚层这种骨干网络需要承担的流量是蛮大的，流量大意味着对交换性能、效率有更高的要求。所以为了解决性能、效率等问题，我们需要在 OSI 的 1、2、3 层上分别做优化。</p><p>这里要说到传统网络架构的不足之处，我们发现经典的 IP 网络是逐跳转发数据的。转发数据时，每台路由器都要根据包头的目的地址查询路由表，以获得下一跳的出口。这个过程显然是繁琐低效的。</p><p>另外，转发路径也不够灵活，为了加以改善，我们在第二层之上、第三层之下引入一个 2.5 层的技术方案，即==多协议标签交换（MPLS）==技术。</p><h2 id="_2-5层优化-mpls-技术" tabindex="-1"><a class="header-anchor" href="#_2-5层优化-mpls-技术" aria-hidden="true">#</a> 2.5层优化：MPLS 技术</h2><p>目前 MPLS 技术在国内应用广泛，无论是 BAT 等互联网巨头，还是运营商建设骨干网都在应用这种技术。MPLS 的核心结构如下。</p><img src="'+c+`" alt="img" style="zoom:15%;"><p>MPLS核心结构图</p><h3 id="ldp标签" tabindex="-1"><a class="header-anchor" href="#ldp标签" aria-hidden="true">#</a> LDP标签</h3><p>MPLS 通过 <mark>LDP 标签</mark>分发协议。我来举个例子吧，这相当于把快递标签“贴在”了快递盒子上了，后续只需要读取标签，就能知道这个数据要转发到哪里去了。这样就避免了<strong>传统路由网络中每路过一个经手人（每一跳），都要把快递盒子打开看一看</strong>的额外开销。</p><h3 id="路径计算元素协议-rsvp-te" tabindex="-1"><a class="header-anchor" href="#路径计算元素协议-rsvp-te" aria-hidden="true">#</a> 路径计算元素协议（RSVP-TE）</h3><p>而==路径计算元素协议（RSVP-TE）==最大的优点是<strong>收集整个网络的拓扑和链路状态信息</strong>。通过扩展的资源预留协议，可以实现灵活的转发路径选择和规划。这就好比双十一了，物流公司根据物流大数据收集到的路网和拥堵状态等信息，自动规划出性价比最高的路径，显然快递配送效率会得到很大提升。</p><h2 id="物理层-波分复用-光传送网" tabindex="-1"><a class="header-anchor" href="#物理层-波分复用-光传送网" aria-hidden="true">#</a> 物理层: 波分复用 -&gt; 光传送网</h2><p>当然，只在 OSI 的 2、3 层之间做优化是远远不够的，为了满足动辄数百 G 传输需求，物理层也经历了从 <code>DWDM（Dense Wavelength Division Multiplexing，波分复用系统）</code>这种波分复用技术到 <code>OTN（Iptical Transport Network，光传送网）</code>的技术演进。感兴趣的同学可以搜索<mark>光传送网</mark>和<mark>波分复用</mark>相关的资料，这里我就不展开了。</p><h2 id="sr-ipv6-srv6" tabindex="-1"><a class="header-anchor" href="#sr-ipv6-srv6" aria-hidden="true">#</a> SR/IPv6/SRv6</h2><p>根据前面的讲解我们发现，传统网络基础架构确实可以解决不少问题，但这样真的完美了么？其实不然，比如前面的 MPLS 技术虽然也解决了问题，但也加重了耦合，并且存在资源利用率低、复杂度高、价格昂贵等缺点。</p><p>所以后来 <code>SR（Segment Routing）</code>技术又应运而生，而随着 IPv6 的演进，我们用 <code>SRv6</code> 替代 MPLS 技术也是大势所趋。</p><h2 id="云-5g-业务需求变化" tabindex="-1"><a class="header-anchor" href="#云-5g-业务需求变化" aria-hidden="true">#</a> 云/5G: 业务需求变化</h2><p>另外，我们还要注意到业务需求的变化。比如随着云与 5G 等移动通信的发展，流量除了以前客户端和服务端的南北向通信之外，服务端分布式服务之间也会引入了大量的通信流量。甚至随着云与容器的演进，服务端会存在大量的虚拟机迁移等动作。<strong>这些对传统网络中 STP 拓扑变化、收敛以及网络规模都带来了巨大的挑战。</strong></p><p>那么如何解决传统三层网络架构带来的挑战呢？答案其实在贝尔实验室的 Charles Clos 博士在 1953 年的《无阻塞交换网络研究》之中。论文中提到的核心思想是：<strong>用多个小规模、低成本的单元，构建复杂、大规模的网络。</strong></p><p>论文中提到的简单的 CLOW 网络是包含输入级别、中间级别和输出级别的三级互连体系结构。</p><p>下图中的矩形表示规模较小的转发单元，其成本显然也相对较低。CLOS 的本质可以简单理解为是一种多级交换的架构思想，并且这种架构很适合在输入和输出持续增加的情况下将中间交叉数降至最低。</p><p>下图中，m 是每个子模块的输入端口数，n 是每个子模块的输出端口数，r 是每一级的子模块数，经过合理的重排，只要满足公式：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>r2≥<span class="token function">max</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span>n3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么，对于任意的输入到输出，总是能找到一条无阻塞的通路。</p><img src="`+l+`" alt="img" style="zoom:15%;"><p>CLOS图解</p><p>直到 1990 年代，CLOS 架构被应用到 Switch Fabric。应用 CLOS 架构的交换机的开关密度，与交换机端口数量 N 的关系如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">O</span><span class="token punctuation">(</span>N<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，在 N 较大时，CLOS 模型能降低交换机内部的开关密度。由此可见，越来越多的人发现了传统三层网络架构下的痛点，于是一种叫做胖树的网络架构应运而生（感兴趣的同学可以在搜索《A Scalable, Commodity Data Center Network Architecture》这篇论文）。</p><h3 id="叶脊-spine-leaf-网络架构" tabindex="-1"><a class="header-anchor" href="#叶脊-spine-leaf-网络架构" aria-hidden="true">#</a> 叶脊（Spine-Leaf）网络架构</h3><p>而借鉴 Fattree 和 CLOS 模型的思想，目前业界衍生出了叶脊（Spine-Leaf）网络架构。目前通过 FaceBook、Google 等公司大量实践的事实已经证明，Spine-Leaf 网络架构可以提供高带宽、低延迟、非阻塞、可扩展的服务器到服务器连接。</p><p>这种新一代架构在工程实践中的代表之一，则正是 Google 的 B4 网络，接下来就让我们一起看一下 Google B4 网络的架构。</p><h2 id="谈谈-google-b4" tabindex="-1"><a class="header-anchor" href="#谈谈-google-b4" aria-hidden="true">#</a> 谈谈 Google B4</h2><p>Google 的研究员 Amin Vahdat 曾经说过：“<strong>如果没有软件定义网络，那 Google 就不会是今天的 Google。</strong>”</p><p>为了实现实现数据中心的互联互通，谷歌设计并搭建了 B4 网络，实现了数据在各个公司园区之间的实时复制。</p><p>B4 网络的核心架构由 Google 设计的<mark>控制软件</mark>和<mark>白盒交换机</mark>构成。谷歌的目标是建立一个类似于广域网的镜像网络，随着网络规模的不断扩展，目前谷歌的大部分业务都已经运行在 B4 上了。</p><p>接下来让我们来看一下 Google Google B4 的架构图（下面 4 张图出自Google B4 网络论文）：</p><img src="`+m+'" alt="img" style="zoom:50%;"><p>B4网络架构图</p><p>B4 网络的其实也是由三层构成，但这个和传统网络的“三层架构”又不太一样。这里指的是<mark>物理设备层（Switch Hardware）</mark>、<mark>局部网络控制层（Site Controllers）<mark>和</mark>全局控制层（Global）</mark>。</p><p>全局控制层中的 <mark>SDN 网关</mark>和 <mark>TE 服务器</mark>会在全局进行统一控制，而<mark>每个数据中心（Site）<mark>则会通过 <code>Site Controller</code> 来控制</mark>物理交换机</mark>，从而实现<strong>将网络的控制面和数据面分离</strong>的效果。</p><h3 id="第一层-物理设备层-switch-hardware" tabindex="-1"><a class="header-anchor" href="#第一层-物理设备层-switch-hardware" aria-hidden="true">#</a> 第一层：物理设备层(Switch Hardware)</h3><p>我们首先来看第一层的物理交换设备，它是 Google 自研并请 ODM 厂商代工的白盒交换机。这个自研的交换机使用了 24 颗 16×10Gb 的芯片，还携带了 128 个 10Gb 网口。</p><p>交换机里面运行的是 <code>OpenFlow 协议</code>。但众所周知，交换机内的<mark>专用芯片</mark>从研发设计到最终流片其实周期和成本还是很高的。</p><p>那如何让专用的交换机芯片跟 OpenFlow 更好地进行协同呢？为了解决这个问题，Google 采用了 <code>TTP</code> 方案。实际运行时交换机则会把像<strong>访问控制列表（ACL）、路由表、隧道表</strong>之类的关键数据通过 <code>BGP/IS-IS 协议报文</code>送到 Controller，由 Controller 进行处理。</p><img src="'+h+'" alt="img" style="zoom:33%;"><p>物理设备层</p><h3 id="第二层-局部网络控制层-site-controllers" tabindex="-1"><a class="header-anchor" href="#第二层-局部网络控制层-site-controllers" aria-hidden="true">#</a> 第二层：局部网络控制层(Site Controllers)</h3><p>B4 网络中，一个 Controller 服务可以控制多个交换机。而为了保证可用性，一个交换机是可以连接多个 Controller 服务的，而同一时间只会有一个 Controller 服务为这台交换机提供服务，并且一个数据中心中会包含由多个 Controller 服务实例构成的服务集群。</p><p>在局部网络控制层中，还会<strong>使用 <code>Paxos 协议</code>负责<code>所有控制功能的领导者（leader）</code>选举</strong>。</p><p>具体过程是这样的，每个节点上的 Paxos 实例对给定控制功能的可用副本集做应用程序级别的健康检测。当大多数的 Paxos 实例检测到故障时，他们就会从剩余的可用服务器集中选出一个新的负责人。然后，Paxos 会将递增的 ID 号回调给当选的 leader。leader 使用这个 ID 来向客户表明自己的身份。</p><img src="'+u+'" alt="img" style="zoom:33%;"><p>局部网络控制层</p><h3 id="第三层-全局控制层-global" tabindex="-1"><a class="header-anchor" href="#第三层-全局控制层-global" aria-hidden="true">#</a> 第三层: 全局控制层（Global）</h3><p>负责全局控制的 TE Server 通过 SDN Gateway 从各个数据中心的控制器收集链路信息，从而掌握路径状态。这些路径以 IP-In-IP 隧道的方式创建，通过 <mark>SDN 网关</mark>到达 <mark>Onix 控制器</mark>，最后下达到<mark>交换机</mark>。</p><p>当一个新的业务数据需要传输时，应用程序会估计它在传输时需要的带宽，并为它选择一个最佳路径，这样可以让链路的带宽利用率达到整体最佳。</p><img src="'+g+'" alt="img" style="zoom:50%;"><p>全局控制层</p><h4 id="sdn-原理" tabindex="-1"><a class="header-anchor" href="#sdn-原理" aria-hidden="true">#</a> SDN 原理</h4><p>开放网络基金会 ONF（Open Networking Foundation）则站在了 Google B4 等前人经验的基础上，当然也是将 SDN 架构分为三层，如下。</p><ol><li><p>应用层是由包含了各种不同的的业务逻辑的应用构成的。</p></li><li><p>控制层主要负责数据平面相关资源的编排、调度、网络拓扑的维护以及状态信息管理等工作。</p></li><li><p>数据层相对来说逻辑更轻，主要负责数据的转发、处理以及运行时的一些状态收集工作。</p></li></ol><img src="'+b+'" alt="img" style="zoom:50%;"><p>ONF-SDN架构图，上图出自ONF官方文档</p><h4 id="sdn-的基本特征和优势" tabindex="-1"><a class="header-anchor" href="#sdn-的基本特征和优势" aria-hidden="true">#</a> SDN 的基本特征和优势</h4><p>SDN 主要包含三个基本特征，我们可以分别来看一下。</p><ul><li><p>\\1. 控制逻辑与转发逻辑分离。转发平面主要是由受控的转发设备构成，具体的转发方式和相关业务逻辑则由分离在控制面的控制应用程序控制。</p></li><li><p>\\2. 开放的 API。通过开放的南北向 API，可以实现应用和网络的无缝集成，让应用只需要关注自己的逻辑，不需要关注底层的实现细节。</p></li><li><p>\\3. 集中控制：集中的控制平面可以获取网络资源的全局信息，并根据业务需求进行全局分配和优化。</p></li></ul><p>结合我们前面所讲的 SDN 的特征，我帮你梳理了 SDN 的几大优势。</p><ul><li><p>\\1. 灵活性，动态调整网络设备的配置，不再需要手动配置每台设备了。</p></li><li><p>\\2. 网络硬件简化（如白盒交换机等）。只需要关注数据处理和转发，与具体业务特性解耦，加速新业务特性的引入。</p></li><li><p>\\3. 自动化的网络部署、操作和维护以及故障诊断。</p></li></ul><p>为了加深大家对 SDN 的理解，接下来让我们一起给予开源的控制面 ONOS 以及数据面 Mininet 进行一下组网试验。</p><h2 id="开放网络操作系统-onos-组网实践" tabindex="-1"><a class="header-anchor" href="#开放网络操作系统-onos-组网实践" aria-hidden="true">#</a> 开放网络操作系统 ONOS 组网实践</h2><p>ONOS 是一个开源的、分布式的网络操作系统控制平台，可以满足运营商对网络业务的电信级需求。</p><p>自 ONOS 诞生以来，就已经汇聚了很多知名服务提供商 (如 ATT、NTT 通信)、以及一些高标准网络设备供应商、运营商、合作伙伴（如英特尔、爱立信、Ciena、富士通、华为、NEC、CNIT、CREATE-NET、Infoblox、SRI）等，得到了 ONF 的全力支持。目前，ONOS 已经得到业界越来越多的认可与支持。</p><p>我们前面讲过 SDN 分为控制面和数据面，对应到开源实现中 ONOS 就是控制面的具体实现，而 Mininet 对应的就是数据面实现。Mininet 是由斯坦福大学基于 Linux 容器架构开发的一个<strong>云原生虚拟化网络仿真工具</strong>。</p><p>使用 ONOS+Mininet 我们可以快速创建一个包含主机、交换机、SDN 控制器以及链路的虚拟网络，并且 Mininet 创建的交换机也是支持上文讲到的 OpenFlow 协议的，这也使得它具备了高度的灵活性。使用这个工具，我们可以在本地轻松搭建一个 SDN 开发、调试环境。</p><h3 id="下载虚拟机镜像" tabindex="-1"><a class="header-anchor" href="#下载虚拟机镜像" aria-hidden="true">#</a> 下载虚拟机镜像</h3><p>首先，让我们使用官方打包好的镜像virtualbox 安装 Mininet，这种方式安装比较简单高效。</p><h3 id="安装-mininet" tabindex="-1"><a class="header-anchor" href="#安装-mininet" aria-hidden="true">#</a> 安装 Mininet</h3><p>如下图所示，下载 mininet-2.3.0-210211-ubuntu-20.04.1-legacy-server-amd64-ovf.zip，解压后导入虚拟机即可。</p><img src="'+k+'" alt="img" style="zoom:33%;"><p>安装Mininet</p><p>如下图所示，导入完毕之后，我们正常启动虚拟机。</p><img src="'+f+`" alt="img" style="zoom:33%;"><p>登陆虚拟机</p><p>导入成功后，使用用户名 / 密码：mininet/mininet 即可登录。接下来，我们需要运行文稿中的命令安装 docker。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sudo apt<span class="token operator">-</span>get update
sudo apt install curl
sudo apt install ssh
curl <span class="token operator">-</span>fsSL https<span class="token operator">:</span><span class="token comment">//get.docker.com | bash -s docker --mirror Aliyun</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装好 Docker 之后，我们在虚拟机中执行文稿后面这条命令，拉取 ONOS 的镜像（如果因为某些网络环境原因镜像拉取速度过慢，你可以尝试搜索使用 docker 镜像加速服务）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>docker pull onosproject<span class="token operator">/</span>onos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+S+`" alt="img" style="zoom:50%;"><p>拉取ONOS</p><h3 id="创建-mininet-容器连接-onos" tabindex="-1"><a class="header-anchor" href="#创建-mininet-容器连接-onos" aria-hidden="true">#</a> 创建 Mininet 容器连接 ONOS</h3><p>好，现在安装 Mininet 的工作就完成了。下面我们运行后面的 docker run 命令，创建 ONOS 容器。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>docker run <span class="token operator">-</span>t <span class="token operator">-</span>d <span class="token operator">--</span>name onos1 onosproject<span class="token operator">/</span>onos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+v+`" alt="img" style="zoom:50%;"><p>运行ONOS容器</p><p>然后，我们可以通过容器 id 获取 ONOS 容器的 IP，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>docker inspect <span class="token operator">--</span>format <span class="token char">&#39;{{ .NetworkSettings.IPAddress }}&#39;</span> <span class="token operator">&lt;</span>container<span class="token operator">-</span>ID<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+_+`" alt="img" style="zoom:50%;"><p>获取容器IP</p><p>得到 IP 之后，我们使用 ssh 登陆 ONOS，用户名密码都是 karaf。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>ssh <span class="token operator">-</span>p <span class="token number">8101</span> karaf@<span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span>
app activate org<span class="token punctuation">.</span>onosproject<span class="token punctuation">.</span>openflow #启用openflow
app activate org<span class="token punctuation">.</span>onosproject<span class="token punctuation">.</span>fwd #启用forward转发功能
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+O+`" alt="img" style="zoom:50%;"><p>开启转发功能</p><p>接着，我们需要退出 onos 登录，返回虚拟机中，配置 mininet 连接到 ONOS。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sudo mn <span class="token operator">--</span>topo tree<span class="token punctuation">,</span><span class="token number">2</span> <span class="token operator">--</span>controller remote<span class="token punctuation">,</span>ip<span class="token operator">=</span><span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.2</span> #创建临时网络
pingall #网路连通性检测
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+N+'" alt="img" style="zoom:50%;"><p>连通性检测</p><h3 id="onos-查看拓扑" tabindex="-1"><a class="header-anchor" href="#onos-查看拓扑" aria-hidden="true">#</a> ONOS 查看拓扑</h3><p>查看拓扑是通信组网的基本操作，我在后面还画了一张网络拓扑图。相信经过实战体会，再结合图示，你对网络节点和数据流转的理解会更上一层楼。</p>',119),C={href:"http://172.17.0.2:8181/onos/ui/login.html",target:"_blank",rel:"noopener noreferrer"},I=s('<p>账号 / 密码：karaf</p><img src="'+x+'" alt="img" style="zoom:33%;"><p>查看拓扑</p><p>（说明：先把容器的网络映射到虚拟机，再把虚拟机的网络映射到本地即可。docker run 的时候加上 -p 8000:80 这样的参数，就可以映射到虚机了，然后再改一下 VBox 的网络设置。）</p><h3 id="onos-cli" tabindex="-1"><a class="header-anchor" href="#onos-cli" aria-hidden="true">#</a> ONOS CLI</h3><p>karaf 进入 ONOS 之后，除了开启各类设置，它本身也是一个 CLI，可以查看各类信息，例如后面这些信息。</p><ol><li><p>devices：查看交换机</p></li><li><p>links：查看链路</p></li><li><p>hosts：查看主机</p></li><li><p>flows &lt;tab 键 &gt;：查看所选交换机之间的路径</p></li></ol><p>更多命令和实验，你可以参考ONOS 官方文档自己探索。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>好，这节课的内容告一段落了，我来给你做个总结。</p><p>我们先从传统互联网组网的方式开始逐渐了解了互联网架构，随着认识的深入我们发现传统三层架构是存在缺点的，于是我们引入了各种优化方案来不断迭代、演进出了以 SDN 为代表的现代互联网基础架构。</p><p>最后，我们<strong>基于 ONOS 和 MiniNet 搭建了 SDN 的实验环境</strong>，了解到了一次 <strong>SDN 组网的基本流程</strong>，同时跑通了我们第一个实验。</p><img src="'+L+'" alt="img" style="zoom:25%;"><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请思考一下，我们目前的互联网架构属于中心化架构还是去中心化架构呢？你觉得未来的发展趋势又是如何？</p><h2 id="拓展阅读" tabindex="-1"><a class="header-anchor" href="#拓展阅读" aria-hidden="true">#</a> 拓展阅读</h2><p>1.可扩展的商用数据中心网络架构。</p><p>2.B4：使用全球部署的软件定义广域网的经验。</p><p>欢迎你在留言区记录你的学习收获，或者跟我交流探讨。也推荐你把今天这节课分享给身边的朋友。</p><p>我是 LMOS，我们下节课见！</p>',20);function y(M,w){const n=r("ExternalLinkIcon");return p(),t("div",null,[D,a("p",null,[e("打开 URL："),a("a",C,[e("http://172.17.0.2:8181/onos/ui/login.html"),i(n)])]),I])}const T=o(P,[["render",y],["__file","L38-宏观网络架构.html.vue"]]);export{T as default};
