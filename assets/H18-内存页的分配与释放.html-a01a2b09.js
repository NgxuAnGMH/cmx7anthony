import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/299b8f21c876a2b324da7a2974e8302a-2424fc18.jpg",e="/assets/a280682b0ee533984c4yya14dee67834-e094beee.jpg",o={},c=p(`<h1 id="_18-划分土地-下-如何实现内存页的分配与释放" tabindex="-1"><a class="header-anchor" href="#_18-划分土地-下-如何实现内存页的分配与释放" aria-hidden="true">#</a> 18 | 划分土地（下）：如何实现内存页的分配与释放？</h1><p>你好，我是 LMOS。</p><p>通过前面两节课的学习，我们已经组织好了内存页，也初始化了内存页和内存区。我们前面做了这么多准备工作，就是为了实现分配和释放内存页面，达到内存管理的目的。</p><p>那有了前面的基础，我想你自己也能大概实现这个分配和释放的代码。但是，根据前面我们设计的数据结构和对其初始化的工作，估计你也可以隐约感觉到，我们的内存管理的算法还是有一点点难度的。</p><p>今天这节课，就让我们一起来实现这项富有挑战性的任务吧！这节课的配套代码，你可以通过这里下载。</p><h2 id="内存页的分配-memdivmer-c" tabindex="-1"><a class="header-anchor" href="#内存页的分配-memdivmer-c" aria-hidden="true">#</a> 内存页的分配: memdivmer.c</h2><p>如果让你实现一次只分配一个页面，我相信这个问题很好解决，因为你只需要写一段循环代码，在其中遍历出一个空闲的 msadsc_t 结构，就可以返回了，这个算法就可以结束了。</p><p>但现实却不容许我们这么简单地处理问题，我们内存管理器要为内核、驱动，还有应用提供服务，它们对请求内存页面的多少、内存页面是不是连续，内存页面所处的物理地址都有要求。</p><p>这样一来，问题就复杂了。不过你也不必担心，我们可以从<strong>内存分配的接口函数</strong>下手。</p><p>下面我们根据上述要求来设计实现<strong>内存分配接口函数</strong>。我们还是先来建立一个新的 C 语言代码文件，在 cosmos/hal/x86 目录中建立一个 <code>memdivmer.c</code> 文件，在其中写一个内存分配接口函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//内存分配页面框架函数</span>
<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_divpages_fmwk</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>mmobjp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retrelpnr<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> mrtype<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> flgs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//返回mrtype对应的内存区结构的指针</span>
    <span class="token class-name">memarea_t</span> <span class="token operator">*</span>marea <span class="token operator">=</span> <span class="token function">onmrtype_retn_marea</span><span class="token punctuation">(</span>mmobjp<span class="token punctuation">,</span> mrtype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> marea<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">uint_t</span> retpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//内存分配的核心函数</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmsa <span class="token operator">=</span> <span class="token function">mm_divpages_core</span><span class="token punctuation">(</span>marea<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retpnr<span class="token punctuation">,</span> flgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> retmsa<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> retpnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//内存分配页面接口</span>

<span class="token comment">//mmobjp-&gt;内存管理数据结构指针</span>
<span class="token comment">//pages-&gt;请求分配的内存页面数</span>
<span class="token comment">//retrealpnr-&gt;存放实际分配内存页面数的指针</span>
<span class="token comment">//mrtype-&gt;请求的分配内存页面的内存区类型</span>
<span class="token comment">//flgs-&gt;请求分配的内存页面的标志位</span>
<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_division_pages</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>mmobjp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retrealpnr<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> mrtype<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> flgs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> mmobjp <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> retrealpnr <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">==</span> mrtype<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">uint_t</span> retpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmsa <span class="token operator">=</span> <span class="token function">mm_divpages_fmwk</span><span class="token punctuation">(</span>mmobjp<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retpnr<span class="token punctuation">,</span> mrtype<span class="token punctuation">,</span> flgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> retmsa<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>retrealpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>retrealpnr <span class="token operator">=</span> retpnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们内存管理代码的结构是：接口函数调用框架函数，框架函数调用核心函数。可以发现，这个接口函数返回的是一个 msadsc_t 结构的指针，如果是多个页面返回的就是起始页面对应的 msadsc_t 结构的指针。</p><p>为什么不直接返回内存的物理地址呢？<strong>因为我们物理内存管理器是最底层的内存管理器</strong>，而上层代码中可能需要页面的相关信息，所以直接返回页面对应 msadsc_t 结构的指针。</p><p>还有一个参数是用于返回实际分配的页面数的。比如，内核功能代码请求分配三个页面，我们的内存管理器不能分配三个页面，只能分配两个或四个页面，这时内存管理器就会分配四个页面返回，retrealpnr 指向的变量中就存放数字 4，<strong>表示实际分配页面的数量</strong>。</p><p>有了内存分配接口、框架函数，下面我们来实现内存分配的核心函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">bool_t</span> <span class="token function">onmpgs_retn_bafhlst</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>malckp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span><span class="token operator">*</span>retrelbafh<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span><span class="token operator">*</span>retdivbafh<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取bafhlst_t结构数组的开始地址</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhstat <span class="token operator">=</span> malckp<span class="token operator">-&gt;</span>ma_mdmdata<span class="token punctuation">.</span>dm_mdmlielst<span class="token punctuation">;</span>       
    <span class="token comment">//根据分配页面数计算出分配页面在dm_mdmlielst数组中下标</span>
    <span class="token class-name">sint_t</span> dividx <span class="token operator">=</span> <span class="token function">retn_divoder</span><span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从第dividx个数组元素开始搜索</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">sint_t</span> idx <span class="token operator">=</span> dividx<span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> MDIVMER_ARR_LMAX<span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token comment">//如果第idx个数组元素对应的一次可分配连续的页面数大于等于请求的页面数，且其中的可分配对象大于0则返回 </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bafhstat<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>af_oderpnr <span class="token operator">&gt;=</span> pages <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">&lt;</span> bafhstat<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>af_fobjnr<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//返回请求分配的bafhlst_t结构指针</span>
            <span class="token operator">*</span>retrelbafh <span class="token operator">=</span> <span class="token operator">&amp;</span>bafhstat<span class="token punctuation">[</span>dividx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//返回实际分配的bafhlst_t结构指针</span>
            <span class="token operator">*</span>retdivbafh <span class="token operator">=</span> <span class="token operator">&amp;</span>bafhstat<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>retrelbafh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>retdivbafh <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_reldivpages_onmarea</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>malckp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retrelpnr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>retrelbhl <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>retdivbhl <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//根据页面数在内存区的m_mdmlielst数组中找出其中请求分配页面的bafhlst_t结构（retrelbhl）和实际要在其中分配页面的bafhlst_t结构(retdivbhl)</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> <span class="token function">onmpgs_retn_bafhlst</span><span class="token punctuation">(</span>malckp<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retrelbhl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retdivbhl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FALSE <span class="token operator">==</span> rets<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">uint_t</span> retpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//实际在bafhlst_t结构中分配页面</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmsa <span class="token operator">=</span> <span class="token function">mm_reldpgsdivmsa_bafhl</span><span class="token punctuation">(</span>malckp<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retpnr<span class="token punctuation">,</span> retrelbhl<span class="token punctuation">,</span> retdivbhl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> retmsa<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> retpnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_divpages_core</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>mareap<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retrealpnr<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> flgs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">uint_t</span> retpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmsa <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 
    <span class="token class-name">cpuflg_t</span> cpuflg<span class="token punctuation">;</span>
    <span class="token comment">//内存区加锁</span>
    <span class="token function">knl_spinlock_cli</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mareap<span class="token operator">-&gt;</span>ma_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>DMF_RELDIV <span class="token operator">==</span> flgs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//分配内存</span>
        retmsa <span class="token operator">=</span> <span class="token function">mm_reldivpages_onmarea</span><span class="token punctuation">(</span>mareap<span class="token punctuation">,</span> pages<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retpnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret_step<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    retmsa <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    retpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
ret_step<span class="token operator">:</span>
    <span class="token comment">//内存区解锁</span>
    <span class="token function">knl_spinunlock_sti</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mareap<span class="token operator">-&gt;</span>ma_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>retrealpnr <span class="token operator">=</span> retpnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显，上述代码中 onmpgs_retn_bafhlst 函数返回的两个 bafhlst_t 结构指针，若是相等的，则在 mm_reldpgsdivmsa_bafhl 函数中很容易处理，只要取出 bafhlst_t 结构中对应的 msadsc_t 结构返回就好了。</p><p>问题是很多时候它们不相等，这就要分隔连续的 msadsc_t 结构了，下面我们通过 mm_reldpgsdivmsa_bafhl 这个函数来处理这个问题，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">bool_t</span> <span class="token function">mrdmb_add_msa_bafh</span><span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msastat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msaend<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//把一段连续的msadsc_t结构加入到它所对应的bafhlst_t结构中</span>
    msastat<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
    msastat<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> msaend<span class="token punctuation">;</span>
    msaend<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_BAFH<span class="token punctuation">;</span>
    msaend<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> bafhp<span class="token punctuation">;</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msastat<span class="token operator">-&gt;</span>md_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bafhp<span class="token operator">-&gt;</span>af_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bafhp<span class="token operator">-&gt;</span>af_mobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    bafhp<span class="token operator">-&gt;</span>af_fobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_divpages_opmsadsc</span><span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span>msastat<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> mnr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>   <span class="token comment">//单个msadsc_t结构的情况 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mend <span class="token operator">==</span> msastat<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//增加msadsc_t结构中分配计数，分配标志位设置为1</span>
        msastat<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">++</span><span class="token punctuation">;</span>
        msastat<span class="token operator">-&gt;</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_ALLOC<span class="token punctuation">;</span>
        msastat<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
        msastat<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> mend<span class="token punctuation">;</span>
        <span class="token keyword">return</span> msastat<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    msastat<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">++</span><span class="token punctuation">;</span>
    msastat<span class="token operator">-&gt;</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_ALLOC<span class="token punctuation">;</span>
    <span class="token comment">//多个msadsc_t结构的情况下，末端msadsc_t结构也设置已分配状态</span>
    mend<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">++</span><span class="token punctuation">;</span>
    mend<span class="token operator">-&gt;</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_ALLOC<span class="token punctuation">;</span>
    msastat<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
    msastat<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> mend<span class="token punctuation">;</span>
    <span class="token keyword">return</span> msastat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">bool_t</span> <span class="token function">mm_retnmsaob_onbafhlst</span><span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>retmstat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token operator">*</span>retmend<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//取出一个msadsc_t结构</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>bafhp<span class="token operator">-&gt;</span>af_frelst<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span><span class="token punctuation">,</span> md_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//从链表中删除</span>
    <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token operator">-&gt;</span>md_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//减少bafhlst_t结构中的msadsc_t计数</span>
    bafhp<span class="token operator">-&gt;</span>af_mobjnr<span class="token operator">--</span><span class="token punctuation">;</span>
    bafhp<span class="token operator">-&gt;</span>af_fobjnr<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token comment">//返回msadsc_t结构</span>
    <span class="token operator">*</span>retmstat <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token comment">//返回当前msadsc_t结构连续的那个结尾的msadsc_t结构 </span>
    <span class="token operator">*</span>retmend <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>tmp<span class="token operator">-&gt;</span>md_odlink<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>MF_OLKTY_BAFH <span class="token operator">==</span> tmp<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//如果只单个msadsc_t结构，那就是它本身 </span>
        <span class="token operator">*</span>retmend <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token function">mm_reldpgsdivmsa_bafhl</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>malckp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> pages<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> <span class="token operator">*</span>retrelpnr<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>relbfl<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>divbfl<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmsa <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>retmstat <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>retmend <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//处理相等的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>relbfl <span class="token operator">==</span> divbfl<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token comment">//从bafhlst_t结构中获取msadsc_t结构的开始与结束地址</span>
        rets <span class="token operator">=</span> <span class="token function">mm_retnmsaob_onbafhlst</span><span class="token punctuation">(</span>relbfl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmstat<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmend<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置msadsc_t结构的相关信息表示已经删除</span>
        retmsa <span class="token operator">=</span> <span class="token function">mm_divpages_opmsadsc</span><span class="token punctuation">(</span>retmstat<span class="token punctuation">,</span> relbfl<span class="token operator">-&gt;</span>af_oderpnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//返回实际的分配页数</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> relbfl<span class="token operator">-&gt;</span>af_oderpnr<span class="token punctuation">;</span>
        <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//处理不等的情况</span>
    <span class="token comment">//从bafhlst_t结构中获取msadsc_t结构的开始与结束地址</span>
    rets <span class="token operator">=</span> <span class="token function">mm_retnmsaob_onbafhlst</span><span class="token punctuation">(</span>divbfl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmstat<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmend<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">uint_t</span> divnr <span class="token operator">=</span> divbfl<span class="token operator">-&gt;</span>af_oderpnr<span class="token punctuation">;</span>
     <span class="token comment">//从高bafhlst_t数组元素中向下遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>tmpbfl <span class="token operator">=</span> divbfl <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> tmpbfl <span class="token operator">&gt;=</span> relbfl<span class="token punctuation">;</span> tmpbfl<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//开始分割连续的msadsc_t结构，把剩下的一段连续的msadsc_t结构加入到对应该bafhlst_t结构中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mrdmb_add_msa_bafh</span><span class="token punctuation">(</span>tmpbfl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmstat<span class="token punctuation">[</span>tmpbfl<span class="token operator">-&gt;</span>af_oderpnr<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>retmstat<span class="token operator">-&gt;</span>md_odlink<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">&quot;mrdmb_add_msa_bafh fail\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        retmstat<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> <span class="token operator">&amp;</span>retmstat<span class="token punctuation">[</span>tmpbfl<span class="token operator">-&gt;</span>af_oderpnr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        divnr <span class="token operator">-=</span> tmpbfl<span class="token operator">-&gt;</span>af_oderpnr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    retmsa <span class="token operator">=</span> <span class="token function">mm_divpages_opmsadsc</span><span class="token punctuation">(</span>retmstat<span class="token punctuation">,</span> divnr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> retmsa<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">*</span>retrelpnr <span class="token operator">=</span> relbfl<span class="token operator">-&gt;</span>af_oderpnr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> retmsa<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个代码有点长，我写出了完成这个逻辑的所有函数，好像很难看懂。别怕，难懂很正常，因为这是一个分配算法的核心逻辑。你之所以看不懂只是因为不懂这个算法，之前我们确实也没提过这个算法。</p><h3 id="内存分配流程" tabindex="-1"><a class="header-anchor" href="#内存分配流程" aria-hidden="true">#</a> 内存分配流程</h3><p>下面我就举个例子来演绎一下这个算法，帮助你理解它。比如现在我们要分配一个页面，这个算法将执行如下步骤：</p><p>\\1. 根据一个页面的请求，会返回 m_mdmlielst 数组中的第 0 个 bafhlst_t 结构。</p><p>\\2. 如果第 0 个 bafhlst_t 结构中有 msadsc_t 结构就直接返回，若没有 msadsc_t 结构，就会继续查找 m_mdmlielst 数组中的第 1 个 bafhlst_t 结构。</p><p>\\3. 如果第 1 个 bafhlst_t 结构中也没有 msadsc_t 结构，就会继续查找 m_mdmlielst 数组中的第 2 个 bafhlst_t 结构。</p><p>\\4. 如果第 2 个 bafhlst_t 结构中有 msadsc_t 结构，记住第 2 个 bafhlst_t 结构中对应是 4 个连续的 msadsc_t 结构。这时让这 4 个连续的 msadsc_t 结构从第 2 个 bafhlst_t 结构中脱离。</p><p>\\5. 把这 4 个连续的 msadsc_t 结构，对半分割成 2 个双 msadsc_t 结构，把其中一个双 msadsc_t 结构挂载到第 1 个 bafhlst_t 结构中。</p><p>\\6. 把剩下一个双 msadsc_t 结构，继续对半分割成两个单 msadsc_t 结构，把其中一个单 msadsc_t 结构挂载到第 0 个 bafhlst_t 结构中，剩下一个单 msadsc_t 结构返回给请求者，完成内存分配。</p><p>我画幅图表示这个过程，如下图所示。</p><img src="`+t+`" alt="img" style="zoom:15%;"><p>内存分配算法示意图</p><p>代码、文字、图，三管齐下，你一看便明白了。</p><h2 id="内存页的释放-memdivmer-c" tabindex="-1"><a class="header-anchor" href="#内存页的释放-memdivmer-c" aria-hidden="true">#</a> 内存页的释放: memdivmer.c</h2><p>理解了内存页的分配，掌握内存页的释放就是水到渠成的事儿。其实，内存页的释放就是内存页分配的逆向过程。我们从内存页分配过程了解到，可以一次分配一个或者多个页面，那么释放内存页也必须支持一次释放一个或者多个页面。</p><p>我们同样在 cosmos/hal/x86/<code>memdivmer.c</code> 文件中，写一个内存释放的接口函数和框架函数，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//释放内存页面核心</span>
<span class="token class-name">bool_t</span> <span class="token function">mm_merpages_core</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>marea<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token class-name">cpuflg_t</span> cpuflg<span class="token punctuation">;</span>
    <span class="token comment">//内存区加锁</span>
    <span class="token function">knl_spinlock_cli</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>marea<span class="token operator">-&gt;</span>ma_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//针对一个内存区进行操作</span>
    rets <span class="token operator">=</span> <span class="token function">mm_merpages_onmarea</span><span class="token punctuation">(</span>marea<span class="token punctuation">,</span> freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//内存区解锁</span>
    <span class="token function">knl_spinunlock_sti</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>marea<span class="token operator">-&gt;</span>ma_lock<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpuflg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//释放内存页面框架函数</span>
<span class="token class-name">bool_t</span> <span class="token function">mm_merpages_fmwk</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>mmobjp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取要释放msadsc_t结构所在的内存区</span>
    <span class="token class-name">memarea_t</span> <span class="token operator">*</span>marea <span class="token operator">=</span> <span class="token function">onfrmsa_retn_marea</span><span class="token punctuation">(</span>mmobjp<span class="token punctuation">,</span> freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> marea<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//释放内存页面的核心函数</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> <span class="token function">mm_merpages_core</span><span class="token punctuation">(</span>marea<span class="token punctuation">,</span> freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FALSE <span class="token operator">==</span> rets<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//释放内存页面接口</span>

<span class="token comment">//mmobjp-&gt;内存管理数据结构指针</span>
<span class="token comment">//freemsa-&gt;释放内存页面对应的首个msadsc_t结构指针</span>
<span class="token comment">//freepgs-&gt;请求释放的内存页面数</span>
<span class="token class-name">bool_t</span> <span class="token function">mm_merge_pages</span><span class="token punctuation">(</span><span class="token class-name">memmgrob_t</span> <span class="token operator">*</span>mmobjp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> mmobjp <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> freemsa <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">&gt;</span> freepgs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//调用释放内存页面的框架函数</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> <span class="token function">mm_merpages_fmwk</span><span class="token punctuation">(</span>mmobjp<span class="token punctuation">,</span> freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>FALSE <span class="token operator">==</span> rets<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的内存释放页面的代码的结构依然是：接口函数调用框架函数，框架函数调用核心函数，函数的返回值都是 bool 类型，即 TRUE 或者 FALSE，来表示内存页面释放操作成功与否。</p><p>我们从框架函数中可以发现，内存区是由 msadsc_t 结构中获取的，因为之前该结构中保留了所在内存区的类型，所以可以查到并返回内存区。</p><p>在释放内存页面的核心 mm_merpages_core 函数中，会调用 mm_merpages_onmarea 函数，下面我们来实现这个函数，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">sint_t</span> <span class="token function">mm_merpages_opmsadsc</span><span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafh<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>fmend <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>freemsa<span class="token operator">-&gt;</span>md_odlink<span class="token punctuation">;</span>
    <span class="token comment">//处理只有一个单页的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>freemsa <span class="token operator">==</span> fmend<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//页面的分配计数减1</span>
        freemsa<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> freemsa<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment">//如果依然大于0说明它是共享页面 直接返回1指示不需要进行下一步操作</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//设置页未分配的标志</span>
        freemsa<span class="token operator">-&gt;</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_NO_ALLOC<span class="token punctuation">;</span>
        freemsa<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_BAFH<span class="token punctuation">;</span>
        freemsa<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> bafh<span class="token punctuation">;</span><span class="token comment">//指向所属的bafhlst_t结构</span>
        <span class="token comment">//返回2指示需要进行下一步操作</span>
        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//多个页面的起始页面和结束页面都要减一</span>
    freemsa<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">--</span><span class="token punctuation">;</span>
    fmend<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token comment">//如果依然大于0说明它是共享页面 直接返回1指示不需要进行下一步操作</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> freemsa<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_uindx<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//设置起始、结束页页未分配的标志</span>
    freemsa<span class="token operator">-&gt;</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_NO_ALLOC<span class="token punctuation">;</span>
    fmend<span class="token operator">-&gt;</span>md_phyadrs<span class="token punctuation">.</span>paf_alloc <span class="token operator">=</span> PAF_NO_ALLOC<span class="token punctuation">;</span>
    freemsa<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
    <span class="token comment">//起始页面指向结束页面</span>
    freemsa<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> fmend<span class="token punctuation">;</span>
    fmend<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_BAFH<span class="token punctuation">;</span>
    <span class="token comment">//结束页面指向所属的bafhlst_t结构</span>
    fmend<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> bafh<span class="token punctuation">;</span>
    <span class="token comment">//返回2指示需要进行下一步操作</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">bool_t</span> <span class="token function">onfpgs_retn_bafhlst</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>malckp<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span><span class="token operator">*</span>retrelbf<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span><span class="token operator">*</span>retmerbf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//获取bafhlst_t结构数组的开始地址</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhstat <span class="token operator">=</span> malckp<span class="token operator">-&gt;</span>ma_mdmdata<span class="token punctuation">.</span>dm_mdmlielst<span class="token punctuation">;</span>
    <span class="token comment">//根据分配页面数计算出分配页面在dm_mdmlielst数组中下标</span>
    <span class="token class-name">sint_t</span> dividx <span class="token operator">=</span> <span class="token function">retn_divoder</span><span class="token punctuation">(</span>freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//返回请求释放的bafhlst_t结构指针</span>
    <span class="token operator">*</span>retrelbf <span class="token operator">=</span> <span class="token operator">&amp;</span>bafhstat<span class="token punctuation">[</span>dividx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//返回最大释放的bafhlst_t结构指针</span>
    <span class="token operator">*</span>retmerbf <span class="token operator">=</span> <span class="token operator">&amp;</span>bafhstat<span class="token punctuation">[</span>MDIVMER_ARR_LMAX <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">bool_t</span> <span class="token function">mm_merpages_onmarea</span><span class="token punctuation">(</span><span class="token class-name">memarea_t</span> <span class="token operator">*</span>malckp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>prcbf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">sint_t</span> pocs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>retrelbf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>retmerbf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token comment">//根据freepgs返回请求释放的和最大释放的bafhlst_t结构指针</span>
    rets <span class="token operator">=</span> <span class="token function">onfpgs_retn_bafhlst</span><span class="token punctuation">(</span>malckp<span class="token punctuation">,</span> freepgs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retrelbf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>retmerbf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置msadsc_t结构的信息，完成释放，返回1表示不需要下一步合并操作，返回2表示要进行合并操作</span>
    <span class="token class-name">sint_t</span> mopms <span class="token operator">=</span> <span class="token function">mm_merpages_opmsadsc</span><span class="token punctuation">(</span>retrelbf<span class="token punctuation">,</span> freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">==</span> mopms<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//把msadsc_t结构进行合并然后加入对应bafhlst_t结构</span>
        <span class="token keyword">return</span> <span class="token function">mm_merpages_onbafhlst</span><span class="token punctuation">(</span>freemsa<span class="token punctuation">,</span> freepgs<span class="token punctuation">,</span> retrelbf<span class="token punctuation">,</span> retmerbf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> mopms<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了节约篇幅，也为了帮你抓住重点，这段代码我删除了很多检查错误的代码，你可以在源代码中查看。</p><p>显然，在经过 mm_merpages_opmsadsc 函数操作之后，我们并没有将 msadsc_t 结构加入到对应的 bafhlst_t 结构中，这其实是在下一个函数完成的，那就是 mm_merpages_onbafhlst 这个函数。下面我们来实现它，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">bool_t</span> <span class="token function">mpobf_add_msadsc</span><span class="token punctuation">(</span><span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>bafhp<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemstat<span class="token punctuation">,</span> <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemend<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    freemstat<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_ODER<span class="token punctuation">;</span>
    <span class="token comment">//设置起始页面指向结束页</span>
    freemstat<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> freemend<span class="token punctuation">;</span>
    freemend<span class="token operator">-&gt;</span>md_indxflgs<span class="token punctuation">.</span>mf_olkty <span class="token operator">=</span> MF_OLKTY_BAFH<span class="token punctuation">;</span>
    <span class="token comment">//结束页面指向所属的bafhlst_t结构</span>
    freemend<span class="token operator">-&gt;</span>md_odlink <span class="token operator">=</span> bafhp<span class="token punctuation">;</span>
    <span class="token comment">//把起始页面挂载到所属的bafhlst_t结构中</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>freemstat<span class="token operator">-&gt;</span>md_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>bafhp<span class="token operator">-&gt;</span>af_frelst<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//增加bafhlst_t结构的空闲页面对象和总的页面对象的计数</span>
    bafhp<span class="token operator">-&gt;</span>af_fobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    bafhp<span class="token operator">-&gt;</span>af_mobjnr<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">bool_t</span> <span class="token function">mm_merpages_onbafhlst</span><span class="token punctuation">(</span><span class="token class-name">msadsc_t</span> <span class="token operator">*</span>freemsa<span class="token punctuation">,</span> <span class="token class-name">uint_t</span> freepgs<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>relbf<span class="token punctuation">,</span> <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>merbf<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">sint_t</span> rets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>mnxs <span class="token operator">=</span> freemsa<span class="token punctuation">,</span> <span class="token operator">*</span>mnxe <span class="token operator">=</span> <span class="token operator">&amp;</span>freemsa<span class="token punctuation">[</span>freepgs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">bafhlst_t</span> <span class="token operator">*</span>tmpbf <span class="token operator">=</span> relbf<span class="token punctuation">;</span>
    <span class="token comment">//从实际要开始遍历，直到最高的那个bafhlst_t结构</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> tmpbf <span class="token operator">&lt;</span> merbf<span class="token punctuation">;</span> tmpbf<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//查看最大地址连续、且空闲msadsc_t结构，如释放的是第0个msadsc_t结构我们就去查找第1个msadsc_t结构是否空闲，且与第0个msadsc_t结构的地址是不是连续的</span>
        rets <span class="token operator">=</span> <span class="token function">mm_find_cmsa2blk</span><span class="token punctuation">(</span>tmpbf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mnxs<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mnxe<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> rets<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//把合并的msadsc_t结构（从mnxs到mnxe）加入到对应的bafhlst_t结构中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mpobf_add_msadsc</span><span class="token punctuation">(</span>tmpbf<span class="token punctuation">,</span> mnxs<span class="token punctuation">,</span> mnxe<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的注释，已经写出了整个释放页面逻辑，<strong>最核心的还是要对空闲页面进行合并，合并成更大的连续的内存页面</strong>，这是这个释放算法的核心逻辑。</p><h3 id="内存释放流程" tabindex="-1"><a class="header-anchor" href="#内存释放流程" aria-hidden="true">#</a> 内存释放流程</h3><p>还是老规矩，我同样举个例子来演绎一下这个算法。比如，现在我们要释放一个页面，这个算法将执行如下步骤。</p><p>1.释放一个页面，会返回 m_mdmlielst 数组中的第 0 个 bafhlst_t 结构。</p><p>2.设置这个页面对应的 msadsc_t 结构的相关信息，表示已经执行了释放操作。</p><p>3.开始查看第 0 个 bafhlst_t 结构中有没有空闲的 msadsc_t，并且它和要释放的 msadsc_t 对应的物理地址是连续的。没有则把这个释放的 msadsc_t 挂载第 0 个 bafhlst_t 结构中，算法结束，否则进入下一步。</p><p>4.把第 0 个 bafhlst_t 结构中的 msadsc_t 结构拿出来与释放的 msadsc_t 结构，合并成 2 个连续且更大的 msadsc_t。</p><p>5.继续查看第 1 个 bafhlst_t 结构中有没有空闲的 msadsc_t，而且这个空闲 msadsc_t 要和上一步合并的 2 个 msadsc_t 对应的物理地址是连续的。没有则把这个合并的 2 个 msadsc_t 挂载第 1 个 bafhlst_t 结构中，算法结束，否则进入下一步。</p><p>6.把第 1 个 bafhlst_t 结构中的 2 个连续的 msadsc_t 结构，还有合并的 2 个地址连续的 msadsc_t 结构拿出来，合并成 4 个连续且更大的 msadsc_t 结构。</p><p>7.继续查看第 2 个 bafhlst_t 结构，有没有空闲的 msadsc_t 结构，并且它要和上一步合并的 4 个 msadsc_t 结构对应的物理地址是连续的。没有则把这个合并的 4 个 msadsc_t 挂载第 2 个 bafhlst_t 结构中，算法结束。</p><p>上述步骤，我们只要在一个循环中执行就行。我用一幅图表示这个过程，如下所示。</p><img src="`+e+'" alt="img" style="zoom:15%;"><p>内存释放算法</p><p>这个是不是很熟悉，这正是前面的内存分配图反过来了的结果。最终我们验证了，释放内存就是分配内存的逆向过程。</p><p>好了，到这里，一个优秀的物理内存页面管理器就实现了。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>今天我们依赖上节课设计好的数据结构，实现了内存页面管理算法。下面来回顾一下本课的重点。</p><p>\\1. 我们实现了内存分配接口、框架、核心处理函数，其分配算法是：如果能在 dm_mdmlielst 数组中找到对应请求页面数的 msadsc_t 结构就直接返回，如果没有就寻找下一个 dm_mdmlielst 数组中元素，依次迭代直到最大的 dm_mdmlielst 数组元素，然后依次对半分割，直到分割到请求的页面数为止。</p><p>\\2. 对应于内存分配过程，我们实现了释放页面的接口、框架、核心处理函数，其释放算法则是<strong>分配算法的逆向过程</strong>，会查找相邻且物理地址连续的 msadsc_t 结构，进行合并，合并工作也是迭代过程，直到合并到最大的连续 msadsc_t 结构或者后面不能合并为止，最后把这个合并到最大的连续 msadsc_t 结构，挂载到对应的 dm_mdmlielst 数组中。</p><p>你是不是感觉我们的内存管理器还有缺陷，这只能分配页面？是的，只能分配页面是不行的，你有什么更好的方案吗？下一课我们一起讨论。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>在内存页面分配过程中，是怎样尽可能保证内存页面连续的呢？</p><p>欢迎你在留言区记录你的收获或疑问。如果这节课对你有启发，也欢迎分享给你的同事、朋友。</p><p>好，我是 LMOS，我们下节课见！</p>',67),l=[c];function i(r,u){return n(),a("div",null,l)}const d=s(o,[["render",i],["__file","H18-内存页的分配与释放.html.vue"]]);export{d as default};
