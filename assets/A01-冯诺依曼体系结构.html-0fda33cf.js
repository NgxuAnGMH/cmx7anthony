import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as a,d as t}from"./app-cdabc73c.js";const o="/assets/16bed40e3f1b1484e842cac3d6e596b0-66921b8c.jpg",n="/assets/635b154d3f6c7b5d38c65bc80a808d05-3cdf9c2d.jpeg",s="/assets/9bc9634431f627d3e684ce2f83cd946a-4c86bc4f.jpg",i="/assets/cbf639bab23f61d464aa80b4fd10019e-26deae87.jpg",d="/assets/fa8e0e3c96a70cc07b4f0490bfe66f2b-d9af8f82.jpeg",h={},c=t('<h1 id="_01-冯·诺依曼体系结构-计算机组成的金字塔" tabindex="-1"><a class="header-anchor" href="#_01-冯·诺依曼体系结构-计算机组成的金字塔" aria-hidden="true">#</a> 01 | 冯·诺依曼体系结构：计算机组成的金字塔</h1><p>学习计算机组成原理，到底是在学些什么呢？这个事儿，一两句话还真说不清楚。不过没关系，我们先从“<code>装电脑</code>”这个看起来没有什么技术含量的事情说起，来弄清楚计算机到底是由什么组成的。</p><p>不知道你有没有自己搞过“<code>装机</code>”这回事儿。在 2019 年的今天，大部分人用的计算机，应该都已经是组装好的“品牌机”。如果我们把时钟拨回到上世纪八九十年代，不少早期的电脑爱好者，都是自己采购各种电脑配件，来装一台自己的计算机的。</p><h2 id="计算机的基本硬件组成" tabindex="-1"><a class="header-anchor" href="#计算机的基本硬件组成" aria-hidden="true">#</a> <strong>计算机的基本硬件组成</strong></h2><p>早年，要自己组装一台计算机，要先有三大件，CPU、内存和主板。</p><h3 id="cpu" tabindex="-1"><a class="header-anchor" href="#cpu" aria-hidden="true">#</a> CPU</h3><p>在这三大件中，我们首先要说的是 <strong>CPU</strong>，它是计算机最重要的核心配件，全名你肯定知道，叫中央处理器（Central Processing Unit）。为什么说 CPU 是“最重要”的呢？因为计算机的所有“计算”都是由 CPU 来进行的。自然，CPU 也是整台计算机中造价最昂贵的部分之一。<em>CPU是一个超级精细的印刷电路板</em></p><h3 id="内存" tabindex="-1"><a class="header-anchor" href="#内存" aria-hidden="true">#</a> 内存</h3><p>第二个重要的配件，就是<strong>内存</strong>（Memory）。你撰写的程序、打开的浏览器、运行的游戏，都要加载到内存里才能运行。程序读取的数据、计算得到的结果，也都要放在内存里。内存越大，能加载的东西自然也就越多。<em>内存通常直接可以插在主板上</em></p><h3 id="主板" tabindex="-1"><a class="header-anchor" href="#主板" aria-hidden="true">#</a> 主板</h3><p>存放在内存里的程序和数据，需要被 CPU 读取，CPU 计算完之后，还要把数据写回到内存。然而 CPU 不能直接插到内存上，反之亦然。于是，就带来了最后一个大件——<mark><strong>主板</strong>（Motherboard）</mark>。</p><p>主板是一个有着各种各样，有时候多达数十乃至上百个插槽的配件。我们的 CPU 要插在主板上，内存也要插在主板上。主板的==<strong>芯片组</strong>（Chipset）<mark>和</mark><strong>总线</strong>（Bus）==解决了 <em>CPU 和 内存 之间如何通信的问题</em>。</p><ul><li>芯片组控制了<em><strong>数据传输的流转</strong>，也就是数据从哪里到哪里的问题</em>。</li><li>总线则是<em>实际数据传输的高速公路</em>。因此，<strong>总线速度</strong>（Bus Speed）决定了<em>数据能传输得多快</em>。</li></ul><p>计算机主板上通常有着各种各样的插槽</p><img src="'+o+'" alt="img" style="zoom:33%;"><h3 id="其余-电源-io" tabindex="-1"><a class="header-anchor" href="#其余-电源-io" aria-hidden="true">#</a> 其余：电源 &amp; IO</h3><p>有了三大件，只要配上<strong>电源</strong>供电，计算机差不多就可以跑起来了。但是现在还缺少各类输入（Input）/ 输出（Output）设备，也就是我们常说的 <strong>I/O 设备</strong>。如果你用的是自己的个人电脑，那显示器肯定必不可少，只有有了显示器我们才能看到计算机输出的各种图像、文字，这也就是所谓的<strong>输出设备</strong>。</p><p>同样的，鼠标和键盘也都是必不可少的配件。这样我才能输入文本，写下这篇文章。它们也就是所谓的<strong>输入设备</strong>。</p><p>最后，你自己配的个人计算机，还要配上一个硬盘。这样各种数据才能持久地保存下来。绝大部分人都会给自己的机器装上一个机箱，配上风扇，解决灰尘和散热的问题。不过机箱和风扇，算不上是计算机的必备硬件，我们拿个纸板或者外面放个电风扇，也一样能用。</p><p>说了这么多，其实你应该有感觉了，显示器、鼠标、键盘和硬盘这些东西并不是一台计算机必须的部分。你想一想，<em>我们其实只需要有 I/O 设备</em>，能让我们从计算机里输入和输出信息，是不是就可以了？答案当然是肯定的。</p><p>你肯定去过网吧吧？不知道你注意到没有，<em>很多网吧的计算机就没有硬盘</em>，<code>而是直接通过局域网，读写远程网络硬盘里面的数据</code>。我们日常用的<em>各类云服务器，只要让计算机能通过网络，SSH 远程登陆访问就好了</em>，因此也没必要配显示器、鼠标、键盘这些东西。这样不仅能够节约成本，还更方便维护。</p><h3 id="显卡-额外的gpu" tabindex="-1"><a class="header-anchor" href="#显卡-额外的gpu" aria-hidden="true">#</a> 显卡：额外的GPU</h3><p>还有一个很特殊的设备，就是==<strong>显卡</strong>（Graphics Card）==。现在，使用图形界面操作系统的计算机，无论是 Windows、Mac OS 还是 Linux，显卡都是必不可少的。有人可能要说了，我装机的时候没有买显卡，计算机一样可以正常跑起来啊！那是因为，<em>现在的主板都带了内置的显卡</em>。</p><ul><li>如果你用计算机玩游戏，做图形渲染或者跑深度学习应用，你多半就需要买一张单独的显卡，插在主板上。</li><li>显卡之所以特殊，是因为显卡里有除了 CPU 之外的另一个“处理器”，<br> 也就是 <mark><strong>GPU</strong>（Graphics Processing Unit，<em>图形处理器</em>）</mark>，GPU 一样可以做各种“计算”的工作。</li></ul><img src="'+n+'" alt="img" style="zoom:33%;"><p>图片来自于维基百科，在设计图上，北桥通常靠近CPU，在主板的“北面”</p><h3 id="南桥-主板芯片组" tabindex="-1"><a class="header-anchor" href="#南桥-主板芯片组" aria-hidden="true">#</a> 南桥：主板芯片组</h3><p>鼠标、键盘以及硬盘，这些都是插在主板上的。作为外部 I/O 设备，它们是通过主板上的==<strong>南桥</strong>（SouthBridge）芯片组==，来控制和 CPU 之间的通信的。“南桥”芯片的名字很直观，一方面，它在主板上的位置，通常在主板的“南面”。另一方面，它的作用就是作为“桥”，来连接鼠标、键盘以及硬盘这些外部设备和 CPU 之间的通信。</p><p>有了南桥，自然对应着也有“<strong>北桥</strong>”。是的，以前的主板上通常也有“北桥”芯片，用来作为“桥”，连接 CPU 和内存、显卡之间的通信。不过，随着时间的变迁，现在的主板上的“北桥”芯片的工作，<em>已经被移到了 CPU 的内部</em>，所以你在主板上，已经看不到北桥芯片了。</p><h2 id="冯·诺依曼体系结构" tabindex="-1"><a class="header-anchor" href="#冯·诺依曼体系结构" aria-hidden="true">#</a> <strong>冯·诺依曼体系结构</strong></h2><p>刚才我们讲了一台计算机的硬件组成，这说的是我们平时用的个人电脑或者服务器。那我们平时最常用的<em>智能手机</em>的组成，也是这样吗？</p><p>我们手机里只有 SD 卡（Secure Digital Memory Card）这样类似<em>硬盘功能</em>的存储卡插槽，并没有内存插槽、CPU 插槽这些东西。没错，因为手机尺寸的原因，手机制造商们选择把 <code>CPU、内存、网络通信，乃至摄像头芯片</code>，都封装到一个芯片，<em>然后再嵌入到手机主板上</em>。这种方式叫 <mark><strong>SoC</strong></mark>，也就是 <mark><strong>System on a Chip</strong>（系统芯片）</mark>。</p><p>这样看起来，个人电脑和智能手机的<em>硬件组成方式不太一样</em>。可是，我们写智能手机上的 App，和写个人电脑的客户端应用<em>似乎没有什么差别</em>，都是通过“高级语言”这样的编程语言撰写、编译之后，一样是把代码和数据加载到内存里来执行。这是为什么呢？因为，无论是<code>个人电脑、服务器、智能手机，还是 Raspberry Pi 这样的微型卡片机</code>，都遵循着同一个“计算机”的抽象概念。这是怎么样一个“计算机”呢？这其实就是，计算机祖师爷之一冯·诺依曼（John von Neumann）提出的==<strong>冯·诺依曼体系结构</strong>（Von Neumann architecture）==，也叫<strong>存储程序计算机</strong>。</p><p>什么是存储程序计算机呢？这里面其实暗含了两个概念，一个是“<strong>可编程</strong>”计算机，一个是“<strong>存储</strong>”计算机。</p><h3 id="可编程的本质" tabindex="-1"><a class="header-anchor" href="#可编程的本质" aria-hidden="true">#</a> 可编程的本质</h3><p>说到“可编程”，估计你会有点懵，你可以先想想，什么是“不可编程”。计算机是由各种门电路组合而成的，然后通过组装出一个固定的电路板，来完成一个特定的计算程序。<code>一旦需要修改功能，就要重新组装电路</code>。这样的话，计算机就是“不可编程”的，因为程序在计算机硬件层面是“写死”的。最常见的就是老式计算器，电路板设好了加减乘除，做不了任何计算逻辑固定之外的事情。<em>计算器的本质是一个不可编程的计算机</em></p><img src="'+s+'" alt="img" style="zoom:25%;"><h3 id="存储的本质" tabindex="-1"><a class="header-anchor" href="#存储的本质" aria-hidden="true">#</a> 存储的本质</h3><p>我们再来看“存储”计算机。这其实是说，程序本身是存储在计算机的内存里，可以通过加载不同的程序来解决不同的问题。有“存储程序计算机”，<em>自然也有不能存储程序的计算机</em>。典型的就是早年的“Plugboard”这样的插线板式的计算机。整个计算机就是<em>一个巨大的插线板，<code>通过在板子上不同的插头或者接口的位置插入线路</code>，来实现不同的功能</em>。这样的计算机自然是“可编程”的，<em><code>但是编写好的程序不能存储下来供下一次加载使用</code></em>，不得不每次要用到和当前不同的“程序”的时候，<em>重新插板子，重新“编程”</em>。著名的Engima Machine就用到了Plugboard来进行“编程”</p><img src="'+i+'" alt="img" style="zoom:33%;"><h2 id="因此由来" tabindex="-1"><a class="header-anchor" href="#因此由来" aria-hidden="true">#</a> 因此由来</h2><p>可以看到，无论是“不可编程”还是“不可存储”，都会让使用计算机的效率大大下降。而这个对于效率的追求，也就是“<code>存储程序计算机</code>”的由来。</p><p>于是我们的冯祖师爷，基于当时在秘密开发的 EDVAC 写了一篇报告<em>**First Draft of a Report on the EDVAC</em>，描述了他心目中的一台计算机应该长什么样。这篇报告在历史上有个很特殊的简称，叫 <strong>First Draft</strong>，翻译成中文，其实就是《第一份草案》。这样，现代计算机的发展就从祖师爷写的一份草案开始了。</p><p><strong>First Draft</strong> 里面说了一台计算机应该有哪些部分组成，我们一起来看看。</p><h3 id="_1-处理器单元-运算器-数据通路" tabindex="-1"><a class="header-anchor" href="#_1-处理器单元-运算器-数据通路" aria-hidden="true">#</a> 1 处理器单元（运算器/数据通路）</h3><p>首先是一个包含*算术逻辑单元（Arithmetic Logic Unit，ALU）<em>和</em>处理器寄存器（Processor Register）*的==<strong>处理器单元</strong>（Processing Unit）==，用来完成各种算术和逻辑运算。因为它能够完成各种数据的处理或者计算工作，因此也有人把这个叫作<code>数据通路（Datapath）</code>或者<code>运算器</code>。</p><h3 id="_2-控制器单元" tabindex="-1"><a class="header-anchor" href="#_2-控制器单元" aria-hidden="true">#</a> 2 控制器单元</h3><p>然后是一个包含*指令寄存器（Instruction Register）<em>和</em>程序计数器（Program Counter）*的==<strong>控制器单元</strong>（Control Unit/CU）==，用来控制程序的流程，通常就是不同条件下的分支和跳转。</p><h3 id="cpu-处理器-控制器" tabindex="-1"><a class="header-anchor" href="#cpu-处理器-控制器" aria-hidden="true">#</a> CPU=处理器+控制器</h3><blockquote><p>在现在的计算机里，上面的算术逻辑单元和这里的控制器单元，共同组成了我们说的 CPU。</p></blockquote><h3 id="_3-内存-外存" tabindex="-1"><a class="header-anchor" href="#_3-内存-外存" aria-hidden="true">#</a> 3 内存 外存</h3><p>接着是用来存储*数据（Data）<em>和</em>指令（Instruction）*的==<strong>内存</strong><mark>。以及更大容量的</mark><strong>外部存储</strong>==，在过去，可能是磁带、磁鼓这样的设备，现在通常就是硬盘。</p><h3 id="_4-io-机制" tabindex="-1"><a class="header-anchor" href="#_4-io-机制" aria-hidden="true">#</a> 4 IO 机制</h3><p>最后就是各种==<strong>输入和输出设备</strong>==，以及<code>对应的输入和输出机制</code>。我们现在无论是使用什么样的计算机，其实都是和输入输出设备在打交道。</p><ul><li>个人电脑的鼠标键盘是输入设备，显示器是输出设备。</li><li>我们用的智能手机，触摸屏既是输入设备，又是输出设备。</li><li>而跑在各种云上的服务器，则是通过网络来进行输入和输出。这个时候，网卡既是输入设备又是输出设备。</li></ul><h3 id="运行总结" tabindex="-1"><a class="header-anchor" href="#运行总结" aria-hidden="true">#</a> 运行总结</h3><p>任何一台计算机的<code>任何一个部件</code>都可以归到<code>运算器、控制器、存储器、输入设备和输出设备</code>中，而所有的现代计算机也都是基于这个基础架构来设计开发的。</p><p>而所有的计算机程序，也都可以抽象为从<strong>输入设备</strong>读取输入信息，通过<strong>运算器</strong>和<strong>控制器</strong>来执行存储在<strong>存储器</strong>里的程序，最终把结果输出到<strong>输出设备</strong>中。而我们所有撰写的无论高级还是低级语言的程序，也都是基于这样一个抽象框架来进行运作的。</p><img src="'+d+'" alt="img" style="zoom:25%;"><p>冯·诺依曼体系结构示意图</p><h2 id="总结延伸" tabindex="-1"><a class="header-anchor" href="#总结延伸" aria-hidden="true">#</a> <strong>总结延伸</strong></h2><p>可以说，冯·诺依曼体系结构确立了我们现在每天使用的计算机硬件的基础架构。因此，学习计算机组成原理，其实就是<em>学习和拆解冯·诺依曼体系结构</em>。</p><p>具体来说，学习组成原理，其实就是</p><ul><li>学习控制器、运算器的工作原理，也就是 CPU 是怎么工作的，以及为何这样设计；</li><li>学习内存的工作原理，从最基本的电路，到上层抽象给到 CPU 乃至应用程序的接口是怎样的；</li><li>学习 CPU 是怎么和输入设备、输出设备打交道的。</li></ul><p>学习组成原理，<strong>就是在理解从控制器、运算器、存储器、输入设备以及输出设备，从电路这样的硬件，到最终开放给软件的接口，是怎么运作的，为什么要设计成这样</strong>，以及在软件开发层面怎么尽可能用好它。</p><p>好了，这一讲说到这儿就结束了。你应该已经理解了计算机的硬件是由哪些设备组成的，以及冯·诺依曼体系结构是什么样的了。下一讲，我会带你看一张地图，也是计算机组成原理的知识地图。我们一起来看一看怎么样才是学习组成原理的好方法。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> <strong>推荐阅读</strong></h2><p>我一直认为，<code>读读经典的论文，是从一个普通工程师迈向优秀工程师必经的一步</code>。如果你有时间，不妨去读一读<em>**First Draft of a Report on the EDVAC</em>。对于工程师来说，直接读取英文论文的原文，既可以搞清楚、弄明白对应的设计及其背后的思路来源，<strong>还可以帮你破除对于论文或者核心技术的恐惧心理</strong>。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考" aria-hidden="true">#</a> <strong>课后思考</strong></h2><p>计算机行业的两大祖师爷之一，除了冯·诺依曼机之外，还有一位就是著名的图灵（Alan Mathison Turing）。对应的，我们现在的计算机也叫<strong>图灵机</strong>（Turing Machine）。那么图灵机和冯·诺依曼机是两种不同的计算机么？图灵机是一种什么样的计算机抽象呢？</p><p>欢迎留言和我分享你的思考和疑惑，你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p>',71),p=[c];function g(m,l){return r(),a("div",null,p)}const _=e(h,[["render",g],["__file","A01-冯诺依曼体系结构.html.vue"]]);export{_ as default};
