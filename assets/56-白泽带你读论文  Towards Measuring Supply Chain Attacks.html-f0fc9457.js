import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as n,c as i,a,b as e,e as t,d}from"./app-cdabc73c.js";const m="/assets/640-1691393029360-192-1fc9a3d9.png",o="/assets/640-1691393029360-193-c9295b98.png",c="/assets/640-1691393029361-194-13b0130c.png",h={},_=a("h1",{id:"_56-白泽带你读论文-towards-measuring-supply-chain-attacks",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_56-白泽带你读论文-towards-measuring-supply-chain-attacks","aria-hidden":"true"},"#"),e(" 56-白泽带你读论文 | Towards Measuring Supply Chain Attacks")],-1),l={href:"https://www.ndss-symposium.org/wp-content/uploads/ndss2021_1B-1_23055_paper.pdf",target:"_blank",rel:"noopener noreferrer"},u=d('<p>Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages</p><p>本周由复旦系统与软件安全实验室林奕帆、花楠等同学负责论文精读与整理，论文选取自NDSS 2021的一篇研究<em>供应链攻击及防御</em>的文章。本文从第三方代码包这一角度出发，研究攻击者对供应链上游的可能攻击方式，通过比较<em>三个不同的代码包注册管理机构及其生态系统</em>，提出了一个比较框架来定性地评估<em>包管理器的功能和安全特性</em>，并应用程序分析技术，如<mark>元数据</mark>、<mark>静态和动态分析</mark>等来检测包管理器中的安全隐患。与以往工作相比，本文的创新点在于针对此类问题系统且较为全面的提出了一个分析框架。然后，本文使用这种分析框架，在3个流行的解释性语言包注册与管理中心<mark>PyPI</mark>、<mark>Npm</mark>和<mark>RubyGems</mark>上找出了339个恶意包，其中278个已经被确认并删除，证明了其方法与思路的有效性。</p><h2 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言" aria-hidden="true">#</a> 1. 引言</h2><p>包管理器已经成为现代软件开发过程的重要组成部分。软件开发人员利用包管理器可以很方便的通过重用第三方代码来减少开发环节的开销，也可以共享自己的代码让其他开发人员使用，甚至可以最小化软件所必须依赖的第三方代码库，削减由冗余代码引入的潜在攻击面并简化构建过程。然而，最近的报告显示，包管理器已经被攻击者用于分发恶意软件，给开发者和最终用户带来了重大的安全风险。此类攻击被称为供应链攻击。</p><p>尽管已经有工作关注到了供应链攻击并且提出了一些缓解方法，但这些方法都不够完善，也没有对供应链攻击进行系统性的研究与分析。因此，本文从软件供应链生态的角度出发，研究攻击者对供应链上游的攻击方式，并通过三个不同的包注册管理机构，进一步深入分析了包管理的生态系统。</p><p>具体来说，作者首先面向<em>解释性语言</em>提出了一个比较框架来定性的评估包管理器的功能和安全特性。在此基础上，作者通过整合目前现有的分析工具，利用源数据分析、静态分析和动态分析技术，研究了来自PyPI、Npm和RubyGems的100多万个包，并发现了339个新恶意包。然后，作者向相关的包注册管理机构报告了这些恶意包。包管理器维护者从339个报告的包中确认了278个(82%)，并提供了3个CVE认证，其中3个包的下载量超过100,000次。</p><h2 id="_2-整体思路" tabindex="-1"><a class="header-anchor" href="#_2-整体思路" aria-hidden="true">#</a> 2. 整体思路</h2><p>为了全面评估包管理生态系统中的安全隐患，作者首先分析了312个供应链攻击样本，然后对包管理生态系统中的管理和开发过程进行建模，设计了一个定性分析的框架，用于确定当前PyPI、Npm以及RubyGems三个包管理生态系统可能面临的安全风险。</p><p>本文整体的设计与实现如下图：</p><figure><img src="'+m+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在该框架中，作者将包注册管理中心的特征分为三类，即<mark>功能性</mark>、<mark>审查</mark>和<mark>补救措施</mark>,并表明了这些特征在不同的包管理平台中是强制性还是非强制性的。在这一步中，作者手动评估了功能性的每个特性，对于审查和补救措施特性，作者则直接联系了包注册中心的维护人员，此外作者还从包注册中心的指导文档和博客中收集信息以进行辅助分析。</p><h2 id="_3-对供应链攻击的分析" tabindex="-1"><a class="header-anchor" href="#_3-对供应链攻击的分析" aria-hidden="true">#</a> 3. 对供应链攻击的分析</h2><p>首先，作者调研了现有的供应链攻击报告并详细阐述了它们的<mark>攻击向量</mark>和<mark>恶意行为</mark>，通过调研发现，这些攻击者主要利用对上游人员的攻击（即包管理中心的管理人员以及包开发者）来对下游的包使用者展开攻击（即利用现有包进行开发的开发人员和终端用户）。</p><figure><img src="'+o+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>然后，作者根据定性分析发现，这PyPI、Npm以及RubyGems三个包管理中心目前很少或者没有对发布包的审查流程，<em>现有的供应链攻击检测主要依赖于社区进行报告，而没有自动化解决方案</em>。作者指出这些因素表明在现有的已经发布的包中，可能还存在大量存在安全问题的包未被检测出来。</p><p>在这个推论的基础上，作者应用程序分析技术，即元数据处理、静态分析和动态分析技术来发现恶意的包或恶意程序。但是作者在文中强调，他们并没有改进程序分析技术，而是利用现有的程序分析技术来构成<em>一个完整的自动化包功能检测工具</em>，用于分析包和发现潜在的攻击向量。其主要的工作流程如下：</p><figure><img src="'+c+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>其中使用到的分析技术具体做法分别为：</p><h3 id="_1-元数据分析-metadata-analysis" tabindex="-1"><a class="header-anchor" href="#_1-元数据分析-metadata-analysis" aria-hidden="true">#</a> 1）元数据分析（Metadata Analysis）</h3><p>元数据分析侧重于收集包元数据中的辅助信息(如包名、作者、版本、下载和依赖关系)，并根据不同的标准对它们进行聚合。所有信息都是直接从注册表API中检索的。元数据分析可以标记可疑包，以及识别与已知恶意软件相似的包。例如，可以根据名称对软件包进行分组，那些与热门的包名称相近的包会作为候选的恶意包；作者信息也有助于根据对包进行分组，如果一个包的作者曾经发布过恶意包，那么来自该作者的所有包也会被认为是一个恶意的包。</p><h3 id="_2-静态分析-static-analysis" tabindex="-1"><a class="header-anchor" href="#_2-静态分析-static-analysis" aria-hidden="true">#</a> 2）静态分析（Static Analysis）</h3><p>静态分析侧重于分析每个包中与包管理器相应的解释语言的源文件。该分析包括三个部分，根据<em>已有敏感API列表</em>手动对包中的API进行标记、API使用分析和数据流分析。</p><h3 id="_3-动态分析-dynamic-analysis" tabindex="-1"><a class="header-anchor" href="#_3-动态分析-dynamic-analysis" aria-hidden="true">#</a> 3）动态分析（Dynamic Analysis）</h3><p>动态分析侧重于执行包和系统调用。与静态分析相比，动态分析考虑源文件以及嵌入的二进制文件。通过捕获包执行过程中的动态行为，判断包是否存在先前定义的恶意行为</p><h2 id="_4-实验与结果" tabindex="-1"><a class="header-anchor" href="#_4-实验与结果" aria-hidden="true">#</a> 4. 实验与结果</h2><p>作者按照制定好的程序分析流程对PyPI、Npm和RubyGems这三个包注册中心的包进行分析，其中PyPI有186785个包，Npm有997561个包，RubyGems有151783个包。作者最终发现了339个新的恶意包，其中包括PyPI中的7个恶意包、Npm中的41个恶意包和RubyGems中的291个恶意包。作者分别向管理人员报告了这些包，管理人员确认和并删除了其中的278个(82%)，其中7个来自PyPI，19个来自Npm，252个来自RubyGems。在移除的包中，对其中三个(即paranoid2、simple_captcha2和datagrid)下载量超过100k的包，作者还申请了CVE(CVE2019-13589、CVE-2019-14282、CVE-2019-14281)，希望潜在受害者能够及时得到通知。</p><h2 id="_5-防御与修复" tabindex="-1"><a class="header-anchor" href="#_5-防御与修复" aria-hidden="true">#</a> 5. 防御与修复</h2><p>针对目前的供应链攻击，作者又根据包管理生态中不同人的身份，提出了不同的措施用于缓解此类攻击。</p><p><strong>1）包注册中心管理者（Registry Maintainers）</strong>：从功能的角度，RM可以通过提供MFA和代码签名、提高密码强度、检测异常登录等来显著提升账户保护能力。还可以通过在注册客户端检测包名混淆和限制发布容易与流行包产生混淆的包名来打击恶意包名。从审计的角度，RM可以使用如本文展示的程序分析手段系统的检测待审核的包，也可以通过众包的方式，引入人工评审，当检测到可疑的包时，将此信息广播给相应的开发人员。从补救的角度，RM可以从服务器上删除恶意包和发布者，还能够利用各种通知渠道，如电子邮件、安全咨询和客户端检查，向利益相关方通报安全事件。</p><p><strong>2）包维护者（Package Maintainers）</strong>：PM可以通过采用MFA、代码签名和强密码等技术来保护他们的账户。还要对新的贡献者保持谨慎，手动检查他们提交的包。</p><p><strong>3）开发者（Developers）</strong>：开发者可以使用已知的安全包版本以避免来自上游利益相关者的供应链攻击，并定期检查安全建议、及时更新以避免已知的漏洞。开发者可以手动检查不受信任的包。</p><p><strong>4）终端用户（End-user）</strong>：用户可以利用反病毒工具来保护他们的设备。此外，用户可以提高自己的安全意识，只访问官方的和信誉良好的网站</p><h2 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结" aria-hidden="true">#</a> 6. 总结</h2><p>本文针对目前存在的包管理安全问题，研究攻击者对供应链上游的攻击方式，比较三个不同注册管理机构的生态系统，提出了一个比较框架来定性地评估解释性语言的包管理器的功能和安全特性，并应用程序分析技术，如元数据、静态和动态分析来研究包管理中的安全问题。与以往工作相比，本文的创新点在于针对此类问题系统且较为全面的提出了一个分析框架。</p><p>本文使用这种分析框架，在3个流行的解释性语言包注册中心PyPI、Npm和RubyGems上找出了339个恶意包，其中278个已经被确认并删除。这说明作者提出的分析框架是确实有效并具有实际运用价值的。</p><p>此方案也有不足之处，作者没有提出创新性的恶意包检测技术，只是将现有的工具结合了起来。而且运行环境单一，在静态分析时使用了大量人工手段，暂不清楚具体开销。</p><p>总体而言，作者创新性的提出了一个比较全面的方案定性评估包管理器的功能和安全特性，还提出了一套全面的分析框架，在现实世界中分析了恶意包的真实危害，针对其攻击提供了缓解手段，警示开发者和管理者们增强安全防御措施，提高安全意识。</p><h2 id="_7-思考与讨论" tabindex="-1"><a class="header-anchor" href="#_7-思考与讨论" aria-hidden="true">#</a> 7. 思考与讨论</h2><p>Q1：这篇文章是针对解释型语言的包管理生态的供应链攻击做measurement，文章为什么是怎么挑选这三种解释型语言呢？</p><p>A：首先这三种语言对应的库使用量较大，受到攻击较多，其次是，其他语言例如java的库管理机制比较复杂，包含很多其他的东西，比如其他软件，相比之下，解释型语言的包管理机制相对比较便于进行分析。</p><p>Q2: 这篇文章采用的分析技术都是已有的技术，从技术创新的角度上没有什么贡献，那么文章与前人工作相比为什么能发现更多的恶意软件？</p><p>A：虽然从技术的角度，没有什么创新点，但是从measurement的角度，文章涵盖了三种语言的包管理生态，实验数据较大，且针对供应链上四个角色进行分析，把基本能用上的分析技术都用上了，前人的工作往往只会针对文章中提到的部分方面进行分析，所以本文的结果和前人相比更加全面，结果更多。</p><p>Q3: Table 1中提出的有一些feature，例如review那一栏里的都没有实现，是否合理和完整？</p><p>A：这个表应该是作者基于前人工作，以及经验，case study等总结出的feature，希望供应链上所有角色和环节都应进行相关的检查来保证供应链上的安全。</p><p>Q4：如果终端用户受到了攻击，那么应该由供应链上哪个角色负责？</p><p>A：如果根据文章的定性分析，主要应该由开发者负责，因为在code review的部分开发者基本没有做检查。</p><p>Q5：在信任关系的变更中，作者认为RM不应当完全信任Devs，但是实际看作者列出的威胁模型其实与Devs完全无关，那为什么不能完全信任?</p><p>A：作者认为开发者必须信任下载平台，但是对所下载的东西保持怀疑。对PM和DEV而言，RM是可信的；对比之下，RM不可以完全相信PM和DEV。</p><p>Q6：作者是怎么发现并统计账户盗用这种攻击的？</p><p>A：人工调研，比如询问作者，看新闻，都是有可能的。</p><p>Q7： 对于misspells 的判断，作者是怎么处理的？很类似的但都是正常的包名，例如下面这些：</p><p>A: 比较相似度，e.g.编辑距离。先把名字相似的包都找出来，再对他们是否恶意进行分析（但是这部分没有在论文中体现）。可能作者是先发现了恶意包存在使用山寨名称的现象才总结出这个规律的，并不完备。</p><p>Q8：论文的创新点在什么地方，本文使用的工具相比于前人的工作有什么改进吗？</p><p>A: 虽然没有技术创新，但是作者认为他设计的分析流程和规则非常完善，这是前人所未能达到的。</p><p>Q9： fig4中提到的迭代式检测如何理解？为什么需要这样的检测方式？</p><p>A: 文中提到的迭代式检测主要是通过人工对包的分析结果，不断修正包的过滤规则，剔除可能带来误报的规则，或者加入新的规则提高检出率和正确率。因为目前的启发式规则是通过前人工作总结而来，存在不完善的地方，所以需要不断修正。</p><p>Q10. RubyGems的数据集是最小的，为什么检测出来的malware是最多的？</p><p>A:一方面，对三种不同的供应链，文章使用的静态分析工具有所不同，这种检测工具上的差异可能导致检测出的包的数量存在差异。另外作者在文章的finding中还提出使用者的数量与恶意包的数量存在负相关的关系，从这点上也能解释为什么RubyGems数据集最小，而检测出的malware最多</p>',58);function g(y,f){const r=p("ExternalLinkIcon");return n(),i("div",null,[_,a("p",null,[a("a",l,[e("ndss2021_1B-1_23055_paper.pdf (ndss-symposium.org)"),t(r)]),e("。")]),u])}const P=s(h,[["render",g],["__file","56-白泽带你读论文  Towards Measuring Supply Chain Attacks.html.vue"]]);export{P as default};
