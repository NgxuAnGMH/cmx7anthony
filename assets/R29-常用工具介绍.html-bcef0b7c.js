import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a as s,b as n,d as p,e as l}from"./app-063765ff.js";const i="/assets/f87469e321c52b21b0d2abb88e7b288c-4ee4af53.png",u="/assets/2a5d6813e32b8f88abae2b9f7b151fce-5f9f3dd4.png",r={},k=l(`<h1 id="【工具篇】-常用工具介绍" tabindex="-1"><a class="header-anchor" href="#【工具篇】-常用工具介绍" aria-hidden="true">#</a> 【工具篇】 常用工具介绍</h1><p>在前面的文章中，我曾使用了不少工具来辅助讲解，也收到了不少同学留言，说不了解这些工具，不知道都有什么用，应该怎么用。那么今天我便统一做一次具体的介绍。本篇代码较多，你可以点击文稿查看。</p><p><strong>javap：查阅 Java 字节码</strong></p><p>javap 是一个能够将 class 文件反汇编成人类可读格式的工具。在本专栏中，我们经常借助这个工具来查阅 Java 字节码。</p><p>举个例子，在讲解异常处理那一篇中，我曾经展示过这么一段代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> tryBlock<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> catchBlock<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> finallyBlock<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> methodExit<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      tryBlock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      catchBlock <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      finallyBlock <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    methodExit <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译过后，我们便可以使用 javap 来查阅 Foo.test 方法的字节码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>$ javac <span class="token class-name">Foo</span><span class="token punctuation">.</span>java
$ javap <span class="token operator">-</span>p <span class="token operator">-</span>v <span class="token class-name">Foo</span>
<span class="token class-name">Classfile</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>/<span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span>
  <span class="token class-name">Last</span> modified <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> size <span class="token number">541</span> bytes
  <span class="token constant">MD5</span> checksum <span class="token number">3828</span>cdfbba56fea1da6c8d94fd13b20d
  <span class="token class-name">Compiled</span> from <span class="token string">&quot;Foo.java&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span>
  minor version<span class="token operator">:</span> <span class="token number">0</span>
  major version<span class="token operator">:</span> <span class="token number">54</span>
  flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0021</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_SUPER</span>
  this_class<span class="token operator">:</span> #<span class="token number">7</span>                          <span class="token comment">// Foo</span>
  super_class<span class="token operator">:</span> #<span class="token number">8</span>                         <span class="token comment">// java/lang/Object</span>
  interfaces<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> fields<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> methods<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> attributes<span class="token operator">:</span> <span class="token number">1</span>
<span class="token class-name">Constant</span> pool<span class="token operator">:</span>
   #<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">8.</span>#<span class="token number">23</span>         <span class="token comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
   #<span class="token number">2</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">7.</span>#<span class="token number">24</span>         <span class="token comment">// Foo.tryBlock:I</span>
   #<span class="token number">3</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">7.</span>#<span class="token number">25</span>         <span class="token comment">// Foo.finallyBlock:I</span>
   #<span class="token number">4</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">26</span>            <span class="token comment">// java/lang/Exception</span>
   #<span class="token number">5</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">7.</span>#<span class="token number">27</span>         <span class="token comment">// Foo.catchBlock:I</span>
   #<span class="token number">6</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">7.</span>#<span class="token number">28</span>         <span class="token comment">// Foo.methodExit:I</span>
   #<span class="token number">7</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">29</span>            <span class="token comment">// Foo</span>
   #<span class="token number">8</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">30</span>            <span class="token comment">// java/lang/Object</span>
   #<span class="token number">9</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               tryBlock
  #<span class="token number">10</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">I</span>
  #<span class="token number">11</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               catchBlock
  #<span class="token number">12</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               finallyBlock
  #<span class="token number">13</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               methodExit
  #<span class="token number">14</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span>
  #<span class="token number">15</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
  #<span class="token number">16</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Code</span>
  #<span class="token number">17</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LineNumberTable</span>
  #<span class="token number">18</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               test
  #<span class="token number">19</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">StackMapTable</span>
  #<span class="token number">20</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">31</span>            <span class="token comment">// java/lang/Throwable</span>
  #<span class="token number">21</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">SourceFile</span>
  #<span class="token number">22</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Foo</span><span class="token punctuation">.</span>java
  #<span class="token number">23</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">14</span><span class="token operator">:</span>#<span class="token number">15</span>        <span class="token comment">// &quot;&lt;init&gt;&quot;:()V</span>
  #<span class="token number">24</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">9</span><span class="token operator">:</span>#<span class="token number">10</span>         <span class="token comment">// tryBlock:I</span>
  #<span class="token number">25</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">12</span><span class="token operator">:</span>#<span class="token number">10</span>        <span class="token comment">// finallyBlock:I</span>
  #<span class="token number">26</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span>
  #<span class="token number">27</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">11</span><span class="token operator">:</span>#<span class="token number">10</span>        <span class="token comment">// catchBlock:I</span>
  #<span class="token number">28</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">13</span><span class="token operator">:</span>#<span class="token number">10</span>        <span class="token comment">// methodExit:I</span>
  #<span class="token number">29</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Foo</span>
  #<span class="token number">30</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span>
  #<span class="token number">31</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Throwable</span>
<span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> tryBlock<span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token class-name">I</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0002</span><span class="token punctuation">)</span> <span class="token constant">ACC_PRIVATE</span>

  <span class="token keyword">private</span> <span class="token keyword">int</span> catchBlock<span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token class-name">I</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0002</span><span class="token punctuation">)</span> <span class="token constant">ACC_PRIVATE</span>

  <span class="token keyword">private</span> <span class="token keyword">int</span> finallyBlock<span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token class-name">I</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0002</span><span class="token punctuation">)</span> <span class="token constant">ACC_PRIVATE</span>

  <span class="token keyword">private</span> <span class="token keyword">int</span> methodExit<span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token class-name">I</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0002</span><span class="token punctuation">)</span> <span class="token constant">ACC_PRIVATE</span>

  <span class="token keyword">public</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span><span class="token operator">:</span> aload_0
         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
         <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span><span class="token operator">:</span> aload_0
         <span class="token number">1</span><span class="token operator">:</span> iconst_0
         <span class="token number">2</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>                  <span class="token comment">// Field tryBlock:I</span>
         <span class="token number">5</span><span class="token operator">:</span> aload_0
         <span class="token number">6</span><span class="token operator">:</span> iconst_2
         <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">3</span>                  <span class="token comment">// Field finallyBlock:I</span>
        <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">35</span>
        <span class="token number">13</span><span class="token operator">:</span> astore_1
        <span class="token number">14</span><span class="token operator">:</span> aload_0
        <span class="token number">15</span><span class="token operator">:</span> iconst_1
        <span class="token number">16</span><span class="token operator">:</span> putfield      #<span class="token number">5</span>                  <span class="token comment">// Field catchBlock:I</span>
        <span class="token number">19</span><span class="token operator">:</span> aload_0
        <span class="token number">20</span><span class="token operator">:</span> iconst_2
        <span class="token number">21</span><span class="token operator">:</span> putfield      #<span class="token number">3</span>                  <span class="token comment">// Field finallyBlock:I</span>
        <span class="token number">24</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">35</span>
        <span class="token number">27</span><span class="token operator">:</span> astore_2
        <span class="token number">28</span><span class="token operator">:</span> aload_0
        <span class="token number">29</span><span class="token operator">:</span> iconst_2
        <span class="token number">30</span><span class="token operator">:</span> putfield      #<span class="token number">3</span>                  <span class="token comment">// Field finallyBlock:I</span>
        <span class="token number">33</span><span class="token operator">:</span> aload_2
        <span class="token number">34</span><span class="token operator">:</span> athrow
        <span class="token number">35</span><span class="token operator">:</span> aload_0
        <span class="token number">36</span><span class="token operator">:</span> iconst_3
        <span class="token number">37</span><span class="token operator">:</span> putfield      #<span class="token number">6</span>                  <span class="token comment">// Field methodExit:I</span>
        <span class="token number">40</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">Exception</span> table<span class="token operator">:</span>
         from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type
             <span class="token number">0</span>     <span class="token number">5</span>    <span class="token number">13</span>   <span class="token class-name">Class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span>
             <span class="token number">0</span>     <span class="token number">5</span>    <span class="token number">27</span>   any
            <span class="token number">13</span>    <span class="token number">19</span>    <span class="token number">27</span>   any
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">0</span>
        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">5</span>
        line <span class="token number">14</span><span class="token operator">:</span> <span class="token number">10</span>
        line <span class="token number">10</span><span class="token operator">:</span> <span class="token number">13</span>
        line <span class="token number">11</span><span class="token operator">:</span> <span class="token number">14</span>
        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">19</span>
        line <span class="token number">14</span><span class="token operator">:</span> <span class="token number">24</span>
        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">27</span>
        line <span class="token number">14</span><span class="token operator">:</span> <span class="token number">33</span>
        line <span class="token number">15</span><span class="token operator">:</span> <span class="token number">35</span>
        line <span class="token number">16</span><span class="token operator">:</span> <span class="token number">40</span>
      <span class="token class-name">StackMapTable</span><span class="token operator">:</span> number_of_entries <span class="token operator">=</span> <span class="token number">3</span>
        frame_type <span class="token operator">=</span> <span class="token number">77</span> <span class="token comment">/* same_locals_1_stack_item */</span>
          stack <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span> <span class="token punctuation">]</span>
        frame_type <span class="token operator">=</span> <span class="token number">77</span> <span class="token comment">/* same_locals_1_stack_item */</span>
          stack <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Throwable</span> <span class="token punctuation">]</span>
        frame_type <span class="token operator">=</span> <span class="token number">7</span> <span class="token comment">/* same */</span>
<span class="token punctuation">}</span>
<span class="token class-name">SourceFile</span><span class="token operator">:</span> <span class="token string">&quot;Foo.java&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面我用到了两个选项。第一个选项是 -p。默认情况下 javap 会打印所有非私有的字段和方法，当加了 -p 选项后，它还将打印私有的字段和方法。第二个选项是 -v。它尽可能地打印所有信息。如果你只需要查阅方法对应的字节码，那么可以用 -c 选项来替换 -v。</p><p>javap 的 -v 选项的输出分为几大块。</p><p>\\1. 基本信息，涵盖了原 class 文件的相关信息。</p><p>class 文件的版本号（minor version: 0，major version: 54），该类的访问权限（flags: (0x0021) ACC_PUBLIC, ACC_SUPER），该类（this_class: #7）以及父类（super_class: #8）的名字，所实现接口（interfaces: 0）、字段（fields: 4）、方法（methods: 2）以及属性（attributes: 1）的数目。</p><p>这里属性指的是 class 文件所携带的辅助信息，比如该 class 文件的源文件的名称。这类信息通常被用于 Java 虚拟机的验证和运行，以及 Java 程序的调试，一般无须深入了解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Classfile</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>/<span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span>
  <span class="token class-name">Last</span> modified <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> size <span class="token number">541</span> bytes
  <span class="token constant">MD5</span> checksum <span class="token number">3828</span>cdfbba56fea1da6c8d94fd13b20d
  <span class="token class-name">Compiled</span> from <span class="token string">&quot;Foo.java&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span>
  minor version<span class="token operator">:</span> <span class="token number">0</span>
  major version<span class="token operator">:</span> <span class="token number">54</span>
  flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0021</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_SUPER</span>
  this_class<span class="token operator">:</span> #<span class="token number">7</span>                          <span class="token comment">// Foo</span>
  super_class<span class="token operator">:</span> #<span class="token number">8</span>                         <span class="token comment">// java/lang/Object</span>
  interfaces<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> fields<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> methods<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> attributes<span class="token operator">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>class 文件的版本号指的是编译生成该 class 文件时所用的 JRE 版本。由较新的 JRE 版本中的 javac 编译而成的 class 文件，不能在旧版本的 JRE 上跑，否则，会出现如下异常信息。（Java 8 对应的版本号为 52，Java 10 对应的版本号为 54。）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>UnsupportedClassVersionError</span><span class="token operator">:</span> <span class="token class-name">Foo</span> has been compiled by a more recent version of the <span class="token class-name">Java</span> <span class="token class-name">Runtime</span> <span class="token punctuation">(</span><span class="token keyword">class</span> file version <span class="token number">54.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span> version of the <span class="token class-name">Java</span> <span class="token class-name">Runtime</span> only recognizes <span class="token keyword">class</span> file versions up <span class="token keyword">to</span> <span class="token number">52.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类的访问权限通常为 ACC_ 开头的常量。具体每个常量的意义可以查阅 Java 虚拟机规范 4.1 小节[1]。</p><p>\\2. 常量池，用来存放各种常量以及符号引用。</p><p>常量池中的每一项都有一个对应的索引（如 #1），并且可能引用其他的常量池项（#1 = Methodref #8.#23）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Constant</span> pool<span class="token operator">:</span>
   #<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">8.</span>#<span class="token number">23</span>         <span class="token comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
   #<span class="token number">8</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">30</span>            <span class="token comment">// java/lang/Object</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  #<span class="token number">14</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span>
  #<span class="token number">15</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  #<span class="token number">23</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">14</span><span class="token operator">:</span>#<span class="token number">15</span>        <span class="token comment">// &quot;&lt;init&gt;&quot;:()V</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  #<span class="token number">30</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例来说，上图中的 1 号常量池项是一个指向 Object 类构造器的符号引用。它是由另外两个常量池项所构成。如果将它看成一个树结构的话，那么它的叶节点会是字符串常量，如下图所示。</p><figure><img src="`+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>\\3. 字段区域，用来列举该类中的各个字段。</p><p>这里最主要的信息便是该字段的类型（descriptor: I）以及访问权限（flags: (0x0002) ACC_PRIVATE）。对于声明为 final 的静态字段而言，如果它是基本类型或者字符串类型，那么字段区域还将包括它的常量值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token keyword">int</span> tryBlock<span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token class-name">I</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0002</span><span class="token punctuation">)</span> <span class="token constant">ACC_PRIVATE</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，Java 虚拟机同样使用了“描述符”（descriptor）来描述字段的类型。具体的对照如下表所示。其中比较特殊的，我已经高亮显示。</p><p>\\4. 方法区域，用来列举该类中的各个方法。</p><p>除了方法描述符以及访问权限之外，每个方法还包括最为重要的代码区域（Code:)。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span><span class="token operator">:</span> aload_0
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">35</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token number">34</span><span class="token operator">:</span> athrow
        <span class="token number">35</span><span class="token operator">:</span> aload_0
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token number">40</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">Exception</span> table<span class="token operator">:</span>
         from    <span class="token keyword">to</span>  <span class="token namespace">target</span> type
             <span class="token number">0</span>     <span class="token number">5</span>    <span class="token number">13</span>   <span class="token class-name">Class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span>
             <span class="token number">0</span>     <span class="token number">5</span>    <span class="token number">27</span>   any
            <span class="token number">13</span>    <span class="token number">19</span>    <span class="token number">27</span>   any
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        line <span class="token number">16</span><span class="token operator">:</span> <span class="token number">40</span>
      <span class="token class-name">StackMapTable</span><span class="token operator">:</span> number_of_entries <span class="token operator">=</span> <span class="token number">3</span>
        frame_type <span class="token operator">=</span> <span class="token number">77</span> <span class="token comment">/* same_locals_1_stack_item */</span>
          stack <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token keyword">class</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span> <span class="token punctuation">]</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码区域一开始会声明该方法中的操作数栈（stack=2）和局部变量数目（locals=3）的最大值，以及该方法接收参数的个数（args_size=1）。注意这里局部变量指的是字节码中的局部变量，而非 Java 程序中的局部变量。</p><p>接下来则是该方法的字节码。每条字节码均标注了对应的偏移量（bytecode index，BCI），这是用来定位字节码的。比如说偏移量为 10 的跳转字节码 10: goto 35，将跳转至偏移量为 35 的字节码 35: aload_0。</p><p>紧跟着的异常表（Exception table:）也会使用偏移量来定位每个异常处理器所监控的范围（由 from 到 to 的代码区域），以及异常处理器的起始位置（target）。除此之外，它还会声明所捕获的异常类型（type）。其中，any 指代任意异常类型。</p><p>再接下来的行数表（LineNumberTable:）则是 Java 源程序到字节码偏移量的映射。如果你在编译时使用了 -g 参数（javac -g Foo.java），那么这里还将出现局部变量表（LocalVariableTable:），展示 Java 程序中每个局部变量的名字、类型以及作用域。</p><p>行数表和局部变量表均属于调试信息。Java 虚拟机并不要求 class 文件必备这些信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
           <span class="token number">14</span>       <span class="token number">5</span>     <span class="token number">1</span>     e   <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Exception</span><span class="token punctuation">;</span>
            <span class="token number">0</span>      <span class="token number">41</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">LFoo</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后则是字节码操作数栈的映射表（StackMapTable: number_of_entries = 3）。该表描述的是字节码跳转后操作数栈的分布情况，一般被 Java 虚拟机用于验证所加载的类，以及即时编译相关的一些操作，正常情况下，你无须深入了解。</p><p><strong>2.OpenJDK 项目 Code Tools：实用小工具集</strong></p><p>OpenJDK 的 Code Tools 项目[2]包含了好几个实用的小工具。</p><p>在第一篇的实践环节中，我们使用了其中的字节码汇编器反汇编器 ASMTools[3]，当前 6.0 版本的下载地址位于[4]。ASMTools 的反汇编以及汇编操作所对应的命令分别为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>$ java <span class="token operator">-</span>cp <span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>asmtools<span class="token punctuation">.</span>jar <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>asmtools<span class="token punctuation">.</span>jdis<span class="token punctuation">.</span></span>Main</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&gt;</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>jasm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>$ java <span class="token operator">-</span>cp <span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>asmtools<span class="token punctuation">.</span>jar <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>asmtools<span class="token punctuation">.</span>jasm<span class="token punctuation">.</span></span>Main</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>jasm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该反汇编器的输出格式和 javap 的不尽相同。一般我只使用它来进行一些简单的字节码修改，以此生成无法直接由 Java 编译器生成的类，它在 HotSpot 虚拟机自身的测试中比较常见。</p><p>在第一篇的实践环节中，我们需要将整数 2 赋值到一个声明为 boolean 类型的局部变量中。我采取的做法是将编译生成的 class 文件反汇编至一个文本文件中，然后找到 boolean flag = true 对应的字节码序列，也就是下面的两个。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>iconst_1<span class="token punctuation">;</span>
istore_1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将这里的 iconst_1 改为 iconst_2[5]，保存后再汇编至 class 文件即可完成第一篇实践环节的需求。</p><p>除此之外，你还可以利用这一套工具来验证我之前文章中的一些结论。比如我说过 class 文件允许出现参数类型相同、而返回类型不同的方法，并且，在作为库文件时 Java 编译器将使用先定义的那一个，来决定具体的返回类型。</p><p>具体的验证方法便是在反汇编之后，利用文本编辑工具复制某一方法，并且更改该方法的描述符，保存后再汇编至 class 文件。</p><p>Code Tools 项目还包含另一个实用的小工具 JOL[6]，当前 0.9 版本的下载地址位于[7]。JOL 可用于查阅 Java 虚拟机中对象的内存分布，具体可通过如下两条指令来实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>$ java <span class="token operator">-</span>jar <span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>jol<span class="token operator">-</span>cli<span class="token operator">-</span><span class="token number">0.9</span><span class="token operator">-</span>full<span class="token punctuation">.</span>jar internals <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span>
$ java <span class="token operator">-</span>jar <span class="token operator">/</span>path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span>jol<span class="token operator">-</span>cli<span class="token operator">-</span><span class="token number">0.9</span><span class="token operator">-</span>full<span class="token punctuation">.</span>jar estimates <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.ASM：Java 字节码框架</strong></p><p>ASM[8]是一个字节码分析及修改框架。它被广泛应用于许多项目之中，例如 Groovy、Kotlin 的编译器，代码覆盖测试工具 Cobertura、JaCoCo，以及各式各样通过字节码注入实现的程序行为监控工具。甚至是 Java 8 中 Lambda 表达式的适配器类，也是借助 ASM 来动态生成的。</p><p>ASM 既可以生成新的 class 文件，也可以修改已有的 class 文件。前者相对比较简单一些。ASM 甚至还提供了一个辅助类 ASMifier，它将接收一个 class 文件并且输出一段生成该 class 文件原始字节数组的代码。如果你想快速上手 ASM 的话，那么你可以借助 ASMifier 生成的代码来探索各个 API 的用法。</p><p>下面我将借助 ASMifier，来生成第一篇实践环节所用到的类。（你可以通过该地址[9]下载 6.0-beta 版。）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>$ echo &#39;
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Java!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, JVM!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>&#39; <span class="token operator">&gt;</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>java
# 这里的javac我使用的是<span class="token class-name">Java</span> <span class="token number">8</span>版本的。<span class="token constant">ASM</span> <span class="token number">6.0</span>可能暂不支持新版本的javac编译出来的<span class="token keyword">class</span>文件
$ javac <span class="token class-name">Foo</span><span class="token punctuation">.</span>java
$ java <span class="token operator">-</span>cp <span class="token operator">/</span><span class="token constant">PATH</span><span class="token operator">/</span><span class="token constant">TO</span><span class="token operator">/</span>asm<span class="token operator">-</span>all<span class="token operator">-</span><span class="token number">6.0_</span><span class="token constant">BETA</span><span class="token punctuation">.</span>jar <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ASMifier</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">|</span> tee <span class="token class-name">FooDump</span><span class="token punctuation">.</span>java
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooDump</span> <span class="token keyword">implements</span> <span class="token class-name">Opcodes</span> <span class="token punctuation">{</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dump <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

<span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FieldVisitor</span> fv<span class="token punctuation">;</span>
<span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">;</span>
<span class="token class-name">AnnotationVisitor</span> av0<span class="token punctuation">;</span>

cw<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token constant">V1_8</span><span class="token punctuation">,</span> <span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_SUPER</span><span class="token punctuation">,</span> <span class="token string">&quot;Foo&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/Object&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">{</span>
mv <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token constant">ACC_PUBLIC</span> <span class="token operator">+</span> <span class="token constant">ACC_STATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;([Ljava/lang/String;)V&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">ICONST_1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ISTORE</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ILOAD</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">RETURN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，ASMifier 生成的代码中包含一个名为 FooDump 的类，其中定义了一个名为 dump 的方法。该方法将返回一个 byte 数组，其值为生成类的原始字节。</p><p>在 dump 方法中，我们新建了功能类 ClassWriter 的一个实例，并通过它来访问不同的成员，例如方法、字段等等。</p><p>每当访问一种成员，我们便会得到另一个访问者。在上面这段代码中，当我们访问方法时（即 visitMethod），便会得到一个 MethodVisitor。在接下来的代码中，我们会用这个 MethodVisitor 来访问（这里等同于生成）具体的指令。</p><p>这便是 ASM 所使用的访问者模式。当然，这段代码仅包含 ClassWriter 这一个访问者，因此看不出具体有什么好处。</p><p>我们暂且不管这个访问者模式，先来看看如何实现第一篇课后实践的要求。首先，main 方法中的 boolean flag = true; 语句对应的代码是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">ICONST_1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mv<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ISTORE</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，我们只需将这里的 ICONST_1 更改为 ICONST_2，便可以满足要求。下面我用另一个类 Wrapper，来调用修改过后的 FooDump.dump 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>$ echo &#39;<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wrapper</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Foo.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">FooDump</span><span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>&#39; <span class="token operator">&gt;</span> <span class="token class-name">Wrapper</span><span class="token punctuation">.</span>java
$ javac <span class="token operator">-</span>cp <span class="token operator">/</span><span class="token constant">PATH</span><span class="token operator">/</span><span class="token constant">TO</span><span class="token operator">/</span>asm<span class="token operator">-</span>all<span class="token operator">-</span><span class="token number">6.0_</span><span class="token constant">BETA</span><span class="token punctuation">.</span>jar <span class="token class-name">FooDump</span><span class="token punctuation">.</span>java <span class="token class-name">Wrapper</span><span class="token punctuation">.</span>java
$ java <span class="token operator">-</span>cp <span class="token operator">/</span><span class="token constant">PATH</span><span class="token operator">/</span><span class="token constant">TO</span><span class="token operator">/</span>asm<span class="token operator">-</span>all<span class="token operator">-</span><span class="token number">6.0_</span><span class="token constant">BETA</span><span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token punctuation">.</span> <span class="token class-name">Wrapper</span>
$ java <span class="token class-name">Foo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的输出结果应和通过 ASMTools 修改的结果一致。</p><p>通过 ASM 来修改已有 class 文件则相对复杂一些。不过我们可以从下面这段简单的代码来开始学起：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassReader</span> cr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span><span class="token string">&quot;Foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token class-name">ClassWriter</span><span class="token punctuation">.</span><span class="token constant">COMPUTE_FRAMES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cr<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>cw<span class="token punctuation">,</span> <span class="token class-name">ClassReader</span><span class="token punctuation">.</span><span class="token constant">SKIP_FRAMES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Foo.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的功能便是读取一个 class 文件，将之转换为 ASM 的数据结构，然后再转换为原始字节数组。其中，我使用了两个功能类。除了已经介绍过的 ClassWriter 外，还有一个 ClassReader。</p><p>ClassReader 将读取“Foo”类的原始字节，并且翻译成对应的访问请求。也就是说，在上面 ASMifier 生成的代码中的各个访问操作，现在都交给 ClassReader.accept 这一方法来发出了。</p><p>那么，如何修改这个 class 文件的字节码呢？原理很简单，就是将 ClassReader 的访问请求发给另外一个访问者，再由这个访问者委派给 ClassWriter。</p><p>这样一来，新增操作可以通过在某一需要转发的请求后面附带新的请求来实现；删除操作可以通过不转发请求来实现；修改操作可以通过忽略原请求，新建并发出另外的请求来实现。</p><figure><img src="`+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ASMHelper</span> <span class="token keyword">implements</span> <span class="token class-name">Opcodes</span> <span class="token punctuation">{</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyMethodVisitor</span> <span class="token keyword">extends</span> <span class="token class-name">MethodVisitor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">MyMethodVisitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">,</span> <span class="token class-name">MethodVisitor</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>mv <span class="token operator">=</span> mv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      mv<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      mv<span class="token punctuation">.</span><span class="token function">visitFieldInsn</span><span class="token punctuation">(</span><span class="token constant">GETSTATIC</span><span class="token punctuation">,</span> <span class="token string">&quot;java/lang/System&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;out&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Ljava/io/PrintStream;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      mv<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      mv<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKEVIRTUAL</span><span class="token punctuation">,</span> <span class="token string">&quot;java/io/PrintStream&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;println&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;(Ljava/lang/String;)V&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      mv<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">RETURN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      mv<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      mv<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyClassVisitor</span> <span class="token keyword">extends</span> <span class="token class-name">ClassVisitor</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">MyClassVisitor</span><span class="token punctuation">(</span><span class="token keyword">int</span> api<span class="token punctuation">,</span> <span class="token class-name">ClassVisitor</span> cv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> cv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> descriptor<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">MethodVisitor</span> visitor <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyMethodVisitor</span><span class="token punctuation">(</span><span class="token constant">ASM6</span><span class="token punctuation">,</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> visitor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">ClassReader</span> cr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span><span class="token string">&quot;Foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ClassWriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token class-name">ClassWriter</span><span class="token punctuation">.</span><span class="token constant">COMPUTE_FRAMES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ClassVisitor</span> cv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassVisitor</span><span class="token punctuation">(</span><span class="token constant">ASM6</span><span class="token punctuation">,</span> cw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cr<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>cv<span class="token punctuation">,</span> <span class="token class-name">ClassReader</span><span class="token punctuation">.</span><span class="token constant">SKIP_FRAMES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;Foo.class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我贴了一段代码，在 ClassReader 和 ClassWriter 中间插入了一个自定义的访问者 MyClassVisitor。它将截获由 ClassReader 发出的对名字为“main”的方法的访问请求，并且替换为另一个自定义的 MethodVisitor。</p><p>这个 MethodVisitor 会忽略由 ClassReader 发出的任何请求，仅在遇到 visitCode 请求时，生成一句“System.out.println(“Hello World!”);”。</p><p>由于篇幅的限制，我就不继续深入介绍下去了。如果你对 ASM 有浓厚的兴趣，可以参考这篇教程[10]。</p><p>你对这些常用工具还有哪些问题呢？可以给我留言，我们一起讨论。感谢你的收听，我们下期再见。</p><p>[1]</p>`,77),d={href:"https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1",target:"_blank",rel:"noopener noreferrer"},m=s("p",null,"[2]",-1),v={href:"http://openjdk.java.net/projects/code-tools/",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,"[3]",-1),g={href:"https://wiki.openjdk.java.net/display/CodeTools/asmtools",target:"_blank",rel:"noopener noreferrer"},f=s("p",null,"[4]",-1),y={href:"https://adopt-openjdk.ci.cloudbees.com/view/OpenJDK/job/asmtools/lastSuccessfulBuild/artifact/asmtools-6.0.tar.gz",target:"_blank",rel:"noopener noreferrer"},j=s("p",null,"[5]",-1),w={href:"https://cs.au.dk/~mis/dOvs/jvmspec/ref--21.html",target:"_blank",rel:"noopener noreferrer"},_=s("p",null,"[6]",-1),h={href:"http://openjdk.java.net/projects/code-tools/jol/",target:"_blank",rel:"noopener noreferrer"},C=s("p",null,"[7]",-1),A={href:"http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar",target:"_blank",rel:"noopener noreferrer"},M=s("p",null,"[8]",-1),x={href:"https://asm.ow2.io/",target:"_blank",rel:"noopener noreferrer"},S=s("p",null,"[9]",-1),F={href:"https://repository.ow2.org/nexus/content/repositories/releases/org/ow2/asm/asm-all/6.0_BETA/asm-all-6.0_BETA.jar",target:"_blank",rel:"noopener noreferrer"},T=s("p",null,"[10]",-1),I={href:"http://web.cs.ucla.edu/~msb/cs239-tutorial/",target:"_blank",rel:"noopener noreferrer"};function E(q,V){const a=t("ExternalLinkIcon");return o(),c("div",null,[k,s("p",null,[n(""),s("a",d,[n("https://docs.oracle.com/javase/specs/jvms/se10/html/jvms-4.html#jvms-4.1"),p(a)])]),m,s("p",null,[n(""),s("a",v,[n("http://openjdk.java.net/projects/code-tools/"),p(a)])]),b,s("p",null,[n(""),s("a",g,[n("https://wiki.openjdk.java.net/display/CodeTools/asmtools"),p(a)])]),f,s("p",null,[n(""),s("a",y,[n("https://adopt-openjdk.ci.cloudbees.com/view/OpenJDK/job/asmtools/lastSuccessfulBuild/artifact/asmtools-6.0.tar.gz"),p(a)])]),j,s("p",null,[n(""),s("a",w,[n("https://cs.au.dk/~mis/dOvs/jvmspec/ref--21.html"),p(a)])]),_,s("p",null,[n(""),s("a",h,[n("http://openjdk.java.net/projects/code-tools/jol/"),p(a)])]),C,s("p",null,[n(""),s("a",A,[n("http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar"),p(a)])]),M,s("p",null,[n(""),s("a",x,[n("https://asm.ow2.io/"),p(a)])]),S,s("p",null,[n(""),s("a",F,[n("https://repository.ow2.org/nexus/content/repositories/releases/org/ow2/asm/asm-all/6.0_BETA/asm-all-6.0_BETA.jar"),p(a)])]),T,s("p",null,[n(""),s("a",I,[n("http://web.cs.ucla.edu/~msb/cs239-tutorial/"),p(a)])])])}const U=e(r,[["render",E],["__file","R29-常用工具介绍.html.vue"]]);export{U as default};
