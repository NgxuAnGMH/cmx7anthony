import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/85dbd081f523fdedb71c34f091989eb1-a33845e5.jpg",e={},o=p(`<h1 id="_21-土地需求扩大与保障-如何分配和释放虚拟内存" tabindex="-1"><a class="header-anchor" href="#_21-土地需求扩大与保障-如何分配和释放虚拟内存" aria-hidden="true">#</a> 21 | 土地需求扩大与保障：如何分配和释放虚拟内存？</h1><p>你好，我是 LMOS。</p><p>今天，我们继续研究操作系统如何实现虚拟内存。在上节课，我们已经建立了虚拟内存的初始流程，这节课我们来实现虚拟内存的核心功能：写出分配、释放虚拟地址空间的代码，最后实现虚拟地址空间到物理地址空间的映射。</p><p>这节课的配套代码，你可以点击这里下载。</p><h2 id="虚拟地址的空间的分配与释放" tabindex="-1"><a class="header-anchor" href="#虚拟地址的空间的分配与释放" aria-hidden="true">#</a> 虚拟地址的空间的分配与释放</h2><p>通过上节课的学习，我们知道整个虚拟地址空间就是由一个个虚拟地址区间组成的。那么不难猜到，分配一个虚拟地址空间就是在整个虚拟地址空间分割出一个区域，而释放一块虚拟地址空间，就是把这个区域合并到整个虚拟地址空间中去。</p><h2 id="虚拟地址空间分配接口-krlvadrsmem-c" tabindex="-1"><a class="header-anchor" href="#虚拟地址空间分配接口-krlvadrsmem-c" aria-hidden="true">#</a> 虚拟地址空间分配接口: krlvadrsmem.c</h2><p>我们先来研究地址的分配，依然从虚拟地址空间的分配接口开始实现，一步步带着你完成虚拟 空间的分配。</p><p>在我们的想像中，分配虚拟地址空间应该有大小、有类型、有相关标志，还有从哪里开始分配等信息。根据这些信息，我们在 <code>krlvadrsmem.c</code> 文件中设计好分配虚拟地址空间的接口，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">adr_t</span> <span class="token function">vma_new_vadrs_core</span><span class="token punctuation">(</span><span class="token class-name">mmadrsdsc_t</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> start<span class="token punctuation">,</span> <span class="token class-name">size_t</span> vassize<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> vaslimits<span class="token punctuation">,</span> <span class="token class-name">u32_t</span> vastype<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">adr_t</span> retadrs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span>newkmvd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>currkmvd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">virmemadrs_t</span> <span class="token operator">*</span>vma <span class="token operator">=</span> <span class="token operator">&amp;</span>mm<span class="token operator">-&gt;</span>msd_virmemadrs<span class="token punctuation">;</span>
    <span class="token function">knl_spinlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vma<span class="token operator">-&gt;</span>vs_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//查找虚拟地址区间</span>
    currkmvd <span class="token operator">=</span> <span class="token function">vma_find_kmvarsdsc</span><span class="token punctuation">(</span>vma<span class="token punctuation">,</span> start<span class="token punctuation">,</span> vassize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> currkmvd<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        retadrs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//进行虚拟地址区间进行检查看能否复用这个数据结构</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> start<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> currkmvd<span class="token operator">-&gt;</span>kva_end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>vaslimits <span class="token operator">==</span> currkmvd<span class="token operator">-&gt;</span>kva_limits<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>vastype <span class="token operator">==</span> currkmvd<span class="token operator">-&gt;</span>kva_maptype<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//能复用的话，当前虚拟地址区间的结束地址返回</span>
        retadrs <span class="token operator">=</span> currkmvd<span class="token operator">-&gt;</span>kva_end<span class="token punctuation">;</span>
        <span class="token comment">//扩展当前虚拟地址区间的结束地址为分配虚拟地址区间的大小</span>
        currkmvd<span class="token operator">-&gt;</span>kva_end <span class="token operator">+=</span> vassize<span class="token punctuation">;</span>
        vma<span class="token operator">-&gt;</span>vs_currkmvdsc <span class="token operator">=</span> currkmvd<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//建立一个新的kmvarsdsc_t虚拟地址区间结构</span>
    newkmvd <span class="token operator">=</span> <span class="token function">new_kmvarsdsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> newkmvd<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        retadrs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//如果分配的开始地址为NULL就由系统动态决定</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> start<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//当然是接着当前虚拟地址区间之后开始</span>
        newkmvd<span class="token operator">-&gt;</span>kva_start <span class="token operator">=</span> currkmvd<span class="token operator">-&gt;</span>kva_end<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span><span class="token comment">//否则这个新的虚拟地址区间的开始就是请求分配的开始地址</span>
        newkmvd<span class="token operator">-&gt;</span>kva_start <span class="token operator">=</span> start<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//设置新的虚拟地址区间的结束地址</span>
    newkmvd<span class="token operator">-&gt;</span>kva_end <span class="token operator">=</span> newkmvd<span class="token operator">-&gt;</span>kva_start <span class="token operator">+</span> vassize<span class="token punctuation">;</span>
    newkmvd<span class="token operator">-&gt;</span>kva_limits <span class="token operator">=</span> vaslimits<span class="token punctuation">;</span>
    newkmvd<span class="token operator">-&gt;</span>kva_maptype <span class="token operator">=</span> vastype<span class="token punctuation">;</span>
    newkmvd<span class="token operator">-&gt;</span>kva_mcstruct <span class="token operator">=</span> vma<span class="token punctuation">;</span>
    vma<span class="token operator">-&gt;</span>vs_currkmvdsc <span class="token operator">=</span> newkmvd<span class="token punctuation">;</span>
    <span class="token comment">//将新的虚拟地址区间加入到virmemadrs_t结构中</span>
    <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newkmvd<span class="token operator">-&gt;</span>kva_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>currkmvd<span class="token operator">-&gt;</span>kva_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//看看新的虚拟地址区间是否是最后一个</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">list_is_last</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newkmvd<span class="token operator">-&gt;</span>kva_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vma<span class="token operator">-&gt;</span>vs_list<span class="token punctuation">)</span> <span class="token operator">==</span> TRUE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        vma<span class="token operator">-&gt;</span>vs_endkmvdsc <span class="token operator">=</span> newkmvd<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//返回新的虚拟地址区间的开始地址</span>
    retadrs <span class="token operator">=</span> newkmvd<span class="token operator">-&gt;</span>kva_start<span class="token punctuation">;</span>
out<span class="token operator">:</span>
    <span class="token function">knl_spinunlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vma<span class="token operator">-&gt;</span>vs_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> retadrs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//分配虚拟地址空间的接口</span>
<span class="token class-name">adr_t</span> <span class="token function">vma_new_vadrs</span><span class="token punctuation">(</span><span class="token class-name">mmadrsdsc_t</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> start<span class="token punctuation">,</span> <span class="token class-name">size_t</span> vassize<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> vaslimits<span class="token punctuation">,</span> <span class="token class-name">u32_t</span> vastype<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> mm <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">&gt;</span> vassize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> start<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//进行参数检查，开始地址要和页面（4KB）对齐，结束地址不能超过整个虚拟地址空间</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">0x1000</span> <span class="token operator">&gt;</span> start<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>USER_VIRTUAL_ADDRESS_END <span class="token operator">&lt;</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> vassize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//调用虚拟地址空间分配的核心函数</span>
    <span class="token keyword">return</span> <span class="token function">vma_new_vadrs_core</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token function">VADSZ_ALIGN</span><span class="token punctuation">(</span>vassize<span class="token punctuation">)</span><span class="token punctuation">,</span> vaslimits<span class="token punctuation">,</span> vastype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中依然是接口函数进行参数检查，然后调用核心函数完成实际的工作。在核心函数中，会调用 vma_find_kmvarsdsc 函数去查找 virmemadrs_t 结构中的所有 kmvarsdsc_t 结构，找出合适的虚拟地址区间。</p><p>需要注意的是，<strong>我们允许应用程序指定分配虚拟地址空间的开始地址，也可以由系统决定，但是应用程序指定的话，分配更容易失败，因为很可能指定的开始地址已经被占用了。</strong></p><p>接口的实现并不是很难，接下来我们继续完成核心实现。</p><h2 id="分配时查找虚拟地址区间" tabindex="-1"><a class="header-anchor" href="#分配时查找虚拟地址区间" aria-hidden="true">#</a> 分配时查找虚拟地址区间</h2><p>在前面的核心函数中我写上了 vma_find_kmvarsdsc 函数，但是我们并没有实现它，现在我们就来完成这项工作，主要是根据分配的开始地址和大小，在 virmemadrs_t 结构中查找相应的 kmvarsdsc_t 结构。</p><p>它是如何查找的呢？举个例子吧，比如 virmemadrs_t 结构中有两个 kmvarsdsc_t 结构，A_kmvarsdsc_t 结构表示 0x1000～0x4000 的虚拟地址空间，B_kmvarsdsc_t 结构表示 0x7000～0x9000 的虚拟地址空间。</p><p>这时，我们分配 2KB 的虚拟地址空间，vma_find_kmvarsdsc 函数查找发现 A_kmvarsdsc_t 结构和 B_kmvarsdsc_t 结构之间正好有 0x4000～0x7000 的空间，刚好放得下 0x2000 大小的空间，于是这个函数就会返回 A_kmvarsdsc_t 结构，否则就会继续向后查找。</p><p>明白了原理，我们就来写代码。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//检查kmvarsdsc_t结构</span>
<span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span><span class="token function">vma_find_kmvarsdsc_is_ok</span><span class="token punctuation">(</span><span class="token class-name">virmemadrs_t</span> <span class="token operator">*</span>vmalocked<span class="token punctuation">,</span> <span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span>curr<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> start<span class="token punctuation">,</span> <span class="token class-name">size_t</span> vassize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span>nextkmvd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">adr_t</span> newend <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>vassize<span class="token punctuation">;</span>
    <span class="token comment">//如果curr不是最后一个先检查当前kmvarsdsc_t结构</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">list_is_last</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>curr<span class="token operator">-&gt;</span>kva_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vmalocked<span class="token operator">-&gt;</span>vs_list<span class="token punctuation">)</span> <span class="token operator">==</span> FALSE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//就获取curr的下一个kmvarsdsc_t结构</span>
        nextkmvd <span class="token operator">=</span> <span class="token function">list_next_entry</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token class-name">kmvarsdsc_t</span><span class="token punctuation">,</span> kva_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//由系统动态决定分配虚拟空间的开始地址</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> start<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment">//如果curr的结束地址加上分配的大小小于等于下一个kmvarsdsc_t结构的开始地址就返回curr</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>kva_end <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>vassize<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> nextkmvd<span class="token operator">-&gt;</span>kva_start<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span><span class="token comment">//否则比较应用指定分配的开始、结束地址是不是在curr和下一个kmvarsdsc_t结构之间</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>kva_end <span class="token operator">&lt;=</span> start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newend <span class="token operator">&lt;=</span> nextkmvd<span class="token operator">-&gt;</span>kva_start<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span><span class="token comment">//否则curr为最后一个kmvarsdsc_t结构</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> start<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment">//curr的结束地址加上分配空间的大小是不是小于整个虚拟地址空间</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>kva_end <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>vassize<span class="token punctuation">)</span> <span class="token operator">&lt;</span> vmalocked<span class="token operator">-&gt;</span>vs_isalcend<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span><span class="token comment">//否则比较应用指定分配的开始、结束地址是不是在curr的结束地址和整个虚拟地址空间的结束地址之间</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>kva_end <span class="token operator">&lt;=</span> start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newend <span class="token operator">&lt;</span> vmalocked<span class="token operator">-&gt;</span>vs_isalcend<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//查找kmvarsdsc_t结构</span>
<span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span><span class="token function">vma_find_kmvarsdsc</span><span class="token punctuation">(</span><span class="token class-name">virmemadrs_t</span> <span class="token operator">*</span>vmalocked<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> start<span class="token punctuation">,</span> <span class="token class-name">size_t</span> vassize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span>kmvdcurrent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>curr <span class="token operator">=</span> vmalocked<span class="token operator">-&gt;</span>vs_currkmvdsc<span class="token punctuation">;</span>
    <span class="token class-name">adr_t</span> newend <span class="token operator">=</span> start <span class="token operator">+</span> vassize<span class="token punctuation">;</span>
    <span class="token class-name">list_h_t</span> <span class="token operator">*</span>listpos <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//分配的虚拟空间大小小于4KB不行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0x1000</span> <span class="token operator">&gt;</span> vassize<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//将要分配虚拟地址空间的结束地址大于整个虚拟地址空间 不行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newend <span class="token operator">&gt;</span> vmalocked<span class="token operator">-&gt;</span>vs_isalcend<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> curr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//先检查当前kmvarsdsc_t结构行不行</span>
        kmvdcurrent <span class="token operator">=</span> <span class="token function">vma_find_kmvarsdsc_is_ok</span><span class="token punctuation">(</span>vmalocked<span class="token punctuation">,</span> curr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> vassize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> kmvdcurrent<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> kmvdcurrent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//遍历virmemadrs_t中的所有的kmvarsdsc_t结构</span>
    <span class="token function">list_for_each</span><span class="token punctuation">(</span>listpos<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vmalocked<span class="token operator">-&gt;</span>vs_list<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        curr <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>listpos<span class="token punctuation">,</span> <span class="token class-name">kmvarsdsc_t</span><span class="token punctuation">,</span> kva_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//检查每个kmvarsdsc_t结构</span>
        kmvdcurrent <span class="token operator">=</span> <span class="token function">vma_find_kmvarsdsc_is_ok</span><span class="token punctuation">(</span>vmalocked<span class="token punctuation">,</span> curr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> vassize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> kmvdcurrent<span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment">//如果符合要求就返回</span>
            <span class="token keyword">return</span> kmvdcurrent<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合前面的描述和代码注释，我们发现 <strong>vma_find_kmvarsdsc 函数才是这个分配虚拟地址空间算法的核心实现</strong>，真的这么简单？是的，对分配虚拟地址空间，真的结束了。</p><p>不过，这个分配的虚拟地址空间可以使用吗？这个问题，等我们解决了虚拟地址空间的释放，再来处理。</p><h2 id="虚拟地址空间释放接口" tabindex="-1"><a class="header-anchor" href="#虚拟地址空间释放接口" aria-hidden="true">#</a> 虚拟地址空间释放接口</h2><p>有分配就要有释放，否则再大的虚拟地址空间也会用完，下面我们就来研究如何释放一个虚拟地址空间。我们依然从设计接口开始，这次我们只需要释放的虚拟空间的开始地址和大小就行了。我们来写代码实现吧，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//释放虚拟地址空间的核心函数</span>
<span class="token class-name">bool_t</span> <span class="token function">vma_del_vadrs_core</span><span class="token punctuation">(</span><span class="token class-name">mmadrsdsc_t</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> start<span class="token punctuation">,</span> <span class="token class-name">size_t</span> vassize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">bool_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span>newkmvd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>delkmvd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">virmemadrs_t</span> <span class="token operator">*</span>vma <span class="token operator">=</span> <span class="token operator">&amp;</span>mm<span class="token operator">-&gt;</span>msd_virmemadrs<span class="token punctuation">;</span>
    <span class="token function">knl_spinlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vma<span class="token operator">-&gt;</span>vs_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//查找要释放虚拟地址空间的kmvarsdsc_t结构</span>
    delkmvd <span class="token operator">=</span> <span class="token function">vma_del_find_kmvarsdsc</span><span class="token punctuation">(</span>vma<span class="token punctuation">,</span> start<span class="token punctuation">,</span> vassize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> delkmvd<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//第一种情况要释放的虚拟地址空间正好等于查找的kmvarsdsc_t结构</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>delkmvd<span class="token operator">-&gt;</span>kva_start <span class="token operator">==</span> start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>delkmvd<span class="token operator">-&gt;</span>kva_end <span class="token operator">==</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>vassize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//脱链</span>
        <span class="token function">list_del</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>delkmvd<span class="token operator">-&gt;</span>kva_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//删除kmvarsdsc_t结构</span>
        <span class="token function">del_kmvarsdsc</span><span class="token punctuation">(</span>delkmvd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vma<span class="token operator">-&gt;</span>vs_kmvdscnr<span class="token operator">--</span><span class="token punctuation">;</span>
        rets <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//第二种情况要释放的虚拟地址空间是在查找的kmvarsdsc_t结构的上半部分</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>delkmvd<span class="token operator">-&gt;</span>kva_start <span class="token operator">==</span> start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>delkmvd<span class="token operator">-&gt;</span>kva_end <span class="token operator">&gt;</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>vassize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>    <span class="token comment">//所以直接把查找的kmvarsdsc_t结构的开始地址设置为释放虚拟地址空间的结束地址</span>
        delkmvd<span class="token operator">-&gt;</span>kva_start <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>vassize<span class="token punctuation">;</span>
        rets <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//第三种情况要释放的虚拟地址空间是在查找的kmvarsdsc_t结构的下半部分</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>delkmvd<span class="token operator">-&gt;</span>kva_start <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>delkmvd<span class="token operator">-&gt;</span>kva_end <span class="token operator">==</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>vassize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//所以直接把查找的kmvarsdsc_t结构的结束地址设置为释放虚拟地址空间的开始地址</span>
        delkmvd<span class="token operator">-&gt;</span>kva_end <span class="token operator">=</span> start<span class="token punctuation">;</span>
        rets <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//第四种情况要释放的虚拟地址空间是在查找的kmvarsdsc_t结构的中间</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>delkmvd<span class="token operator">-&gt;</span>kva_start <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>delkmvd<span class="token operator">-&gt;</span>kva_end <span class="token operator">&gt;</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>vassize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//所以要再新建一个kmvarsdsc_t结构来处理释放虚拟地址空间之后的下半虚拟部分地址空间</span>
        newkmvd <span class="token operator">=</span> <span class="token function">new_kmvarsdsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> newkmvd<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
            <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//让新的kmvarsdsc_t结构指向查找的kmvarsdsc_t结构的后半部分虚拟地址空间</span>
        newkmvd<span class="token operator">-&gt;</span>kva_end <span class="token operator">=</span> delkmvd<span class="token operator">-&gt;</span>kva_end<span class="token punctuation">;</span>
        newkmvd<span class="token operator">-&gt;</span>kva_start <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>vassize<span class="token punctuation">;</span>
        <span class="token comment">//和查找到的kmvarsdsc_t结构保持一致</span>
        newkmvd<span class="token operator">-&gt;</span>kva_limits <span class="token operator">=</span> delkmvd<span class="token operator">-&gt;</span>kva_limits<span class="token punctuation">;</span>
        newkmvd<span class="token operator">-&gt;</span>kva_maptype <span class="token operator">=</span> delkmvd<span class="token operator">-&gt;</span>kva_maptype<span class="token punctuation">;</span>
        newkmvd<span class="token operator">-&gt;</span>kva_mcstruct <span class="token operator">=</span> vma<span class="token punctuation">;</span>
        delkmvd<span class="token operator">-&gt;</span>kva_end <span class="token operator">=</span> start<span class="token punctuation">;</span>
        <span class="token comment">//加入链表</span>
        <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newkmvd<span class="token operator">-&gt;</span>kva_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>delkmvd<span class="token operator">-&gt;</span>kva_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        vma<span class="token operator">-&gt;</span>vs_kmvdscnr<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">//是否为最后一个kmvarsdsc_t结构</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">list_is_last</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>newkmvd<span class="token operator">-&gt;</span>kva_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vma<span class="token operator">-&gt;</span>vs_list<span class="token punctuation">)</span> <span class="token operator">==</span> TRUE<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            vma<span class="token operator">-&gt;</span>vs_endkmvdsc <span class="token operator">=</span> newkmvd<span class="token punctuation">;</span>
            vma<span class="token operator">-&gt;</span>vs_currkmvdsc <span class="token operator">=</span> newkmvd<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            vma<span class="token operator">-&gt;</span>vs_currkmvdsc <span class="token operator">=</span> newkmvd<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        rets <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
out<span class="token operator">:</span>
    <span class="token function">knl_spinunlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vma<span class="token operator">-&gt;</span>vs_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//释放虚拟地址空间的接口</span>
<span class="token class-name">bool_t</span> <span class="token function">vma_del_vadrs</span><span class="token punctuation">(</span><span class="token class-name">mmadrsdsc_t</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> start<span class="token punctuation">,</span> <span class="token class-name">size_t</span> vassize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>    <span class="token comment">//对参数进行检查</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> mm <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">&gt;</span> vassize <span class="token operator">||</span> <span class="token constant">NULL</span> <span class="token operator">==</span> start<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//调用核心处理函数</span>
    <span class="token keyword">return</span> <span class="token function">vma_del_vadrs_core</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token function">VADSZ_ALIGN</span><span class="token punctuation">(</span>vassize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合上面的代码和注释，我相信你能够看懂。需要注意的是，处理释放虚拟地址空间的四种情况。</p><p>因为分配虚拟地址空间时，我们<strong>为了节约 kmvarsdsc_t 结构占用的内存空间</strong>，规定只要分配的虚拟地址空间上一个虚拟地址空间是连续且类型相同的，我们就<strong>借用</strong>上一个 kmvarsdsc_t 结构，而不是重新分配一个 kmvarsdsc_t 结构表示新分配的虚拟地址空间。</p><p>你可以想像一下，一个应用每次分配一个页面的虚拟地址空间，不停地分配，而每个新分配的虚拟地址空间都有一个 kmvarsdsc_t 结构对应，这样物理内存将很快被耗尽。</p><h2 id="释放时查找虚拟地址区间" tabindex="-1"><a class="header-anchor" href="#释放时查找虚拟地址区间" aria-hidden="true">#</a> 释放时查找虚拟地址区间</h2><p>上面释放虚拟地址空间的核心处理函数 vma_del_vadrs_core 函数中，调用了 vma_del_find_kmvarsdsc 函数，用于查找要释放虚拟地址空间的 kmvarsdsc_t 结构，可是为什么不用分配虚拟地址空间时那个查找函数（vma_find_kmvarsdsc）呢？</p><p>这是因为释放时查找的要求不一样。释放时仅仅需要保证，释放的虚拟地址空间的开始地址和结束地址，他们落在某一个 kmvarsdsc_t 结构表示的虚拟地址区间就行，所以我们还是另写一个函数，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span><span class="token function">vma_del_find_kmvarsdsc</span><span class="token punctuation">(</span><span class="token class-name">virmemadrs_t</span> <span class="token operator">*</span>vmalocked<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> start<span class="token punctuation">,</span> <span class="token class-name">size_t</span> vassize<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span>curr <span class="token operator">=</span> vmalocked<span class="token operator">-&gt;</span>vs_currkmvdsc<span class="token punctuation">;</span>
    <span class="token class-name">adr_t</span> newend <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span>vassize<span class="token punctuation">;</span>
    <span class="token class-name">list_h_t</span> <span class="token operator">*</span>listpos <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> curr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//释放的虚拟地址空间落在了当前kmvarsdsc_t结构表示的虚拟地址区间</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>curr<span class="token operator">-&gt;</span>kva_start<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> start <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newend <span class="token operator">&lt;=</span> curr<span class="token operator">-&gt;</span>kva_end<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//遍历所有的kmvarsdsc_t结构</span>
    <span class="token function">list_for_each</span><span class="token punctuation">(</span>listpos<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vmalocked<span class="token operator">-&gt;</span>vs_list<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        curr <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>listpos<span class="token punctuation">,</span> <span class="token class-name">kmvarsdsc_t</span><span class="token punctuation">,</span> kva_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//释放的虚拟地址空间是否落在了其中的某个kmvarsdsc_t结构表示的虚拟地址区间</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> curr<span class="token operator">-&gt;</span>kva_start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newend <span class="token operator">&lt;=</span> curr<span class="token operator">-&gt;</span>kva_end<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>释放时，查找虚拟地址区间的函数非常简单，仅仅是检查释放的虚拟地址空间是否落在查找 kmvarsdsc_t 结构表示的虚拟地址区间中，而可能的四种变换形式，交给核心释放函数处理。到这里，我们释放虚拟地址空间的功能就实现了。</p><h2 id="测试环节-虚拟空间能正常访问么" tabindex="-1"><a class="header-anchor" href="#测试环节-虚拟空间能正常访问么" aria-hidden="true">#</a> 测试环节：虚拟空间能正常访问么？</h2><p>我们已经实现了虚拟地址空间的分配和释放，但是我们从未访问过分配的虚拟地址空间，也不知道能不能访问，会有什么我们没有预想到的结果。保险起见，我们这就进入测试环节，试一试访问一下分配的虚拟地址空间。</p><h3 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h3><p>想要访问一个虚拟地址空间，当然需要先分配一个虚拟地址空间，所以我们要做点准备工作，写点测试代码，分配一个虚拟地址空间并访问它，代码如下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//测试函数</span>
<span class="token keyword">void</span> <span class="token function">test_vadr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token comment">//分配一个0x1000大小的虚拟地址空间</span>
    <span class="token class-name">adr_t</span> vadr <span class="token operator">=</span> <span class="token function">vma_new_vadrs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>initmmadrsdsc<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//返回NULL表示分配失败</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> vadr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;分配虚拟地址空间失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//在刷屏幕上打印分配虚拟地址空间的开始地址</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;分配虚拟地址空间地址:%x\\n&quot;</span><span class="token punctuation">,</span> vadr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;开始写入分配虚拟地址空间\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//访问虚拟地址空间，把这空间全部设置为0</span>
    <span class="token function">hal_memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>vadr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;结束写入分配虚拟地址空间\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">init_kvirmemadrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//……</span>
    <span class="token comment">//调用测试函数</span>
    <span class="token function">test_vadr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你大概已经猜到，这个在 init_kvirmemadrs 函数的最后调用的 test_vadr 函数，一旦执行，一定会发生异常。为了显示这个异常，我们要在异常分发器函数中写点代码。代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//cosmos/hal/x86/halintupt.c</span>
<span class="token keyword">void</span> <span class="token function">hal_fault_allocator</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> faultnumb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>krnlsframp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//打印异常号</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;faultnumb is :%d\\n&quot;</span><span class="token punctuation">,</span> faultnumb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//如果异常号等于14则是内存缺页异常</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>faultnumb <span class="token operator">==</span> <span class="token number">14</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//打印缺页地址，这地址保存在CPU的CR2寄存器中</span>
        <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;异常地址:%x,此地址禁止访问\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">read_cr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//死机，不让这个函数返回了</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码非常简单，下面我们来测试一下，看看最终结果。</p><h3 id="异常情况与原因分析" tabindex="-1"><a class="header-anchor" href="#异常情况与原因分析" aria-hidden="true">#</a> 异常情况与原因分析</h3><p>所有的代码已经准备好了，我们进入 Cosmos 目录下执行 make vboxtest 指令，等 Cosmos 跑起来的时候，你会看到如下所示的情况。</p><img src="`+t+`" alt="img" style="zoom:25%;"><p>访问虚拟地址异常截图</p><p>上图中，显示我们分配了 0x1000 大小的虚拟地址空间，其虚拟地址是 0x5000，接着对这个地址进行访问，最后产生了缺页异常，缺页的地址正是我们分配的虚拟空间的开始地址。</p><p>为什么会发生这个缺页异常呢？因为我们访问了一个虚拟地址，这个虚拟地址由 CPU 发送给 MMU，而 MMU 无法把它转换成对应的物理地址，CPU 的那条访存指令无法执行了，因此就产生一个缺页异常。于是，CPU 跳转到缺页异常处理的入口地址（kernel.asm 文件中的 exc_page_fault 标号处）开始执行代码，处理这个缺页异常。</p><p>因为我们仅仅是分配了一个虚拟地址空间，就对它进行访问，所以才会缺页。既然我们并没有为这个虚拟地址空间分配任何物理内存页面，建立对应的 MMU 页表，那我们可不可以分配虚拟地址空间时，就分配物理内存页面并建立好对应的 MMU 页表呢？</p><p>这当然可以解决问题，但是现实中往往是等到发生缺页异常了，才分配物理内存页面，建立对应的 MMU 页表。**这种延迟内存分配技术在系统工程中非常有用，因为它能最大限度的节约物理内存。**分配的虚拟地址空间，只有实际访问到了才分配对应的物理内存页面。</p><h2 id="开始处理缺页异常-kernel-asm-halintupt-c" tabindex="-1"><a class="header-anchor" href="#开始处理缺页异常-kernel-asm-halintupt-c" aria-hidden="true">#</a> 开始处理缺页异常: kernel.asm/halintupt.c</h2><p>准确地说，缺页异常是从 <code>kernel.asm</code> 文件中的 exc_page_fault 标号处开始，但它只是保存了 CPU 的上下文，然后调用了内核的通用异常分发器函数，最后由异常分发器函数调用不同的异常处理函数，如果是缺页异常，就要调用缺页异常处理的接口函数。</p><p>这个函数之前还没有写呢，下面我们一起来实现它，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//缺页异常处理接口</span>
<span class="token class-name">sint_t</span> <span class="token function">vma_map_fairvadrs</span><span class="token punctuation">(</span><span class="token class-name">mmadrsdsc_t</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> vadrs<span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token comment">//对参数进行检查</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x1000</span> <span class="token operator">&gt;</span> vadrs<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>USER_VIRTUAL_ADDRESS_END <span class="token operator">&lt;</span> vadrs<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> mm<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EPARAM<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//进行缺页异常的核心处理</span>
    <span class="token keyword">return</span> <span class="token function">vma_map_fairvadrs_core</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> vadrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//由异常分发器调用的接口</span>
<span class="token class-name">sint_t</span> <span class="token function">krluserspace_accessfailed</span><span class="token punctuation">(</span><span class="token class-name">adr_t</span> fairvadrs<span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token comment">//这里应该获取当前进程的mm，但是现在我们没有进程，才initmmadrsdsc代替</span>
    <span class="token class-name">mmadrsdsc_t</span><span class="token operator">*</span> mm <span class="token operator">=</span> <span class="token operator">&amp;</span>initmmadrsdsc<span class="token punctuation">;</span>
    <span class="token comment">//应用程序的虚拟地址不可能大于USER_VIRTUAL_ADDRESS_END</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>USER_VIRTUAL_ADDRESS_END <span class="token operator">&lt;</span> fairvadrs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EACCES<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">vma_map_fairvadrs</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> fairvadrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的接口函数非常简单，不过我们要在 cosmos/hal/x86/<code>halintupt.c</code> 文件的异常分发器函数中来调用它，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">hal_fault_allocator</span><span class="token punctuation">(</span><span class="token class-name">uint_t</span> faultnumb<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>krnlsframp<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token class-name">adr_t</span> fairvadrs<span class="token punctuation">;</span>
    <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;faultnumb is :%d\\n&quot;</span><span class="token punctuation">,</span> faultnumb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>faultnumb <span class="token operator">==</span> <span class="token number">14</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>    <span class="token comment">//获取缺页的地址</span>
        fairvadrs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">adr_t</span><span class="token punctuation">)</span><span class="token function">read_cr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">kprint</span><span class="token punctuation">(</span><span class="token string">&quot;异常地址:%x,此地址禁止访问\\n&quot;</span><span class="token punctuation">,</span> fairvadrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">krluserspace_accessfailed</span><span class="token punctuation">(</span>fairvadrs<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span><span class="token comment">//处理缺页失败就死机</span>
            <span class="token function">system_error</span><span class="token punctuation">(</span><span class="token string">&quot;缺页处理失败\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//成功就返回</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口函数和调用流程已经写好了，下面就要真正开始处理缺页了。</p><h2 id="处理缺页异常的核心" tabindex="-1"><a class="header-anchor" href="#处理缺页异常的核心" aria-hidden="true">#</a> 处理缺页异常的核心</h2><p>在前面缺页异常处理接口时，调用了 vma_map_fairvadrs_core 函数，来进行缺页异常的核心处理、那缺页异常处理究竟有哪些操作呢？</p><p>这里给你留个悬念，我先来写个函数，你可以结合自己的观察，想想它做了什么，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">sint_t</span> <span class="token function">vma_map_fairvadrs_core</span><span class="token punctuation">(</span><span class="token class-name">mmadrsdsc_t</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> vadrs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">sint_t</span> rets <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>
    <span class="token class-name">adr_t</span> phyadrs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">virmemadrs_t</span> <span class="token operator">*</span>vma <span class="token operator">=</span> <span class="token operator">&amp;</span>mm<span class="token operator">-&gt;</span>msd_virmemadrs<span class="token punctuation">;</span>
    <span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span>kmvd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">kvmemcbox_t</span> <span class="token operator">*</span>kmbox <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">knl_spinlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vma<span class="token operator">-&gt;</span>vs_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//查找对应的kmvarsdsc_t结构</span>
    kmvd <span class="token operator">=</span> <span class="token function">vma_map_find_kmvarsdsc</span><span class="token punctuation">(</span>vma<span class="token punctuation">,</span> vadrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> kmvd<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//返回kmvarsdsc_t结构下对应kvmemcbox_t结构</span>
    kmbox <span class="token operator">=</span> <span class="token function">vma_map_retn_kvmemcbox</span><span class="token punctuation">(</span>kmvd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> kmbox<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//分配物理内存页面并建立MMU页表</span>
    phyadrs <span class="token operator">=</span> <span class="token function">vma_map_phyadrs</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> kmvd<span class="token punctuation">,</span> vadrs<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">|</span> PML4E_US <span class="token operator">|</span> PML4E_RW <span class="token operator">|</span> PML4E_P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> phyadrs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rets <span class="token operator">=</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
        <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rets <span class="token operator">=</span> EOK<span class="token punctuation">;</span>
out<span class="token operator">:</span>
    <span class="token function">knl_spinunlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vma<span class="token operator">-&gt;</span>vs_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过对上述代码的观察，你就能发现，以上代码中做了三件事。</p><p>首先，查找缺页地址对应的 kmvarsdsc_t 结构，没找到说明没有分配该虚拟地址空间，那属于非法访问不予处理；然后，查找 kmvarsdsc_t 结构下面的对应 kvmemcbox_t 结构，它是用来挂载物理内存页面的；最后，分配物理内存页面并建立 MMU 页表映射关系。</p><p>下面我们分别来实现这三个步骤。</p><h2 id="缺页地址是否合法" tabindex="-1"><a class="header-anchor" href="#缺页地址是否合法" aria-hidden="true">#</a> 缺页地址是否合法</h2><p>要想判断一个缺页地址是否合法，我们就要确定它是不是已经分配的虚拟地址，也就是看这个虚拟地址是不是会落在某个 kmvarsdsc_t 结构表示的虚拟地址区间。</p><p>因此，我们要去查找相应的 kmvarsdsc_t 结构，如果没有找到则虚拟地址没有分配，即这个缺页地址不合法。这个查找 kmvarsdsc_t 结构的函数可以这样写。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span><span class="token function">vma_map_find_kmvarsdsc</span><span class="token punctuation">(</span><span class="token class-name">virmemadrs_t</span> <span class="token operator">*</span>vmalocked<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> vadrs<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">list_h_t</span> <span class="token operator">*</span>pos <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span>curr <span class="token operator">=</span> vmalocked<span class="token operator">-&gt;</span>vs_currkmvdsc<span class="token punctuation">;</span>
    <span class="token comment">//看看上一次刚刚被操作的kmvarsdsc_t结构</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> curr<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//虚拟地址是否落在kmvarsdsc_t结构表示的虚拟地址区间</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>vadrs <span class="token operator">&gt;=</span> curr<span class="token operator">-&gt;</span>kva_start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>vadrs <span class="token operator">&lt;</span> curr<span class="token operator">-&gt;</span>kva_end<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//遍历每个kmvarsdsc_t结构</span>
    <span class="token function">list_for_each</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vmalocked<span class="token operator">-&gt;</span>vs_list<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        curr <span class="token operator">=</span> <span class="token function">list_entry</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token class-name">kmvarsdsc_t</span><span class="token punctuation">,</span> kva_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//虚拟地址是否落在kmvarsdsc_t结构表示的虚拟地址区间</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>vadrs <span class="token operator">&gt;=</span> curr<span class="token operator">-&gt;</span>kva_start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>vadrs <span class="token operator">&lt;</span> curr<span class="token operator">-&gt;</span>kva_end<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> curr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数非常简单，核心逻辑就是用虚拟地址和 kmvarsdsc_t 结构中的数据做比较，大于等于 kmvarsdsc_t 结构的开始地址并且小于 kmvarsdsc_t 结构的结束地址，就行了。</p><h2 id="建立-kvmemcbox-t-结构" tabindex="-1"><a class="header-anchor" href="#建立-kvmemcbox-t-结构" aria-hidden="true">#</a> 建立 kvmemcbox_t 结构</h2><p>kvmemcbox_t 结构可以用来挂载物理内存页面 msadsc_t 结构，而这个 msadsc_t 结构是由虚拟地址区间 kmvarsdsc_t 结构代表的虚拟空间所映射的物理内存页面。一个 kmvarsdsc_t 结构，必须要有一个 kvmemcbox_t 结构，才能分配物理内存。除了这个功能，kvmemcbox_t 结构还可以在内存共享的时候使用。</p><p>现在我们一起来写个函数，实现建立 kvmemcbox_t 结构，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">kvmemcbox_t</span> <span class="token operator">*</span><span class="token function">vma_map_retn_kvmemcbox</span><span class="token punctuation">(</span><span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span>kmvd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">kvmemcbox_t</span> <span class="token operator">*</span>kmbox <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//如果kmvarsdsc_t结构中已经存在了kvmemcbox_t结构，则直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> kmvd<span class="token operator">-&gt;</span>kva_kvmbox<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> kmvd<span class="token operator">-&gt;</span>kva_kvmbox<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//新建一个kvmemcbox_t结构</span>
    kmbox <span class="token operator">=</span> <span class="token function">knl_get_kvmemcbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> kmbox<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//指向这个新建的kvmemcbox_t结构</span>
    kmvd<span class="token operator">-&gt;</span>kva_kvmbox <span class="token operator">=</span> kmbox<span class="token punctuation">;</span>
    <span class="token keyword">return</span> kmvd<span class="token operator">-&gt;</span>kva_kvmbox<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码非常简单，knl_get_kvmemcbox 函数就是调用 kmsob_new 函数分配一个 kvmemcbox_t 结构大小的内存空间对象，然后其中实例化 kvmemcbox_t 结构的变量。</p><h2 id="映射物理内存页面-halmmu-c" tabindex="-1"><a class="header-anchor" href="#映射物理内存页面-halmmu-c" aria-hidden="true">#</a> 映射物理内存页面: halmmu.c</h2><p>好，现在我们正式给虚拟地址分配对应的物理内存页面，建立对应的 MMU 页表，使虚拟地址到物理地址可以转换成功，数据终于能写入到物理内存之中了。</p><p>这个步骤完成，就意味着缺页处理完成了，我们来写代码吧。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">adr_t</span> <span class="token function">vma_map_msa_fault</span><span class="token punctuation">(</span><span class="token class-name">mmadrsdsc_t</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span> <span class="token class-name">kvmemcbox_t</span> <span class="token operator">*</span>kmbox<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> vadrs<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">msadsc_t</span> <span class="token operator">*</span>usermsa<span class="token punctuation">;</span>
    <span class="token class-name">adr_t</span> phyadrs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
   <span class="token comment">//分配一个物理内存页面，挂载到kvmemcbox_t中，并返回对应的msadsc_t结构</span>
    usermsa <span class="token operator">=</span> <span class="token function">vma_new_usermsa</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> kmbox<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> usermsa<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//没有物理内存页面返回NULL表示失败</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取msadsc_t对应的内存页面的物理地址</span>
    phyadrs <span class="token operator">=</span> <span class="token function">msadsc_ret_addr</span><span class="token punctuation">(</span>usermsa<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//建立MMU页表完成虚拟地址到物理地址的映射</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hal_mmu_transform</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mm<span class="token operator">-&gt;</span>msd_mmu<span class="token punctuation">,</span> vadrs<span class="token punctuation">,</span> phyadrs<span class="token punctuation">,</span> flags<span class="token punctuation">)</span> <span class="token operator">==</span> TRUE<span class="token punctuation">)</span>
    <span class="token punctuation">{</span><span class="token comment">//映射成功则返回物理地址</span>
        <span class="token keyword">return</span> phyadrs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//映射失败就要先释放分配的物理内存页面</span>
    <span class="token function">vma_del_usermsa</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> kmbox<span class="token punctuation">,</span> usermsa<span class="token punctuation">,</span> phyadrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//接口函数</span>
<span class="token class-name">adr_t</span> <span class="token function">vma_map_phyadrs</span><span class="token punctuation">(</span><span class="token class-name">mmadrsdsc_t</span> <span class="token operator">*</span>mm<span class="token punctuation">,</span> <span class="token class-name">kmvarsdsc_t</span> <span class="token operator">*</span>kmvd<span class="token punctuation">,</span> <span class="token class-name">adr_t</span> vadrs<span class="token punctuation">,</span> <span class="token class-name">u64_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">kvmemcbox_t</span> <span class="token operator">*</span>kmbox <span class="token operator">=</span> kmvd<span class="token operator">-&gt;</span>kva_kvmbox<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> kmbox<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//调用核心函数，flags表示页表条目中的相关权限、存在、类型等位段</span>
    <span class="token keyword">return</span> <span class="token function">vma_map_msa_fault</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> kmbox<span class="token punctuation">,</span> vadrs<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，调用 vma_map_msa_fault 函数做实际的工作。首先，它会调用 vma_new_usermsa 函数，在 vma_new_usermsa 函数内部调用了我们前面学过的页面内存管理接口，分配一个物理内存页面并把对应的 msadsc_t 结构挂载到 kvmemcbox_t 结构上。</p><p>接着获取 msadsc_t 结构对应内存页面的物理地址，最后是调用 hal_mmu_transform 函数完成虚拟地址到物理地址的映射工作，它主要是建立 MMU 页表，在 cosmos/hal/x86/<code>halmmu.c</code> 文件中，我已经帮你写好了代码，我相信你结合前面 MMU 相关的课程，你一定能看懂。</p><p>vma_map_phyadrs 函数一旦成功返回，就会随着原有的代码路径层层返回。至此，处理缺页异常就结束了。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>今天这节课我们学习了如何实现虚拟内存的分配与释放，现在我把重点为你梳理一下。</p><p>首先，我们实现了虚拟地址空间的分配与释放。这是虚拟内存管理的核心功能，通过查找地址区间结构来确定哪些虚拟地址空间已经分配或者空闲。</p><p>然后我们解决了缺页异常处理问题。我们分配一段虚拟地址空间，并没有分配对应的物理内存页面，而是等到真正访问虚拟地址空间时，才触发了缺页异常。这时，我们再来处理缺页异常中分配物理内存页面的工作，建立对应的 MMU 页表映射关系。<strong>这种延迟分配技术可以有效节约物理内存。</strong></p><p>至此，从物理内存页面管理到内存对象管理再到虚拟内存管理，我们一层一层地建好了 Cosmos 的内存管理组件。内存可以说是专栏的重中之重，以后 Cosmos 内核的其它组件，也都要依赖于内存管理组件。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请问，x86 CPU 的缺页异常，是第几号异常？缺页的地址保存在哪个寄存器中？</p><p>欢迎你在留言区跟我交流互动，也感谢你坚持不懈跟我学习，如果你身边有对内存管理感兴趣的朋友，记得把今天这节课分享给他。</p><p>好，我是 LMOS，我们下节课见。</p>`,88),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(e,[["render",l],["__file","H21-虚拟内存分配与释放.html.vue"]]);export{d as default};
