import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/85f4d83e7ebf2aadf7ffcd5fd393b176-45056362.png",e="/assets/6290b73283063f99d6eb728c26339620-09f6448a.png",o={},c=p(`<h1 id="_34-块设备-上-如何建立代理商销售模式" tabindex="-1"><a class="header-anchor" href="#_34-块设备-上-如何建立代理商销售模式" aria-hidden="true">#</a> 34 | 块设备（上）：如何建立代理商销售模式？</h1><p>上一章，我们解析了文件系统，最后讲文件系统读写的流程到达底层的时候，没有更深入地分析下去，<strong>这是因为文件系统再往下就是硬盘设备了</strong>。上两节，我们解析了字符设备的 mknod、打开和读写流程。那这一节我们就来讲<strong>块设备的 mknod、打开流程，以及文件系统和下层的硬盘设备的读写流程</strong>。</p><p>块设备一般会被格式化为文件系统，但是，下面的讲述中，你可能会有一点困惑。你会看到<strong>各种各样的</strong> dentry 和 inode。块设备涉及<strong>三种文件系统</strong>，所以你看到的这些 dentry 和 inode 可能都不是一回事儿，请注意分辨。</p><h2 id="devtmpfs-文件系统" tabindex="-1"><a class="header-anchor" href="#devtmpfs-文件系统" aria-hidden="true">#</a> devtmpfs 文件系统</h2><p>块设备需要 mknod 吗？对于启动盘，你可能觉得，启动了就在那里了。可是如果我们要插进一块新的 USB 盘，还是要有这个操作的。</p><p>mknod 还是会创建在 /dev 路径下面，这一点和字符设备一样。/dev 路径下面是 devtmpfs 文件系统。<strong>这是块设备遇到的第一个文件系统</strong>。我们会为这个块设备文件，分配一个特殊的 inode，这一点和字符设备也是一样的。只不过字符设备走 S_ISCHR 这个分支，对应 inode 的 file_operations 是 def_chr_fops；而块设备走 S_ISBLK 这个分支，对应的 inode 的 file_operations 是 def_blk_fops。这里要注意，inode 里面的 i_rdev 被设置成了块设备的设备号 dev_t，这个我们后面会用到，你先记住有这么一回事儿。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init_special_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token class-name">umode_t</span> mode<span class="token punctuation">,</span> <span class="token class-name">dev_t</span> rdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISCHR</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inode<span class="token operator">-&gt;</span>i_fop <span class="token operator">=</span> <span class="token operator">&amp;</span>def_chr_fops<span class="token punctuation">;</span>
    inode<span class="token operator">-&gt;</span>i_rdev <span class="token operator">=</span> rdev<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inode<span class="token operator">-&gt;</span>i_fop <span class="token operator">=</span> <span class="token operator">&amp;</span>def_blk_fops<span class="token punctuation">;</span>
    inode<span class="token operator">-&gt;</span>i_rdev <span class="token operator">=</span> rdev<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISFIFO</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    inode<span class="token operator">-&gt;</span>i_fop <span class="token operator">=</span> <span class="token operator">&amp;</span>pipefifo_fops<span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISSOCK</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">;</span>  <span class="token comment">/* leave it no_open_fops */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特殊 inode 的默认 file_operations 是 def_blk_fops，就像字符设备一样，有打开、读写这个块设备文件，但是我们常规操作不会这样做。我们会将这个块设备文件 mount 到一个文件夹下面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> def_blk_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>open           <span class="token operator">=</span> blkdev_open<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>release        <span class="token operator">=</span> blkdev_close<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>llseek         <span class="token operator">=</span> block_llseek<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>read_iter      <span class="token operator">=</span> blkdev_read_iter<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>write_iter     <span class="token operator">=</span> blkdev_write_iter<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>mmap           <span class="token operator">=</span> generic_file_mmap<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>fsync          <span class="token operator">=</span> blkdev_fsync<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>unlocked_ioctl <span class="token operator">=</span> block_ioctl<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>splice_read    <span class="token operator">=</span> generic_file_splice_read<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>splice_write   <span class="token operator">=</span> iter_file_splice_write<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>fallocate      <span class="token operator">=</span> blkdev_fallocate<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，这里我们还是简单看一下，打开这个块设备的操作 blkdev_open。它里面调用的是 blkdev_get 打开这个块设备，了解到这一点就可以了。</p><h2 id="ext4-文件系统" tabindex="-1"><a class="header-anchor" href="#ext4-文件系统" aria-hidden="true">#</a> ext4 文件系统</h2><p>接下来，我们要调用 mount，将这个块设备文件挂载到一个文件夹下面。如果这个块设备原来被格式化为一种文件系统的格式，例如 ext4，那我们调用的就是 ext4 相应的 mount 操作。<strong>这是块设备遇到的第二个文件系统</strong>，也是向这个块设备读写文件，需要基于的主流文件系统。咱们在文件系统那一节解析的对于文件的读写流程，都是基于这个文件系统的。</p><p>还记得，咱们注册 ext4 文件系统的时候，有下面这样的结构：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> ext4_fs_type <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>owner    <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>name    <span class="token operator">=</span> <span class="token string">&quot;ext4&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>mount    <span class="token operator">=</span> ext4_mount<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>kill_sb  <span class="token operator">=</span> kill_block_super<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fs_flags  <span class="token operator">=</span> FS_REQUIRES_DEV<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在将一个硬盘的块设备 mount 成为 ext4 的时候，我们会调用 ext4_mount-&gt;mount_bdev。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span><span class="token function">ext4_mount</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> <span class="token operator">*</span>fs_type<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dev_name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">mount_bdev</span><span class="token punctuation">(</span>fs_type<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> dev_name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> ext4_fill_super<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span><span class="token function">mount_bdev</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> <span class="token operator">*</span>fs_type<span class="token punctuation">,</span>
  <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dev_name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span>
  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fill_super<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>bdev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>
  <span class="token class-name">fmode_t</span> mode <span class="token operator">=</span> FMODE_READ <span class="token operator">|</span> FMODE_EXCL<span class="token punctuation">;</span>
  <span class="token keyword">int</span> error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> MS_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span>
    mode <span class="token operator">|=</span> FMODE_WRITE<span class="token punctuation">;</span>


  bdev <span class="token operator">=</span> <span class="token function">blkdev_get_by_path</span><span class="token punctuation">(</span>dev_name<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> fs_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  s <span class="token operator">=</span> <span class="token function">sget</span><span class="token punctuation">(</span>fs_type<span class="token punctuation">,</span> test_bdev_super<span class="token punctuation">,</span> set_bdev_super<span class="token punctuation">,</span> flags <span class="token operator">|</span> MS_NOSEC<span class="token punctuation">,</span> bdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token function">dget</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_root<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mount_bdev 主要做了两件大事情。</p><ol><li>第一，blkdev_get_by_path 根据 /dev/xxx 这个名字，找到相应的设备并打开它；</li><li>第二，sget 根据打开的设备文件，填充 ext4 文件系统的 super_block，从而以此为基础，建立一整套咱们在文件系统那一章讲的体系。</li></ol><p>一旦这套体系建立起来以后，对于文件的读写都是通过 ext4 文件系统这个体系进行的，创建的 inode 结构也是指向 ext4 文件系统的。文件系统那一章我们只解析了这部分，由于没有到达底层，也就没有关注块设备相关的操作。这一章我们重新回过头来，一方面看 mount 的时候，对于块设备都做了哪些操作，另一方面看读写的时候，到了底层，对于块设备做了哪些操作。</p><p>这里我们先来看 mount_bdev 做的第一件大事情，通过 blkdev_get_by_path，根据设备名 /dev/xxx，得到 struct block_device *bdev。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * blkdev_get_by_path - open a block device by name
 * @path: path to the block device to open
 * @mode: FMODE_* mask
 * @holder: exclusive holder identifier
 *
 * Open the blockdevice described by the device file at @path.  @mode
 * and @holder are identical to blkdev_get().
 *
 * On success, the returned block_device has reference count of one.
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span><span class="token function">blkdev_get_by_path</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token class-name">fmode_t</span> mode<span class="token punctuation">,</span>
          <span class="token keyword">void</span> <span class="token operator">*</span>holder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>bdev<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>


  bdev <span class="token operator">=</span> <span class="token function">lookup_bdev</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  err <span class="token operator">=</span> <span class="token function">blkdev_get</span><span class="token punctuation">(</span>bdev<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> holder<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> bdev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>blkdev_get_by_path 干了两件事情。第一个，lookup_bdev 根据设备路径 /dev/xxx 得到 block_device。第二个，打开这个设备，调用 blkdev_get。</p><p>咱们上面分析过 def_blk_fops 的默认打开设备函数 blkdev_open，它也是调用 blkdev_get 的。块设备的打开往往不是直接调用设备文件的打开函数，而是调用 mount 来打开的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * lookup_bdev  - lookup a struct block_device by name
 * @pathname:  special file representing the block device
 *
 * Get a reference to the blockdevice at @pathname in the current
 * namespace if possible and return it.  Return ERR_PTR(error)
 * otherwise.
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span><span class="token function">lookup_bdev</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>bdev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">path</span> path<span class="token punctuation">;</span>
  <span class="token keyword">int</span> error<span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pathname <span class="token operator">||</span> <span class="token operator">!</span><span class="token operator">*</span>pathname<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">ERR_PTR</span><span class="token punctuation">(</span><span class="token operator">-</span>EINVAL<span class="token punctuation">)</span><span class="token punctuation">;</span>


  error <span class="token operator">=</span> <span class="token function">kern_path</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> LOOKUP_FOLLOW<span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">ERR_PTR</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>


  inode <span class="token operator">=</span> <span class="token function">d_backing_inode</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>dentry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  bdev <span class="token operator">=</span> <span class="token function">bd_acquire</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lookup_bdev 这里的 pathname 是设备的文件名，例如 /dev/xxx。这个文件是在 devtmpfs 文件系统中的，kern_path 可以在这个文件系统里面，一直找到它对应的 dentry。接下来，d_backing_inode 会获得 inode。这个 inode 就是那个 init_special_inode 生成的特殊 inode。</p><p>接下来，bd_acquire 通过这个特殊的 inode，找到 struct block_device。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span><span class="token function">bd_acquire</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>bdev<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  bdev <span class="token operator">=</span> <span class="token function">bdget</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_rdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bdev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bdev_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inode<span class="token operator">-&gt;</span>i_bdev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">/*
       * We take an additional reference to bd_inode,
       * and it&#39;s released in clear_inode() of inode.
       * So, we can access it via -&gt;i_mapping always
       * without igrab().
       */</span>
      <span class="token function">bdgrab</span><span class="token punctuation">(</span>bdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
      inode<span class="token operator">-&gt;</span>i_bdev <span class="token operator">=</span> bdev<span class="token punctuation">;</span>
      inode<span class="token operator">-&gt;</span>i_mapping <span class="token operator">=</span> bdev<span class="token operator">-&gt;</span>bd_inode<span class="token operator">-&gt;</span>i_mapping<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> bdev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bd_acquire 中最主要的就是调用 bdget，它的参数是特殊 inode 的 i_rdev。这里面在 mknod 的时候，放的是设备号 dev_t。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span><span class="token function">bdget</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>bdev<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">;</span>


        inode <span class="token operator">=</span> <span class="token function">iget5_locked</span><span class="token punctuation">(</span>blockdev_superblock<span class="token punctuation">,</span> <span class="token function">hash</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">,</span>
                        bdev_test<span class="token punctuation">,</span> bdev_set<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        bdev <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token function">BDEV_I</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token operator">-&gt;</span>bdev<span class="token punctuation">;</span>


        <span class="token keyword">if</span> <span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_state <span class="token operator">&amp;</span> I_NEW<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                bdev<span class="token operator">-&gt;</span>bd_contains <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                bdev<span class="token operator">-&gt;</span>bd_super <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                bdev<span class="token operator">-&gt;</span>bd_inode <span class="token operator">=</span> inode<span class="token punctuation">;</span>
                bdev<span class="token operator">-&gt;</span>bd_block_size <span class="token operator">=</span> <span class="token function">i_blocksize</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
                bdev<span class="token operator">-&gt;</span>bd_part_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                bdev<span class="token operator">-&gt;</span>bd_invalidated <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">=</span> S_IFBLK<span class="token punctuation">;</span>
                inode<span class="token operator">-&gt;</span>i_rdev <span class="token operator">=</span> dev<span class="token punctuation">;</span>
                inode<span class="token operator">-&gt;</span>i_bdev <span class="token operator">=</span> bdev<span class="token punctuation">;</span>
                inode<span class="token operator">-&gt;</span>i_data<span class="token punctuation">.</span>a_ops <span class="token operator">=</span> <span class="token operator">&amp;</span>def_blk_aops<span class="token punctuation">;</span>
                <span class="token function">mapping_set_gfp_mask</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_data<span class="token punctuation">,</span> GFP_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bdev_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bdev<span class="token operator">-&gt;</span>bd_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>all_bdevs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bdev_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">unlock_new_inode</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bdev<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bdev-伪文件系统" tabindex="-1"><a class="header-anchor" href="#bdev-伪文件系统" aria-hidden="true">#</a> bdev 伪文件系统</h2><p><strong>在 bdget 中，我们遇到了第三个文件系统，bdev 伪文件系统</strong>。bdget 函数根据传进来的 dev_t，在 blockdev_superblock 这个文件系统里面找到 inode。这里注意，这个 inode 已经不是 devtmpfs 文件系统的 inode 了。blockdev_superblock 的初始化在整个系统初始化的时候，会调用 bdev_cache_init 进行初始化。它的定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span>blockdev_superblock __read_mostly<span class="token punctuation">;</span>


<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> bd_type <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span>name           <span class="token operator">=</span> <span class="token string">&quot;bdev&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span>mount          <span class="token operator">=</span> bd_mount<span class="token punctuation">,</span>
        <span class="token punctuation">.</span>kill_sb        <span class="token operator">=</span> kill_anon_super<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">void</span> __init <span class="token function">bdev_cache_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        <span class="token keyword">int</span> err<span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">vfsmount</span> <span class="token operator">*</span>bd_mnt<span class="token punctuation">;</span>


        bdev_cachep <span class="token operator">=</span> <span class="token function">kmem_cache_create</span><span class="token punctuation">(</span><span class="token string">&quot;bdev_cache&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bdev_inode</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>SLAB_HWCACHE_ALIGN<span class="token operator">|</span>SLAB_RECLAIM_ACCOUNT<span class="token operator">|</span>SLAB_MEM_SPREAD<span class="token operator">|</span>SLAB_ACCOUNT<span class="token operator">|</span>SLAB_PANIC<span class="token punctuation">)</span><span class="token punctuation">,</span> init_once<span class="token punctuation">)</span><span class="token punctuation">;</span>
        err <span class="token operator">=</span> <span class="token function">register_filesystem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bd_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot register bdev pseudo-fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bd_mnt <span class="token operator">=</span> <span class="token function">kern_mount</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bd_type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>bd_mnt<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot create bdev pseudo-fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        blockdev_superblock <span class="token operator">=</span> bd_mnt<span class="token operator">-&gt;</span>mnt_sb<span class="token punctuation">;</span>   <span class="token comment">/* For writeback */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有表示块设备的 inode 都保存在伪文件系统 bdev 中，这些对用户层不可见，主要为了方便块设备的管理。Linux 将块设备的 block_device 和 bdev 文件系统的块设备的 inode，通过 struct bdev_inode 进行关联。所以，在 bdget 中，BDEV_I 就是通过 bdev 文件系统的 inode，获得整个 struct bdev_inode 结构的地址，然后取成员 bdev，得到 block_device。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">bdev_inode</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">block_device</span> bdev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> vfs_inode<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绕了一大圈，我们终于通过设备文件 /dev/xxx，获得了设备的结构 block_device。有点儿绕，我们再捋一下。设备文件 /dev/xxx 在 devtmpfs 文件系统中，找到 devtmpfs 文件系统中的 inode，里面有 dev_t。我们可以通过 dev_t，在伪文件系统 bdev 中找到对应的 inode，然后根据 struct bdev_inode 找到关联的 block_device。</p><p>接下来，blkdev_get_by_path 开始做第二件事情，在找到 block_device 之后，要调用 blkdev_get 打开这个设备。blkdev_get 会调用 __blkdev_get。</p><p>在分析打开一个设备之前，我们先来看 block_device 这个结构是什么样的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token punctuation">{</span>
  <span class="token class-name">dev_t</span>      bd_dev<span class="token punctuation">;</span>  <span class="token comment">/* not a kdev_t - it&#39;s a search key */</span>
  <span class="token keyword">int</span>      bd_openers<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span>  bd_super<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>  bd_contains<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span>    bd_block_size<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">hd_struct</span> <span class="token operator">*</span>  bd_part<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span>    bd_part_count<span class="token punctuation">;</span>
  <span class="token keyword">int</span>      bd_invalidated<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">gendisk</span> <span class="token operator">*</span>  bd_disk<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>  bd_queue<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">backing_dev_info</span> <span class="token operator">*</span>bd_bdi<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  bd_list<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你应该能发现，这个结构和其他几个结构有着千丝万缕的联系，比较复杂。这是因为块设备本身就比较复杂。</p><h2 id="块设备的复杂性" tabindex="-1"><a class="header-anchor" href="#块设备的复杂性" aria-hidden="true">#</a> 块设备的复杂性</h2><p>比方说，我们有一个磁盘 /dev/sda，我们既可以把它整个格式化成一个文件系统，也可以把它分成多个分区 /dev/sda1、 /dev/sda2，然后把每个分区格式化成不同的文件系统。如果我们访问某个分区的设备文件 /dev/sda2，我们应该能知道它是哪个磁盘设备的。按说它们的驱动应该是一样的。如果我们访问整个磁盘的设备文件 /dev/sda，我们也应该能知道它分了几个区域，所以就有了下图这个复杂的关系结构。</p><img src="`+t+`" alt="img" style="zoom:25%;"><p>struct gendisk 是用来描述整个设备的，因而上面的例子中，gendisk 只有一个实例，指向 /dev/sda。它的定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">gendisk</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> major<span class="token punctuation">;</span>      <span class="token comment">/* major number of driver */</span>
  <span class="token keyword">int</span> first_minor<span class="token punctuation">;</span>
  <span class="token keyword">int</span> minors<span class="token punctuation">;</span>                     <span class="token comment">/* maximum number of minors, =1 for disks that can&#39;t be partitioned. */</span>
  <span class="token keyword">char</span> disk_name<span class="token punctuation">[</span>DISK_NAME_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/* name of major driver */</span>
  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>devnode<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">gendisk</span> <span class="token operator">*</span>gd<span class="token punctuation">,</span> <span class="token class-name">umode_t</span> <span class="token operator">*</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">disk_part_tbl</span> __rcu <span class="token operator">*</span>part_tbl<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">hd_struct</span> part0<span class="token punctuation">;</span>


  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">block_device_operations</span> <span class="token operator">*</span>fops<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>queue<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>private_data<span class="token punctuation">;</span>


  <span class="token keyword">int</span> flags<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kobject</span> <span class="token operator">*</span>slave_dir<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 major 是主设备号，first_minor 表示第一个分区的从设备号，minors 表示分区的数目。</p><p>disk_name 给出了磁盘块设备的名称。</p><p>struct disk_part_tbl 结构里是一个 struct hd_struct 的数组，用于表示各个分区。struct block_device_operations fops 指向对于这个块设备的各种操作。struct request_queue queue 是表示在这个块设备上的请求队列。</p><p>struct hd_struct 是用来表示某个分区的，在上面的例子中，有两个 hd_struct 的实例，分别指向 /dev/sda1、 /dev/sda2。它的定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">hd_struct</span> <span class="token punctuation">{</span>
  <span class="token class-name">sector_t</span> start_sect<span class="token punctuation">;</span>
  <span class="token class-name">sector_t</span> nr_sects<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">device</span> __dev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kobject</span> <span class="token operator">*</span>holder_dir<span class="token punctuation">;</span>
  <span class="token keyword">int</span> policy<span class="token punctuation">,</span> partno<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">partition_meta_info</span> <span class="token operator">*</span>info<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">disk_stats</span> dkstats<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">percpu_ref</span> ref<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> rcu_head<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 hd_struct 中，比较重要的成员变量保存了如下的信息：从磁盘的哪个扇区开始，到哪个扇区结束。</p><p>而 block_device 既可以表示整个块设备，也可以表示某个分区，所以对于上面的例子，block_device 有三个实例，分别指向 /dev/sda1、/dev/sda2、/dev/sda。</p><p>block_device 的成员变量 bd_disk，指向的 gendisk 就是整个块设备。这三个实例都指向同一个 gendisk。bd_part 指向的某个分区的 hd_struct，bd_contains 指向的是整个块设备的 block_device。</p><h2 id="打开设备文件的代码" tabindex="-1"><a class="header-anchor" href="#打开设备文件的代码" aria-hidden="true">#</a> 打开设备文件的代码</h2><p>了解了这些复杂的关系，我们再来看打开设备文件的代码，就会清晰很多。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__blkdev_get</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>bdev<span class="token punctuation">,</span> <span class="token class-name">fmode_t</span> mode<span class="token punctuation">,</span> <span class="token keyword">int</span> for_part<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">gendisk</span> <span class="token operator">*</span>disk<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>owner<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
  <span class="token keyword">int</span> partno<span class="token punctuation">;</span>
  <span class="token keyword">int</span> perm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> FMODE_READ<span class="token punctuation">)</span>
    perm <span class="token operator">|=</span> MAY_READ<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> FMODE_WRITE<span class="token punctuation">)</span>
    perm <span class="token operator">|=</span> MAY_WRITE<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  disk <span class="token operator">=</span> <span class="token function">get_gendisk</span><span class="token punctuation">(</span>bdev<span class="token operator">-&gt;</span>bd_dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>partno<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  owner <span class="token operator">=</span> disk<span class="token operator">-&gt;</span>fops<span class="token operator">-&gt;</span>owner<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bdev<span class="token operator">-&gt;</span>bd_openers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bdev<span class="token operator">-&gt;</span>bd_disk <span class="token operator">=</span> disk<span class="token punctuation">;</span>
    bdev<span class="token operator">-&gt;</span>bd_queue <span class="token operator">=</span> disk<span class="token operator">-&gt;</span>queue<span class="token punctuation">;</span>
    bdev<span class="token operator">-&gt;</span>bd_contains <span class="token operator">=</span> bdev<span class="token punctuation">;</span>


    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>partno<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ret <span class="token operator">=</span> <span class="token operator">-</span>ENXIO<span class="token punctuation">;</span>
      bdev<span class="token operator">-&gt;</span>bd_part <span class="token operator">=</span> <span class="token function">disk_get_part</span><span class="token punctuation">(</span>disk<span class="token punctuation">,</span> partno<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>disk<span class="token operator">-&gt;</span>fops<span class="token operator">-&gt;</span>open<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> disk<span class="token operator">-&gt;</span>fops<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>bdev<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token punctuation">}</span>


      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span>
        <span class="token function">bd_set_size</span><span class="token punctuation">(</span>bdev<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">loff_t</span><span class="token punctuation">)</span><span class="token function">get_capacity</span><span class="token punctuation">(</span>disk<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


      <span class="token keyword">if</span> <span class="token punctuation">(</span>bdev<span class="token operator">-&gt;</span>bd_invalidated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ret<span class="token punctuation">)</span>
          <span class="token function">rescan_partitions</span><span class="token punctuation">(</span>disk<span class="token punctuation">,</span> bdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>whole<span class="token punctuation">;</span>
      whole <span class="token operator">=</span> <span class="token function">bdget_disk</span><span class="token punctuation">(</span>disk<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      ret <span class="token operator">=</span> <span class="token function">__blkdev_get</span><span class="token punctuation">(</span>whole<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      bdev<span class="token operator">-&gt;</span>bd_contains <span class="token operator">=</span> whole<span class="token punctuation">;</span>
      bdev<span class="token operator">-&gt;</span>bd_part <span class="token operator">=</span> <span class="token function">disk_get_part</span><span class="token punctuation">(</span>disk<span class="token punctuation">,</span> partno<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token function">bd_set_size</span><span class="token punctuation">(</span>bdev<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">loff_t</span><span class="token punctuation">)</span>bdev<span class="token operator">-&gt;</span>bd_part<span class="token operator">-&gt;</span>nr_sects <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  bdev<span class="token operator">-&gt;</span>bd_openers<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>for_part<span class="token punctuation">)</span>
    bdev<span class="token operator">-&gt;</span>bd_part_count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 __blkdev_get 函数中，我们先调用 get_gendisk，根据 block_device 获取 gendisk。具体代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * get_gendisk - get partitioning information for a given device
 * @devt: device to get partitioning information for
 * @partno: returned partition index
 *
 * This function gets the structure containing partitioning
 * information for the given device @devt.
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">gendisk</span> <span class="token operator">*</span><span class="token function">get_gendisk</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> devt<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>partno<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">gendisk</span> <span class="token operator">*</span>disk <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MAJOR</span><span class="token punctuation">(</span>devt<span class="token punctuation">)</span> <span class="token operator">!=</span> BLOCK_EXT_MAJOR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kobject</span> <span class="token operator">*</span>kobj<span class="token punctuation">;</span>


    kobj <span class="token operator">=</span> <span class="token function">kobj_lookup</span><span class="token punctuation">(</span>bdev_map<span class="token punctuation">,</span> devt<span class="token punctuation">,</span> partno<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>kobj<span class="token punctuation">)</span>
      disk <span class="token operator">=</span> <span class="token function">dev_to_disk</span><span class="token punctuation">(</span><span class="token function">kobj_to_dev</span><span class="token punctuation">(</span>kobj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">hd_struct</span> <span class="token operator">*</span>part<span class="token punctuation">;</span>
    part <span class="token operator">=</span> <span class="token function">idr_find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ext_devt_idr<span class="token punctuation">,</span> <span class="token function">blk_mangle_minor</span><span class="token punctuation">(</span><span class="token function">MINOR</span><span class="token punctuation">(</span>devt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>part <span class="token operator">&amp;&amp;</span> <span class="token function">get_disk</span><span class="token punctuation">(</span><span class="token function">part_to_disk</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>partno <span class="token operator">=</span> part<span class="token operator">-&gt;</span>partno<span class="token punctuation">;</span>
      disk <span class="token operator">=</span> <span class="token function">part_to_disk</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> disk<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以想象这里面有两种情况。</p><h3 id="第一种情况" tabindex="-1"><a class="header-anchor" href="#第一种情况" aria-hidden="true">#</a> 第一种情况</h3><p>第一种情况是，block_device 是指向整个磁盘设备的。这个时候，我们只需要根据 dev_t，在 bdev_map 中将对应的 gendisk 拿出来就好。</p><p>bdev_map 是干什么的呢？前面咱们学习字符设备驱动的时候讲过，任何一个字符设备初始化的时候，都需要调用 __register_chrdev_region，注册这个字符设备。对于块设备也是类似的，每一个块设备驱动初始化的时候，都会调用 add_disk 注册一个 gendisk。</p><p>这里需要说明一下，gen 的意思是 general 通用的意思，也就是说，所有的块设备，不仅仅是硬盘 disk，都会用一个 gendisk 来表示，然后通过调用链 add_disk-&gt;device_add_disk-&gt;blk_register_region，将 dev_t 和一个 gendisk 关联起来，保存在 bdev_map 中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">kobj_map</span> <span class="token operator">*</span>bdev_map<span class="token punctuation">;</span>


<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add_disk</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">gendisk</span> <span class="token operator">*</span>disk<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">device_add_disk</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> disk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">/**
 * device_add_disk - add partitioning information to kernel list
 * @parent: parent device for the disk
 * @disk: per-device partitioning information
 *
 * This function registers the partitioning information in @disk
 * with the kernel.
 */</span>
<span class="token keyword">void</span> <span class="token function">device_add_disk</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">device</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">gendisk</span> <span class="token operator">*</span>disk<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token function">blk_register_region</span><span class="token punctuation">(</span><span class="token function">disk_devt</span><span class="token punctuation">(</span>disk<span class="token punctuation">)</span><span class="token punctuation">,</span> disk<span class="token operator">-&gt;</span>minors<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
          exact_match<span class="token punctuation">,</span> exact_lock<span class="token punctuation">,</span> disk<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token comment">/*
 * Register device numbers dev..(dev+range-1)
 * range must be nonzero
 * The hash chain is sorted on range, so that subranges can override.
 */</span>
<span class="token keyword">void</span> <span class="token function">blk_register_region</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> devt<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> range<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>module<span class="token punctuation">,</span>
       <span class="token keyword">struct</span> <span class="token class-name">kobject</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>probe<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token function">kobj_map</span><span class="token punctuation">(</span>bdev_map<span class="token punctuation">,</span> devt<span class="token punctuation">,</span> range<span class="token punctuation">,</span> module<span class="token punctuation">,</span> probe<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二种情况" tabindex="-1"><a class="header-anchor" href="#第二种情况" aria-hidden="true">#</a> 第二种情况</h3><p>get_gendisk 要处理的第二种情况是，block_device 是指向某个分区的。这个时候我们要先得到 hd_struct，然后通过 hd_struct，找到对应的整个设备的 gendisk，并且把 partno 设置为分区号。</p><p>我们再回到 __blkdev_get 函数中，得到 gendisk。接下来我们可以分两种情况。</p><p>如果 partno 为 0，也就是说，打开的是整个设备而不是分区，那我们就调用 disk_get_part，获取 gendisk 中的分区数组，然后调用 block_device_operations 里面的 open 函数打开设备。</p><p>如果 partno 不为 0，也就是说打开的是分区，那我们就获取整个设备的 block_device，赋值给变量 struct block_device *whole，然后调用递归 __blkdev_get，打开 whole 代表的整个设备，将 bd_contains 设置为变量 whole。</p><p>block_device_operations 就是在驱动层了。例如在 drivers/scsi/sd.c 里面，也就是 MODULE_DESCRIPTION(“SCSI disk (sd) driver”) 中，就有这样的定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">block_device_operations</span> sd_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>owner      <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>open      <span class="token operator">=</span> sd_open<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>release    <span class="token operator">=</span> sd_release<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ioctl      <span class="token operator">=</span> sd_ioctl<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>getgeo      <span class="token operator">=</span> sd_getgeo<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_COMPAT</span></span>
  <span class="token punctuation">.</span>compat_ioctl    <span class="token operator">=</span> sd_compat_ioctl<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token punctuation">.</span>check_events    <span class="token operator">=</span> sd_check_events<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>revalidate_disk  <span class="token operator">=</span> sd_revalidate_disk<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>unlock_native_capacity  <span class="token operator">=</span> sd_unlock_native_capacity<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>pr_ops      <span class="token operator">=</span> <span class="token operator">&amp;</span>sd_pr_ops<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token comment">/**
 *  sd_open - open a scsi disk device
 *  @bdev: Block device of the scsi disk to open
 *  @mode: FMODE_* mask
 *
 *  Returns 0 if successful. Returns a negated errno value in case 
 *  of error.
 **/</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sd_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>bdev<span class="token punctuation">,</span> <span class="token class-name">fmode_t</span> mode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在驱动层打开了磁盘设备之后，我们可以看到，在这个过程中，block_device 相应的成员变量该填的都填上了，这才完成了 mount_bdev 的第一件大事，通过 blkdev_get_by_path 得到 block_device。</p><p>接下来就是第二件大事情，我们要通过 sget，将 block_device 塞进 superblock 里面。注意，调用 sget 的时候，有一个参数是一个函数 set_bdev_super。这里面将 block_device 设置进了 super_block。而 sget 要做的，就是分配一个 super_block，然后调用 set_bdev_super 这个 callback 函数。这里的 super_block 是 ext4 文件系统的 super_block。</p><p>sget(fs_type, test_bdev_super, set_bdev_super, flags | MS_NOSEC, bdev);</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">set_bdev_super</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  s<span class="token operator">-&gt;</span>s_bdev <span class="token operator">=</span> data<span class="token punctuation">;</span>
  s<span class="token operator">-&gt;</span>s_dev <span class="token operator">=</span> s<span class="token operator">-&gt;</span>s_bdev<span class="token operator">-&gt;</span>bd_dev<span class="token punctuation">;</span>
  s<span class="token operator">-&gt;</span>s_bdi <span class="token operator">=</span> <span class="token function">bdi_get</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_bdev<span class="token operator">-&gt;</span>bd_bdi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">/**
 *  sget  -  find or create a superblock
 *  @type:    filesystem type superblock should belong to
 *  @test:    comparison callback
 *  @set:    setup callback
 *  @flags:    mount flags
 *  @data:    argument to each of them
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span><span class="token function">sget</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> <span class="token operator">*</span>type<span class="token punctuation">,</span>
      <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>test<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">int</span> flags<span class="token punctuation">,</span>
      <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token function">sget_userns</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> test<span class="token punctuation">,</span> set<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> user_ns<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">/**
 *  sget_userns -  find or create a superblock
 *  @type:  filesystem type superblock should belong to
 *  @test:  comparison callback
 *  @set:  setup callback
 *  @flags:  mount flags
 *  @user_ns: User namespace for the super_block
 *  @data:  argument to each of them
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span><span class="token function">sget_userns</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> <span class="token operator">*</span>type<span class="token punctuation">,</span>
      <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>test<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns<span class="token punctuation">,</span>
      <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span>old<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">=</span> <span class="token function">alloc_super</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> <span class="token operator">~</span>MS_SUBMOUNT<span class="token punctuation">)</span><span class="token punctuation">,</span> user_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
  err <span class="token operator">=</span> <span class="token function">set</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  s<span class="token operator">-&gt;</span>s_type <span class="token operator">=</span> type<span class="token punctuation">;</span>
  <span class="token function">strlcpy</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_id<span class="token punctuation">,</span> type<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>s_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token operator">-&gt;</span>s_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>super_blocks<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">hlist_add_head</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token operator">-&gt;</span>s_instances<span class="token punctuation">,</span> <span class="token operator">&amp;</span>type<span class="token operator">-&gt;</span>fs_supers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sb_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">get_filesystem</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">register_shrinker</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token operator">-&gt;</span>s_shrink<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，到此为止，mount 中一个块设备的过程就结束了。设备打开了，形成了 block_device 结构，并且塞到了 super_block 中。</p><p>有了 ext4 文件系统的 super_block 之后，接下来对于文件的读写过程，就和文件系统那一章的过程一摸一样了。只要不涉及真正写入设备的代码，super_block 中的这个 block_device 就没啥用处。这也是为什么文件系统那一章，我们丝毫感觉不到它的存在，但是一旦到了底层，就到了 block_device 起作用的时候了，这个我们下一节仔细分析。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>从这一节我们可以看出，块设备比字符设备复杂多了，涉及三个文件系统，工作过程我用一张图总结了一下，下面带你总结一下。</p><ul><li>1.所有的块设备被一个 map 结构管理从 dev_t 到 gendisk 的映射；</li><li>2.所有的 block_device 表示的设备或者分区都在 bdev 文件系统的 inode 列表中；</li><li>3.mknod 创建出来的块设备文件在 devtemfs 文件系统里面，特殊 inode 里面有块设备号；</li><li>4.mount 一个块设备上的文件系统，调用这个文件系统的 mount 接口；</li><li>5.通过按照 /dev/xxx 在文件系统 devtmpfs 文件系统上搜索到特殊 inode，得到块设备号；</li><li>6.根据特殊 inode 里面的 dev_t 在 bdev 文件系统里面找到 inode；</li><li>7.根据 bdev 文件系统上的 inode 找到对应的 block_device，根据 dev_t 在 map 中找到 gendisk，将两者关联起来；</li><li>8.找到 block_device 后打开设备，调用和 block_device 关联的 gendisk 里面的 block_device_operations 打开设备；</li><li>9.创建被 mount 的文件系统的 super_block。</li></ul><img src="`+e+`" alt="img" style="zoom:25%;"><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>到这里，你是否真的体会到了 Linux 里面“一切皆文件”了呢？那个特殊的 inode 除了能够表示字符设备和块设备，还能表示什么呢？请你看代码分析一下。</p><blockquote><p>还可以表示网络socket和管道</p></blockquote><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>读完这篇文章，我感觉用三个文件系统主要是为了解耦和可扩展。首先是open一个块设备，涉及两个文件系统：devtmpfs和伪文件系统bdev。通过devtmpfs中的设备号dev_t在伪文件系统bdev中找到block_device，然后打开，打开后再将block_device设置到主流文件系统的super_block中。设置到主流文件系统的super_block后，我们就可以通过主流文件系统（如ext4）的file_operations对块设备进行操作了。由于主流文件系统有很多，而且未来可能退出新的，写操作系统内核时不可能每次都针对新的文件系统进行更改，因此devtmpfs和伪文件系统只是为了获取和打开block_device，最终对block_device进行读写是交给主流文件系统的。<br> 作者回复: 是的</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init_special_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token class-name">umode_t</span> mode<span class="token punctuation">,</span> <span class="token class-name">dev_t</span> rdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISCHR</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		inode<span class="token operator">-&gt;</span>i_fop <span class="token operator">=</span> <span class="token operator">&amp;</span>def_chr_fops<span class="token punctuation">;</span>
		inode<span class="token operator">-&gt;</span>i_rdev <span class="token operator">=</span> rdev<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		inode<span class="token operator">-&gt;</span>i_fop <span class="token operator">=</span> <span class="token operator">&amp;</span>def_blk_fops<span class="token punctuation">;</span>
		inode<span class="token operator">-&gt;</span>i_rdev <span class="token operator">=</span> rdev<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISFIFO</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
		inode<span class="token operator">-&gt;</span>i_fop <span class="token operator">=</span> <span class="token operator">&amp;</span>pipefifo_fops<span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISSOCK</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">;</span>	<span class="token comment">/* leave it no_open_fops */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这段代码可以看出，/dev/xxx设备文件对应的特殊inode还可以表示FIFO、SOCK<br> 作者回复: 是的</p><p>如果block_device是指向某个分区的，我们要先找到hd_struct，然后根据hd_struct找到对应整个设备的gendisk，这里是怎么根据hd_struct找到对应整个设备的gendisk的啊？<br> 作者回复: 有指针</p><p>能解释下为什么打开一个块设备需要3个文件系统配合？为什么不是两个，也不是4个？感觉一堆代码分析，越来越晕了。<br> 作者回复: 每一个都有自己的用处呀，一切接文件，所以为了管理方便，所有想对外暴露管理接口的，文件都是首选的方式。</p><p>为什么查找ext4fs文件系统的内容需要devtmps来管理，感觉设计不太合理？<br> 作者回复: 一切皆文件，管理它也需要文件</p><p>bdev这个文件系统的内容是不会持久化到磁盘的，既然这样，那么为什么要组织成文件系统的形式呢？<br> 对内存中的文件系统不太了解，下面是我的理解，希望老师给予指正：<br> bdev里面由各种数据结构组成，例如链表、树之类的。这些结构和通常的文件系统用的那些数据结构相同，而且组织成了和通常的文件系统类似的形式，所以这里就把bdev代表的这一对数据结构组成的东西叫做文件系统。 如果把bdev组织成和通常的文件系统大不相同的形式，是不是也可以完成本文中的功能？那么这时候就不把bdev叫做文件系统了，而它就是一堆普通的数据结构。<br> 作者回复: 一切皆文件</p>`,92),i=[c];function l(u,d){return s(),a("div",null,i)}const v=n(o,[["render",l],["__file","K34-块设备（上）.html.vue"]]);export{v as default};
