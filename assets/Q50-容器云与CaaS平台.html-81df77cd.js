import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o,c as p,a as e,b as a,e as t,d as u}from"./app-cdabc73c.js";const l="/assets/1512689b1c019414a9a89006f50b55a6-50d2e19a.jpg",i="/assets/58f3f66ee10b3a1d5c6335e708969132-3f3161fd.jpg",d={},h=u('<h1 id="加餐04-谈谈容器云与和caas平台" tabindex="-1"><a class="header-anchor" href="#加餐04-谈谈容器云与和caas平台" aria-hidden="true">#</a> 加餐04｜谈谈容器云与和CaaS平台</h1><p>你好，我是 LMOS。</p><p>在前面几节课程中，我们学习了解了 IAAS、PAAS 以及大数据相关的实现基础，这节课我们学习另外一个云计算相关的概念，就是 CaaS。</p><p>CaaS 也是我持续关注的一个主题，刚好和你分享分享。作为加餐，我们可以轻松一点，把重点放在了解它大概是什么，又能给我们提供什么样的支持，最后，我还会分享几个优秀的开源项目。</p><h2 id="容器即服务——caas" tabindex="-1"><a class="header-anchor" href="#容器即服务——caas" aria-hidden="true">#</a> 容器即服务——CaaS</h2><p>CaaS 其实是个简称，全称是 Containers-as-a-Service，中文是容器即服务。CaaS 是一款云服务，可以帮助使用者基于容器的抽象来管理和部署应用，以此实现关键 IT 功能的自动化。</p><p>想理解一个新概念，我们不妨和熟悉的概念来关联、比较一下。CaaS 调度的基本单元是<mark>容器</mark>。说起容器我们应该都不陌生，它是<mark>云原生资源</mark>和<mark>微服务资源</mark>的常见部署形式。</p><p>那容器都有哪些优势呢？我画了一张表格来梳理。</p><ol><li>可移植性强、用容器开发的应用可移植性强，足够灵活，可以轻松在不同的CaaS供应商之间移动工作负载。</li><li>可扩展性好、能根据实际需求扩展或缩减容器数量。</li><li>更高的资源利用率、容器不需要单的操作系统，所需资料也比虚拟机少，成本也更低。</li><li>安全性高、由于容器之间是彼此隔离的，所以当一个容器遭到破坏的时候，其他容器并不会受到影像。</li><li>速度快、容器自主性更强，启动和停止只要几秒钟就足够，这给运维和开发人员带来了更快更流畅的使用体验。</li></ol><img src="'+l+'" alt="img" style="zoom:33%;"><p>如果你想更深入地了解容器，还可以看看第一季第四十四节课的内容。</p><p>IT 运维团队可以在 CaaS 上对容器云集群进行管理和编排。<em>容器提供了一致的环境</em>，方便研发人员快速开发和交付可以在任何地方运行的云原生应用，<em>这样也就实现了对资源的自动化运维和管理</em>。研发团队则可以按照自己的需求，申请或自助使用资源。</p><p>CaaS 通常被认为是 IaaS 的一种以容器为载体的子集，CaaS 介于 IaaS 和 PaaS 之间，它起到了屏蔽底层系统 IaaS，支撑并丰富上层应用平台 PaaS 的作用。</p><p>这里又一次体现了分层的思想（关于分层，我们这一季前面第四十一节课讨论过）。有了 CaaS，就可以将底层的 IaaS 封装成一个大的资源池，我们只要把自己的应用部署到这个资源池中，不再需要关心资源的申请、管理以及与业务开发无关的事情。</p><h2 id="有了-kubernetes-为什么还需要-caas" tabindex="-1"><a class="header-anchor" href="#有了-kubernetes-为什么还需要-caas" aria-hidden="true">#</a> 有了 Kubernetes 为什么还需要 CaaS</h2><p>常见的 CaaS 平台都是基于原生的 Kubernetes，提供 Kubernetes 集群进行完整的全生命周期管理。</p><p>从根本上说，Kubernetes 和 CaaS 都与容器管理相关，不过 <code>Kubernetes</code> 是容器平台，而 <code>CaaS</code> 是订阅型服务。二者不同之处在于一个是<em>基础设施解决方案</em>，而另一个是<em>管理解决方案</em>。当我们需要大规模运行生产工作负载时，二者都至关重要。</p><p>Kubernetes 集群能够提供各种资源，支持开发者高效开发，用户选择和灵活性是它与生俱来的优势。与传统 PaaS 系统不同的是，Kubernetes 能够支持多种工作负载。容器出现故障时，其还能够自我修复或重新启动，替代及淘汰无法在必要时响应的容器。作为容器级别运作的平台，Kubernetes 会提供部分 PaaS 常见功能，但这些都不是 Kubernetes 的内建功能。</p><p>作为<mark>订阅型服务</mark>，Caas 提供了部署、扩展和平衡负载，并将日志记录、监控和警报解决方案集成为<mark>可选插件</mark>。CaaS 提供商通常会使用 Kubernetes 平台来管理容器，借助 Kubernetes 提供平衡负载、自动装载存储系统、打包功能，还能描述已部署应用的预期状态。</p><p>不过，直接使用 Kubernetes 会有很多痛点，主要是<strong>使用复杂度、存储、网络、安全等方面的问题。</strong></p><h3 id="_1-使用复杂度" tabindex="-1"><a class="header-anchor" href="#_1-使用复杂度" aria-hidden="true">#</a> 1 使用复杂度</h3><p>首先是<strong>使用复杂度</strong>。Kubernetes 作为一个编排引擎，<u>本身就有很高的复杂度和学习门槛</u>。像声明式 API、CRD、Operator 等概念，<u>对于传统应用开发者来说也属于新鲜事物</u>。对于开发者，他们更关注的是，怎样屏蔽底层复杂度，还有如何实现对业务快速上线的支持。</p><p>而对于应用的运维管理人员来说，他们希望厂商能提供对基础设施（IaaS）和 Kubernetes 统一管理的能力，来帮助他们运维好开发者所编写的应用。<u>这种让不同用户只需关心自己事情的能力</u>，是降低 Kubernetes 使用门槛的关键所在。</p><p>另外，Kubernetes 的工作负载由多个对象组成，在别的技术中很简单的操作，在 Kubernetes 的语境中可能就会变得复杂。<em>所以对于一些技术能力不足的用户来说，哪怕只是安装、部署、使用过程中遇到一些小阻碍，可能都没有能力自行排查和解决问题</em>。</p><p>所以，这给 CaaS 创造了机会，<em>好的 CaaS 产品需要保证操作的简单、不出错，同时提供排查异常情况的方式，比如明确的错误码</em>。</p><h3 id="_2-存储" tabindex="-1"><a class="header-anchor" href="#_2-存储" aria-hidden="true">#</a> 2 存储</h3><p>我们再看看<strong>存储</strong>方面的痛点。现在容器化的应用越来越广泛，复杂的大规模容器的容器应用也越来越常见。最初容器只是用于隔离资源的简单无状态的业务单体，发展至今，越来越多的企业和应用将生产级别、复杂度高和高性能计算的有状态应用通过容器的方式管理部署。</p><p>应用迭代快、服务更新频繁是云原生应用的重要特征，也是云原生应用场景中绕不开的强需求。虽然 Kubernetes 在许多方面非常有用，例如可伸缩性、可移植性和管理能力，但受限于其架构设计思想，<em>原生 Kubernetes 缺乏对存储状态的支持</em>，因此持久化存储一直以来都是容器技术的一大挑战。</p><p>Pod 和容器可以自我修复和复制，而且在不断动态变化的过程中，它们的生命周期是十分短暂的。<em>如何让持久化存储应对不断变化的容器、保证容器的可移植性，这个问题就变得很复杂</em>。</p><p>此外，存储技术本来就门类众多，例如私有云、公有云、裸金属等，因此用户对于在不同存储上面的迁移也是需要考虑的问题。</p><h3 id="_3-网络" tabindex="-1"><a class="header-anchor" href="#_3-网络" aria-hidden="true">#</a> 3 网络</h3><p>最后，我们再来看看<strong>网络</strong>方面的问题。Kubernetes 将网络建立在 pod 级别，每个 pod 都可以获取一个 IP 地址，但需要确保 pod 之间的连接性以及 node 无需 NAT（网络地址转换）就可与 pod 进行连接。这种模型的优点是无论 pod 是否在同一台物理机上，所有 pod 都会通过 IP 直接访问其他 pod。</p><p>如果用户之前有一定的虚拟化经验，这种模型不会带来过多技术迁移的负担，如果应用程序之前在虚拟机中工作，那么几乎可以保证它可以在 Kubernetes 上运行的 pod 中工作。</p><p>另外，<u>不同的应用程序对网络要求差异会很大</u>。与存储同理，Kubernetes 不是在单个解决方案中解决所有这些需求，而是将网络从 Kubernetes 本身中抽象出来，<em>允许供应商构建特定的解决方案来满足不同的需求</em>，这就要提到 ==CNI（容器网络接口）==的概念。</p><p>用户对网络要求不同，相应地，主流的 CNI 也各具特点，用户如何能选择到最适合自己业务的 CNI 也需要仔细考虑。</p><h2 id="caas-平台具有哪些功能" tabindex="-1"><a class="header-anchor" href="#caas-平台具有哪些功能" aria-hidden="true">#</a> CaaS 平台具有哪些功能</h2><p>分析了 Kubernetes 的使用痛点，我们也简单聊聊，一个企业级的容器云平台需要具备哪些能力。</p><p>CaaS 平台首先要满足 <strong>Kubernetes 集群的基本调度和生命周期管理</strong>，这是最基础的能力。CaaS 平台可以自动化完成 Kubernetes 集群的部署、扩容、升级，无需人工操作。通过不同的 IaaS provider 插件，可以将 Kubernetes 集群部署在 IaaS 服务或其他云服务上。</p><p>CaaS 平台还要具备 <strong>Kubernetes 集群高可用的调度能力</strong>，HA deploy 通过部署多 master/etcd 节点实现高可用，当 IaaS 支持高级放置策略时，也支持将 master/etcd 节点放置于不同的节点上，进一步提升可用性。</p><p>当发现 Kubernetes 集群节点健康状态异常时，可以自动将其隔离并创建新节点加入集群，以保证集群服务能力始终符合预期。而升级 Kubernetes 集群时将使用滚动升级策略，保证集群中应用无需停止服务。还要支持多种 Kubernetes 版本，所以无需同时升级所有集群。</p><p><strong>容器网络与安全能力</strong>也很关键，对于容器网络，Kubernetes 提供了 CNI 的能力，而 CaaS 平台需要支持 Calico 等主流开源 CNI。当然，也可以根据需要推出自己的 CNI，提供 Pod 网络接口管理、IPAM、Service（ClusterIP/NodePort based on Kube-proxy/iptables）、NetworkPolicy 功能。</p><p>内部网络的对外暴露一般通过 Ingress，将服务暴露到 Kubernetes 集群之外。负载均衡支持开箱即用的 MeteralLB，也支持用户自己配置已有的 Load Balance 方案。</p><p>CaaS 还要提供监控、告警、日志管理、分析、可视化在内的一系列<strong>可观测性功能</strong>，展示所有 Kubernetes 集群资源消耗的统计数据。</p><p>Kubernetes 集群的监控指标将被实时采集，用户可以定制可视化面板的展示和基于监控指标的告警规则，同时支持电子邮件、短信的实时通知方式。Kubernetes 集群、节点、pod、container 等资源的日志将被聚合到 <strong>logging</strong> 中，提供日志搜索、限流、归档等功能。</p><p>除了上述功能，CaaS 还需要具备以下功能，我同样梳理了表格。</p><img src="'+i+'" alt="img" style="zoom:33%;"><p>CaaS 这么强大，支撑它的核心技术就是—— <mark>Cluster API</mark>（简称 CAPI）。</p><h2 id="caas-平台的核心技术——cluster-api" tabindex="-1"><a class="header-anchor" href="#caas-平台的核心技术——cluster-api" aria-hidden="true">#</a> CaaS 平台的核心技术——Cluster API</h2><p>这是 Kubernetes 社区中一个非常开放、活跃和成熟的开源项目，遵循 Apache License v2.0。</p><p>Cluster API 项目创建于 2018 年，由 Kubernetes Cluster Lifecycle Special Interest Group 负责管理。Cluster API 吸纳了其他开源的 Kubernetes 部署工具的优点，提供一套声明式的 Kubernetes 风格的 API 以及相关工具来简化 Kubernetes 集群的创建、扩容、缩容、更新配置、升级、删除等完整的 Kubernetes 集群生命周期管理操作。</p><p>Cluster API 实现了灵活可扩展的框架，支持在 vSphere、AWS、 Azure、GCP、OpenStack 等多种云平台中部署 Kubernetes 集群。开发人员可以增加新的 Cluster API Cloud Provider 以支持更多的云平台。Cluster API 还支持 Kubernetes 组件参数配置、Kubernetes 控制平面高可用、自动替换故障节点、节点自动伸缩等高级功能。</p><p>很多开源项目和商业产品都在使用 <mark>Cluster API</mark>，比如 <mark>VMware Tanzu</mark>、<mark>Red Hat OpenShift</mark>、<mark>SUSE Rancher</mark>、<mark>Kubermatic</mark> 等。</p><p>一般的云厂商都会基于 Cluster API 框架自主研发的一种 Cluster API Cloud Provider 来适配自身的物理集群。</p><h2 id="常见的容器云开源项目" tabindex="-1"><a class="header-anchor" href="#常见的容器云开源项目" aria-hidden="true">#</a> 常见的容器云开源项目</h2><p>接下来，我分享几个 CaaS 的优质开源项目，它们都使用了 Cluster API。</p><p><strong>VMware Tanzu</strong></p>',56),c={href:"https://github.com/vmware-tanzu/community-edition/",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,[e("strong",null,"Rancher")],-1),S={href:"https://www.rancher.com/",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,[e("strong",null,"KubeSphere")],-1),C={href:"https://github.com/kubesphere",target:"_blank",rel:"noopener noreferrer"},K=e("p",null,[e("strong",null,"OpenShift")],-1),_={href:"https://www.redhat.com/en/technologies/cloud-computing/openshift",target:"_blank",rel:"noopener noreferrer"},I=e("p",null,"凭借红帽 OpenShift 的全堆栈自动化运维以及面向开发人员的自助服务置备，团队可以紧密携手合作，更有效地推动创意从开发过渡到生产阶段。",-1),g=e("p",null,"OpenShift 和 Rancher 或者 Kubesphere 不一样，它没有管理集群和 workload 集群这种概念，它不管理其他集群，它不是在现有 Kubernetes 集群上安装套件，而是基于 Kubernetes 内核通过 Operator 设计重新构建了一套集群，它自身就是一个 PaaS 平台，是 Kubernetes 的开箱即用功能完备的企业发行版。",-1),f=e("h2",{id:"思考与总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#思考与总结","aria-hidden":"true"},"#"),a(" 思考与总结")],-1),k=e("p",null,"在这节课的内容中，我们了解了云计算场景下 IAAS、PAAS 平台之外的又一种概念——CaaS 平台，也就是容器云管理平台。在当今容器化呼声越来越高的场景下，容器云平台呼声也是越来越高，常见的容器云平台依托于 Google 的开源容器集群管理系统—— Kubernetes，扩容了 Kubernetes 的功能，让 Kubernetes 集群的管理变得更容易。",-1),P=e("p",null,"企业级容器云和 Kubernetes 管理平台的结合正在为企业提供更快捷、高效的云计算服务。企业级 CaaS 平台相比 Kubernetes 集群管理有很多优势。建议你在课后体验一下这几个 CaaS 平台，看下他们具有哪些功能，解决了企业云资产管理的哪些痛点。",-1),A=e("p",null,[a("另外，当前 CaaS 平台中最重要的项目就是 Cluster API，我推荐了使用它的几个优秀开源 CaaS 项目。如果想更加深入地了解"),e("em",null,"容器云相关的知识，你可以阅读上面开源项目的代码以及 Cluster API 的代码"),a("。")],-1);function x(w,N){const r=s("ExternalLinkIcon");return o(),p("div",null,[h,e("p",null,[e("a",c,[a("VMware Tanzu"),t(r)]),a(" 社区版是一个功能齐全、易于管理的 Kubernetes 平台，适合学习者和用户，特别是在小规模或生产前环境中工作的用户。Tanzu 的主要产品是商业化版本，核心的 TKG 和 TCE 等开源，开源部分主要是 Tanzu 自己在维护。")]),b,e("p",null,[e("a",S,[a("Rancher"),t(r)]),a(" 是一个企业级商用 Kubernetes 管理平台。它解决了跨任何基础架构管理多个 Kubernetes 集群的运营和安全挑战，同时为 DevOps 团队提供了运行容器化工作负载的集成工具。Rahcher2.5 版本通过使用 RKE 来创建工作节点，2.6 后的版本也使用了 Cluster API 来创建节点。")]),m,e("p",null,[e("a",C,[a("KubeSphere"),t(r)]),a(" 是国产厂商青云主导开发的一款开源容器 PaaS 方案，通过社区贡献，目前已经有了上万的 star，社区活动比较活跃 KubeSphere 的后端设计中沿用了 Kubernetes 声明式 API 的风格，所有可操作的资源都尽可能地抽象成为 CR。它还提供了管理集群和 workload 集群的能力，通过一个管理集群来管理多个工作集群。")]),K,e("p",null,[a("红帽 "),e("a",_,[a("OpenShift"),t(r)]),a(" 是一个领先的企业级 Kubernetes 平台，在其部署的任何地方都能实现云体验。无论是在云端、本地还是在边缘，红帽 OpenShift 都能让企业轻松选择构建、部署和运行应用的位置，并提供一致的体验。")]),I,g,f,k,P,A])}const T=n(d,[["render",x],["__file","Q50-容器云与CaaS平台.html.vue"]]);export{T as default};
