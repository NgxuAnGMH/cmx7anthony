const e=JSON.parse('{"key":"v-38857b42","path":"/Universal/ThinkIn/%E6%B7%B1%E5%85%A5C%E8%AF%AD%E8%A8%80%E5%92%8C%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/%E2%88%9AD22-%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E8%AF%91%E5%8A%A0%E9%80%9F%E6%9E%84%E5%BB%BA.html","title":"√22｜生产加速：如何使用结构化编译加速 C 项目构建？","lang":"zh-CN","frontmatter":{"date":"2023-04-29T00:00:00.000Z","shortTitle":"D22-结构化编译加速构建","category":["原生流程/源码预处理/编译(成汇编代码)/汇编(成目标代码)/ELF文件/链接&装载&执行"],"tag":["Make工具/Makefile"]},"headers":[{"level":2,"title":"如何组织 C 项目的源代码目录结构？","slug":"如何组织-c-项目的源代码目录结构","link":"#如何组织-c-项目的源代码目录结构","children":[]},{"level":2,"title":"如何组织 C 项目的编译流程？","slug":"如何组织-c-项目的编译流程","link":"#如何组织-c-项目的编译流程","children":[]},{"level":2,"title":"使用 Makefile 进行结构化编译","slug":"使用-makefile-进行结构化编译","link":"#使用-makefile-进行结构化编译","children":[]},{"level":2,"title":"使用 CMake 进行跨平台的自动化构建","slug":"使用-cmake-进行跨平台的自动化构建","link":"#使用-cmake-进行跨平台的自动化构建","children":[]},{"level":2,"title":"其他可选用工具","slug":"其他可选用工具","link":"#其他可选用工具","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"思考题","slug":"思考题","link":"#思考题","children":[]}],"git":{"createdTime":1693384389000,"updatedTime":1693384389000,"contributors":[{"name":"安东尼","email":"109900456+NgxuAnGMH@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":14.5,"words":4351},"filePathRelative":"Universal/ThinkIn/深入C语言和程序运行原理/√D22-结构化编译加速构建.md","localizedDate":"2023年4月29日","excerpt":""}');export{e as data};
