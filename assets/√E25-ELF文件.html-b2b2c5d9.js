import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,a,b as e,d as s,e as o}from"./app-063765ff.js";const p="/assets/6ff02c8c3a27be1fayye00b39af18c72-7a95d7f2.png",r="/assets/1e65c570bfe1a2eacfd2eed890441a02-b545ef10.png",d="/assets/1d083d9e4fd121bd87e2b6c34657b1ee-ee8408e3.png",u="/assets/cf1da757ce431193e875db1e7b99025c-34e5c944.png",m="/assets/a8a703a4a2556ebd9fbf48e782804980-c95e6e9b.png",k="/assets/c0fa2a73133c42c5a8d790713b983f12-2a73f057.jpg",h="/assets/image-20230723153931111-e8bc4e00.png",b="/assets/60921c618740bc18e3f267d225d750e7-891f33d0.jpg",f={},E=a("h1",{id:"√25-可执行二进制文件里有什么",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#√25-可执行二进制文件里有什么","aria-hidden":"true"},"#"),e(" √25｜可执行二进制文件里有什么？")],-1),g={href:"https://www.cs.cmu.edu/afs/cs/academic/class/15213-f00/docs/elf.pdf",target:"_blank",rel:"noopener noreferrer"},L={href:"https://man7.org/linux/man-pages/man5/elf.5.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.gnu.org/software/binutils/",target:"_blank",rel:"noopener noreferrer"},_=o(`<h2 id="linux相关命令" tabindex="-1"><a class="header-anchor" href="#linux相关命令" aria-hidden="true">#</a> Linux相关命令：</h2><p>ar：归档文件，将多个文件打包成一个大文件。</p><p>as：被 gcc 调用，输入汇编文件，输出目标文件供链接器 ld 连接。</p><p>ld：GNU 链接器。被 gcc 调用，它把目标文件和各种库文件结合在一起，重定位数据，并链接符号引用。</p><p>objcopy：执行文件格式转换。</p><p>objdump：显示 ELF 文件的信息。</p><p>readelf（-h）（-SW）（-l）：显示更多 ELF 格式文件的信息（包括DWARF 调试信息）。</p><p>file：查看该文件的格式信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">file</span> a.out

readelf <span class="token parameter variable">-h</span> a.out

readelf <span class="token parameter variable">-S</span> a.out

objdump <span class="token parameter variable">-s</span> ./a.out <span class="token parameter variable">--section</span><span class="token operator">=</span>.rodata

objdump <span class="token parameter variable">-S</span> ./a.out （查看反汇编）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>你好，我是于航。从这一讲开始，我们就进入到了“C 程序运行原理篇”的学习。</p><p>和之前的内容相比，在这一模块中，我们将会从“台前”走向“幕后”：<code>从由 C 代码直观表示的程序逻辑，走向程序在运行过程中，背后与操作系统交互时的具体原理。</code>相信学习完这个模块后，你会对一个 C 程序<code>从代码编写，到通过编译，再到最终被操作系统运行</code>的完整过程有更深入的理解。其中，<mark>程序的运行细节<strong>仅与</strong>所在操作系统<strong>紧密相关</strong></mark>，因此，这一模块中介绍的原理性知识也同样适用于由 ==Rust、C++，以及 Go 等其他<strong>系统级编程语言</strong>==编写的程序。</p><p>而今天我们先来看下，经常被提及的“二进制可执行文件”究竟是什么。</p><h2 id="可执行文件的格式-pe-elf-mach-o" tabindex="-1"><a class="header-anchor" href="#可执行文件的格式-pe-elf-mach-o" aria-hidden="true">#</a> 可执行文件的格式 PE/ELF/Mach-O</h2><p>我们都知道，一份 C 代码在经过编译器处理后，便可得到能够直接运行的二进制可执行程序。而在不同操作系统上，这些编译生成的可执行文件都有着不同的特征，其中最明显的差别便是<code>文件后缀名</code>。</p><ul><li>比如，在 Microsoft <code>Windows</code> 操作系统上，通常会以 <mark>“.exe”</mark> 为后缀名来标注可执行文件；</li><li>而在类 <code>Unix</code> 操作系统上，可执行文件通常<mark>没有任何后缀名</mark>。</li></ul><p>除此之外，更重要的不同点体现在各类可执行文件在<code>内部数据的组织和结构</code>上。通常来说，最常见的几种<code>可执行文件格式</code>有</p><ul><li>针对微软 Windows 平台的 <mark>PE</mark>（Portable Executable）格式、</li><li>针对类 Unix 平台的 <mark>ELF</mark>（Executable and Linkable Format）格式，</li><li>以及针对 MacOS 和 IOS 平台的 <mark>Mach-O</mark> 格式。</li></ul><blockquote><p>另外，值得一提的是，在 Unix 系统诞生早期，那时的可执行程序还在使用一种名为 <mark>“a.out”</mark> 的可执行文件格式。“a.out” 的全称为 <code>“Assembler Output”</code>，直译过来即<code>“汇编器输出”</code>。该名称来源于 Unix 系统作者 Ken Thompson 最早为 PDP-7 微型计算机编写的汇编器的默认输出文件名。时至今日，这个名称依然是某些<code>编译器</code>（比如 GCC）在创建可执行文件时的<code>默认文件名</code>。不仅如此，作为第一代可执行程序格式，它对后续出现的 ELF、PE 等格式也有着重要的参考意义。</p></blockquote><p>接下来，我就以类 Unix 平台上最常使用的 ELF 格式为例，来带你看看这些可执行文件格式，究竟是以怎样的方式存储应用程序数据的。</p><h2 id="unix-elf-文件" tabindex="-1"><a class="header-anchor" href="#unix-elf-文件" aria-hidden="true">#</a> (Unix) ELF 文件</h2><p>不同的可执行文件格式会采用不同方式，<code>来组织应用程序运行时需要的元数据</code>。但总体来看，它们对数据的基本组织方式都符合这样一个特征：</p><ul><li><strong>使用统一的<code>“头部（header）”</code>来保存可执行文件的<mark>基本信息</mark>。</strong></li><li><strong>而<mark>其他数据</mark>则<code>按照功能</code>被划分在了以 <code>Section</code> 或 <code>Segment</code> 形式组织的<code>一系列单元</code>中</strong>。当然，ELF 格式也不例外。</li></ul><blockquote><p>需要注意的是，在一些中文书籍和文章中，Section 和 Segment 这两个单词可能会被统一翻译为<code>“段”或“节”</code>。但对于某些格式，比如 ELF 来说，它们实际上则分别对应着不同的概念，因此为了保证同学们理解的准确性，这里我直接保留了英文。</p></blockquote><p>接下来，让我们从一个真实的 C 程序入手，通过观察这个程序对应二进制文件的内容，你可以得到对 ELF 格式基本结构的一个初步印象。该程序的 C 源代码如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// elf.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="格式信息" tabindex="-1"><a class="header-anchor" href="#格式信息" aria-hidden="true">#</a> 格式信息</h3><p>经过编译后，我们可以得到上述代码对应的二进制可执行文件。接下来，使用 <mark>file 命令</mark>可以确认该文件的<code>格式信息</code>。</p><p>该命令的执行返回结果如下图所示：</p><img src="`+p+'" alt="img" style="zoom:50%;"><p>根据命令执行结果开头处的信息，我们可以确认这是一个 ELF 格式的可执行文件。</p><ul><li>其中的 64-bit 表示该文件采用的是 <code>64 位地址空间</code>。</li><li>除此之外，命令还回显出了<code>该 ELF 格式的版本，是否采用动态链接，以及使用的动态链接器地址等</code>信息。</li></ul><h3 id="内部组成结构" tabindex="-1"><a class="header-anchor" href="#内部组成结构" aria-hidden="true">#</a> 内部组成结构</h3><p>接下来，我们通过 <mark>readelf 命令</mark>来查看该可执行文件的<code>内部组成结构</code>。顾名思义，这个命令专门用于读取特定 ELF 格式文件的相关信息。</p><h3 id="_1-header-可执行文件的基本信息" tabindex="-1"><a class="header-anchor" href="#_1-header-可执行文件的基本信息" aria-hidden="true">#</a> <strong>1. Header (可执行文件的基本信息)</strong></h3><blockquote><p><code>通过为 readelf 指定 “-h” 参数</code>，我们可以观察该文件的 ELF 头部内容。ELF 头内包含有描述整个可执行文件重要属性的相关信息。</p></blockquote><p>应用程序在被执行时，<code>操作系统可以借助其头部的相关字段，来快速找到支持程序运行所需要的数据。</code></p><p>命令执行结果如下图所示：</p><img src="'+r+'" alt="img" style="zoom:33%;"><blockquote><p>上述内容是一个ELF（Executable and Linkable Format）文件的ELF头部信息，它描述了该文件的一些基本属性和结构。</p><p>解释这些字段的含义如下：</p><ul><li>Magic: 用于标识文件格式的魔数，<strong>标示ELF文件的开头</strong>，常见的值为0x7f &#39;ELF&#39;。</li><li>Class: 表示该ELF文件的<strong>位数</strong>，ELF64表示64位。</li><li>Data: 表示数据的存储方式，2&#39;s complement, little endian表示数据<strong>采用补码的小端存储方式</strong>。</li><li>Version: 表示<strong>ELF文件的版本</strong>。</li><li>OS/ABI: 表示生成该ELF文件的<mark>操作系统</mark>和<mark>ABI</mark>（Application Binary Interface）标准，这里是UNIX - System V。</li><li><em>ABI Version</em>: 表示ABI的版本。</li><li><em>Type</em>: 表示ELF文件的类型，DYN表示可位置无关的可执行文件（动态链接库）。</li><li>Machine: 表示生成该ELF文件的目标体系结构，这里是Advanced Micro Devices的X86-64架构。</li><li>Version: 表示ELF文件的版本号。</li><li>Entry point address: 表示程序的入口地址。</li><li>Start of program headers: 指示<mark>程序头表</mark>（Program Headers）的起始位置。</li><li>Start of section headers: 指示<mark>节头表</mark>（Section Headers）的起始位置。</li><li>Flags: 表示特殊标记。</li><li>Size of this header: 表示<mark>ELF头</mark>本身的大小。</li><li>Size of program headers: 表示程序头表（Program Headers）中每个表项的大小。</li><li>Number of program headers: 表示程序头表（Program Headers）中表项的数量。</li><li>Size of section headers: 表示节头表（Section Headers）中每个表项的大小。</li><li>Number of section headers: 表示节头表（Section Headers）中表项的数量。</li><li>Section header string table index: 表示包含节名的字符串表在节头表中的索引。</li></ul><p>这些信息是ELF文件的元数据，描述了文件结构和执行属性，对于调试和执行ELF文件非常重要。</p></blockquote><h4 id="magic-字段" tabindex="-1"><a class="header-anchor" href="#magic-字段" aria-hidden="true">#</a> ## Magic 字段</h4><p>其中，操作系统通过 <mark>Magic 字段</mark>来判断该文件是不是一个标准的 ELF 格式文件，该字段一共长 <code>16 个字节</code>，每个字节代表着不同含义。</p><ul><li><p><code>前四个字节</code>构成了 ELF 文件格式的“魔数”，第一个字节为数字 0x7f，后三个字节则对应于三个大写字母 “ELF” 的 ASCII 编码。</p></li><li><p><code>剩下的(12个?)字节</code>还标记出了当前 ELF 文件的位数（如 32/64）、字节序、版本号，以及 ABI 等信息。</p></li></ul><h4 id="文件类型-入口地址-段节数量" tabindex="-1"><a class="header-anchor" href="#文件类型-入口地址-段节数量" aria-hidden="true">#</a> ## 文件类型 &amp; 入口地址 &amp; 段节数量</h4><p>除该字段外，ELF 头中还包含有 <code>ELF 文件类型、程序的入口加载地址</code>（0x4004b0），即程序运行时将会执行的第一条指令的位置，以及该可执行文件<code>适用的目标硬件平台和目标操作系统类型等</code>信息。</p><blockquote><p>ELF 作为一种文件格式，不仅在可执行文件中被使用，静态链接库、动态链接库，以及核心转储文件等也都可以采用这种格式。</p><ul><li>ET_REL(可重定位文件)</li><li>ET_DYN(共享目标共享库文件)</li><li>ET_EXEC(可执行文件)</li><li>ET_CORE(核心转储文件)</li></ul><p>我们会在下面的 “ELF 文件类型” 小节中继续讨论这个问题。</p></blockquote><h3 id="_2-section-header-静态-数据不同" tabindex="-1"><a class="header-anchor" href="#_2-section-header-静态-数据不同" aria-hidden="true">#</a> <strong>2. Section Header (静态) 数据不同</strong></h3><p>通过观察上图中的 ELF 头信息，我们能够得知，该 ELF 文件内包含有 30 个 Section 头，即对应 30 个 Section 结构，且第一个 Section 头位于文件开始偏移第 15512 个字节处。</p><p>在 ELF 格式中，Section 用于存放可执行文件中<code>按照功能</code>分类好的<code>数据</code>，而为了便于操作系统<code>查找和使用</code>这些数据，ELF 将各个 Section 的相关信息都整理在了其各自对应的 Section 头部中，众多连续的 Section 头便组成了 <code>Section 头表</code>。</p><p>Section 头表中记录了<code>各个 Section 结构的一些基本信息</code>，例如 <code>Section 的名称、长度、它在可执行文件中的偏移位置，以及具有的读写权限等。</code>而操作系统在实际使用时，便可直接从 ELF 头部中获取到 Section 头表在整个二进制文件内的偏移位置，以及该表的大小。</p><blockquote><p><code>而通过为 readelf 命令指定 “-S” 参数</code>，我们可以查看所有这些 Section 头的具体信息。</p></blockquote><p>该命令的执行结果如下图所示（这里限于篇幅，我只列出了较为重要的几个 Section 头部的内容）：</p><img src="'+d+'" alt="img" style="zoom:33%;"><blockquote><p>Section Header Table是ELF文件中的一个表格，用于描述各个节（Section）的属性和位置。它是ELF文件的一个重要组成部分。</p><p>Section Header Table中的每个表项对应一个节，并包含了对应节的各种属性和信息，例如节的名称、类型、大小、偏移量、对齐方式以及其他特定于节的属性。</p><p>常见的一些节类型包括：</p><ul><li>.text：包含可执行代码。</li><li>.data：包含已初始化的全局和静态变量。</li><li>.rodata：包含只读的数据。</li><li>.bss：包含未初始化的全局和静态变量。</li><li>.symtab：包含<mark>符号表</mark>，记录了可执行文件中的函数和变量的信息。</li><li>.strtab：包含<mark>字符串表</mark>，存储了各种节名、符号名等字符串的实际内容。</li><li>.rel.text：包含.text节中需要进行<strong>重定位的位置</strong>和<strong>相关的重定位信息</strong>。</li></ul><p>通过读取Section Header Table，程序可以了解到ELF文件中所有节的相关信息，以便正确地加载和执行程序，进行符号解析和重定位等操作。</p><p>需要注意的是，Section Header Table本身也是一个节，其在ELF文件中的位置和属性也会在对应的表项中进行描述。</p></blockquote><h4 id="text-rodata-data-bss" tabindex="-1"><a class="header-anchor" href="#text-rodata-data-bss" aria-hidden="true">#</a> ## .text | .rodata | .data | .bss</h4><p>可以看到，这里我主要筛选出了 <code>.text、.rodata、.data、.bss</code> 这四个 Section 对应头部的详细内容。如果你还记得我在 02 讲 和 10 讲 中介绍过的数据存储位置的相关知识，那对这四个 Section 一定不会陌生。</p><ul><li><p><mark>线程私有</mark>，<code>RE</code>: 只读只执行，强调执行</p><ul><li>其中，.text 主要用于存放程序对应的<code>机器代码</code>；</li><li>.rodata 用于存放程序中使用到的<code>只读常量值</code>；</li></ul></li><li><p><mark>线程共享</mark>，<code>RW</code>: 强调可以写，有需要就写</p><ul><li>.data 中包含有程序内<code>已经初始化的</code>全局变量或静态变量的值；</li><li>而 .bss 中则存放有<code>初始值为 0 的</code>全局或静态变量值。</li></ul></li></ul><blockquote><p>运行时，读是最基本的。</p><ul><li>读 + 可执行</li><li>读 + 可以写</li></ul></blockquote><h4 id="偏移地址处-文件-运行时进程vas" tabindex="-1"><a class="header-anchor" href="#偏移地址处-文件-运行时进程vas" aria-hidden="true">#</a> ## 偏移地址处: 文件/运行时进程VAS</h4><p>Section 头部中也标记了各个 Section 实际数据的所在位置。对于 .rodata 来说，</p><ul><li>[ Offset? ] 我们可以<code>在文件偏移</code>第 0x658 个字节，</li><li>[ Address? ] 或程序运行时<code>在进程 VAS 中的偏移位置</code> 0x400658 处看到它的实际内容。 <ul><li>0x: 代表十六进制</li></ul></li></ul><p>这里我们可以用 objdump 命令来验证一下。</p><blockquote><p><mark>objdump 命令</mark>是一个可以用来查看二进制文件内容的工具，通过为它指定 <code>“-s” 参数</code>，我们可以查看某个 Section 的完整内容。</p></blockquote><p>该命令的执行结果如下所示：</p><img src="'+u+'" alt="img" style="zoom:33%;"><p>可见，我们在 C 代码中使用到的字符串数据 “Hello, world!”，便被放置在了该 Section 距离其开头偏移 0x10 字节的位置上。</p><h4 id="相互整合-静态链接-动态链接" tabindex="-1"><a class="header-anchor" href="#相互整合-静态链接-动态链接" aria-hidden="true">#</a> ## 相互整合: 静态链接/动态链接</h4><p>在 ELF 格式中，众多的 <code>Section</code> 组成了描述该 ELF 文件内容的<mark>静态视图</mark>。</p><p>而静态视图的<code>一大作用</code>，便是完成应用程序整个生命周期中的<code>“链接”过程</code>。</p><blockquote><p><mark>链接</mark>意味着<code>不同类型</code>的 ELF 格式文件之间会<code>相互整合</code>，并最终生成可执行文件，且该文件可以正常运行的过程。</p><p><strong>根据整合发生的时期(<code>什么时候利用这个静态视图</code>)</strong>，链接可以被分为“<code>静态链接</code>”与“<code>动态链接</code>”，</p><p>这部分内容我会在后面的 27 讲与 29 讲中再为你深入介绍。</p></blockquote><h3 id="_3-program-header-动态-运行不同" tabindex="-1"><a class="header-anchor" href="#_3-program-header-动态-运行不同" aria-hidden="true">#</a> <strong>3. Program Header (动态) 运行不同</strong></h3><p>除了由 Section 组成的静态视图外，众多的 <code>Segment</code> 则组成了描述可执行文件的<mark>动态视图</mark>。</p><p>Segment 指定了应用程序<code>在实际运行时</code>，应该如何<code>在进程的 VAS 内部</code>组织数据。</p><blockquote><p>同样地，我们也可以<code>通过为 readelf 命令指定 “-l” 参数</code>，来观察这一讲开头那个程序对应可执行文件的 Segment 情况。</p></blockquote><p>该命令的执行结果如下图所示：</p><img src="'+m+'" alt="img" style="zoom:33%;"><blockquote><p>readelf -l: 列出了Seciton与Segment的对应情况</p><p>Program Header Table是ELF文件中的一个表格，用于描述可执行程序在内存中的布局和加载方式。它记录了可执行程序的各个段（Segment）在文件中的位置、大小以及在内存中的虚拟地址等信息。</p><p>Program Header Table中的每个表项对应一个段，并包含了对应段的一些属性和信息，例如段的类型、文件偏移量、内存虚拟地址、大小、访问权限等。</p><p>常见的一些段类型包括：</p><ul><li>PT_NULL：表示该表项无效，平台可忽略。</li><li><code>PT_LOAD</code>：表示将一个段加载进内存中，会指定文件中的偏移量和内存中的虚拟地址。</li><li><code>PT_DYNAMIC</code>：表示动态链接信息，包括动态链接表、重定位表等。</li><li><code>PT_INTERP</code>：指定程序的解释器路径和名称。</li><li>PT_NOTE：指定注释信息。</li><li><code>PT_SHLIB</code>：保留给共享对象库使用。</li><li>PT_PHDR：指定Program Header Table在文件中的位置和大小。</li></ul><p>Program Header Table中的表项数量可以从ELF头部的相关字段获取，通常每个可执行文件都有一个Program Header Table。</p><p>通过读取Program Header Table，操作系统或加载器可以了解到可执行文件在内存中的布局和加载方式，以便正确地将各个段加载到合适的内存地址，<strong>并设置相应的访问权限</strong>。程序在执行时，操作系统会根据这些信息将*ELF文件的各个段（以Segment加载，而不是Seciton）*加载到内存中，并根据虚拟地址映射到相应的物理地址。</p><p>需要注意的是，不同ELF文件的Program Header Table可能会有所不同，取决于文件本身的结构和需要加载的段类型。</p></blockquote><h4 id="load-re-rw-其他提供辅助" tabindex="-1"><a class="header-anchor" href="#load-re-rw-其他提供辅助" aria-hidden="true">#</a> ## LOAD - RE / RW | 其他提供辅助</h4><p>与 Section 类似的是，每个 Segment 也都有其对应的头部，以描述该 <code>Segment 的一些基本信息</code>，我们一般将其称为 <code>Program 头</code>。</p><p>Program 头中包含着<code>各个 Segment 的类型、偏移地址、大小、对齐情况，以及权限等</code>信息。</p><ul><li>其中，被标注为 <code>“LOAD” 类型的 Segment</code> 将会在程序运行时被真正载入到<mark>进程的 VAS（虚拟地址空间）</mark> 中， <ul><li>RE 可读可执行：<code>.text(程序机器代码)</code> 和 <code>.rodata(只读常量)</code></li><li>RW 可读可写：【<code>全局/静态</code>】<code>.data(已经初始化的)</code> 和 <code>.bss(初始值为0)</code></li></ul></li><li>而<code>其余 Segment</code> 则主要用于辅助程序的正常运行（比如进行<em>动态链接</em>）。</li><li>不仅如此，<mark>Program 头表</mark>的具体偏移位置和大小也被放置在了 ELF 头部中，因此操作系统可以在需要时，随时快速地得到这些信息。</li></ul><h2 id="动态segment-静态section-对应关系" tabindex="-1"><a class="header-anchor" href="#动态segment-静态section-对应关系" aria-hidden="true">#</a> 动态Segment 静态Section 对应关系</h2><p>通常来说，<em>各个 Segment 与 Section 之间会有一定的对应关系</em>。比如在上面的图片中，</p><ul><li>第一个 LOAD 类型的 Segment 便包含有 <code>.text(程序机器代码)</code> 和 <code>.rodata(只读常量)</code> 在内的多个 Section， <ul><li>而==【全局/静态】== <mark>.data([已经/需要]初始化的)</mark> 和 <mark>.bss([无需初始化]默认初始值的)</mark> 则被包含在第二个 LOAD 类型的 Segment 中。</li></ul></li><li>如果进一步观察，你会发现，第一个 LOAD Segment 具有的权限为 <code>“RE”，也就是可读可执行</code>；【<code>线程执行</code>】 <ul><li>而第二个 LOAD Segment 具有的权限为 <mark>“RW”，即可读可写</mark>。</li></ul></li></ul><p>那为什么这样分配呢？相信此时你一定有了答案。</p><p>另外我们观察到，第一个 LOAD Segment 所包含的内容，对应到可执行文件内的偏移（Offset）为 0。这意味着，操作系统在执行该程序时，除了各个 Segment 对应的 Sections 外【<code>2. Sections 头表</code>】，它还会将该文件的 <code>1. ELF 头</code>，连同它的 <code>3. Program 头表</code>一同加载到内存中。</p>',86),F={href:"https://www.cs.cmu.edu/afs/cs/academic/class/15213-f00/docs/elf.pdf",target:"_blank",rel:"noopener noreferrer"},S=o('<h2 id="elf文件格式图解" tabindex="-1"><a class="header-anchor" href="#elf文件格式图解" aria-hidden="true">#</a> ELF文件格式图解</h2><p>虽然上面的内容没有涉及 ELF 内部的所有设计细节，但对于日常学习而言，其实掌握 ELF 格式的基本组成结构<code>（ELF 头、Section 与 Segment 分别对应的静态视图和动态视图）</code>就足够了。你可以参考下图，来更加直观地回顾一下这些内容：</p><img src="'+k+'" alt="img" style="zoom:25%;"><figure><img src="'+h+`" alt="image-20230723153931111" tabindex="0" loading="lazy"><figcaption>image-20230723153931111</figcaption></figure><p>接下来，我们再一起看看如何使用 C 语言进行 ELF 编程。</p><h2 id="elf-编程" tabindex="-1"><a class="header-anchor" href="#elf-编程" aria-hidden="true">#</a> ELF 编程</h2><p>目前在 Linux 系统中，我们可以直接使用内核提供的<code>头文件 elf.h</code> 来进行针对 ELF 格式的应用编程。在该头文件中，预定义有针对不同 ELF 概念实体的<code>各类结构类型与宏</code>。</p><p>比如，对于 <code>ELF 头部</code>，我们可以直接在代码中使用该头文件中定义的 <code>ElfN_Ehdr</code>（N 根据所在系统的不同，可能取 32 或 64）类型来表示。下面这段 C 代码展示了如何使用这个类型：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token comment">// elf.h 头文件中包含有可用于描述所有合法 ELF 格式文件的各种自定义类型</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;elf.h&gt;</span>	<span class="token comment">// 头文件 elf.h</span></span>
<span class="token comment">// 在 elf.h 头文件中，定义有众多表示 ELF 特定指标的宏常量，</span>
<span class="token comment">// 比如，若 e_type 字段的值等于宏常量 ET_EXEC，那么表示该文件是一个可执行文件。</span>

<span class="token keyword">void</span> <span class="token function">print_elf_type</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> type_enum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type_enum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> ET_REL<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;A relocatable file.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> ET_DYN<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;A shared object file.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> ET_NONE<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;An unknown type.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> ET_EXEC<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;An executable file.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> ET_CORE<span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;A core file.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Elf64_Ehdr elf_header<span class="token punctuation">;</span>			<span class="token comment">// ElfN_Ehdr 表示ELF头部</span>
  <span class="token comment">// 为指针类型，应该先让其指向内存空间再使用fread</span>
  FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;./elf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 简单地打开了当前目录下名为 “elf” 的二进制可执行文件</span>
  <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>elf_header<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf64_Ehdr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 并从它的开头处直接读取了对应 Elf64_Ehdr 类型大小的数据，存放到名为 elf_header 的变量中。</span>
  <span class="token function">print_elf_type</span><span class="token punctuation">(</span>elf_header<span class="token punctuation">.</span>e_type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;An executable file.&quot;</span>
  <span class="token comment">// 通过访问该结构对象的 e_type 字段，我们便可得到该 ELF 文件的类型。</span>
  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Elf64_Ehdr* elf_header;为指针类型，应该先让其指向内存空间再使用fread</p></blockquote><p>在这段 C 代码中，我们简单地打开了当前目录下名为 “elf” 的二进制可执行文件，并从它的开头处直接读取了对应 Elf64_Ehdr 类型大小的数据，存放到名为 elf_header 的变量中。最后，通过访问该结构对象的 e_type 字段，我们便可得到该 ELF 文件的类型。在 elf.h 头文件中，定义有众多表示 ELF 特定指标的宏常量，比如，若 e_type 字段的值等于宏常量 ET_EXEC，那么表示该文件是一个可执行文件。</p>`,11),x=a("strong",null,"elf.h 头文件中包含有可用于描述所有合法 ELF 格式文件的各种自定义类型",-1),y=a("mark",null,"命令 “man 5 elf”",-1),q={href:"https://man7.org/linux/man-pages/man5/elf.5.html",target:"_blank",rel:"noopener noreferrer"},w=o('<h2 id="elf文件类型-静态链接-动态链接-异常处理" tabindex="-1"><a class="header-anchor" href="#elf文件类型-静态链接-动态链接-异常处理" aria-hidden="true">#</a> ELF文件类型/静态链接/动态链接/异常处理</h2><p>在这一讲结束之前，让我们再来看一个问题： <code>ELF 作为一种文件格式，它究竟在被哪些类型的文件使用呢？</code></p><p>通过上一小节的编程实战，我们可以得知：在 elf.h 头文件的定义中，ELF 格式可以应用在四种不同的文件类型上，它们对应的宏常量分别是</p><ul><li>【<code>静态链接</code>】ET_REL(可重定位文件)</li><li>【<code>动态链接</code>】ET_DYN(共享目标共享库文件)</li><li>ET_EXEC(可执行文件)</li><li>【<code>异常处理</code>】ET_CORE(核心转储文件)</li></ul><p>这里，我将上述四个宏常量与它们对应的 ELF 文件类型整理在了下面的表格中，供你参考：</p><img src="'+b+'" alt="img" style="zoom:33%;"><p>这四种 ELF 文件类型，虽然名称各不相同，但其内部数据的整体组织方式<code>都遵循同样的 ELF 文件格式标准</code>。而不同点在于，由于每种文件类型的<em>功能定位各不相同</em>，因此其内部的 ELF 格式组成结构也各有差异。</p><h3 id="可重定位文件-静态链接-静静躺着一部分" tabindex="-1"><a class="header-anchor" href="#可重定位文件-静态链接-静静躺着一部分" aria-hidden="true">#</a> ## 可重定位文件/静态链接/静静躺着一部分</h3><p>就拿<mark>可重定位文件</mark>来说吧，该类型文件可用于支持大型项目的<code>增量式开发</code>，也就是将程序中<code>可以模块化、独立分发的功能</code>进行单独编译，并形成可重定位文件。而<code>依赖于这些功能</code>实现的应用程序代码，便可与这些可重定位文件<code>一起编译</code>。最后，在经过<code>链接器的 静态链接处理</code>后，便能够得到程序对应的<code>可执行文件</code>。这种方式的好处在于，当每次程序功能发生变化时，都可以将需要重新编译的代码<code>约束在最小的范围</code>。</p><p>可重定位文件内仅包含有 <code>Section 的相关信息</code>，而没有 <code>Program 头等 用于支持其运行的</code> ELF 结构，因此该类型的文件<code>无法被直接运行</code>。</p><p><mark>而静态链接的一个主要作用</mark>，便是根据程序在 main 函数内的调用情况，收集各个可重定位文件中需要使用的功能实现，并最终生成对应<code>含有 *Program 头* 的可执行文件</code>。那么，这个过程具体是怎样进行的呢？我将在下一讲中为你揭晓答案。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>好了，讲到这里，今天的内容也就基本结束了。最后我来给你总结一下。</p><p>这一讲的内容主要是以可执行二进制文件作为切入点的。我首先介绍了在不同操作系统上的几种常见可执行文件格式，然后以最常见的 ELF 格式为例，带你对它的组成细节进行了更为深入的探究。</p><p>ELF 文件格式的基本组成结构可以被划分为 ELF 头、Section 和 Segment 三大主要部分。</p><ol><li>其中，各个 Section 中包含有按照功能类别划分好的、用于支撑 ELF 功能的各类数据。<br> 这些数据共同组成了 ELF 文件的静态视图，以用于支持 ELF 文件的链接过程。</li><li>而众多的 Segment 则组成了 ELF 文件的动态视图，<br> 该视图描述了 ELF 文件在被操作系统加载和执行时，其依赖的相关数据在进程 VAS 内的分布情况。</li></ol><p>除了通过操作系统自带的 readelf 等工具来观察 ELF 文件的内部情况外，我们也可以利用 Linux 内核提供的 elf.h 头文件。该头文件内预先定义了众多的 ELF 元素类型，可辅助我们编写符合自身需求的 ELF 分析和处理工具。</p><p>最后，我们还探讨了几种不同 ELF 文件类型之间的区别。<code>可重定位文件、共享目标文件、可执行文件，以及核心转储文件</code>，它们虽然有着各自不同的应用场景和内部数据组成，但也都作为 ELF 文件类型的一种，遵循着 ELF 格式的基本规则。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>尝试编写一个 C 程序，该程序可以读取并打印一个指定 ELF 文件的 Section 信息（Section 名称、大小，以及偏移地址）。</p><p>今天的课程到这里就结束了，希望可以帮助到你，也希望你在下方的留言区和我一起讨论。同时，欢迎你把这节课分享给你的朋友或同事，我们一起交流。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p><mark>最近刚看完 JVM 的字节码文件格式，配合这篇作对比两者的异同，十分有趣。</mark></p>',23);function T(P,A){const n=c("ExternalLinkIcon");return i(),l("div",null,[E,a("p",null,[a("a",g,[e("cs.cmu.edu/afs/cs/academic/class/15213-f00/docs/elf.pdf"),s(n)]),e("。")]),a("p",null,[a("a",L,[e("elf(5) - Linux manual page (man7.org)"),s(n)]),e("。")]),a("p",null,[a("a",v,[e("https://www.gnu.org/software/binutils/"),s(n)])]),_,a("p",null,[e("到这里，我们已经对 ELF 格式二进制可执行文件的内部情况有了一个大致了解，如果想了解更多有关 ELF 格式的详细信息，你可以参考"),a("a",F,[e("这个链接"),s(n)]),e("。")]),S,a("p",null,[e("可以说，"),x,e("。因此，通过选择性地阅读和实践，来深入了解 ELF 的设计细节不失为一个好方法。如果想了解关于该头文件的更多信息，你可以通过"),y,e(" 来查看有关该头文件的 Linux 帮助文档，或者直接在"),a("a",q,[e("这里"),s(n)]),e("找到它的在线版本。")]),w])}const N=t(f,[["render",T],["__file","√E25-ELF文件.html.vue"]]);export{N as default};
