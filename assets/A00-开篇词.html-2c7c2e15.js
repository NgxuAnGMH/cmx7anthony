import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as r,d as p}from"./app-cdabc73c.js";const d="/assets/aa5f644331319421eb7549d67d4f8773-d10b5a3a.jpeg",c={},m=p('<h1 id="开篇词-为什么你需要学习计算机组成原理" tabindex="-1"><a class="header-anchor" href="#开篇词-为什么你需要学习计算机组成原理" aria-hidden="true">#</a> 开篇词 | 为什么你需要学习计算机组成原理？</h1><p>你好，我是徐文浩，一个正在创业的工程师。目前主要是通过自然语言处理技术，为走向海外的中国企业提供英语的智能客服和社交网络营销服务。</p><p>2005 年从上海交通大学计算机系毕业之后，我一直以写代码为生。如果从 7 岁第一次在少年宫写程序开始算起，到今天，我的码龄快有 30 岁了。这些年里，</p><ul><li>我在 Trilogy Software 写过各种大型企业软件；</li><li>在 MediaV 这样的广告科技公司，从零开始搭建过支撑每天百亿流量的广告算法系统；</li><li>2015 年，我又加入了拼多多，参与重写拼多多的交易系统。</li></ul><p>这么多年一直在开发软件，我深感软件这个行业变化太快了。语言上，十年前流行 Java，这两年流行 Go；框架上，前两年流行 TensorFlow，最近又流行 PyTorch。我逐渐发现，学习应用层的各种语言、框架，好比在练拳法招式，可以短期给予你回报，而深入学习“<code>底层知识</code>”，就是在练扎马步、核心肌肉力量，是在提升你自己的“<code>根骨</code>”和“<code>资质</code>”。</p><p>正所谓“<code>练拳不练功，到老一场空</code>”。<strong><em>如果越早去弄清楚计算机的底层原理</em>，在你的知识体系中“储蓄”起这些知识，也就意味着你有越长的时间来收获学习知识的“利息”。虽然一开始可能不起眼，但是随着时间带来的复利效应，你的长线投资项目，就能让你在成长的过程中越走越快。</strong></p><h2 id="计算机底层知识的-第一课" tabindex="-1"><a class="header-anchor" href="#计算机底层知识的-第一课" aria-hidden="true">#</a> <strong>计算机底层知识的“第一课”</strong></h2><p>如果找出各大学计算机系的培养计划，你会发现，它们都有差不多十来门核心课程。其中，“计算机组成原理”是入门和底层层面的第一课。</p><p>这是为什么呢？我们直接用肉眼来看，计算机是由 CPU、内存、显示器这些设备组成的硬件，但是，计算机系的学生毕业之后，大部分却都是从事各种软件开发工作。显然，<em>在硬件和软件之间需要一座桥梁</em>，而“<code>计算机组成原理</code>”就扮演了这样一个角色，它既隔离了软件和硬件，也提供了让软件无需关心硬件，就能直接操作硬件的接口。</p><p>也就是说，你只需要对硬件有原理性的理解，就可以信赖硬件的可靠性，安安心心用高级语言来写程序。无论是写<mark>操作系统</mark>和<mark>编译器</mark>这样的硬核代码，还是写 <mark>Web 应用</mark>和<mark>手机 App</mark> 这样的应用层代码，你都可以做到心里有底。</p><p>除此之外，组成原理是计算机其他核心课程的一个“<code>导引</code>”。学习组成原理之后，向下，你可以学习<em>数字电路相关的课程</em>，向上，你可以学习<em>编译原理、操作系统</em>这些核心课程。如果想要深入理解，甚至设计一台自己的计算机，<em>体系结构</em>是必不可少的一门课，而组成原理是计算机体系结构的一个入门版本。</p><img src="'+d+'" alt="img" style="zoom:25%;"><p>所以说，无论你想要学习计算机的哪一门核心课程，之前你都应该先学习一下“<code>计算机组成原理</code>”，这样无论是对计算机的硬件原理，还是软件架构，你对计算机方方面面的知识都会有一个全局的了解。</p><p>学习这门“第一课”的过程，会为你在整个软件开发领域中打开一扇扇窗和门，让你看到更加广阔的天地。比如说，</p><ul><li>明白了高级语言是如何对应着 CPU 能够处理的一条条指令，<em>能为你打开编译原理这扇门</em>；</li><li>搞清楚程序是如何加载运行的，<em>能够让你对操作系统有更深入的理解</em>。</li></ul><p>因此，学好计算机组成原理，会让你对整个软件开发领域的全貌有一个系统了解，也会给你带来更多的职业发展机会。像我自己的团队里，<strong>有个小伙伴开始是做<em>算法应用开发</em>的，因为有<code>扎实的计算机基础知识</code>，后来就转去开发 TVM 这样的<em>深度学习编译器</em>了</strong>，是不是很厉害？</p><h2 id="理论和实践相结合" tabindex="-1"><a class="header-anchor" href="#理论和实践相结合" aria-hidden="true">#</a> <strong>理论和实践相结合</strong></h2><p>说了这么多计算机组成原理的重要性，但到底该怎么学呢？接下来跟你分享我的心得。</p><p>我自己对计算机硬件的发展历史一直很感兴趣，所以，我读了市面上很多组成原理相关的资料。</p><p>互联网时代，我们从来不缺少资料。无论是 Coursera 上北京大学的《<em>计算机组成</em>》开放课程，还是图灵奖作者写的《<em>计算机组成与设计：硬件 / 软件接口</em>》，都珠玉在前，是非常优秀的学习资料。不过“买书如山倒，读书如抽丝”。从业这么多年，周围想要好好学一学组成原理的工程师不少，但是真的坚持下来学完、学好的却不多。大部分买来的书，都是前面 100 页已经发黄了，后面 500 页从来没有打开过；更有不少非科班出身的程序员，直接说“这些书根本看不懂”。</p><p>对这些问题，我都深有感触。从自己学习和工作的经验看，我找到了三个主要原因。</p><ol><li><strong>第一，广。组成原理中的概念非常多，每个概念的信息量也非常大</strong>。比如想要理解 CPU 中的算术逻辑单元（也就是 ALU）是怎么实现加法的，需要牵涉到如何把整数表示成二进制，还需要了解这些表示背后的电路、逻辑门、CPU 时钟、触发器等知识。【数字逻辑电路】</li><li><strong>第二，深。组成原理中的很多概念，阐述开来就是计算机学科的另外一门核心课程</strong>。比如，计算机的指令是怎么从你写的 C、Java 这样的高级语言，变成计算机可以执行的机器码的？如果我们展开并深入讲解这个问题，就会变成《编译原理》这样一门核心课程。</li><li><strong>第三，学不能致用</strong>。学东西是要拿来用的，但因为这门课本身的属性，很多人在学习时，常常沉溺于概念和理论中，无法和自己日常的开发工作联系起来，以此来解决工作中遇到的问题，所以，学习往往没有成就感，就很难有动力坚持下去。</li></ol><p>考虑到这些，在这个专栏构思之初，我就给自己定了一个交付目标：<strong>我要把这些<mark>知识点</mark>和<mark>日常工作生活</mark>以及<mark>整个计算机行业的发展史</mark>联系起来，教你真正看懂、学会、记住组成原理的核心内容，教你更多地从“为什么”这个角度，去理解这些知识点，而不是只是去记忆“是什么”。</strong></p><h2 id="专栏设计" tabindex="-1"><a class="header-anchor" href="#专栏设计" aria-hidden="true">#</a> 专栏设计</h2><p>对于这个专栏，具体我是这样设计的。</p><p><strong>第一，我把组成原理里面的知识点，<em>和我在应用开发和架构设计中遇到的实际案例</em>，放到一起进行印证，通过代码和案例，让你消化理解</strong>。</p><p>比如，为什么 Disruptor 这个高性能队列框架里，要定义很多没有用的占位变量呢？其实这是为了确保我们唯一关心的参数，能够始终保留在 CPU 的高速缓存里面，而高速缓存比我们的内存要快百倍以上。</p><p><strong>第二，我会尽可能地多举一些我们日常生活里面的例子，让你理解计算机的各个组件是怎么运作的。<em>在真实的开发中</em>，我们会遇到什么问题，这些问题产生的根源是什么</strong>。让你从知识到应用，最终又回到知识，让学习和实践之间形成一道闭环。</p><p>计算机组成中很多组件的设计，都不是凭空发明出来，<code>它们中的很多都来自现实生活中的想法和比喻</code>。而底层很多硬件设计和开发的思路，其实也和你进行软件架构的开发<code>设计和思路是一样的</code>。</p><ul><li>比如说，在硬件上，我们是通过最基本的与、或、非、异或门这些最基础的门电路组合形成了强大的 CPU。<br> 而在面向对象和设计模式里，我们也常常是通过定义基本的 Command，然后组合来完成更复杂的功能；</li><li>再比如说，CPU 里面的冒险和分支预测的策略，就好像在接力赛跑里面后面几棒的选手早点起跑，如果交接棒没有问题，自然占了便宜，但是如果没能交接上，就会吃个大亏。</li></ul><p><strong>第三，在知识点和应用之外，我会多讲一些<em>计算机硬件发展史上的成功和失败，让你明白很多设计的历史渊源</em>，让你更容易记住“为什么”，更容易记住这些知识点</strong>。</p><ul><li>比如说，奔腾 4 的失败，就是受限于超长流水线带来的散热和功耗问题，而移动时代 ARM 的崛起，则是因为 Intel 的芯片功耗太大，不足以在小小的手机里放下足够支撑 1 天的电池。</li><li>计算机芯片的兴盛和衰亡，往往都是因为我们的计算机遇到了“功耗墙”这个散热和能耗上的挑战。而现代的云计算数据中心的设计到选址，也是围绕功耗和散热的。</li><li>理解了这些成功和失败背后的原因，你自然记住了这些背后的知识点。</li></ul><p><strong>最后，在这三种帮助你理解“为什么”的方法之上，我会把整个的计算机组成原理通过指令、计算、CPU、存储系统和 I/O 串起来。<em>通过一个程序的执行过程进行逐层分解</em>，让你能对整个系统有一个全貌的了解</strong>。</p><p>我希望这个专栏，不仅能够让你学好计算机组成原理的知识，更能够成为引领你进入更多底层知识的大门，<code>让你有动力、有方法、更深入地去进一步学习</code>体系结构、操作系统、编译原理这样的课程，成为真正的“<code>内家高手</code>”。</p><p>“<code>人生如逆旅，我亦是行人</code>”。学习总不会是一件太轻松的事情，希望在这个专栏里，你能和我多交流，坚持练完这一手内功。</p><p>下面，你可以讲一讲，你对于计算机组成原理的认识是怎样的？在之前工作中，哪些地方用到了计算机组成原理相关的知识呢？欢迎写在留言区，我们一起交流。</p><blockquote><p>作者回复: 其实 操作系统 也是一个“软件”，而开发操作系统，其实只需要关注到“组成原理”或者说“体系结构”就好了，而不需要真的了解硬件，比如电路层面的实现。 操作系统，其实是在“组成原理”所讲到的“指令集”上的一层封装。</p><hr><p>非科班出生，对于计算机组成原理本就是一片空白。这个领域其实是<code>又爱又怕的地方，想了解，又怕理解不了，浪费时间</code>。<br> 作者回复: 其实这些领域并不困难，又很有意思。就像《冰与火之歌》里面水舞者教导艾莉亚的一样，<em>“恐惧比利剑”更伤人</em>。<strong>破除对于基础知识“难”的迷信，是迈向更高水平必经的一步</strong>。加油和大家一起学习。</p><hr><p>老师，非科班出身，移动应用开发两年，从没有接触这方面底层知识，只是一直听说计算机组成原理、数据结构和算法、编译原理等，有资格上车吗？<br> 作者回复: 瞬时同学你好，<code>上车无需”资格“</code>，欢迎上车。组成原理可以算是理解计算机运作机制的第一门入门课，这门课的交付目标就是让科班的同学们能够温故而知新，<code>为非科班的同学们打开深入学习计算机核心课程的大门</code>。</p><hr><p>“<strong>人类对于新知识和新技术的学习和认知过程<em>总是螺旋上升的</em>，对某个复杂的事务<em>不可能立即就全面理解</em>。相反，对任何复杂的事务<em>必须从各个不同的角度（总体和细节）<em>进行学习，并随时温习以前学习过的内容，而每一次螺旋上升的过程</em>都会有新的收获</em>。</strong>“这是本科计算机网络教程第一章概述中的一段话，用于自勉。</p><hr><p>最近在看王坚博士的在线，有一句话记得比较深，<strong>人们都知道互联网，却不知道互联网的发展史，这样是很难创新的</strong>。那么，如果不知道一小部分的计算机组成原理，搞不清楚它到底是怎么跑起来的，感觉真的只是代码的搬运工了<br> 作者回复: 特别是这两年其实计算机体系结构又进入一个新的发展时期啦，更深入理解组成的基本原理还是会了解更多<code>很有意思的业界发展信息的</code>。</p><hr><p>老师您讲解这些组成原理能否结合机器性能指标讲解！<code>服务器的带宽，IO，内存，CPU核数的服务器资源</code>估算一起讲解？<br> 作者回复: 在讲解CPU和存储器的部分，我都会覆盖到实际的服务器资源的估算的案例的。并且和大家一起来看看，<em>具体的应用场景下，<code>我们究竟是</code>靠程序员的技艺就能够完成性能优化，<code>还是必须要依靠</code>更好的硬件才能支撑我们的访问流量</em>。</p><hr><p>我比较好奇的是我们写的应用层代码是如何利用内存的，还有就是内存泄露问题~<br> 作者回复: 成 同学你好，对于程序的内存使用，<em>我会在这个专栏的程序的装载，和存储器层次结构部分覆盖到</em>。<br> 内存泄漏问题，更多是一个应用层开发的问题，需要“一事一议”地来看</p><hr><p>你好，我不是计算机专业的能听得懂吗？听这门课程之前是否需要其他课程做铺垫？<br> 作者回复: 落叶同学你好，这个专栏我就是希望能够带更多的同学入门，我希望只要是软件开发行业的从业者，都可以跟上并且听完这个课程，<code>所以没有前置课程的要求</code>。不过需要你多少有些软件开发的经验。</p></blockquote>',37),a=[m];function t(s,n){return o(),r("div",null,a)}const h=e(c,[["render",t],["__file","A00-开篇词.html.vue"]]);export{h as default};
