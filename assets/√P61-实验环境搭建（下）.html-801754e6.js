import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,d as p}from"./app-cdabc73c.js";const e={},o=p(`<p>61 | 搭建操作系统实验环境（下）：授人以鱼不如授人以渔</p><h1 id="√61-搭建操作系统实验环境-下-授人以鱼不如授人以渔" tabindex="-1"><a class="header-anchor" href="#√61-搭建操作系统实验环境-下-授人以鱼不如授人以渔" aria-hidden="true">#</a> √61 | 搭建操作系统实验环境（下）：授人以鱼不如授人以渔</h1><p>上一节我们做了一个实验，添加了一个系统调用，并且编译了内核。这一节，我们来尝试调试内核。这样，我们就可以一步一步来看，内核的代码逻辑执行到哪一步了，对应的变量值是什么。</p><h2 id="了解-gdb" tabindex="-1"><a class="header-anchor" href="#了解-gdb" aria-hidden="true">#</a> 了解 gdb</h2><p>在 Linux 下面，调试程序使用一个叫作 gdb 的工具。通过这个工具，我们可以逐行运行程序。</p><p>例如，上一节我们写的 syscall.c 这个程序，我们就可以通过下面的命令编译。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>gcc <span class="token operator">-</span>g syscall<span class="token punctuation">.</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，参数 -g 的意思就是在编译好的二进制程序中，加入 debug 所需的信息。</p><p>接下来，我们安装一下 gdb。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>apt<span class="token operator">-</span>get install gdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们就可以来调试这个程序了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span><span class="token operator">/</span>syscall# gdb <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out        
GNU <span class="token function">gdb</span> <span class="token punctuation">(</span>Ubuntu <span class="token number">8.1</span><span class="token operator">-</span><span class="token number">0u</span>buntu3<span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">8.1</span><span class="token number">.0</span><span class="token number">.20180409</span><span class="token operator">-</span>git
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Reading symbols from <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>done<span class="token punctuation">.</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> l
<span class="token number">1</span>       #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">2</span>       #include <span class="token operator">&lt;</span>stdlib<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">3</span>       #include <span class="token operator">&lt;</span>unistd<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">4</span>       #include <span class="token operator">&lt;</span>linux<span class="token operator">/</span>kernel<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">5</span>       #include <span class="token operator">&lt;</span>sys<span class="token operator">/</span>syscall<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">6</span>       #include <span class="token operator">&lt;</span>string<span class="token punctuation">.</span>h<span class="token operator">&gt;</span>
<span class="token number">7</span>
<span class="token number">8</span>       <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">9</span>       <span class="token punctuation">{</span>
<span class="token number">10</span>        <span class="token keyword">char</span> <span class="token operator">*</span> words <span class="token operator">=</span> <span class="token string">&quot;I am liuchao from user mode.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token number">10</span>
Breakpoint <span class="token number">1</span> at <span class="token number">0x6e2</span><span class="token operator">:</span> file syscall<span class="token punctuation">.</span>c<span class="token punctuation">,</span> line <span class="token number">10.</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> r
Starting program<span class="token operator">:</span> <span class="token operator">/</span>root<span class="token operator">/</span>syscall<span class="token operator">/</span>a<span class="token punctuation">.</span>out 

Breakpoint <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> at syscall<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">10</span>
<span class="token number">10</span>        <span class="token keyword">char</span> <span class="token operator">*</span> words <span class="token operator">=</span> <span class="token string">&quot;I am liuchao from user mode.&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">12</span>        ret <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">,</span> words<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p words
$<span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0x5555555547c4</span> <span class="token string">&quot;I am liuchao from user mode.&quot;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> s
<span class="token function">__strlen_sse2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> at <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>sysdeps<span class="token operator">/</span>x86_64<span class="token operator">/</span>multiarch<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>strlen<span class="token punctuation">.</span>S<span class="token operator">:</span><span class="token number">79</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> bt
#<span class="token number">0</span>  <span class="token function">__strlen_sse2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> at <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>sysdeps<span class="token operator">/</span>x86_64<span class="token operator">/</span>multiarch<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>strlen<span class="token punctuation">.</span>S<span class="token operator">:</span><span class="token number">79</span>
#<span class="token number">1</span>  <span class="token number">0x00005555555546f9</span> in <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> at syscall<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">12</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> c
Continuing<span class="token punctuation">.</span>
<span class="token keyword">return</span> <span class="token number">63</span> from kernel mode<span class="token punctuation">.</span>
<span class="token punctuation">[</span>Inferior <span class="token number">1</span> <span class="token punctuation">(</span>process <span class="token number">1774</span><span class="token punctuation">)</span> exited normally<span class="token punctuation">]</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> q
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，我们只要掌握简单的几个 gdb 的命令就可以了。</p><ul><li><p>l，即 list，用于显示多行源代码。</p></li><li><p>b，即 break，用于设置断点。</p></li><li><p>r，即 run，用于开始运行程序。</p></li><li><p>n，即 next，用于执行下一条语句。如果该语句为函数调用，则不会进入函数内部执行。</p></li><li><p>p，即 print，用于打印内部变量值。</p></li><li><p>s，即 step，用于执行下一条语句。如果该语句为函数调用，则进入函数，执行其中的第一条语句。</p></li><li><p>c，即 continue，用于继续程序的运行，直到遇到下一个断点。</p></li><li><p>bt，即 backtrace，用于查看函数调用信息。</p></li><li><p>q，即 quit，用于退出 gdb 环境。</p></li></ul><h2 id="debug-kernel" tabindex="-1"><a class="header-anchor" href="#debug-kernel" aria-hidden="true">#</a> Debug kernel</h2><p>看了 debug 一个进程还是简单的，接下来，我们来试着 debug 整个 kernel。</p><p>第一步，要想 kernel 能够被 debug，需要像上面编译程序一样，将 debug 所需信息也放入二进制文件里面去。这个我们在编译内核的时候已经设置过了，也就是把“CONFIG_DEBUG_INFO”和“CONFIG_FRAME_POINTER”两个变量设置为 <code>yes</code>。</p><p>第二步，就是安装 gdb。kernel 运行在 qemu 虚拟机里面，gdb 运行在宿主机上，所以我们应该在宿主机上进行安装。</p><p>第三步，找到 gdb 要运行的那个内核的二进制文件。这个文件在哪里呢？根据 grub 里面的配置，它应该在 /boot/vmlinuz-4.15.18 这里。</p><p>另外，为了方便在 debug 的过程中查看源代码，我们可以将 /usr/src/linux-source-4.15.0 整个目录，都拷贝到宿主机上来。因为内核一旦进入 debug 模式，就不能运行了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>scp <span class="token operator">-</span>r popsuper@<span class="token number">192.168</span><span class="token number">.57</span><span class="token number">.100</span><span class="token operator">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>src<span class="token operator">/</span>linux<span class="token operator">-</span>source<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.0</span> <span class="token punctuation">.</span><span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 /usr/src/linux-source-4.15.0 这个目录下面，vmlinux 文件也是内核的二进制文件。</p><p>第四步，修改 qemu 的启动参数和 qemu 里面虚拟机的启动参数，从而使得 gdb 可以远程 attach 到 qemu 里面的内核上。</p><p>我们知道，gdb debug 一个进程的时候，gdb 会监控进程的运行，使得进程一行一行地执行二进制文件。如果像 syscall.c 的二进制文件 a.out 一样，就在本地，gdb 可以通过 attach 到这个进程上，作为这个进程的父进程，来监控它的运行。</p><p>但是，gdb debug 一个内核的时候，因为内核在 qemu 虚拟机里面，所以我们无法监控本地进程，而要通过 qemu 来监控 qemu 里面的内核，这就要借助 qemu 的机制。</p><p>qemu 有个参数 -s，它代表参数 -gdb tcp::1234，意思是 qemu 监听 1234 端口，gdb 可以 attach 到这个端口上来，debug qemu 里面的内核。</p><p>为了完成这一点，我们需要修改 ubuntutest 这个虚拟机的定义文件。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>virsh edit ubuntutest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里，我们能将虚拟机的定义文件修改成下面的样子，其中主要改了两项：</p><ol><li><p>在 domain 的最后加上了 qemu:commandline，里面指定了参数 -s；</p></li><li><p>在 domain 中添加 xmlns:qemu。没有这个 XML 的 namespace，qemu:commandline 这个参数 libvirt 不认。</p></li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">&lt;</span>domain type<span class="token operator">=</span><span class="token char">&#39;qemu&#39;</span> xmlns<span class="token operator">:</span>qemu<span class="token operator">=</span>&#39;http<span class="token operator">:</span><span class="token comment">//libvirt.org/schemas/domain/qemu/1.0&#39;&gt;</span>
  <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>ubuntutest<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>uuid<span class="token operator">&gt;</span><span class="token number">0f</span><span class="token number">0806</span>ab<span class="token operator">-</span><span class="token number">531</span>d<span class="token operator">-</span><span class="token number">6134</span><span class="token operator">-</span><span class="token number">5</span>def<span class="token operator">-</span>c5b4955292aa<span class="token operator">&lt;</span><span class="token operator">/</span>uuid<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>memory unit<span class="token operator">=</span><span class="token char">&#39;KiB&#39;</span><span class="token operator">&gt;</span><span class="token number">8388608</span><span class="token operator">&lt;</span><span class="token operator">/</span>memory<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>currentMemory unit<span class="token operator">=</span><span class="token char">&#39;KiB&#39;</span><span class="token operator">&gt;</span><span class="token number">8388608</span><span class="token operator">&lt;</span><span class="token operator">/</span>currentMemory<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>vcpu placement<span class="token operator">=</span><span class="token char">&#39;static&#39;</span><span class="token operator">&gt;</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>vcpu<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>os<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>type arch<span class="token operator">=</span><span class="token char">&#39;x86_64&#39;</span> machine<span class="token operator">=</span><span class="token char">&#39;pc-i440fx-trusty&#39;</span><span class="token operator">&gt;</span>hvm<span class="token operator">&lt;</span><span class="token operator">/</span>type<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>boot dev<span class="token operator">=</span><span class="token char">&#39;hd&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>os<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>clock offset<span class="token operator">=</span><span class="token char">&#39;utc&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>on_poweroff<span class="token operator">&gt;</span>destroy<span class="token operator">&lt;</span><span class="token operator">/</span>on_poweroff<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>on_reboot<span class="token operator">&gt;</span>restart<span class="token operator">&lt;</span><span class="token operator">/</span>on_reboot<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>on_crash<span class="token operator">&gt;</span>restart<span class="token operator">&lt;</span><span class="token operator">/</span>on_crash<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>devices<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>emulator<span class="token operator">&gt;</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>qemu<span class="token operator">-</span>system<span class="token operator">-</span>x86_64<span class="token operator">&lt;</span><span class="token operator">/</span>emulator<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>disk type<span class="token operator">=</span><span class="token char">&#39;file&#39;</span> device<span class="token operator">=</span><span class="token char">&#39;disk&#39;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>driver name<span class="token operator">=</span><span class="token char">&#39;qemu&#39;</span> type<span class="token operator">=</span><span class="token char">&#39;qcow2&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>source file<span class="token operator">=</span><span class="token char">&#39;/mnt/vdc/ubuntutest.img&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>backingStore<span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>target dev<span class="token operator">=</span><span class="token char">&#39;vda&#39;</span> bus<span class="token operator">=</span><span class="token char">&#39;virtio&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>alias name<span class="token operator">=</span><span class="token char">&#39;virtio-disk0&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>address type<span class="token operator">=</span><span class="token char">&#39;pci&#39;</span> domain<span class="token operator">=</span><span class="token char">&#39;0x0000&#39;</span> bus<span class="token operator">=</span><span class="token char">&#39;0x00&#39;</span> slot<span class="token operator">=</span><span class="token char">&#39;0x04&#39;</span> function<span class="token operator">=</span><span class="token char">&#39;0x0&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>disk<span class="token operator">&gt;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token operator">&lt;</span>interface type<span class="token operator">=</span><span class="token char">&#39;bridge&#39;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>mac address<span class="token operator">=</span><span class="token char">&#39;fa:16:3e:6e:89:ce&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>source bridge<span class="token operator">=</span><span class="token char">&#39;br0&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>target dev<span class="token operator">=</span><span class="token char">&#39;tap1&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>model type<span class="token operator">=</span><span class="token char">&#39;virtio&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>alias name<span class="token operator">=</span><span class="token char">&#39;net0&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>address type<span class="token operator">=</span><span class="token char">&#39;pci&#39;</span> domain<span class="token operator">=</span><span class="token char">&#39;0x0000&#39;</span> bus<span class="token operator">=</span><span class="token char">&#39;0x00&#39;</span> slot<span class="token operator">=</span><span class="token char">&#39;0x03&#39;</span> function<span class="token operator">=</span><span class="token char">&#39;0x0&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>interface<span class="token operator">&gt;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>devices<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>qemu<span class="token operator">:</span>commandline<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>qemu<span class="token operator">:</span>arg value<span class="token operator">=</span><span class="token char">&#39;-s&#39;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>qemu<span class="token operator">:</span>commandline<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>domain<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，为了远程 debug 成功，我们还需要修改 qemu 里面的虚拟机的 grub 和 menu.list，在内核命令行中添加 nokaslr，来关闭 KASLR。KASLR 会使得内核地址空间布局随机化，从而会造成我们打的断点不起作用。</p><p>对于 grub.conf，修改如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>submenu <span class="token char">&#39;Advanced options for Ubuntu&#39;</span> $menuentry_id_option &#39;gnulinux<span class="token operator">-</span>advanced<span class="token operator">-</span><span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9&#39; <span class="token punctuation">{</span>
        menuentry <span class="token char">&#39;Ubuntu, with Linux 4.15.18&#39;</span> <span class="token operator">--</span>class ubuntu <span class="token operator">--</span>class gnu<span class="token operator">-</span>linux <span class="token operator">--</span>class gnu <span class="token operator">--</span>class os $menuentry_id_option &#39;gnulinux<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.18</span><span class="token operator">-</span>advanced<span class="token operator">-</span><span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9&#39; <span class="token punctuation">{</span>
                recordfail
                load_video
                gfxmode $linux_gfx_mode
                insmod gzio
                <span class="token keyword">if</span> <span class="token punctuation">[</span> x$grub_platform <span class="token operator">=</span> xxen <span class="token punctuation">]</span><span class="token punctuation">;</span> then insmod xzio<span class="token punctuation">;</span> insmod lzopio<span class="token punctuation">;</span> fi
                insmod part_gpt
                insmod ext2
                <span class="token keyword">if</span> <span class="token punctuation">[</span> x$feature_platform_search_hint <span class="token operator">=</span> xy <span class="token punctuation">]</span><span class="token punctuation">;</span> then
                  search <span class="token operator">--</span>no<span class="token operator">-</span>floppy <span class="token operator">--</span>fs<span class="token operator">-</span>uuid <span class="token operator">--</span>set<span class="token operator">=</span>root  <span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9
                <span class="token keyword">else</span>
                  search <span class="token operator">--</span>no<span class="token operator">-</span>floppy <span class="token operator">--</span>fs<span class="token operator">-</span>uuid <span class="token operator">--</span>set<span class="token operator">=</span>root <span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9
                fi
                echo    <span class="token char">&#39;Loading Linux 4.15.18 ...&#39;</span>
                linux   <span class="token operator">/</span>boot<span class="token operator">/</span>vmlinuz<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.18</span> root<span class="token operator">=</span>UUID<span class="token operator">=</span><span class="token number">470f</span><span class="token number">3</span>a42<span class="token operator">-</span><span class="token number">7</span>a97<span class="token operator">-</span><span class="token number">4</span>b9d<span class="token operator">-</span>aaa0<span class="token operator">-</span><span class="token number">26</span>deb3d234f9 ro nokaslr console<span class="token operator">=</span>ttyS0 maybe<span class="token operator">-</span>ubiquity
                echo    <span class="token char">&#39;Loading initial ramdisk ...&#39;</span>
                initrd  <span class="token operator">/</span>boot<span class="token operator">/</span>initrd<span class="token punctuation">.</span>img<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.18</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 menu.list，修改如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>title           Ubuntu <span class="token number">18.04</span><span class="token number">.2</span> LTS<span class="token punctuation">,</span> kernel <span class="token number">4.15</span><span class="token number">.18</span>
<span class="token function">root</span>            <span class="token punctuation">(</span>hd0<span class="token punctuation">)</span>
kernel          <span class="token operator">/</span>boot<span class="token operator">/</span>vmlinuz<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.18</span> root<span class="token operator">=</span><span class="token operator">/</span>dev<span class="token operator">/</span>hda1 ro nokaslr console<span class="token operator">=</span>hvc0 console<span class="token operator">=</span>ttyS0
initrd          <span class="token operator">/</span>boot<span class="token operator">/</span>initrd<span class="token punctuation">.</span>img<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改完毕后，我们需要在虚拟机里面 shutdown -h now，来关闭虚拟机。注意不要 reboot，因为虚拟机里面运行 reboot，我们改过的那个 XML 会不起作用。</p><p>当我们在宿主机上发现虚拟机关机之后，就可以通过 virsh start ubuntutest 启动虚拟机，这个时候我们添加的参数 -s 才起作用。</p><p>第五步，使用 gdb 运行内核的二进制文件，执行 gdb vmlinux。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">/</span>mnt<span class="token operator">/</span>vdc<span class="token operator">/</span>linux<span class="token operator">-</span>source<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.0</span># gdb vmlinux
GNU <span class="token function">gdb</span> <span class="token punctuation">(</span>Ubuntu <span class="token number">7.11</span><span class="token number">.1</span><span class="token operator">-</span><span class="token number">0u</span>buntu1<span class="token operator">~</span><span class="token number">16.5</span><span class="token punctuation">)</span> <span class="token number">7.11</span><span class="token number">.1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
To enable execution of this file add
        add<span class="token operator">-</span><span class="token keyword">auto</span><span class="token operator">-</span>load<span class="token operator">-</span>safe<span class="token operator">-</span>path <span class="token operator">/</span>mnt<span class="token operator">/</span>vdc<span class="token operator">/</span>linux<span class="token operator">-</span>source<span class="token operator">-</span><span class="token number">4.15</span><span class="token number">.0</span><span class="token operator">/</span>vmlinux<span class="token operator">-</span>gdb<span class="token punctuation">.</span>py
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b sys_sayhelloworld
Breakpoint <span class="token number">1</span> at <span class="token number">0xffffffff8109e2f0</span><span class="token operator">:</span> file kernel<span class="token operator">/</span>sys<span class="token punctuation">.</span>c<span class="token punctuation">,</span> line <span class="token number">192.</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> target remote <span class="token operator">:</span><span class="token number">1234</span>
Remote debugging using <span class="token operator">:</span><span class="token number">1234</span>
<span class="token function">native_safe_halt</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> at <span class="token punctuation">.</span><span class="token operator">/</span>arch<span class="token operator">/</span>x86<span class="token operator">/</span>include<span class="token operator">/</span><span class="token keyword">asm</span><span class="token operator">/</span>irqflags<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">61</span>
<span class="token number">61</span>      <span class="token punctuation">}</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> c
Continuing<span class="token punctuation">.</span>
<span class="token punctuation">[</span>Switching to Thread <span class="token number">2</span><span class="token punctuation">]</span>
Thread <span class="token number">2</span> hit Breakpoint <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">sys_sayhelloworld</span> <span class="token punctuation">(</span>words<span class="token operator">=</span><span class="token number">0x563cbfa907c4</span> <span class="token string">&quot;I am liuchao from user mode.&quot;</span><span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">)</span> at kernel<span class="token operator">/</span>sys<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">192</span>
<span class="token number">192</span>     <span class="token punctuation">{</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> bt
#<span class="token number">0</span>  <span class="token function">sys_sayhelloworld</span> <span class="token punctuation">(</span>words<span class="token operator">=</span><span class="token number">0x55b2811537c4</span> <span class="token string">&quot;I am liuchao from user mode.&quot;</span><span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">)</span> at kernel<span class="token operator">/</span>sys<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">192</span>
#<span class="token number">1</span>  <span class="token number">0xffffffff810039f7</span> in <span class="token function">do_syscall_64</span> <span class="token punctuation">(</span>regs<span class="token operator">=</span><span class="token number">0xffffc9000133bf58</span><span class="token punctuation">)</span> at arch<span class="token operator">/</span>x86<span class="token operator">/</span>entry<span class="token operator">/</span>common<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">290</span>
#<span class="token number">2</span>  <span class="token number">0xffffffff81a00081</span> in <span class="token function">entry_SYSCALL_64</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> at arch<span class="token operator">/</span>x86<span class="token operator">/</span>entry<span class="token operator">/</span>entry_64<span class="token punctuation">.</span>S<span class="token operator">:</span><span class="token number">237</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">195</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&gt;=</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">198</span>             <span class="token function">copy_from_user</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> words<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">199</span>             ret<span class="token operator">=</span><span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;User Mode says %s to the Kernel Mode!&quot;</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p buffer
$<span class="token number">1</span> <span class="token operator">=</span> &quot;I am liuchao from user mode<span class="token punctuation">.</span>\\<span class="token number">000</span>\\<span class="token number">177</span>\\<span class="token number">000</span>\\<span class="token number">000</span>\\<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">200</span>             <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p ret
$<span class="token number">2</span> <span class="token operator">=</span> <span class="token number">63</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token function">c</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token function">do_syscall_64</span> <span class="token punctuation">(</span>regs<span class="token operator">=</span><span class="token number">0xffffc9000133bf58</span><span class="token punctuation">)</span> at arch<span class="token operator">/</span>x86<span class="token operator">/</span>entry<span class="token operator">/</span>common<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">295</span>
<span class="token number">295</span>             <span class="token function">syscall_return_slowpath</span><span class="token punctuation">(</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> s
<span class="token function">syscall_return_slowpath</span> <span class="token punctuation">(</span>regs<span class="token operator">=</span><span class="token operator">&lt;</span>optimized out<span class="token operator">&gt;</span><span class="token punctuation">)</span> at arch<span class="token operator">/</span>x86<span class="token operator">/</span>entry<span class="token operator">/</span>common<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">295</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token number">268</span>             <span class="token function">prepare_exit_to_usermode</span><span class="token punctuation">(</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token function">do_syscall_64</span> <span class="token punctuation">(</span>regs<span class="token operator">=</span><span class="token number">0xffffc9000133bf58</span><span class="token punctuation">)</span> at arch<span class="token operator">/</span>x86<span class="token operator">/</span>entry<span class="token operator">/</span>common<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">296</span>
<span class="token number">296</span>     <span class="token punctuation">}</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token function">entry_SYSCALL_64</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> at arch<span class="token operator">/</span>x86<span class="token operator">/</span>entry<span class="token operator">/</span>entry_64<span class="token punctuation">.</span>S<span class="token operator">:</span><span class="token number">246</span>
<span class="token number">246</span>             movq    <span class="token function">RCX</span><span class="token punctuation">(</span><span class="token operator">%</span>rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rcx
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> n
<span class="token function">entry_SYSCALL_64</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> at arch<span class="token operator">/</span>x86<span class="token operator">/</span>entry<span class="token operator">/</span>entry_64<span class="token punctuation">.</span>S<span class="token operator">:</span><span class="token number">330</span>
<span class="token number">330</span>             USERGS_SYSRET64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先设置一个断点在我们自己写的系统调用上 b sys_sayhelloworld，通过执行 target remote :1234，来 attach 到 qemu 上，然后，执行 c，也即 continue 运行内核。这个时候内核始终在 Continuing 的状态，也即持续在运行中，这个时候我们可以远程登录到 qemu 里的虚拟机上，执行各种命令。</p><p>如果我们在虚拟机里面运行 syscall.c 编译好的 a.out，这个时候肯定会调用到内核。内核肯定会经过系统调用的过程，到达 sys_sayhelloworld 这个函数，这就碰到了我们设置的那个断点。</p><p>如果执行 bt，我们能看到，这个系统调用是从 entry_64.S 里面的 entry_SYSCALL_64 () 函数，调用到 do_syscall_64 函数，再调用到 sys_sayhelloworld 函数的。这一点和我们在<code>系统调用</code>那一节分析的过程是一模一样的。</p><p>我们可以通过执行 next 命令，来看 sys_sayhelloworld 一步一步是怎么执行的，通过 p buffer 查看 buffer 里面的内容。在这个过程中，由于内核是逐行运行的，因而我们在虚拟机里面的命令行是卡死的状态。</p><p>当我们不断地 next，直到执行完毕 sys_sayhelloworld 的时候，会看到，do_syscall_64 会调用 syscall_return_slowpath。它会调用 prepare_exit_to_usermode，然后会回到 entry_SYSCALL_64，然后对于寄存器进行操作，最后调用指令 USERGS_SYSRET64 回到用户态。这个返回的过程和系统调用那一节也一模一样。</p><p>看，通过 debug 我们能够跟踪系统调用的整个过程。你可以将我们这一门课里面学的所有的过程都 debug 一下，看看变量的值，从而对于内核的工作机制有更加深入的了解。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>在这个课程里面，我们写过一些程序，为了保证程序能够顺利运行，我一般会将代码完整地放到文本中，让你拷贝下来就能编译和运行。如果你运行的时候发现有问题，或者想了解一步一步运行的细节，这一节介绍的 gdb 是一个很好的工具。</p><p>这一节你尤其应该掌握的是，如何通过宿主机上的 gdb 来 debug 虚拟机里面的内核。这一点非常重要，会了这个，你就能够返回去，挨个研究每一章每一节的内核数据结构和运行逻辑了。</p><p>在这门课中，进程管理、内存管理、文件管理、设备管理网络管理，我们都介绍了从系统调用到底层的整个逻辑。如果你对我前面的代码解析还比较困惑，你可以尝试着去 debug 这些过程，只要把断点打在系统调用的入口位置就可以了。</p><p>从此，开启你的内核 debug 之旅吧！</p><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>这里给你留一道题目，你可以试着 debug 一下文件打开的过程。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><blockquote><p>打断点的指令b后面是不是既可以跟行号也可以跟函数名？<br> 作者回复: 是的</p></blockquote>`,56),t=[o];function c(l,r){return n(),a("div",null,t)}const k=s(e,[["render",c],["__file","√P61-实验环境搭建（下）.html.vue"]]);export{k as default};
