import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/1ec7600be619221dfac03e6ade67f7dc-4417c7d5.png",e="/assets/c43639f7024848aa3e828bcfc10ca467-390a9f17.png",o={},c=p(`<h1 id="_51-计算虚拟化之cpu-下-如何复用集团的人力资源" tabindex="-1"><a class="header-anchor" href="#_51-计算虚拟化之cpu-下-如何复用集团的人力资源" aria-hidden="true">#</a> 51 | 计算虚拟化之CPU（下）：如何复用集团的人力资源？</h1><p>上一节 qemu 初始化的 main 函数，我们解析了一个开头，得到了表示体系结构的 MachineClass 以及 MachineState。</p><p><strong>4. 初始化块设备</strong></p><p>我们接着回到 main 函数，接下来初始化的是块设备，调用的是 configure_blockdev。这里我们需要重点关注上面参数中的硬盘，不过我们放在存储虚拟化那一节再解析。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">configure_blockdev</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bdo_queue<span class="token punctuation">,</span> machine_class<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>5. 初始化计算虚拟化的加速模式</strong></p><p>接下来初始化的是计算虚拟化的加速模式，也即要不要使用 KVM。根据参数中的配置是启用 KVM。这里调用的是 configure_accelerator。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">configure_accelerator</span><span class="token punctuation">(</span>current_machine<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">configure_accelerator</span><span class="token punctuation">(</span>MachineState <span class="token operator">*</span>ms<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>progname<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>accel<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>accel_list<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>tmp<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    bool accel_initialised <span class="token operator">=</span> false<span class="token punctuation">;</span>
    bool init_failed <span class="token operator">=</span> false<span class="token punctuation">;</span>
    AccelClass <span class="token operator">*</span>acc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    accel <span class="token operator">=</span> <span class="token function">qemu_opt_get</span><span class="token punctuation">(</span><span class="token function">qemu_get_machine_opts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;accel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    accel <span class="token operator">=</span> <span class="token string">&quot;kvm&quot;</span><span class="token punctuation">;</span>
    accel_list <span class="token operator">=</span> <span class="token function">g_strsplit</span><span class="token punctuation">(</span>accel<span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>tmp <span class="token operator">=</span> accel_list<span class="token punctuation">;</span> <span class="token operator">!</span>accel_initialised <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span> tmp<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        acc <span class="token operator">=</span> <span class="token function">accel_find</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ret <span class="token operator">=</span> <span class="token function">accel_init_machine</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> AccelClass <span class="token operator">*</span><span class="token function">accel_find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>opt_name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>class_name <span class="token operator">=</span> <span class="token function">g_strdup_printf</span><span class="token punctuation">(</span><span class="token function">ACCEL_CLASS_NAME</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opt_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    AccelClass <span class="token operator">*</span>ac <span class="token operator">=</span> <span class="token function">ACCEL_CLASS</span><span class="token punctuation">(</span><span class="token function">object_class_by_name</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">g_free</span><span class="token punctuation">(</span>class_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ac<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">accel_init_machine</span><span class="token punctuation">(</span>AccelClass <span class="token operator">*</span>acc<span class="token punctuation">,</span> MachineState <span class="token operator">*</span>ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ObjectClass <span class="token operator">*</span>oc <span class="token operator">=</span> <span class="token function">OBJECT_CLASS</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cname <span class="token operator">=</span> <span class="token function">object_class_get_name</span><span class="token punctuation">(</span>oc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    AccelState <span class="token operator">*</span>accel <span class="token operator">=</span> <span class="token function">ACCEL</span><span class="token punctuation">(</span><span class="token function">object_new</span><span class="token punctuation">(</span>cname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    ms<span class="token operator">-&gt;</span>accelerator <span class="token operator">=</span> accel<span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span>acc<span class="token operator">-&gt;</span>allowed<span class="token punctuation">)</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>
    ret <span class="token operator">=</span> acc<span class="token operator">-&gt;</span><span class="token function">init_machine</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 configure_accelerator 中，我们看命令行参数里面的 accel，发现是 kvm，则调用 accel_find 根据名字，得到相应的纸面上的 class，并初始化为 Class 类。</p><p>MachineClass 是计算机体系结构的 Class 类，同理，AccelClass 就是加速器的 Class 类，然后调用 accel_init_machine，通过 object_new，将 AccelClass 这个 Class 类实例化为 AccelState，类似对于体系结构的实例是 MachineState。</p><p>在 accel_find 中，我们会根据名字 kvm，找到纸面上的 class，也即 kvm_accel_type，然后调用 type_initialize，里面调用 kvm_accel_type 的 class_init 方法，也即 kvm_accel_class_init。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">kvm_accel_class_init</span><span class="token punctuation">(</span>ObjectClass <span class="token operator">*</span>oc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    AccelClass <span class="token operator">*</span>ac <span class="token operator">=</span> <span class="token function">ACCEL_CLASS</span><span class="token punctuation">(</span>oc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ac<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token string">&quot;KVM&quot;</span><span class="token punctuation">;</span>
    ac<span class="token operator">-&gt;</span>init_machine <span class="token operator">=</span> kvm_init<span class="token punctuation">;</span>
    ac<span class="token operator">-&gt;</span>allowed <span class="token operator">=</span> <span class="token operator">&amp;</span>kvm_allowed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 kvm_accel_class_init 中，我们创建 AccelClass，将 init_machine 设置为 kvm_init。在 accel_init_machine 中其实就调用了这个 init_machine 函数，也即调用 kvm_init 方法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kvm_init</span><span class="token punctuation">(</span>MachineState <span class="token operator">*</span>ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MachineClass <span class="token operator">*</span>mc <span class="token operator">=</span> <span class="token function">MACHINE_GET_CLASS</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> soft_vcpus_limit<span class="token punctuation">,</span> hard_vcpus_limit<span class="token punctuation">;</span>
    KVMState <span class="token operator">*</span>s<span class="token punctuation">;</span>
    <span class="token keyword">const</span> KVMCapabilityInfo <span class="token operator">*</span>missing_cap<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>kvm_type<span class="token punctuation">;</span>

    s <span class="token operator">=</span> <span class="token function">KVM_STATE</span><span class="token punctuation">(</span>ms<span class="token operator">-&gt;</span>accelerator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    s<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> <span class="token function">qemu_open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/kvm&quot;</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">kvm_ioctl</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> KVM_GET_API_VERSION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token function">kvm_ioctl</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> KVM_CREATE_VM<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span>EINTR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    s<span class="token operator">-&gt;</span>vmfd <span class="token operator">=</span> ret<span class="token punctuation">;</span>

    <span class="token comment">/* check the vcpu limits */</span>
    soft_vcpus_limit <span class="token operator">=</span> <span class="token function">kvm_recommended_vcpus</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hard_vcpus_limit <span class="token operator">=</span> <span class="token function">kvm_max_vcpus</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    ret <span class="token operator">=</span> <span class="token function">kvm_arch_init</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">goto</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">machine_kernel_irqchip_allowed</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">kvm_irqchip_create</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面的操作就从用户态到内核态的 KVM 了。就像前面原理讲过的一样，用户态使用内核态 KVM 的能力，需要打开一个文件 /dev/kvm，这是一个字符设备文件，打开一个字符设备文件的过程我们讲过，这里不再赘述。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">miscdevice</span> kvm_dev <span class="token operator">=</span> <span class="token punctuation">{</span>
    KVM_MINOR<span class="token punctuation">,</span>
    <span class="token string">&quot;kvm&quot;</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>kvm_chardev_ops<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> kvm_chardev_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>unlocked_ioctl <span class="token operator">=</span> kvm_dev_ioctl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>compat_ioctl   <span class="token operator">=</span> kvm_dev_ioctl<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>llseek     <span class="token operator">=</span> noop_llseek<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>KVM 这个字符设备文件定义了一个字符设备文件的操作函数 kvm_chardev_ops，这里面只定义了 ioctl 的操作。</p><p>接下来，用户态就通过 ioctl 系统调用，调用到 kvm_dev_ioctl 这个函数。这个过程我们在字符设备那一节也讲了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">kvm_dev_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span>
              <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ioctl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> r <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ioctl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> KVM_GET_API_VERSION<span class="token operator">:</span>
        r <span class="token operator">=</span> KVM_API_VERSION<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> KVM_CREATE_VM<span class="token operator">:</span>
        r <span class="token operator">=</span> <span class="token function">kvm_dev_ioctl_create_vm</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>  
    <span class="token keyword">case</span> KVM_CHECK_EXTENSION<span class="token operator">:</span>
        r <span class="token operator">=</span> <span class="token function">kvm_vm_ioctl_check_extension_generic</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>  
    <span class="token keyword">case</span> KVM_GET_VCPU_MMAP_SIZE<span class="token operator">:</span>
        r <span class="token operator">=</span> PAGE_SIZE<span class="token punctuation">;</span>     <span class="token comment">/* struct kvm_run */</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>  
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>   
out<span class="token operator">:</span>
    <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，在用户态 qemu 中，调用 KVM_GET_API_VERSION 查看版本号，内核就有相应的分支，返回版本号，如果能够匹配上，则调用 KVM_CREATE_VM 创建虚拟机。</p><p>创建虚拟机，需要调用 kvm_dev_ioctl_create_vm。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kvm_dev_ioctl_create_vm</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> r<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token operator">*</span>kvm<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">;</span>

    kvm <span class="token operator">=</span> <span class="token function">kvm_create_vm</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    r <span class="token operator">=</span> <span class="token function">get_unused_fd_flags</span><span class="token punctuation">(</span>O_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    file <span class="token operator">=</span> <span class="token function">anon_inode_getfile</span><span class="token punctuation">(</span><span class="token string">&quot;kvm-vm&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>kvm_vm_fops<span class="token punctuation">,</span> kvm<span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">fd_install</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 kvm_dev_ioctl_create_vm 中，首先调用 kvm_create_vm 创建一个 struct kvm 结构。这个结构在内核里面代表一个虚拟机。</p><p>从下面结构的定义里，我们可以看到，这里面有 vcpu，有 mm_struct 结构。这个结构本来用来管理进程的内存的。虚拟机也是一个进程，所以虚拟机的用户进程空间也是用它来表示。虚拟机里面的操作系统以及应用的进程空间不归它管。</p><p>在 kvm_dev_ioctl_create_vm 中，第二件事情就是创建一个文件描述符，和 struct file 关联起来，这个 struct file 的 file_operations 会被设置为 kvm_vm_fops。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm<span class="token punctuation">;</span> <span class="token comment">/* userspace tied to this vm */</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_memslots</span> __rcu <span class="token operator">*</span>memslots<span class="token punctuation">[</span>KVM_ADDRESS_SPACE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpus<span class="token punctuation">[</span>KVM_MAX_VCPUS<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token class-name">atomic_t</span> online_vcpus<span class="token punctuation">;</span>
  <span class="token keyword">int</span> created_vcpus<span class="token punctuation">;</span>
  <span class="token keyword">int</span> last_boosted_vcpu<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> vm_list<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mutex</span> lock<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_io_bus</span> __rcu <span class="token operator">*</span>buses<span class="token punctuation">[</span>KVM_NR_BUSES<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_vm_stat</span> stat<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_arch</span> arch<span class="token punctuation">;</span>
  <span class="token class-name">refcount_t</span> users_count<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">long</span> tlbs_dirty<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> devices<span class="token punctuation">;</span>
  <span class="token class-name">pid_t</span> userspace_pid<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> kvm_vm_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>release        <span class="token operator">=</span> kvm_vm_release<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>unlocked_ioctl <span class="token operator">=</span> kvm_vm_ioctl<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>llseek    <span class="token operator">=</span> noop_llseek<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kvm_dev_ioctl_create_vm 结束之后，对于一台虚拟机而言，只是在内核中有一个数据结构，对于相应的资源还没有分配，所以我们还需要接着看。</p><p><strong>6. 初始化网络设备</strong></p><p>接下来，调用 net_init_clients 进行网络设备的初始化。我们可以解析 net 参数，也会在 net_init_clients 中解析 netdev 参数。这属于网络虚拟化的部分，我们先暂时放一下。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">net_init_clients</span><span class="token punctuation">(</span>Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">QTAILQ_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net_clients<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qemu_opts_foreach</span><span class="token punctuation">(</span><span class="token function">qemu_find_opts</span><span class="token punctuation">(</span><span class="token string">&quot;netdev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                          net_init_netdev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> errp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qemu_opts_foreach</span><span class="token punctuation">(</span><span class="token function">qemu_find_opts</span><span class="token punctuation">(</span><span class="token string">&quot;nic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> net_param_nic<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> errp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qemu_opts_foreach</span><span class="token punctuation">(</span><span class="token function">qemu_find_opts</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> net_init_client<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> errp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>7.CPU 虚拟化</strong></p><p>接下来，我们要调用 machine_run_board_init。这里面调用了 MachineClass 的 init 函数。盼啊盼才到了它，这才调用了 pc_init1。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">machine_run_board_init</span><span class="token punctuation">(</span>MachineState <span class="token operator">*</span>machine<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MachineClass <span class="token operator">*</span>machine_class <span class="token operator">=</span> <span class="token function">MACHINE_GET_CLASS</span><span class="token punctuation">(</span>machine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">numa_complete_configuration</span><span class="token punctuation">(</span>machine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nb_numa_nodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">machine_numa_finish_cpu_init</span><span class="token punctuation">(</span>machine<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    machine_class<span class="token operator">-&gt;</span><span class="token function">init</span><span class="token punctuation">(</span>machine<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 pc_init1 里面，我们重点关注两件重要的事情，一个的 CPU 的虚拟化，主要调用 pc_cpus_init；另外就是内存的虚拟化，主要调用 pc_memory_init。这一节我们重点关注 CPU 的虚拟化，下一节，我们来看内存的虚拟化。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">pc_cpus_init</span><span class="token punctuation">(</span>PCMachineState <span class="token operator">*</span>pcms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> smp_cpus<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">pc_new_cpu</span><span class="token punctuation">(</span>possible_cpus<span class="token operator">-&gt;</span>cpus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> possible_cpus<span class="token operator">-&gt;</span>cpus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>arch_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>error_fatal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pc_new_cpu</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>typename<span class="token punctuation">,</span> <span class="token class-name">int64_t</span> apic_id<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Object <span class="token operator">*</span>cpu <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    cpu <span class="token operator">=</span> <span class="token function">object_new</span><span class="token punctuation">(</span>typename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">object_property_set_uint</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> apic_id<span class="token punctuation">,</span> <span class="token string">&quot;apic-id&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">object_property_set_bool</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> true<span class="token punctuation">,</span> <span class="token string">&quot;realized&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用 object_property_add_bool的时候，设置了用 device_set_realized 来设置</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 pc_cpus_init 中，对于每一个 CPU，都调用 pc_new_cpu，在这里，我们又看到了 object_new，这又是一个从 TypeImpl 到 Class 类再到对象的一个过程。</p><p>这个时候，我们就要看 CPU 的类是怎么组织的了。</p><p>在上面的参数里面，CPU 的配置是这样的：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">-</span>cpu SandyBridge<span class="token punctuation">,</span><span class="token operator">+</span>erms<span class="token punctuation">,</span><span class="token operator">+</span>smep<span class="token punctuation">,</span><span class="token operator">+</span>fsgsbase<span class="token punctuation">,</span><span class="token operator">+</span>pdpe1gb<span class="token punctuation">,</span><span class="token operator">+</span>rdrand<span class="token punctuation">,</span><span class="token operator">+</span>f16c<span class="token punctuation">,</span><span class="token operator">+</span>osxsave<span class="token punctuation">,</span><span class="token operator">+</span>dca<span class="token punctuation">,</span><span class="token operator">+</span>pcid<span class="token punctuation">,</span><span class="token operator">+</span>pdcm<span class="token punctuation">,</span><span class="token operator">+</span>xtpr<span class="token punctuation">,</span><span class="token operator">+</span>tm2<span class="token punctuation">,</span><span class="token operator">+</span>est<span class="token punctuation">,</span><span class="token operator">+</span>smx<span class="token punctuation">,</span><span class="token operator">+</span>vmx<span class="token punctuation">,</span><span class="token operator">+</span>ds_cpl<span class="token punctuation">,</span><span class="token operator">+</span>monitor<span class="token punctuation">,</span><span class="token operator">+</span>dtes64<span class="token punctuation">,</span><span class="token operator">+</span>pbe<span class="token punctuation">,</span><span class="token operator">+</span>tm<span class="token punctuation">,</span><span class="token operator">+</span>ht<span class="token punctuation">,</span><span class="token operator">+</span>ss<span class="token punctuation">,</span><span class="token operator">+</span>acpi<span class="token punctuation">,</span><span class="token operator">+</span>ds<span class="token punctuation">,</span><span class="token operator">+</span>vme
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里我们知道，SandyBridge 是 CPU 的一种类型。在 hw/i386/pc.c 中，我们能看到这种 CPU 的定义。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span> <span class="token string">&quot;SandyBridge&quot;</span> <span class="token string">&quot;-&quot;</span> TYPE_X86_CPU<span class="token punctuation">,</span> <span class="token string">&quot;min-xlevel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;0x8000000a&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来，我们就来看&quot;SandyBridge&quot;，也即 TYPE_X86_CPU 这种 CPU 的类，是一个什么样的结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo device_type_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> TYPE_DEVICE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parent <span class="token operator">=</span> TYPE_OBJECT<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DeviceState<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_init <span class="token operator">=</span> device_initfn<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_post_init <span class="token operator">=</span> device_post_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_finalize <span class="token operator">=</span> device_finalize<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_base_init <span class="token operator">=</span> device_class_base_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_init <span class="token operator">=</span> device_class_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>abstract <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DeviceClass<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo cpu_type_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> TYPE_CPU<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parent <span class="token operator">=</span> TYPE_DEVICE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CPUState<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_init <span class="token operator">=</span> cpu_common_initfn<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_finalize <span class="token operator">=</span> cpu_common_finalize<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>abstract <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CPUClass<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_init <span class="token operator">=</span> cpu_class_init<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo x86_cpu_type_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> TYPE_X86_CPU<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parent <span class="token operator">=</span> TYPE_CPU<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>X86CPU<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_init <span class="token operator">=</span> x86_cpu_initfn<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>abstract <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>X86CPUClass<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_init <span class="token operator">=</span> x86_cpu_common_class_init<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CPU 这种类的定义是有多层继承关系的。TYPE_X86_CPU 的父类是 TYPE_CPU，TYPE_CPU 的父类是 TYPE_DEVICE，TYPE_DEVICE 的父类是 TYPE_OBJECT。到头了。</p><p>这里面每一层都有 class_init，用于从 TypeImpl 生产 xxxClass，也有 instance_init 将 xxxClass 初始化为实例。</p><p>在 TYPE_X86_CPU 这一层的 class_init 中，也即 x86_cpu_common_class_init 中，设置了 DeviceClass 的 realize 函数为 x86_cpu_realizefn。这个函数很重要，马上就能用到。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">x86_cpu_common_class_init</span><span class="token punctuation">(</span>ObjectClass <span class="token operator">*</span>oc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    X86CPUClass <span class="token operator">*</span>xcc <span class="token operator">=</span> <span class="token function">X86_CPU_CLASS</span><span class="token punctuation">(</span>oc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    CPUClass <span class="token operator">*</span>cc <span class="token operator">=</span> <span class="token function">CPU_CLASS</span><span class="token punctuation">(</span>oc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    DeviceClass <span class="token operator">*</span>dc <span class="token operator">=</span> <span class="token function">DEVICE_CLASS</span><span class="token punctuation">(</span>oc<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">device_class_set_parent_realize</span><span class="token punctuation">(</span>dc<span class="token punctuation">,</span> x86_cpu_realizefn<span class="token punctuation">,</span>
                                    <span class="token operator">&amp;</span>xcc<span class="token operator">-&gt;</span>parent_realize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 TYPE_DEVICE 这一层的 instance_init 函数 device_initfn，会为这个设备添加一个属性&quot;realized&quot;，要设置这个属性，需要用函数 device_set_realized。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">device_initfn</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    DeviceState <span class="token operator">*</span>dev <span class="token operator">=</span> <span class="token function">DEVICE</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ObjectClass <span class="token operator">*</span>class<span class="token punctuation">;</span>
    Property <span class="token operator">*</span>prop<span class="token punctuation">;</span>
    dev<span class="token operator">-&gt;</span>realized <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token function">object_property_add_bool</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;realized&quot;</span><span class="token punctuation">,</span>
                             device_get_realized<span class="token punctuation">,</span> device_set_realized<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们回到 pc_new_cpu 函数，这里面就是通过 object_property_set_bool 设置这个属性为 true，所以 device_set_realized 函数会被调用。</p><p>在 device_set_realized 中，DeviceClass 的 realize 函数 x86_cpu_realizefn 会被调用。这里面 qemu_init_vcpu 会调用 qemu_kvm_start_vcpu。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">qemu_kvm_start_vcpu</span><span class="token punctuation">(</span>CPUState <span class="token operator">*</span>cpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span> thread_name<span class="token punctuation">[</span>VCPU_THREAD_NAME_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cpu<span class="token operator">-&gt;</span>thread <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QemuThread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cpu<span class="token operator">-&gt;</span>halt_cond <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QemuCond<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_cond_init</span><span class="token punctuation">(</span>cpu<span class="token operator">-&gt;</span>halt_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_thread_create</span><span class="token punctuation">(</span>cpu<span class="token operator">-&gt;</span>thread<span class="token punctuation">,</span> thread_name<span class="token punctuation">,</span> qemu_kvm_cpu_thread_fn<span class="token punctuation">,</span> cpu<span class="token punctuation">,</span> QEMU_THREAD_JOINABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里面，为这个 vcpu 创建一个线程，也即虚拟机里面的一个 vcpu 对应物理机上的一个线程，然后这个线程被调度到某个物理 CPU 上。</p><p>我们来看这个 vcpu 的线程执行函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">qemu_kvm_cpu_thread_fn</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    CPUState <span class="token operator">*</span>cpu <span class="token operator">=</span> arg<span class="token punctuation">;</span>
    <span class="token keyword">int</span> r<span class="token punctuation">;</span>

    <span class="token function">rcu_register_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">qemu_mutex_lock_iothread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_thread_get_self</span><span class="token punctuation">(</span>cpu<span class="token operator">-&gt;</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cpu<span class="token operator">-&gt;</span>thread_id <span class="token operator">=</span> <span class="token function">qemu_get_thread_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cpu<span class="token operator">-&gt;</span>can_do_io <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    current_cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>

    r <span class="token operator">=</span> <span class="token function">kvm_init_vcpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kvm_init_cpu_signals</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* signal CPU creation */</span>
    cpu<span class="token operator">-&gt;</span>created <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token function">qemu_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_cpu_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cpu_can_run</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            r <span class="token operator">=</span> <span class="token function">kvm_cpu_exec</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">qemu_wait_io_event</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>cpu<span class="token operator">-&gt;</span>unplug <span class="token operator">||</span> <span class="token function">cpu_can_run</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">qemu_kvm_destroy_vcpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cpu<span class="token operator">-&gt;</span>created <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token function">qemu_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>qemu_cpu_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_mutex_unlock_iothread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rcu_unregister_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 qemu_kvm_cpu_thread_fn 中，先是 kvm_init_vcpu 初始化这个 vcpu。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">kvm_init_vcpu</span><span class="token punctuation">(</span>CPUState <span class="token operator">*</span>cpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    KVMState <span class="token operator">*</span>s <span class="token operator">=</span> kvm_state<span class="token punctuation">;</span>
    <span class="token keyword">long</span> mmap_size<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    ret <span class="token operator">=</span> <span class="token function">kvm_get_vcpu</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token function">kvm_arch_vcpu_id</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    cpu<span class="token operator">-&gt;</span>kvm_fd <span class="token operator">=</span> ret<span class="token punctuation">;</span>
    cpu<span class="token operator">-&gt;</span>kvm_state <span class="token operator">=</span> s<span class="token punctuation">;</span>
    cpu<span class="token operator">-&gt;</span>vcpu_dirty <span class="token operator">=</span> true<span class="token punctuation">;</span>

    mmap_size <span class="token operator">=</span> <span class="token function">kvm_ioctl</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> KVM_GET_VCPU_MMAP_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    cpu<span class="token operator">-&gt;</span>kvm_run <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> mmap_size<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> cpu<span class="token operator">-&gt;</span>kvm_fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    ret <span class="token operator">=</span> <span class="token function">kvm_arch_init_vcpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
err<span class="token operator">:</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 kvm_get_vcpu 中，我们会调用 kvm_vm_ioctl(s, KVM_CREATE_VCPU, (void *)vcpu_id)，在内核里面创建一个 vcpu。在上面创建 KVM_CREATE_VM 的时候，我们已经创建了一个 struct file，它的 file_operations 被设置为 kvm_vm_fops，这个内核文件也是可以响应 ioctl 的。</p><p>如果我们切换到内核 KVM，在 kvm_vm_ioctl 函数中，有对于 KVM_CREATE_VCPU 的处理，调用的是 kvm_vm_ioctl_create_vcpu。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">kvm_vm_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span>
         <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ioctl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token operator">*</span>kvm <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>private_data<span class="token punctuation">;</span>
  <span class="token keyword">void</span> __user <span class="token operator">*</span>argp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
  <span class="token keyword">int</span> r<span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>ioctl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> KVM_CREATE_VCPU<span class="token operator">:</span>
    r <span class="token operator">=</span> <span class="token function">kvm_vm_ioctl_create_vcpu</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> KVM_SET_USER_MEMORY_REGION<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_userspace_memory_region</span> kvm_userspace_mem<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm_userspace_mem<span class="token punctuation">,</span> argp<span class="token punctuation">,</span>
            <span class="token keyword">sizeof</span><span class="token punctuation">(</span>kvm_userspace_mem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    r <span class="token operator">=</span> <span class="token function">kvm_vm_ioctl_set_memory_region</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kvm_userspace_mem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">case</span> KVM_CREATE_DEVICE<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_create_device</span> cd<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cd<span class="token punctuation">,</span> argp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    r <span class="token operator">=</span> <span class="token function">kvm_ioctl_create_device</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>argp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cd<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">case</span> KVM_CHECK_EXTENSION<span class="token operator">:</span>
    r <span class="token operator">=</span> <span class="token function">kvm_vm_ioctl_check_extension_generic</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    r <span class="token operator">=</span> <span class="token function">kvm_arch_vm_ioctl</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> ioctl<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
out<span class="token operator">:</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 kvm_vm_ioctl_create_vcpu 中，kvm_arch_vcpu_create 调用 kvm_x86_ops 的 vcpu_create 函数来创建 CPU。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kvm_vm_ioctl_create_vcpu</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token operator">*</span>kvm<span class="token punctuation">,</span> u32 id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> r<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">;</span>
    kvm<span class="token operator">-&gt;</span>created_vcpus<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    vcpu <span class="token operator">=</span> <span class="token function">kvm_arch_vcpu_create</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">preempt_notifier_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vcpu<span class="token operator">-&gt;</span>preempt_notifier<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kvm_preempt_ops<span class="token punctuation">)</span><span class="token punctuation">;</span>
    r <span class="token operator">=</span> <span class="token function">kvm_arch_vcpu_setup</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Now it&#39;s all set up, let userspace reach it */</span>
    <span class="token function">kvm_get_kvm</span><span class="token punctuation">(</span>kvm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    r <span class="token operator">=</span> <span class="token function">create_vcpu_fd</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    kvm<span class="token operator">-&gt;</span>vcpus<span class="token punctuation">[</span><span class="token function">atomic_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm<span class="token operator">-&gt;</span>online_vcpus<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> vcpu<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span><span class="token function">kvm_arch_vcpu_create</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token operator">*</span>kvm<span class="token punctuation">,</span>
                        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>        
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">;</span>
    vcpu <span class="token operator">=</span> kvm_x86_ops<span class="token operator">-&gt;</span><span class="token function">vcpu_create</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> vcpu<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">create_vcpu_fd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">anon_inode_getfd</span><span class="token punctuation">(</span><span class="token string">&quot;kvm-vcpu&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>kvm_vcpu_fops<span class="token punctuation">,</span> vcpu<span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> O_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，create_vcpu_fd 又创建了一个 struct file，它的 file_operations 指向 kvm_vcpu_fops。从这里可以看出，KVM 的内核模块是一个文件，可以通过 ioctl 进行操作。基于这个内核模块创建的 VM 也是一个文件，也可以通过 ioctl 进行操作。在这个 VM 上创建的 vcpu 同样是一个文件，同样可以通过 ioctl 进行操作。</p><p>我们回过头来看，kvm_x86_ops 的 vcpu_create 函数。kvm_x86_ops 对于不同的硬件加速虚拟化指向不同的结构，如果是 vmx，则指向 vmx_x86_ops；如果是 svm，则指向 svm_x86_ops。我们这里看 vmx_x86_ops。这个结构很长，里面有非常多的操作，我们用一个看一个。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">kvm_x86_ops</span> vmx_x86_ops __ro_after_init <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span>vcpu_create <span class="token operator">=</span> vmx_create_vcpu<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span><span class="token function">vmx_create_vcpu</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token operator">*</span>kvm<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">vcpu_vmx</span> <span class="token operator">*</span>vmx <span class="token operator">=</span> <span class="token function">kmem_cache_zalloc</span><span class="token punctuation">(</span>kvm_vcpu_cache<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cpu<span class="token punctuation">;</span>
    vmx<span class="token operator">-&gt;</span>vpid <span class="token operator">=</span> <span class="token function">allocate_vpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    err <span class="token operator">=</span> <span class="token function">kvm_vcpu_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vmx<span class="token operator">-&gt;</span>vcpu<span class="token punctuation">,</span> kvm<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vmx<span class="token operator">-&gt;</span>guest_msrs <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>PAGE_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vmx<span class="token operator">-&gt;</span>loaded_vmcs <span class="token operator">=</span> <span class="token operator">&amp;</span>vmx<span class="token operator">-&gt;</span>vmcs01<span class="token punctuation">;</span>
    vmx<span class="token operator">-&gt;</span>loaded_vmcs<span class="token operator">-&gt;</span>vmcs <span class="token operator">=</span> <span class="token function">alloc_vmcs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    vmx<span class="token operator">-&gt;</span>loaded_vmcs<span class="token operator">-&gt;</span>shadow_vmcs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">loaded_vmcs_init</span><span class="token punctuation">(</span>vmx<span class="token operator">-&gt;</span>loaded_vmcs<span class="token punctuation">)</span><span class="token punctuation">;</span>

    cpu <span class="token operator">=</span> <span class="token function">get_cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vmx_vcpu_load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vmx<span class="token operator">-&gt;</span>vcpu<span class="token punctuation">,</span> cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vmx<span class="token operator">-&gt;</span>vcpu<span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>
    err <span class="token operator">=</span> <span class="token function">vmx_vcpu_setup</span><span class="token punctuation">(</span>vmx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">vmx_vcpu_put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vmx<span class="token operator">-&gt;</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put_cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>enable_ept<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>kvm<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>ept_identity_map_addr<span class="token punctuation">)</span>
            kvm<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>ept_identity_map_addr <span class="token operator">=</span>
                VMX_EPT_IDENTITY_PAGETABLE_ADDR<span class="token punctuation">;</span>
        err <span class="token operator">=</span> <span class="token function">init_rmode_identity_map</span><span class="token punctuation">(</span>kvm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token operator">&amp;</span>vmx<span class="token operator">-&gt;</span>vcpu<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vmx_create_vcpu 创建用于表示 vcpu 的结构 struct vcpu_vmx，并填写里面的内容。例如 guest_msrs，咱们在讲系统调用的时候提过 msr 寄存器，虚拟机也需要有这样的寄存器。</p><p>enable_ept 是和内存虚拟化相关的，EPT 全称 Extended Page Table，顾名思义，是优化内存虚拟化的，这个功能我们放到内存的那一节讲。</p><p>最最重要的就是 loaded_vmcs 了。VMCS 是什么呢？它的全称是 Virtual Machine Control Structure。它是来干什么呢？</p><p>前面咱们讲进程调度的时候讲过，为了支持进程在 CPU 上的切换，CPU 硬件要求有一个 TSS 结构，用于保存进程运行时的所有寄存器的状态，进程切换的时候，需要根据 TSS 恢复寄存器。</p><p>虚拟机也是一个进程，也需要切换，而且切换更加的复杂，可能是两个虚拟机之间切换，也可能是虚拟机切换给内核，虚拟机因为里面还有另一个操作系统，要保存的信息比普通的进程多得多。那就需要有一个结构来保存虚拟机运行的上下文，VMCS 就是是 Intel 实现 CPU 虚拟化，记录 vCPU 状态的一个关键数据结构。</p><p>VMCS 数据结构主要包含以下信息。</p><ul><li>Guest-state area，即 vCPU 的状态信息，包括 vCPU 的基本运行环境，例如寄存器等。</li><li>Host-state area，是物理 CPU 的状态信息。物理 CPU 和 vCPU 之间也会来回切换，所以，VMCS 中既要记录 vCPU 的状态，也要记录物理 CPU 的状态。</li><li>VM-execution control fields，对 vCPU 的运行行为进行控制。例如，发生中断怎么办，是否使用 EPT（Extended Page Table）功能等。</li></ul><p>接下来，对于 VMCS，有两个重要的操作。</p><p>VM-Entry，我们称为从根模式切换到非根模式，也即切换到 guest 上，这个时候 CPU 上运行的是虚拟机。VM-Exit 我们称为 CPU 从非根模式切换到根模式，也即从 guest 切换到宿主机。例如，当要执行一些虚拟机没有权限的敏感指令时。</p><figure><img src="`+t+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>为了维护这两个动作，VMCS 里面还有几项内容：</p><ul><li>VM-exit control fields，对 VM Exit 的行为进行控制。比如，VM Exit 的时候对 vCPU 来说需要保存哪些 MSR 寄存器，对于主机 CPU 来说需要恢复哪些 MSR 寄存器。</li><li>VM-entry control fields，对 VM Entry 的行为进行控制。比如，需要保存和恢复哪些 MSR 寄存器等。</li><li>VM-exit information fields，记录下发生 VM Exit 发生的原因及一些必要的信息，方便对 VM Exit 事件进行处理。</li></ul><p>至此，内核准备完毕。</p><p>我们再回到 qemu 的 kvm_init_vcpu 函数，这里面除了创建内核中的 vcpu 结构之外，还通过 mmap 将内核的 vcpu 结构，映射到 qemu 中 CPUState 的 kvm_run 中，为什么能用 mmap 呢，上面咱们不是说过了吗，vcpu 也是一个文件。</p><p>我们再回到这个 vcpu 的线程函数 qemu_kvm_cpu_thread_fn，他在执行 kvm_init_vcpu 创建 vcpu 之后，接下来是一个 do-while 循环，也即一直运行，并且通过调用 kvm_cpu_exec，运行这个虚拟机。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">kvm_cpu_exec</span><span class="token punctuation">(</span>CPUState <span class="token operator">*</span>cpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_run</span> <span class="token operator">*</span>run <span class="token operator">=</span> cpu<span class="token operator">-&gt;</span>kvm_run<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">,</span> run_ret<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        run_ret <span class="token operator">=</span> <span class="token function">kvm_vcpu_ioctl</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> KVM_RUN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>run<span class="token operator">-&gt;</span>exit_reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> KVM_EXIT_IO<span class="token operator">:</span>
            <span class="token function">kvm_handle_io</span><span class="token punctuation">(</span>run<span class="token operator">-&gt;</span>io<span class="token punctuation">.</span>port<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span>
                          <span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>run <span class="token operator">+</span> run<span class="token operator">-&gt;</span>io<span class="token punctuation">.</span>data_offset<span class="token punctuation">,</span>
                          run<span class="token operator">-&gt;</span>io<span class="token punctuation">.</span>direction<span class="token punctuation">,</span>
                          run<span class="token operator">-&gt;</span>io<span class="token punctuation">.</span>size<span class="token punctuation">,</span>
                          run<span class="token operator">-&gt;</span>io<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> KVM_EXIT_IRQ_WINDOW_OPEN<span class="token operator">:</span>
            ret <span class="token operator">=</span> EXCP_INTERRUPT<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> KVM_EXIT_SHUTDOWN<span class="token operator">:</span>
            <span class="token function">qemu_system_reset_request</span><span class="token punctuation">(</span>SHUTDOWN_CAUSE_GUEST_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ret <span class="token operator">=</span> EXCP_INTERRUPT<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> KVM_EXIT_UNKNOWN<span class="token operator">:</span>
            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;KVM: unknown exit, hardware reason %&quot;</span> PRIx64 <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span>run<span class="token operator">-&gt;</span>hw<span class="token punctuation">.</span>hardware_exit_reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> KVM_EXIT_INTERNAL_ERROR<span class="token operator">:</span>
            ret <span class="token operator">=</span> <span class="token function">kvm_handle_internal_error</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> run<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 kvm_cpu_exec 中，我们能看到一个循环，在循环中，kvm_vcpu_ioctl(KVM_RUN) 运行这个虚拟机，这个时候 CPU 进入 VM-Entry，也即进入客户机模式。</p><p>如果一直是客户机的操作系统占用这个 CPU，则会一直停留在这一行运行，一旦这个调用返回了，就说明 CPU 进入 VM-Exit 退出客户机模式，将 CPU 交还给宿主机。在循环中，我们会对退出的原因 exit_reason 进行分析处理，因为有了 I/O，还有了中断等，做相应的处理。处理完毕之后，再次循环，再次通过 VM-Entry，进入客户机模式。如此循环，直到虚拟机正常或者异常退出。</p><p>我们来看 kvm_vcpu_ioctl(KVM_RUN) 在内核做了哪些事情。</p><p>上面我们也讲了，vcpu 在内核也是一个文件，也是通过 ioctl 进行用户态和内核态通信的，在内核中，调用的是 kvm_vcpu_ioctl。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">kvm_vcpu_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span>
               <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ioctl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>private_data<span class="token punctuation">;</span>
    <span class="token keyword">void</span> __user <span class="token operator">*</span>argp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
    <span class="token keyword">int</span> r<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_fpu</span> <span class="token operator">*</span>fpu <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_sregs</span> <span class="token operator">*</span>kvm_sregs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    r <span class="token operator">=</span> <span class="token function">vcpu_load</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ioctl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> KVM_RUN<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">pid</span> <span class="token operator">*</span>oldpid<span class="token punctuation">;</span>
        r <span class="token operator">=</span> <span class="token function">kvm_arch_vcpu_ioctl_run</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> vcpu<span class="token operator">-&gt;</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> KVM_GET_REGS<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">kvm_regs</span> <span class="token operator">*</span>kvm_regs<span class="token punctuation">;</span>
        kvm_regs <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_regs</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        r <span class="token operator">=</span> <span class="token function">kvm_arch_vcpu_ioctl_get_regs</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> kvm_regs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>argp<span class="token punctuation">,</span> kvm_regs<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_regs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> out_free1<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> KVM_SET_REGS<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">kvm_regs</span> <span class="token operator">*</span>kvm_regs<span class="token punctuation">;</span>
        kvm_regs <span class="token operator">=</span> <span class="token function">memdup_user</span><span class="token punctuation">(</span>argp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>kvm_regs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r <span class="token operator">=</span> <span class="token function">kvm_arch_vcpu_ioctl_set_regs</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> kvm_regs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kvm_arch_vcpu_ioctl_run 会调用 vcpu_run，这里面也是一个无限循环。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">vcpu_run</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> r<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token operator">*</span>kvm <span class="token operator">=</span> vcpu<span class="token operator">-&gt;</span>kvm<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kvm_vcpu_running</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      r <span class="token operator">=</span> <span class="token function">vcpu_enter_guest</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      r <span class="token operator">=</span> <span class="token function">vcpu_block</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">signal_pending</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      r <span class="token operator">=</span> <span class="token operator">-</span>EINTR<span class="token punctuation">;</span>
      vcpu<span class="token operator">-&gt;</span>run<span class="token operator">-&gt;</span>exit_reason <span class="token operator">=</span> KVM_EXIT_INTR<span class="token punctuation">;</span>
      <span class="token operator">++</span>vcpu<span class="token operator">-&gt;</span>stat<span class="token punctuation">.</span>signal_exits<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">need_resched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">cond_resched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个循环中，除了调用 vcpu_enter_guest 进入客户机模式运行之外，还有对于信号的响应 signal_pending，也即一台虚拟机是可以被 kill 掉的，还有对于调度的响应，这台虚拟机可以被从当前的物理 CPU 上赶下来，换成别的虚拟机或者其他进程。</p><p>我们这里重点看 vcpu_enter_guest。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">vcpu_enter_guest</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  r <span class="token operator">=</span> <span class="token function">kvm_mmu_reload</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vcpu<span class="token operator">-&gt;</span>mode <span class="token operator">=</span> IN_GUEST_MODE<span class="token punctuation">;</span>
  <span class="token function">kvm_load_guest_xcr0</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">guest_enter_irqoff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  kvm_x86_ops<span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vcpu<span class="token operator">-&gt;</span>mode <span class="token operator">=</span> OUTSIDE_GUEST_MODE<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">kvm_put_guest_xcr0</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  kvm_x86_ops<span class="token operator">-&gt;</span><span class="token function">handle_external_intr</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">++</span>vcpu<span class="token operator">-&gt;</span>stat<span class="token punctuation">.</span>exits<span class="token punctuation">;</span>
  <span class="token function">guest_exit_irqoff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  r <span class="token operator">=</span> kvm_x86_ops<span class="token operator">-&gt;</span><span class="token function">handle_exit</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">kvm_x86_ops</span> vmx_x86_ops __ro_after_init <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span>run <span class="token operator">=</span> vmx_vcpu_run<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 vcpu_enter_guest 中，我们会调用 vmx_x86_ops 的 vmx_vcpu_run 函数，进入客户机模式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> __noclone <span class="token function">vmx_vcpu_run</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vcpu_vmx</span> <span class="token operator">*</span>vmx <span class="token operator">=</span> <span class="token function">to_vmx</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> debugctlmsr<span class="token punctuation">,</span> cr3<span class="token punctuation">,</span> cr4<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  cr3 <span class="token operator">=</span> <span class="token function">__get_current_cr3_fast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  cr4 <span class="token operator">=</span> <span class="token function">cr4_read_shadow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vmx<span class="token operator">-&gt;</span>__launched <span class="token operator">=</span> vmx<span class="token operator">-&gt;</span>loaded_vmcs<span class="token operator">-&gt;</span>launched<span class="token punctuation">;</span>
  <span class="token keyword">asm</span><span class="token punctuation">(</span>
    <span class="token comment">/* Store host registers */</span>
    <span class="token string">&quot;push %%&quot;</span> _ASM_DX <span class="token string">&quot;; push %%&quot;</span> _ASM_BP <span class="token string">&quot;;&quot;</span>
    <span class="token string">&quot;push %%&quot;</span> _ASM_CX <span class="token string">&quot; \\n\\t&quot;</span> <span class="token comment">/* placeholder for guest rcx */</span>
    <span class="token string">&quot;push %%&quot;</span> _ASM_CX <span class="token string">&quot; \\n\\t&quot;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Load guest registers.  Don&#39;t clobber flags. */</span>
    <span class="token string">&quot;mov %c[rax](%0), %%&quot;</span> _ASM_AX <span class="token string">&quot; \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[rbx](%0), %%&quot;</span> _ASM_BX <span class="token string">&quot; \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[rdx](%0), %%&quot;</span> _ASM_DX <span class="token string">&quot; \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[rsi](%0), %%&quot;</span> _ASM_SI <span class="token string">&quot; \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[rdi](%0), %%&quot;</span> _ASM_DI <span class="token string">&quot; \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[rbp](%0), %%&quot;</span> _ASM_BP <span class="token string">&quot; \\n\\t&quot;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_X86_64</span></span>
    <span class="token string">&quot;mov %c[r8](%0),  %%r8  \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[r9](%0),  %%r9  \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[r10](%0), %%r10 \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[r11](%0), %%r11 \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[r12](%0), %%r12 \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[r13](%0), %%r13 \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[r14](%0), %%r14 \\n\\t&quot;</span>
    <span class="token string">&quot;mov %c[r15](%0), %%r15 \\n\\t&quot;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token string">&quot;mov %c[rcx](%0), %%&quot;</span> _ASM_CX <span class="token string">&quot; \\n\\t&quot;</span> <span class="token comment">/* kills %0 (ecx) */</span>

    <span class="token comment">/* Enter guest mode */</span>
    <span class="token string">&quot;jne 1f \\n\\t&quot;</span>
    <span class="token function">__ex</span><span class="token punctuation">(</span>ASM_VMX_VMLAUNCH<span class="token punctuation">)</span> <span class="token string">&quot;\\n\\t&quot;</span>
    <span class="token string">&quot;jmp 2f \\n\\t&quot;</span>
    <span class="token string">&quot;1: &quot;</span> <span class="token function">__ex</span><span class="token punctuation">(</span>ASM_VMX_VMRESUME<span class="token punctuation">)</span> <span class="token string">&quot;\\n\\t&quot;</span>
    <span class="token string">&quot;2: &quot;</span>
    <span class="token comment">/* Save guest registers, load host registers, keep flags */</span>
    <span class="token string">&quot;mov %0, %c[wordsize](%%&quot;</span> _ASM_SP <span class="token string">&quot;) \\n\\t&quot;</span>
    <span class="token string">&quot;pop %0 \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%&quot;</span> _ASM_AX <span class="token string">&quot;, %c[rax](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%&quot;</span> _ASM_BX <span class="token string">&quot;, %c[rbx](%0) \\n\\t&quot;</span>
    <span class="token function">__ASM_SIZE</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span> <span class="token string">&quot; %c[rcx](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%&quot;</span> _ASM_DX <span class="token string">&quot;, %c[rdx](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%&quot;</span> _ASM_SI <span class="token string">&quot;, %c[rsi](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%&quot;</span> _ASM_DI <span class="token string">&quot;, %c[rdi](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%&quot;</span> _ASM_BP <span class="token string">&quot;, %c[rbp](%0) \\n\\t&quot;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_X86_64</span></span>
    <span class="token string">&quot;mov %%r8,  %c[r8](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%r9,  %c[r9](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%r10, %c[r10](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%r11, %c[r11](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%r12, %c[r12](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%r13, %c[r13](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%r14, %c[r14](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%r15, %c[r15](%0) \\n\\t&quot;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
    <span class="token string">&quot;mov %%cr2, %%&quot;</span> _ASM_AX <span class="token string">&quot;   \\n\\t&quot;</span>
    <span class="token string">&quot;mov %%&quot;</span> _ASM_AX <span class="token string">&quot;, %c[cr2](%0) \\n\\t&quot;</span>

    <span class="token string">&quot;pop  %%&quot;</span> _ASM_BP <span class="token string">&quot;; pop  %%&quot;</span> _ASM_DX <span class="token string">&quot; \\n\\t&quot;</span>
    <span class="token string">&quot;setbe %c[fail](%0) \\n\\t&quot;</span>
    <span class="token string">&quot;.pushsection .rodata \\n\\t&quot;</span>
    <span class="token string">&quot;.global vmx_return \\n\\t&quot;</span>
    <span class="token string">&quot;vmx_return: &quot;</span> _ASM_PTR <span class="token string">&quot; 2b \\n\\t&quot;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vmx<span class="token operator">-&gt;</span>loaded_vmcs<span class="token operator">-&gt;</span>launched <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  vmx<span class="token operator">-&gt;</span>exit_reason <span class="token operator">=</span> <span class="token function">vmcs_read32</span><span class="token punctuation">(</span>VM_EXIT_REASON<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 vmx_vcpu_run 中，出现了汇编语言的代码，比较难看懂，但是没有关系呀，里面有注释呀，我们可以沿着注释来看。</p><ul><li>首先是 Store host registers，要从宿主机模式变为客户机模式了，所以原来宿主机运行时候的寄存器要保存下来。</li><li>接下来是 Load guest registers，将原来客户机运行的时候的寄存器加载进来。</li><li>接下来是 Enter guest mode，调用 ASM_VMX_VMLAUNCH 进入客户机模型运行，或者 ASM_VMX_VMRESUME 恢复客户机模型运行。</li><li>如果客户机因为某种原因退出，Save guest registers, load host registers，也即保存客户机运行的时候的寄存器，就加载宿主机运行的时候的寄存器。</li><li>最后将 exit_reason 保存在 vmx 结构中。</li></ul><p>至此，CPU 虚拟化就解析完了。</p><p><strong>总结时刻</strong></p><p>CPU 的虚拟化过程还是很复杂的，我画了一张图总结了一下。</p><figure><img src="`+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>首先，我们要定义 CPU 这种类型的 TypeInfo 和 TypeImpl、继承关系，并且声明它的类初始化函数。</li><li>在 qemu 的 main 函数中调用 MachineClass 的 init 函数，这个函数既会初始化 CPU，也会初始化内存。</li><li>CPU 初始化的时候，会调用 pc_new_cpu 创建一个虚拟 CPU，它会调用 CPU 这个类的初始化函数。</li><li>每一个虚拟 CPU 会调用 qemu_thread_create 创建一个线程，线程的执行函数为 qemu_kvm_cpu_thread_fn。</li><li>在虚拟 CPU 对应的线程执行函数中，我们先是调用 kvm_vm_ioctl(KVM_CREATE_VCPU)，在内核的 KVM 里面，创建一个结构 struct vcpu_vmx，表示这个虚拟 CPU。在这个结构里面，有一个 VMCS，用于保存当前虚拟机 CPU 的运行时的状态，用于状态切换。</li><li>在虚拟 CPU 对应的线程执行函数中，我们接着调用 kvm_vcpu_ioctl(KVM_RUN)，在内核的 KVM 里面运行这个虚拟机 CPU。运行的方式是保存宿主机的寄存器，加载客户机的寄存器，然后调用 __ex(ASM_VMX_VMLAUNCH) 或者 __ex(ASM_VMX_VMRESUME)，进入客户机模式运行。一旦退出客户机模式，就会保存客户机寄存器，加载宿主机寄存器，进入宿主机模式运行，并且会记录退出虚拟机模式的原因。大部分的原因是等待 I/O，因而宿主机调用 kvm_handle_io 进行处理。</li></ul><p><strong>课堂练习</strong></p><p>在咱们上面操作 KVM 的过程中，出现了好几次文件系统。不愧是“Linux 中一切皆文件”。那你能否整理一下这些文件系统之间的关系呢？</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p>',103),i=[c];function u(l,k){return s(),a("div",null,i)}const v=n(o,[["render",u],["__file","N51-虚拟CPU（下）.html.vue"]]);export{v as default};
