import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const e="/assets/03yy161484ed15837f58a4283b960c8f-b667652c.jpg",t="/assets/777e8e56b151b5812c48e06d861408f4-82b3ea6c.jpg",o="/assets/66597887b59b30d73ff300249e47e296-b0b8c668.jpg",c={},i=p(`<h1 id="_42-瞧一瞧linux-如何实现系统api" tabindex="-1"><a class="header-anchor" href="#_42-瞧一瞧linux-如何实现系统api" aria-hidden="true">#</a> 42 | 瞧一瞧Linux：如何实现系统API？</h1><p>你好，我是 LMOS。</p><p>上节课，我们通过实现一个获取时间的系统服务，学习了 Cosmos 里如何建立一个系统服务接口。Cosmos 为应用程序提供服务的过程大致是这样的：应用程序先设置服务参数，然后通过 int 指令进入内核，由 Cosmos 内核运行相应的服务函数，最后为应用程序提供所需服务。</p><p>不知道你是否好奇过业内成熟的 Linux 内核，又是怎样为应用程序提供服务的呢？</p><p>这节课我们就来看看 Linux 内核是如何实现这一过程的，</p><ol><li>我们首先了解一下 Linux 内核有多少 API 接口，</li><li>然后了解一下 Linux 内核 API 接口的架构，</li><li>最后，我们动手为 Linux 内核增加一个全新的 API，并实现相应的功能。</li></ol><p>下面让我们开始吧！这节课的配套代码你可以从这里下载。</p><h2 id="linux-内核-api-接口的架构" tabindex="-1"><a class="header-anchor" href="#linux-内核-api-接口的架构" aria-hidden="true">#</a> Linux 内核 API 接口的架构</h2><p>在上节课中，我们已经熟悉了我们自己的 Cosmos 内核服务接口的架构，由应用程序调用库函数，再由库函数调用 API 入口函数，进入内核函数执行系统服务。</p><p>其实对于 Linux 内核也是一样，应用程序会调用<mark>库函数</mark>，在库函数中调用 <mark>API 入口函数</mark>，触发<mark>中断</mark>进入 <mark>Linux 内核</mark>执行<mark>系统调用</mark>，完成相应的<mark>功能服务</mark>。</p><p>在 Linux 内核之上，使用最广泛的 C 库是 <mark>glibc</mark>，其中包括 C 标准库的实现，也包括所有和<mark>系统 API</mark> 对应的<mark>库接口函数</mark>。几乎所有 C 程序都要调用 glibc 的库函数，所以 <strong>glibc 是 Linux 内核上 C 程序运行的基础。</strong></p><p>下面我们以 open 库函数为例分析一下，看看 open 是如何进入 Linux 内核调用相关的系统调用的。glibc 虽然开源了，但是并没有在 Linux 内核代码之中，你需要从这里下载并解压，open 函数代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//glibc/intl/loadmsgcat.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_LIBC</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">open</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> flags<span class="token punctuation">)</span>  <span class="token function">__open_nocancel</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> flags<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name function">close</span><span class="token expression"><span class="token punctuation">(</span>fd<span class="token punctuation">)</span>      <span class="token function">__close_nocancel_nostatus</span> <span class="token punctuation">(</span>fd<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token comment">//glibc/sysdeps/unix/sysv/linux/open_nocancel.c</span>
<span class="token keyword">int</span> <span class="token function">__open_nocancel</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">int</span> oflag<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__OPEN_NEEDS_MODE</span> <span class="token punctuation">(</span>oflag<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      va_list arg<span class="token punctuation">;</span>
      <span class="token function">va_start</span> <span class="token punctuation">(</span>arg<span class="token punctuation">,</span> oflag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解决可变参数</span>
      mode <span class="token operator">=</span> <span class="token function">va_arg</span> <span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">va_end</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">INLINE_SYSCALL_CALL</span> <span class="token punctuation">(</span>openat<span class="token punctuation">,</span> AT_FDCWD<span class="token punctuation">,</span> file<span class="token punctuation">,</span> oflag<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//glibc/sysdeps/unix/sysdep.h</span>
<span class="token comment">//这是为了解决不同参数数量的问题</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__INLINE_SYSCALL0</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">INLINE_SYSCALL</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__INLINE_SYSCALL1</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> a1<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">INLINE_SYSCALL</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> a1<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__INLINE_SYSCALL2</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">INLINE_SYSCALL</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__INLINE_SYSCALL3</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">INLINE_SYSCALL</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__INLINE_SYSCALL_NARGS_X</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>g<span class="token punctuation">,</span>h<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> n</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__INLINE_SYSCALL_NARGS</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">__INLINE_SYSCALL_NARGS_X</span> <span class="token punctuation">(</span>__VA_ARGS__<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__INLINE_SYSCALL_DISP</span><span class="token expression"><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">__SYSCALL_CONCAT</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token function">__INLINE_SYSCALL_NARGS</span><span class="token punctuation">(</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>__VA_ARGS__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">INLINE_SYSCALL_CALL</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token function">__INLINE_SYSCALL_DISP</span> <span class="token punctuation">(</span>__INLINE_SYSCALL<span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span></span></span>
<span class="token comment">//glibc/sysdeps/unix/sysv/linux/sysdep.h</span>
<span class="token comment">//关键是这个宏</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">INLINE_SYSCALL</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>       </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>                  </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">int</span> sc_ret <span class="token operator">=</span> <span class="token function">INTERNAL_SYSCALL</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token function">INTERNAL_SYSCALL_ERROR_P</span> <span class="token punctuation">(</span>sc_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">?</span> <span class="token function">SYSCALL_ERROR_LABEL</span> <span class="token punctuation">(</span><span class="token function">INTERNAL_SYSCALL_ERRNO</span> <span class="token punctuation">(</span>sc_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>   </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> sc_ret<span class="token punctuation">;</span>               </span><span class="token punctuation">\\</span>
  <span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">INTERNAL_SYSCALL</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>       </span><span class="token punctuation">\\</span>
  <span class="token expression">internal_syscall</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">nr</span> <span class="token punctuation">(</span><span class="token function">SYS_ify</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">INTERNAL_SYSCALL_NCS</span><span class="token expression"><span class="token punctuation">(</span>number<span class="token punctuation">,</span> nr<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>     </span><span class="token punctuation">\\</span>
  <span class="token expression">internal_syscall</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">nr</span> <span class="token punctuation">(</span>number<span class="token punctuation">,</span> args<span class="token punctuation">)</span></span></span>
<span class="token comment">//这是需要6个参数的宏</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">internal_syscall6</span><span class="token expression"><span class="token punctuation">(</span>number<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">,</span> arg4<span class="token punctuation">,</span> arg5<span class="token punctuation">,</span> arg6<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">{</span>                  </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> resultvar<span class="token punctuation">;</span>          </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg6<span class="token punctuation">,</span> __arg6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg6<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg5<span class="token punctuation">,</span> __arg5<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg5<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">,</span> __arg4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">,</span> __arg3<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> __arg2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> __arg1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ARGIFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg6<span class="token punctuation">,</span> _a6<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;r9&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg6<span class="token punctuation">;</span>      </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg5<span class="token punctuation">,</span> _a5<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;r8&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg5<span class="token punctuation">;</span>      </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg4<span class="token punctuation">,</span> _a4<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;r10&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg4<span class="token punctuation">;</span>     </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg3<span class="token punctuation">,</span> _a3<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rdx&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg3<span class="token punctuation">;</span>     </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg2<span class="token punctuation">,</span> _a2<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rsi&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg2<span class="token punctuation">;</span>     </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">register</span> <span class="token function">TYPEFY</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> _a1<span class="token punctuation">)</span> <span class="token keyword">asm</span> <span class="token punctuation">(</span></span><span class="token string">&quot;rdi&quot;</span><span class="token expression"><span class="token punctuation">)</span> <span class="token operator">=</span> __arg1<span class="token punctuation">;</span>     </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token keyword">asm</span> <span class="token keyword">volatile</span> <span class="token punctuation">(</span>              </span><span class="token punctuation">\\</span>
    <span class="token string">&quot;syscall\\n\\t&quot;</span>             <span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;=a&quot;</span> <span class="token expression"><span class="token punctuation">(</span>resultvar<span class="token punctuation">)</span>              </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;0&quot;</span> <span class="token expression"><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a1<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a2<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a3<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a4<span class="token punctuation">)</span><span class="token punctuation">,</span>   </span><span class="token punctuation">\\</span>
      <span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a5<span class="token punctuation">)</span><span class="token punctuation">,</span> </span><span class="token string">&quot;r&quot;</span> <span class="token expression"><span class="token punctuation">(</span>_a6<span class="token punctuation">)</span>            </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token operator">:</span> </span><span class="token string">&quot;memory&quot;</span><span class="token expression"><span class="token punctuation">,</span> REGISTERS_CLOBBERED_BY_SYSCALL<span class="token punctuation">)</span><span class="token punctuation">;</span>      </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span> resultvar<span class="token punctuation">;</span>           </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，我们可以清楚地看到，open 只是宏，实际工作的是 __open_nocancel 函数，其中会用 INLINE_SYSCALL_CALL 宏经过一系列替换，最终根据参数的个数替换成相应的 internal_syscall##nr 宏。</p><p>比如有 6 个参数，就会替换成 internal_syscall6。其中 number 是系统调用号，参数通过寄存器传递的。但是这里我们没有发现 <mark>int 指令</mark>，这是因为这里用到的指令是最新处理器为其设计的<mark>系统调用指令 syscall</mark>。这个指令和 int 指令一样，都可以让 CPU 跳转到特定的地址上，<strong>只不过不经过中断门</strong>，系统调用返回时要用 <mark>sysexit 指令</mark>。</p><h2 id="linux-内核-api-接口的架构【图】" tabindex="-1"><a class="header-anchor" href="#linux-内核-api-接口的架构【图】" aria-hidden="true">#</a> Linux 内核 API 接口的架构【图】</h2><p>好了，我们已经了解了这个 open 函数的调用流程，如果用一幅图来展示 Linux 内核 API 的架构，就会呈现后面这个样子。</p><img src="`+e+`" alt="img" style="zoom:15%;"><p>LinuxAPI框架</p><p>有了前面代码流程分析和结构示意图，我想你会对 Linux 内核 API 的框架结构加深了解。上图中的系统调用表和许多 sys_xxxx 函数你可能不太明白，别担心，我们后面就会讲到。</p><p>那么 Linux 系统有多少个 API 呢？我们一起去看看吧。</p><h2 id="linux-内核有多少-api-接口" tabindex="-1"><a class="header-anchor" href="#linux-内核有多少-api-接口" aria-hidden="true">#</a> Linux 内核有多少 API 接口</h2><p>Linux 作为比较成熟的操作系统，功能完善，它以众多 API 接口的方式向应用程序提供文件、网络、进程、时间等待服务，并且完美执行了国际 posix 标准。</p><p>Linux 从最初几十个 API 接口，现在已经发展到了几百个 API 接口，从这里你可以预见到 Linux 内核功能增加的速度与数量。那么现在的 Linux 内核究竟有多少个 API 接口呢？我们还是要来看看最新发布的 Linux 内核版本，才能准确知道。</p><ol><li><p>具体我们需要对 Linux 代码进行编译，在编译的过程中，</p><p>根据 <code>syscall_32.tbl</code> 和 <code>syscall_64.tbl</code> 生成自己的 <code>syscalls_32.h</code> 和 <code>syscalls_64.h</code> 文件。</p></li><li><p>生成方式在 <code>arch/x86/entry/syscalls/Makefile</code> 文件中。</p><p>这里面会使用两个脚本，即 <code>syscallhdr.sh</code>、<code>syscalltbl.sh</code>，<br> 它们最终生成的 <code>syscalls_32.h</code> 和 <code>syscalls_64.h</code> 两个文件中就保存了 <strong>系统调用号 和 系统调用实现函数 之间的对应关系</strong>，<br> 在里面可以看到 Linux 内核的<mark>系统调用号</mark>，即 <mark>API 号</mark>，代码如下所示。</p></li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//linux/arch/x86/include/generated/asm/syscalls_64.h</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sys_read<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> sys_write<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> sys_open<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> sys_close<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> sys_newstat<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> sys_newfstat<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> sys_newlstat<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> sys_poll<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> sys_lseek<span class="token punctuation">)</span>
<span class="token comment">//……</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">435</span><span class="token punctuation">,</span> sys_clone3<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">436</span><span class="token punctuation">,</span> sys_close_range<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">437</span><span class="token punctuation">,</span> sys_openat2<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">438</span><span class="token punctuation">,</span> sys_pidfd_getfd<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">439</span><span class="token punctuation">,</span> sys_faccessat2<span class="token punctuation">)</span>
<span class="token function">__SYSCALL_COMMON</span><span class="token punctuation">(</span><span class="token number">440</span><span class="token punctuation">,</span> sys_process_madvise<span class="token punctuation">)</span>
<span class="token comment">//linux/arch/x86/include/generated/uapi/asm/unistd_64.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_read</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_write</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_open</span> <span class="token expression"><span class="token number">2</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_close</span> <span class="token expression"><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_stat</span> <span class="token expression"><span class="token number">4</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_fstat</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_lstat</span> <span class="token expression"><span class="token number">6</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_poll</span> <span class="token expression"><span class="token number">7</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_lseek</span> <span class="token expression"><span class="token number">8</span></span></span>
<span class="token comment">//……</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_clone3</span> <span class="token expression"><span class="token number">435</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_close_range</span> <span class="token expression"><span class="token number">436</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_openat2</span> <span class="token expression"><span class="token number">437</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_pidfd_getfd</span> <span class="token expression"><span class="token number">438</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_faccessat2</span> <span class="token expression"><span class="token number">439</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_process_madvise</span> <span class="token expression"><span class="token number">440</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__KERNEL__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_syscall_max</span> <span class="token expression"><span class="token number">440</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，已经定义了 __NR_syscall_max 为 440，这说明 Linux 内核一共有 441 个系统调用，而系统调用号从 0 开始到 440 结束，所以最后一个系统调用是 sys_process_madvise。</p><p>其实，__SYSCALL_COMMON 除了表示系统调用号和系统调用函数之间的关系，还会在 Linux 内核的系统调用表中进行相应的展开，究竟展开成什么样子呢？我们一起接着看一看 Linux 内核的系统调用表。</p><h2 id="linux-系统调用表" tabindex="-1"><a class="header-anchor" href="#linux-系统调用表" aria-hidden="true">#</a> Linux 系统调用表</h2><p>Linux 内核有 400 多个系统调用，它使用了一个函数指针数组，存放所有的系统调用函数的地址，通过数组下标就能索引到相应的系统调用。这个数组叫 sys_call_table，即 Linux 系统调用表。</p><p>sys_call_table 到底长什么样？我们来看一看代码才知道，同时也解答一下前面留下的疑问，这里还是要说明一下，__SYSCALL_COMMON 首先会替换成 __SYSCALL_64，因为我们编译的 Linux 内核是 x86_64 架构的，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SYSCALL_COMMON</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">,</span> sym<span class="token punctuation">)</span> <span class="token function">__SYSCALL_64</span><span class="token punctuation">(</span>nr<span class="token punctuation">,</span> sym<span class="token punctuation">)</span></span></span>
<span class="token comment">//第一次定义__SYSCALL_64</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SYSCALL_64</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">,</span> sym<span class="token punctuation">)</span> <span class="token keyword">extern</span> asmlinkage <span class="token keyword">long</span> <span class="token function">sym</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asm/syscalls_64.h&gt;</span><span class="token comment">//第一次包含syscalls_64.h文件，其中的宏会被展开一次，例如__SYSCALL_COMMON(2, sys_open)会被展开成：</span></span>
<span class="token keyword">extern</span> asmlinkage <span class="token keyword">long</span> <span class="token function">sys_open</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
这表示申明
<span class="token comment">//取消__SYSCALL_64定义</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">__SYSCALL_64</span></span>
<span class="token comment">//第二次重新定义__SYSCALL_64</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">__SYSCALL_64</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">,</span> sym<span class="token punctuation">)</span> <span class="token punctuation">[</span> nr <span class="token punctuation">]</span> <span class="token operator">=</span> sym<span class="token punctuation">,</span></span></span>

<span class="token keyword">extern</span> asmlinkage <span class="token keyword">long</span> <span class="token function">sys_ni_syscall</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token class-name">sys_call_ptr_t</span> sys_call_table<span class="token punctuation">[</span><span class="token punctuation">]</span> ____cacheline_aligned <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> __NR_syscall_max<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>sys_ni_syscall<span class="token punctuation">,</span><span class="token comment">//默认系统调用函数，什么都不干</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asm/syscalls_64.h&gt;</span><span class="token comment">//包含前面生成文件</span></span>
<span class="token comment">//第二次包含syscalls_64.h文件，其中的宏会被再展开一次，例如__SYSCALL_COMMON(2, sys_open)会被展开成：</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sys_open<span class="token punctuation">,</span> 用于初始化这个数组，即表示数组的第二个元素填入sys_open
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> syscall_table_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sys_call_table<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//系统调用表的大小</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，通过两次包含 syscalls_64.h 文件，并在其中分别定义不同的 __SYSCALL_64 宏，完成了系统调用函数的申明和系统调用表的初始化，不得不说这是一个非常巧妙的方式。</p><p>sys_call_table 数组，第一次全部初始化为默认系统调用函数 sys_ni_syscall，这个函数什么都不干，这是为了**防止数组有些元素中没有函数地址，从而导致调用失败。**这在内核中是非常危险的。我单独提示你这点，其实也是希望你留意这种编程技巧，这在内核编码中并不罕见，考虑到内核编程代码的安全性，加一道防线可以有备无患。</p><h2 id="linux-系统调用实现" tabindex="-1"><a class="header-anchor" href="#linux-系统调用实现" aria-hidden="true">#</a> Linux 系统调用实现</h2><p>前面我们已经了解了 Linux 系统调用的架构和 Linux 系统调用表，也清楚了 Linux 系统调用的个数和定义一个 Linux 系统调用的方式。</p><p>为了让你更好地理解 Linux 系统是如何工作的，我们为现有的 Linux 写一个系统调用。这个系统调用的功能并不复杂，就是返回你机器的 CPU 数量，即你的机器是多少核心的处理器。</p><p>为 Linux 增加一个系统调用，其实有很多步骤，不过也别慌，下面我将一步一步为你讲解。</p><h3 id="_1-下载-linux-源码" tabindex="-1"><a class="header-anchor" href="#_1-下载-linux-源码" aria-hidden="true">#</a> 1）下载 Linux 源码</h3><p>想为 Linux 系统增加一个系统调用，首先你得有 Linux 内核源代码，如果你机器上没有 Linux 内核源代码，你就要去内核官网下载，或者你也可以到 GitHub 上 git clone 一份内核代码。</p><p>如果你使用了 git clone 的方式，可以用如下方式操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>git clone git<span class="token operator">:</span><span class="token comment">//git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想尽量保持与我的 Linux 内核版本相同，降低出现各种未知问题的概率，那么请你使用 <strong>5.10.13 版本</strong>的内核。另外别忘了，如果你下载的 Linux 内核是压缩包，请记得先解压到一个可以访问的目录下。</p><h3 id="_2-申明系统调用" tabindex="-1"><a class="header-anchor" href="#_2-申明系统调用" aria-hidden="true">#</a> 2）申明系统调用</h3><p>根据前面的知识点，可以得知 Linux 内核的系统调用的申明文件和信息，具体实现是这样的：由一个 makefile 在编译 Linux 系统内核时调用了一个脚本，这个脚本文件会读取另一个叫 syscall_64.tbl 文件，根据其中信息生成相应的文件 syscall_64.h。</p><p>请注意，我这里是以 x86_64 架构为例进行说明的，这里我们并不关注 syscall_64.h 的生成原理，只关注 syscall_64.tbl 文件中的内容。下面我们还是结合代码看一下吧。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//linux-5.10.13/arch/x86/entry/syscalls/syscall_64.tbl</span>
<span class="token number">0</span>  common  read      sys_read
<span class="token number">1</span>  common  write      sys_write
<span class="token number">2</span>  common  open      sys_open
<span class="token number">3</span>  common  close      sys_close
<span class="token number">4</span>  common  stat      sys_newstat
<span class="token number">5</span>  common  fstat      sys_newfstat
<span class="token number">6</span>  common  lstat      sys_newlstat
<span class="token number">7</span>  common  poll      sys_poll
<span class="token number">8</span>  common  lseek      sys_lseek
<span class="token number">9</span>  common  mmap      sys_mmap
<span class="token number">10</span>  common  mprotect    sys_mprotect
<span class="token number">11</span>  common  munmap      sys_munmap
<span class="token number">12</span>  common  brk          sys_brk
<span class="token comment">//……</span>
<span class="token number">435</span>  common  clone3      sys_clone3
<span class="token number">436</span>  common  close_range    sys_close_range
<span class="token number">437</span>  common  openat2      sys_openat2
<span class="token number">438</span>  common  pidfd_getfd    sys_pidfd_getfd
<span class="token number">439</span>  common  faccessat2    sys_faccessat2
<span class="token number">440</span>  common  process_madvise    sys_process_madvise
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这些代码可以分成四列，分别是系统调用号、架构、服务名，以及其相对应的服务入口函数。例如系统调用 open 的结构，如下表所示。</p><img src="`+t+`" alt="img" style="zoom:25%;"><p>那我们要如何申明自己的系统调用呢？第一步就需要在 syscall_64.tbl 文件中增加一项，如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">441</span>  common  get_cpus    sys_get_cpus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们自己的系统调用的系统调用号是 441，架构是 common ，服务名称是 get_cpus，服务入口函数则是 sys_get_cpus。请注意系统调用号要唯一，不能和其它系统调用号冲突。</p><p>写好这个，我们还需要把 sys_get_cpus 函数在 syscalls.h 文件中申明一下，供其它内核模块引用。具体代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//linux-5.10.13/include/linux/syscalls.h</span>
asmlinkage <span class="token keyword">long</span> <span class="token function">sys_get_cpus</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这一步做好之后，我们就完成了一个 Linux 系统调用的所有申明工作。下面我们就去定义这个系统调用的服务入口函数。</p><h3 id="_3-定义系统调用" tabindex="-1"><a class="header-anchor" href="#_3-定义系统调用" aria-hidden="true">#</a> 3）定义系统调用</h3><p>我们现在来定义自己的第一个 Linux 系统调用，为了降低工程复杂度，我们不打算新建一个 C 模块文件，而是直接在 Linux 内核代码目录下挑一个已经存在的 C 模块文件，并在其中定义我们自己的系统调用函数。</p><p>定义一个系统调用函数，需要使用专门的宏。根据参数不同选用不同的宏，这个宏的细节我们无须关注。对于我们这个无参数的系统调用函数，应该使用 SYSCALL_DEFINE0 宏来定义，代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//linux-5.10.13/include/linux/syscalls.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">SYSCALL_DEFINE0</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SYSCALL_DEFINE0</span><span class="token expression"><span class="token punctuation">(</span>sname<span class="token punctuation">)</span>                  </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">SYSCALL_METADATA</span><span class="token punctuation">(</span>_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              </span><span class="token punctuation">\\</span>
    <span class="token expression">asmlinkage <span class="token keyword">long</span> sys_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">sname</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          </span><span class="token punctuation">\\</span>
    <span class="token expression"><span class="token function">ALLOW_ERROR_INJECTION</span><span class="token punctuation">(</span>sys_</span><span class="token punctuation">##</span><span class="token expression">sname<span class="token punctuation">,</span> ERRNO<span class="token punctuation">)</span><span class="token punctuation">;</span>      </span><span class="token punctuation">\\</span>
    <span class="token expression">asmlinkage <span class="token keyword">long</span> sys_</span><span class="token punctuation">##</span><span class="token expression"><span class="token function">sname</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* SYSCALL_DEFINE0 */</span></span>
<span class="token comment">//linux-5.10.13/kernel/sys.c</span>
<span class="token function">SYSCALL_DEFINE0</span><span class="token punctuation">(</span>get_cpus<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">num_present_cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取系统中有多少CPU</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中 SYSCALL_DEFINE0 会将 get_cpus 转换成 sys_get_cpus 函数。这个函数中，调用了一个 Linux 内核中另一个函数 num_present_cpus，从名字就能推断出作用了，它负责返回系统 CPU 的数量。 这正是我们要达到的结果。这个结果最终会返回给调用这个系统调用的应用程序。</p><h3 id="_4-编译-linux-内核" tabindex="-1"><a class="header-anchor" href="#_4-编译-linux-内核" aria-hidden="true">#</a> 4）编译 Linux 内核</h3><p>现在我们的 Linux 系统调用的代码，已经写好了，不过这跟编写内核模块还是不一样的。编写内核模块，我们只需要把内核模块动态加载到内核中，就可以直接使用了。系统调用发生在内核中，与内核是一体的，它无法独立成为可以加载的内核模块。所以我们需要重新编译内核，然后使用我们新编译的内核。</p><p>要编译内核首先是要配置内核，内核的配置操作非常简单，我们只需要源代码目录下执行“make menuconfig”指令，就会出现如下所示的界面。</p><img src="`+o+`" alt="img" style="zoom:50%;"><p>配置Linux</p><p>图中这些菜单都可以进入子菜单或者手动选择。</p><p>但是手动选择配置项非常麻烦且危险，**如果不是资深的内核玩家，不建议手动配置！**但是我们可以选择加载一个已经存在的配置文件，这个配置文件可以加载你机器上 boot 目录下的 config 开头的文件，加载之后选择 Save，就能保存配置并退出以上界面。</p><p>然后输入如下指令，就可以喝点茶、听听音乐，等待机器自行完成编译，编译的时间取决于机器的性能，快则十几分钟，慢则几个小时。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>make <span class="token operator">-</span>j8 bzImage <span class="token operator">&amp;&amp;</span> make <span class="token operator">-</span>j8 modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述代码指令干了哪些事儿呢？我来说一说，首先要编译内核，然后再编译内核模块，j8 表示开启 8 线程并行编译，这个你可以根据自己的机器 CPU 核心数量进行调整。</p><p>编译过程结束之后就可以开始安装新内核了，你只需要在源代码目录下，执行如下指令。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>sudo make modules_install <span class="token operator">&amp;&amp;</span> sudo make install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述代码指令先安装好内核模块，然后再安装内核，最后会调用 update-grub，自动生成启动选项，重启计算机就可以选择启动我们自己修改的 Linux 内核了。</p><h3 id="_5-编写应用测试" tabindex="-1"><a class="header-anchor" href="#_5-编写应用测试" aria-hidden="true">#</a> 5）编写应用测试</h3><p>相信经过上述过程，你应该已经成功启动了修改过的新内核。不过我们还不确定我们增加的系统调用是不是正常的，所以我们还要写个应用程序测试一下，其实就是去调用一下我们增加的系统调用，看看结果是不是预期的。</p><p>我们应用程序代码如下所示。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//syscall就是根据系统调用号调用相应的系统调用</span>
    <span class="token keyword">long</span> cpus <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token number">441</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;cpu num is:%d\\n&quot;</span><span class="token punctuation">,</span> cpus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对上述代码我们使用 gcc main.c -o cpus 指令进行编译，运行之后就可以看到结果了，但是我们没有写库代码，而是直接使用 syscall 函数。这个函数可以根据系统调用号触发系统调用，根据上面定义，441 正是对应咱们的 sys_get_cpus 系统调用。</p><p>至此，在 Linux 系统上增加自己的系统调用这个实验，我们就完成了。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>今天我们从了解 Linux 系统的 API 架构开始，最后在 Linux 系统上实现了一个自己的系统调用，虽然增加一个系统调用步骤不少，但你只要紧跟着我的思路一定可以拿下。</p><p>下面我来为你梳理一下课程的重点。</p><ul><li><p>\\1. 从 Linux 系统的 API 架构开始，我们了解了 <mark>glibc 库</mark>，这个库是大部分应用程序的基础，我们以其中的 open 函数为例，分析了库函数如何通过寄存器传递参数，最后执行 syscall 指令进入 Linux 内核，执行系统调用，最后还归纳出一幅 Linux 系统 API 框架图。</p></li><li><p>\\2. 然后, 我们了解 Linux 系统中有多少个 API，它们都放在<mark>系统调用表</mark>中，同时也知道了 Linux 系统调用表的生成方式。</p></li><li><p>\\3. 最后，为了验证我们了解的知识是否正确，我们从申明系统调用、定义系统调用到编译内核、编写应用测试，在现有的 Linux 代码中增加了一个属于我们自己的系统调用。</p></li></ul><p>好了，我们通过这节课搞清楚了 Linux 内核系统调用的实现原理。你是否感觉这和我们的 Cosmos 的系统服务有些相似，又有些不同？</p><p>相似的是我们都使用寄存器来传递参数，不同的是 Cosmos 使用了中断门进入内核，而 Linux 内核使用了更新的 <mark>syscall 指令</mark>。有了这些知识储备，我也非常期待你能动手拓展，挑战一下在 Cosmos 上实现使用 syscall 触发系统调用。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请说说 syscall 指令和 int 指令的区别，是什么？</p><p>欢迎你在留言区跟我交流互动，也推荐你把这节课分享给有需要的朋友，一起实现操作系统里的各种功能。</p><p>我是 LMOS，我们下节课见。</p>`,89),l=[i];function u(k,r){return s(),a("div",null,l)}const v=n(c,[["render",u],["__file","M42-Linux的系统API.html.vue"]]);export{v as default};
