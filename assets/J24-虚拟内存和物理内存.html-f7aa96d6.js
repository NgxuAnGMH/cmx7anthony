import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as i,a as n,b as s,e as o,d as c}from"./app-cdabc73c.js";const l="/assets/d320f39fac67758cea842ff17ed247a0-8cab54a5.jpg",r="/assets/d18f8ce8134d8dcfd9bfd747bb7f1cea-00b4889e.jpg",u="/assets/60d23399966790f8e2bb349d02e73baf-20bb90fe.jpg",d="/assets/22be99880f2618e9364144e45ca9fcbf-44512f61.jpg",k="/assets/4438c4af41f48ce780147507ef7b85ec-118f1093.jpg",m="/assets/8bf885e4a091f476b6623d7245af8308-8de7b58b.jpg",b="/assets/3cedbd13b61df571c98c86e3bc81263c-7359a018.jpg",g="/assets/962c7445ecd8f13fd730668832608761-096b7041.jpg",f="/assets/0da108082143e81551bc4d74dae65fd4-3985a95f.jpg",v="/assets/86986d10b9446e4457c579b0a2cff937-79f99842.jpg",_="/assets/cbcaf428214960ac7248c0dcc88e8773-ff3a820d.jpg",h={},M=n("h1",{id:"_24-虚实结合-虚拟内存和物理内存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_24-虚实结合-虚拟内存和物理内存","aria-hidden":"true"},"#"),s(" 24｜虚实结合：虚拟内存和物理内存")],-1),U=n("p",null,"你好，我是 LMOS。",-1),y=n("p",null,"上一课中学习了内存地址空间，我们搞清楚了内存地址与地址空间的本质。",-1),x=n("p",null,"今天我们开始学习虚拟内存与物理内存。其实虚拟内存也好，物理内存也罢，我们从储存并索引数据的角度来看，内存的重要组成部分就两个：一个是地址，另一个就是储存字节单元，即能存放 8 个二进制位的容器。把两者合起来，我们可以将内存理解为能索引到具体储存字节单元的地址集合。",-1),B=n("p",null,"这节课我会带你解决以下三个问题：",-1),P=n("ol",null,[n("li",null,"虚拟内存的本质是什么？"),n("li",null,"物理内存是什么，它的结构长什么样？"),n("li",null,"虚拟内存如何与物理内存结合在一起，真正实现储存数据的功能？")],-1),w={href:"https://gitee.com/lmos/Geek-time-computer-foundation/tree/master/lesson24",target:"_blank",rel:"noopener noreferrer"},C=c(`<h2 id="虚拟内存" tabindex="-1"><a class="header-anchor" href="#虚拟内存" aria-hidden="true">#</a> 虚拟内存</h2><p>上节课我们了解了内存地址的产生方式，以及应用程序的链接过程，也知道了内存就是能索引到具体储存单元的地址集合。但是程序中的地址能否索引到具体储存单元呢？具体的储存单元，又是如何分配的呢？下面我们用两个问题来说明其中的原理。</p><h3 id="第一个问题" tabindex="-1"><a class="header-anchor" href="#第一个问题" aria-hidden="true">#</a> 第一个问题</h3><p>我的第一个问题来了，应用程序中使用的地址是什么内存地址？是不是感觉情况有很多种，一时很难回答清楚？遇到这种状况不要慌，我们只要动手写一个简单的程序就可以验证。</p><p>好，我们立刻动手写一写，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token keyword">void</span> <span class="token function">func_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//定义地址：0x40000000</span>
    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x40000000</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;内存地址:%p\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//向该地址写入数据</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">0xABABBABA</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;内存地址:%p处的值:%x\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">func_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述应用程序非常简单，我们在 main 函数中调用函数 func_a，而在函数 func_a 中，我们定义一个整型指针，C 语言中指针就是内存地址，其地址值为 0x40000000。</p><p>代码我给你存到了课程相关的工程目录中，你可以打开工程目录 make 一下，就会自动编译好。然后，你需要在终端下运行这个 main.elf 程序，首先会出现“内存地址：0x40000000”，接着会出现“段错误，程序异常退出”的提示。</p><p>出现了段错误提示，在你的预料之中么？我来解释一下，为什么会出现这种情况，这是因为我们使用了一个没有分配的地址。很显然，如果一个地址真的能索引到内存，该地址就能访问内存，除非这地址是个假地址，在内部需要某种机制进行转换才能访问内存。这个转换机制可能需要一些表或者数据结构进行控制，并且这个控制权掌握在操作系统的手里。</p><p>由于操作系统管理内存的规则，是先分配后使用，所以，我们就猜想操作系统分配内存的时候，就会处理控制地址转换的相关表和数据结构。接下来我们写段代码，来验证一下猜想，如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdio.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;stdlib.h&quot;</span></span>
<span class="token keyword">void</span> <span class="token function">func_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//分配内存，返回其地址</span>
    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;内存地址:%p\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//向该地址写入数据</span>
        <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">0xABABBABA</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;内存地址:%p处的值:%x\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">func_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我们编译运行，就会正确地输出结果了。</p><p>其实 malloc 函数在内部最终会调用 Linux 内核的 API 函数，在该进程的虚拟地址空间中分配一小块虚拟内存，返回其首地址。这个过程我用一幅图来为你展示，如下所示：</p><figure><img src="`+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于代码优化的原因，malloc 函数并不是每次调用，都会导致 Linux 内核建立一个 vm_area_struct 数据结构。我们假定 malloc 函数导致 Linux 内核建立了一个 vm_area_struct 数据结构，该结构中有描述虚拟内存的开始地址、大小、属性等相关字段，表示已经分配的虚拟内存空间。</p><p>许多个这样的结构可以一起表示进程的虚拟地址空间分配情况。但是，这个从 vm_area_struct 数据结构中返回的地址，仍然是虚拟的、是假的，是不能索引到内存单元的，直到访问该地址时，会发生另一个故事，如下图所示：</p><figure><img src="'+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图中 CPU 拿着一个虚拟地址访问内存，首先会经过 MMU，对于调用 malloc 函数的情况是该虚拟地址没有映射到物理内存，所以会通知 CPU 该地址禁止访问。</p><p>上图中 1 到 4 个步骤为硬件自动完成的，然后 CPU 中断到 Linux 内核地址错误处理程序，软件开始工作，也就是说 Linux 内核会对照着当前进程的虚拟地址空间，去查找对应的 vm_area_struct 数据结构，找不到就证明虚拟地址未分配，直接结束，进程会发出段错误；若是找到了，则证明虚拟地址已经分配，接着会分配物理内存，建立虚拟地址到物理地址的映射关系，接着程序就可以继续运行了。</p><p>当然了，实际情况比图中的复杂，这里我们只是要理清楚 malloc 函数的逻辑，并且明确 malloc 是返回的虚拟内存地址就可以了。</p><h3 id="第二个问题" tabindex="-1"><a class="header-anchor" href="#第二个问题" aria-hidden="true">#</a> 第二个问题</h3><p>我们要想清楚的第二个问题就是，直接使用物理内存地址，会出现什么后果？我们来看一个程序，下面这段代码是一个简单版的 memset 函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">mymemset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> start<span class="token punctuation">,</span> <span class="token keyword">char</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>start<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们提出一个假设：这个函数被不同的应用程序调用，且使用的地址就是物理地址，能直接访问物理内存单元。</p><p>你可以想一想，如果假设成立，恶果就是一个程序可以改变另一个程序的内存，甚至是全部的内存。想想吧！这是何等可怕。通过这个例子，我们发现物理地址不能有效地隔离内存，达到保护内存的结果。</p><p>想要隔离内存，就需要依赖虚拟内存这个东西。我画了一幅图，带你总结一下虚拟内存的本质，如下所示：</p><figure><img src="`+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由上图可知，我们各种应用都可以拥有从 0 到最大虚拟地址的完整的虚拟内存空间，并且可以任意使用这个虚拟内存空间。每个应用，都认为自己拥有整个内存，这一点可以从所有的应用程序使用相同的链接脚本进行链接得到佐证。各个应用程序调用 malloc 函数，可能得到相同地址，是另一个佐证。</p><p>我们现在终于知道了，虚拟地址真的只是一个整数，一系列的这种整数集合，就构成了虚拟内存空间。这个整数能索引一个字节的虚拟内存单元，但这个虚拟内存单元不会对应到真正的物理设备，因此它虽然可以独立存在，但却需要下层的物理内存作为支撑，才能实现访问和储存数据。</p><h2 id="物理内存" tabindex="-1"><a class="header-anchor" href="#物理内存" aria-hidden="true">#</a> 物理内存</h2><p>上一课中，我们了解到物理地址空间是 CPU 地址线位宽所能表示最大整数集合，只是一个地址，它能索引物理设备，或者什么都不索引，这里的物理设备中就包括了物理内存。</p><p>下面我们来看看真实的内存长什么样，如下所示：</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上图可以看到，在 PCB 板上有内存颗粒芯片，主要是用来存放数据的。SPD 芯片用于存放内存自身的容量、频率、厂商等信息。还有最显眼的金手指，用于连接数据总线和地址总线、电源等。</p><p>其实内存应该叫 DRAM，即动态随机存储器。内存储存颗粒芯片中的存储单元是由电容和相关元件做成的，电容存储电荷的多、少代表数字信号 0 和 1。而随着时间的流逝，电容存在漏电现象，就会引起电荷不足的情况，导致存储单元的数据出错。所以，DRAM 需要周期性刷新，以保持电荷状态。</p><p>DRAM 结构比较简单且集成度很高，通常用于制造内存条中的储存颗粒芯片。我们无需过多关注内存硬件层面的技术规格标准，这里重点需要关注的是，<strong>逻辑上内存和硬件系统的连接方式和结构</strong>。</p><p>我还是画幅图来说明吧，这样方便你建立直观印象，如下图所示：</p><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>我们假定从物理地址 0 开始，索引的是物理内存，CPU 发出的地址是虚拟地址，经由 MMU 转换变成物理地址，物理地址经由地址译码单元就会对应到具体的内存字节储存单元。一个字节单元能储存 8 个二进制位，即一个地址能对应到 8 个二进制位。</p><p>你可以通过 dmsg 命令，查看你物理机上的情况。在我的 x86 机器里，情况如下图所示：</p><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从图里我们可以看到，usable 类型的物理地址区间，对应的是 DRAM，即内存。其它的则是保留的或者硬件设备的地址空间，这些空间程序是不能当作内存来使用的。</p><p>讲到这里，我们就明白了，逻辑上物理内存相当于几个地址上不连续的字节数组，始终有一个物理地址能索引到其中一个字节。</p><h2 id="虚实结合" tabindex="-1"><a class="header-anchor" href="#虚实结合" aria-hidden="true">#</a> 虚实结合</h2><p>提出虚拟内存这个概念，一是为了让应用认为自己享有完整的地址空间，拥有整个内存的使用权。二是要对物理内存进行保护，即使各个应用程序都存放在物理内存之中，也不能随意访问自己的物理内存，更不能侵犯别的应用程序所占用的物理内存，不然就会出现互相改写对方内存的情况，一旦出现这样的情况后果就严重了，任何应用程序都不能正常运行了。</p><p>那接下来要考虑的问题就是，虚拟内存跟物理内存要如何对应起来？</p><p>虚拟内存必须要落实到物理内存才能真正完成工作，最简单的方案是让虚拟地址能够索引到物理内存单元，但是虚拟地址和物理地址显然不能一一对应，如果那样的话，虚拟地址等于物理地址且不受控制，这样虚拟地址就没有任何意义了。</p><p>因此，我们需要在虚拟地址空间与物理地址空间之间加一个机构，这个机构相当于一个函数：p=f(v) 。对这函数传入一个虚拟地址，它就能返回一个物理地址。该函数有自己的计算方法，对于没法计算的地址或者没有权限的地址，还能返回一个禁止访问。</p><p>这个函数用硬件实现出来，就是 CPU 中的 MMU，即内存管理单元。CPU 发出的虚拟地址首先经过 MMU，MMU 内部计算得出物理地址，最后用物理地址去访问内存。MMU 的结构如下图所示：</p><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>上图中，展示了 CPU 发出的虚拟地址经过 MMU 转换出物理地址，进而访问内存的过程，但我们并没有弄清楚 MMU 是使用什么方法进行转换的，所以下面我们继续探讨 MMU 的地址转换过程。</p><p>你不妨想一想，把一个数据转换成另一个数据，最简单的方案是什么？当然是建立一个对应表格，对照表格进行查询就行了。MMU 也是使用一个地址转换表，但是它做很多优化和折中处理。不做任何折中处理的话，这种方案是无法实施的。</p><p>你可以想象一下 32 位的地址空间，有 4G 个虚拟地址和 4G 个物理地址。在这种情况下，每 8 个字节存放两个地址数据，想要装下所有的地址，这个表有多大？应该放在哪里？查询代价有多大？所以这个方案直接 pass 掉。</p><p>我们现在来看看，通常情况下 MMU 是如何解决这个问题的，一共有三个关键环节。</p><p>首先，MMU 对虚拟地址空间和物理地址空间进行<strong>分页处理</strong>，一个页大小可以是 4KB、16KB、2MB、4MB、1GB 不等。这是为了增加地址的粒度，避免采用每个字节一个地址，现在一页一个地址，地址数量就会大大减少，从而减少转换表的大小。</p><p>其次，MMU 采用的转换表也称为页表，其中只会对应物理页地址，不会储存虚拟地址，而是<strong>将虚拟地址作为页表索引</strong>，这进一步缩小了页表的大小。</p><p>最后 MMU<strong>对页表本身进行了拆分，变成了多级页表</strong>。假如不分级，4GB 内存空间 ，按照 4KB 大小分页，有 1M 个页表项，每个页表项只占用 4 个字节，也需要 4MB 空间。如果页表分级，在建立页表时就可以按需建立页表，而不是一次建立 4MB 大小的页表。</p><p>我们一起来画一幅图来描述一下这个过程，如下所示：</p><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>对照图片我们可以看到，虚拟内存页和物理内存页是同等大小的，都为 4KB，各级页表占用的空间也是一个页，即为 4KB。MMU 把虚拟地址分为 5 个位段，各位段的位数根据实际情况有所不同，按照这些位段的数据来索引各级页表中的项，一级一级往下查找，直到页表项，最后用页表项中的地址加页内偏移，就得到了物理地址。</p><p>我再画一幅图，为你描述这一过程。</p><figure><img src="'+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>看到这幅图，我们就清楚了 MMU 用虚拟地址转换物理地址的过程。如果转换成功就可以直接访问内存了；但如果转换失败，MMU 就会通知 CPU，地址转换失败，让 CPU 产生一个异常中断，进而通知操作系统内核，让操作系统内核来处理这个异常，就像 malloc 分配内存的过程那样。</p><p>我们已经知道了虚拟地址如何转换成物理地址，但是如果只是按部就班地转换可不行，别忘了，还需要对物理内存进行保护。这个保护物理内存的问题的关键就是，想清楚一个虚拟地址在什么情况下能被转换成物理地址。</p><p>这就要说到 MMU 是如何控制转换动作的。要进行控制就需要相关的控制信息，聪明如你，大概已经猜到了，控制信息就放在页表项中，MMU 在转换过程中首先就会查看那些信息，以此作出判断。</p><p>下面我们看一下控制信息的格式，如下所示：</p><figure><img src="'+v+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从上图中可以看到，页表项中的低 12 位为属性位段，这里保存一个物理内存页面的读写、执行、存在的相关权限，还有页面是否存在、可不可以缓存，是否已经访问或者写入，大小等信息。这些信息统统编码在 12 个二进制位中。</p><p>为什么表示各种页面地址的页表项，能让出 12 位用于编码这些信息呢？这是因为一个页面最小也是 4KB 且与 4KB 对齐，那么页面开始地址的低 12 位永远为 0，所以可以挪为它用。</p><p>到这里，我们就已经搞清楚虚拟地址如何转换成物理地址，并且知道了 MMU 如何控制转换过程，恭喜你解锁了虚实结合的思路和过程。</p><p>现在你可能隐约感觉到，只要操作系统牢牢控制页表数据，就能实现对内存的完全控制和保护，使得各个应用程序在自己的虚拟地址空间中安全地运行，不被打扰，也不能打扰别人。每个应用程序都有相同的虚拟内存，但却占用着不同的物理内存。</p><h2 id="重点回顾" tabindex="-1"><a class="header-anchor" href="#重点回顾" aria-hidden="true">#</a> 重点回顾</h2><p>今天的课程就要结束了，下面我们来回顾一下今天的内容。</p><p>首先我们从两个实际问题出发，研究了虚拟内存的本质。虚拟内存的应用，一是为了保护内存，二是为了限制访问内存。让应用程序拥有独立的地址空间，误以为自己能享用全部的内存。</p><p>接着我们分析了物理内存，了解了 DRAM 的特性和结构，因为 DRAM 就是我们常说的内存设备。这里你重点要关注的是内存的逻辑结构和系统连接方式。</p><p>最后我们讨论了虚实结合究竟是怎么实现的。硬件工程设计了 MMU，让它把虚拟内存地址通过页表中的信息转换成物理地址，并控制转换过程。如果转换失败就会通知 CPU，然后 CPU 产生地址异常中断，最后由操作系统处理这个异常。操作系统将会通过修改页表的数据来修复这个问题，进而完全控制内存的访问。</p><p>我画了一张导图梳理这节课内容，供你参考。</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>应用程序的虚拟地址空间里还有更多奥秘，我会在下节课继续为你展开，敬请期待。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>请问页表数据究竟放在什么地方呢？</p><p>欢迎你在留言区跟我交流互动，说说你对虚实结合的认识。如果觉得这节课还不错，也推荐你把它分享给身边的朋友。</p><blockquote><p>页表索引数据放在内存条的高位处，靠近内核区（不知是不是一定要紧邻）<br> MMU可理解为用多少物理资源给多少物理资源，但这也导致内存条上分布容易碎片化，为了减少碎片化。估计操作系统得做更多的工作！<br> 由于在保护模式下，cpu指令分级，那么内核区的页表数据用得更频繁（其它应用软件需要调用），所以内核区的页表结构应趋向于稳定（开机一直在），而应用区的页表则用多少给多少（容易碎片化），也可以理解为内存条页表真实关系等于y=f（x）（注：应用区加页表索引区）+c（内核区，接近常数 开机一直在内存条上）<br> 作者回复: 你学到了</p><hr><p>页表需要给多个进程共享，应该在内核临界区的PCB中，程序去仿存的时候除了最后访问内存中的目标数据，还会访问几次（如果没有应用快表，看是几级页表）内存中内核区的临界资源。<br> 此外为了防止地址越界，一定存在一个页表寄存器存储页表的起始地址和页表长度。<br> 作者回复: 嗯嗯</p><p>除了基本分页存储管理，我还听说过几本分段存储管理，段页式存储管理，以及带快表的分页、分段、段页式存储管理。<br> 作者回复: 是的</p><p>同学的思考能力好强啊，自觉弗如远甚，成功的聪明人课可太多了，我得为笨蛋争口气。<br> 编辑回复: 日拱一卒，不期速成，按你自己的节奏来就好，坚持长期学习，相信你会更快成长的～</p><hr><p>首先这个地方要能够共享给所有进程(因为这个页表索引肯定是全局唯一的)，还要拥有一定的权限才行（涉及到了更底层的系统调用和数据结构），按照内存分区就只能是内核区了<br> 作者回复: 是的</p><hr><p>思考题：<br> 由上文可知，虚拟内存地址可以看成是一个进程的可访问内存空间。故页表的数据应该是放置于进程控制块（PCB）中。当进程不处于运行时，PCB会记录页表的存储位置。当进程处于运行状态，页表地址会被加载进页表寄存器PTR中。<br> 作者回复: 你的这种方式 也是可行的 但是一般不这样做而是 PCB中放的指针 指向页表</p><hr><p>老师，进程的页表结构是不是只要为顶级目录基址分配一个虚拟地址就行（其他部分不需要虚拟地址）。我理解只要对这个基址做好物理地址映射（cr3寄存器需要），虚拟地址转换过程就可以通过物理内存的页表结构找到对应的物理地址。进程对其他部分的页表结构并不关心，因此不需要为它们分配虚拟地址，不知道这个理解对不对，望老师解惑，谢谢。<br> 作者回复: 对</p><hr><p>请教老师几个问题：<br> Q1：对于虚拟地址是逐条转换吗？<br> 一个程序通常指令、数据都很多，会对应很多虚拟地址，如果CPU拿到每个虚拟地址都交给MMU来转换，即逐条转换，岂不是很慢？这会降低运行速度吧。<br> Q2：MMU属于CPU吗？<br> 我一直认为MMU是独立于CPU的，但文中有一句“这个函数用硬件实现出来，就是 CPU 中的 MMU”，这句话意味着MMU是CPU中的一部分。<br> Q3：应用程序运行之前会加载到物理内存，加载到物理内存的代码段中，存放的还是虚拟地址吗？会不会根据所在物理内存的首地址把程序的虚拟地址都变成物理地址？<br> 作者回复: Q1 安页转换<br> Q2 MMU属于CPU 也可以独立于CPU<br> Q3 对 是虚拟地址</p><hr><p>fork创建进程时，会通过pgd_alloc创建一级页表，这里调用了__get_free_page(GFP_PGTABLE_USER)从伙伴系统中分配内存。然后复制父进程页表时也会根据需要依次创建二级、三级等页表。所以页表的数据最终是在物理内存中的。从GFP_PGTABLE_USER标志可以看出分配的内存是在ZONE_NORMAL及其下面的内存区域。</p><p>内核一级页表是在swapper_pg_dir里，是在系统启动时建立起来的一级页表，在物理内存1M以上的一块内存区域。<br> 所以页表数据是在物理内存中的。<br> 作者回复: 是的 你分析正确</p></blockquote>',83);function q(A,z){const a=t("ExternalLinkIcon");return e(),i("div",null,[M,U,y,x,B,P,n("p",null,[n("a",w,[s("课程配套代码你可以从这里下载"),o(a)]),s("。让我们带着上面的问题，正式开始今天的探索之旅吧！")]),C])}const R=p(h,[["render",q],["__file","J24-虚拟内存和物理内存.html.vue"]]);export{R as default};
