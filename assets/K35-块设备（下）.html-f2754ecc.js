import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-cdabc73c.js";const p="/assets/3c473d163b6e90985d7301f115ab660e-319ba8be.jpeg",e="/assets/c9f6a08075ba4eae3314523fa258363c-a8877cab.png",o={},c=t(`<h1 id="_35-块设备-下-如何建立代理商销售模式" tabindex="-1"><a class="header-anchor" href="#_35-块设备-下-如何建立代理商销售模式" aria-hidden="true">#</a> 35 | 块设备（下）：如何建立代理商销售模式？</h1><p>在文件系统那一节，我们讲了文件的写入，到了设备驱动这一层，就没有再往下分析。上一节我们又讲了 mount 一个块设备，将 block_device 信息放到了 ext4 文件系统的 super_block 里面，有了这些基础，是时候把整个写入的故事串起来了。</p><p>还记得咱们在文件系统那一节分析写入流程的时候，对于 ext4 文件系统，最后调用的是 ext4_file_write_iter，它将 I/O 的调用分成两种情况：</p><p>第一是<strong>直接 I/O</strong>。最终我们调用的是 generic_file_direct_write，这里调用的是 mapping-&gt;a_ops-&gt;direct_IO，实际调用的是 ext4_direct_IO，<strong>往<code>设备层</code>写入数据</strong>。</p><p>第二种是<strong>缓存 I/O</strong>。最终我们会将数据从应用拷贝到内存缓存中，但是这个时候，并不执行真正的 I/O 操作。它们只将整个页或其中部分标记为脏。写操作由一个 timer 触发，那个时候，才调用 wb_workfn，<strong>往<code>硬盘</code>写入页面</strong>。</p><p>接下来的调用链为：wb_workfn-&gt;wb_do_writeback-&gt;wb_writeback-&gt;writeback_sb_inodes-&gt;__writeback_single_inode-&gt;do_writepages。在 do_writepages 中，我们要调用 mapping-&gt;a_ops-&gt;writepages，但实际调用的是 ext4_writepages，往设备层写入数据。</p><p>这一节，我们就沿着这两种情况分析下去。</p><h2 id="直接-i-o-如何访问块设备" tabindex="-1"><a class="header-anchor" href="#直接-i-o-如何访问块设备" aria-hidden="true">#</a> 直接 I/O 如何访问块设备？</h2><p>我们先来看第一种情况，直接 I/O 调用到 ext4_direct_IO。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">ext4_direct_IO</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span>iocb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>iter<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file <span class="token operator">=</span> iocb<span class="token operator">-&gt;</span>ki_filp<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_mapping<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> count <span class="token operator">=</span> <span class="token function">iov_iter_count</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">loff_t</span> offset <span class="token operator">=</span> iocb<span class="token operator">-&gt;</span>ki_pos<span class="token punctuation">;</span>
  <span class="token class-name">ssize_t</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ret <span class="token operator">=</span> <span class="token function">ext4_direct_IO_write</span><span class="token punctuation">(</span>iocb<span class="token punctuation">,</span> iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">ext4_direct_IO_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span>iocb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>iter<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file <span class="token operator">=</span> iocb<span class="token operator">-&gt;</span>ki_filp<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode <span class="token operator">=</span> file<span class="token operator">-&gt;</span>f_mapping<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext4_inode_info</span> <span class="token operator">*</span>ei <span class="token operator">=</span> <span class="token function">EXT4_I</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ssize_t</span> ret<span class="token punctuation">;</span>
  <span class="token class-name">loff_t</span> offset <span class="token operator">=</span> iocb<span class="token operator">-&gt;</span>ki_pos<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> count <span class="token operator">=</span> <span class="token function">iov_iter_count</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ret <span class="token operator">=</span> <span class="token function">__blockdev_direct_IO</span><span class="token punctuation">(</span>iocb<span class="token punctuation">,</span> inode<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_sb<span class="token operator">-&gt;</span>s_bdev<span class="token punctuation">,</span> iter<span class="token punctuation">,</span>
           get_block_func<span class="token punctuation">,</span> ext4_end_io_dio<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
           dio_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>


……
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ext4_direct_IO_write 调用 __blockdev_direct_IO，有个参数你需要特别注意一下，那就是 inode-&gt;i_sb-&gt;s_bdev。通过当前文件的 inode，我们可以得到 super_block。这个 super_block 中的 s_bdev，就是咱们上一节填进去的那个 block_device。</p><p>__blockdev_direct_IO 会调用 do_blockdev_direct_IO，在这里面我们要准备一个 struct dio 结构和 struct dio_submit 结构，用来描述将要发生的写入请求。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token class-name">ssize_t</span>
<span class="token function">do_blockdev_direct_IO</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span>iocb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span>
          <span class="token keyword">struct</span> <span class="token class-name">block_device</span> <span class="token operator">*</span>bdev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>iter<span class="token punctuation">,</span>
          <span class="token class-name">get_block_t</span> get_block<span class="token punctuation">,</span> <span class="token class-name">dio_iodone_t</span> end_io<span class="token punctuation">,</span>
          <span class="token class-name">dio_submit_t</span> submit_io<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> i_blkbits <span class="token operator">=</span> <span class="token function">ACCESS_ONCE</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_blkbits<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> blkbits <span class="token operator">=</span> i_blkbits<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> blocksize_mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> blkbits<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token class-name">ssize_t</span> retval <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> count <span class="token operator">=</span> <span class="token function">iov_iter_count</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">loff_t</span> offset <span class="token operator">=</span> iocb<span class="token operator">-&gt;</span>ki_pos<span class="token punctuation">;</span>
  <span class="token class-name">loff_t</span> end <span class="token operator">=</span> offset <span class="token operator">+</span> count<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">dio</span> <span class="token operator">*</span>dio<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">dio_submit</span> sdio <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> map_bh <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  dio <span class="token operator">=</span> <span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span>dio_cache<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dio<span class="token operator">-&gt;</span>flags <span class="token operator">=</span> flags<span class="token punctuation">;</span>
  dio<span class="token operator">-&gt;</span>i_size <span class="token operator">=</span> <span class="token function">i_size_read</span><span class="token punctuation">(</span>inode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dio<span class="token operator">-&gt;</span>inode <span class="token operator">=</span> inode<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iov_iter_rw</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span> <span class="token operator">==</span> WRITE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dio<span class="token operator">-&gt;</span>op <span class="token operator">=</span> REQ_OP_WRITE<span class="token punctuation">;</span>
    dio<span class="token operator">-&gt;</span>op_flags <span class="token operator">=</span> REQ_SYNC <span class="token operator">|</span> REQ_IDLE<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>iocb<span class="token operator">-&gt;</span>ki_flags <span class="token operator">&amp;</span> IOCB_NOWAIT<span class="token punctuation">)</span>
      dio<span class="token operator">-&gt;</span>op_flags <span class="token operator">|=</span> REQ_NOWAIT<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    dio<span class="token operator">-&gt;</span>op <span class="token operator">=</span> REQ_OP_READ<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  sdio<span class="token punctuation">.</span>blkbits <span class="token operator">=</span> blkbits<span class="token punctuation">;</span>
  sdio<span class="token punctuation">.</span>blkfactor <span class="token operator">=</span> i_blkbits <span class="token operator">-</span> blkbits<span class="token punctuation">;</span>
  sdio<span class="token punctuation">.</span>block_in_file <span class="token operator">=</span> offset <span class="token operator">&gt;&gt;</span> blkbits<span class="token punctuation">;</span>


  sdio<span class="token punctuation">.</span>get_block <span class="token operator">=</span> get_block<span class="token punctuation">;</span>
  dio<span class="token operator">-&gt;</span>end_io <span class="token operator">=</span> end_io<span class="token punctuation">;</span>
  sdio<span class="token punctuation">.</span>submit_io <span class="token operator">=</span> submit_io<span class="token punctuation">;</span>
  sdio<span class="token punctuation">.</span>final_block_in_bio <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  sdio<span class="token punctuation">.</span>next_block_for_io <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>


  dio<span class="token operator">-&gt;</span>iocb <span class="token operator">=</span> iocb<span class="token punctuation">;</span>
  dio<span class="token operator">-&gt;</span>refcount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>


  sdio<span class="token punctuation">.</span>iter <span class="token operator">=</span> iter<span class="token punctuation">;</span>
  sdio<span class="token punctuation">.</span>final_block_in_request <span class="token operator">=</span>
    <span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token function">iov_iter_count</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> blkbits<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  sdio<span class="token punctuation">.</span>pages_in_io <span class="token operator">+=</span> <span class="token function">iov_iter_npages</span><span class="token punctuation">(</span>iter<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>


  retval <span class="token operator">=</span> <span class="token function">do_direct_IO</span><span class="token punctuation">(</span>dio<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sdio<span class="token punctuation">,</span> <span class="token operator">&amp;</span>map_bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>do_direct_IO 里面有两层循环，第一层循环是依次处理这次要写入的所有块。对于每一块，取出对应的内存中的页 page，在这一块中，有写入的起始地址 from 和终止地址 to，所以，第二层循环就是依次处理 from 到 to 的数据，调用 submit_page_section，提交到块设备层进行写入。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">do_direct_IO</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">dio</span> <span class="token operator">*</span>dio<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">dio_submit</span> <span class="token operator">*</span>sdio<span class="token punctuation">,</span>
      <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span>map_bh<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> blkbits <span class="token operator">=</span> sdio<span class="token operator">-&gt;</span>blkbits<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> i_blkbits <span class="token operator">=</span> blkbits <span class="token operator">+</span> sdio<span class="token operator">-&gt;</span>blkfactor<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


  <span class="token keyword">while</span> <span class="token punctuation">(</span>sdio<span class="token operator">-&gt;</span>block_in_file <span class="token operator">&lt;</span> sdio<span class="token operator">-&gt;</span>final_block_in_request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> from<span class="token punctuation">,</span> to<span class="token punctuation">;</span>


    page <span class="token operator">=</span> <span class="token function">dio_get_page</span><span class="token punctuation">(</span>dio<span class="token punctuation">,</span> sdio<span class="token punctuation">)</span><span class="token punctuation">;</span>
        from <span class="token operator">=</span> sdio<span class="token operator">-&gt;</span>head <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> sdio<span class="token operator">-&gt;</span>from<span class="token punctuation">;</span>
    to <span class="token operator">=</span> <span class="token punctuation">(</span>sdio<span class="token operator">-&gt;</span>head <span class="token operator">==</span> sdio<span class="token operator">-&gt;</span>tail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> sdio<span class="token operator">-&gt;</span>to <span class="token operator">:</span> PAGE_SIZE<span class="token punctuation">;</span>
    sdio<span class="token operator">-&gt;</span>head<span class="token operator">++</span><span class="token punctuation">;</span>


    <span class="token keyword">while</span> <span class="token punctuation">(</span>from <span class="token operator">&lt;</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">unsigned</span> this_chunk_bytes<span class="token punctuation">;</span>  <span class="token comment">/* # of bytes mapped */</span>
      <span class="token keyword">unsigned</span> this_chunk_blocks<span class="token punctuation">;</span>  <span class="token comment">/* # of blocks */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            ret <span class="token operator">=</span> <span class="token function">submit_page_section</span><span class="token punctuation">(</span>dio<span class="token punctuation">,</span> sdio<span class="token punctuation">,</span> page<span class="token punctuation">,</span>
              from<span class="token punctuation">,</span>
              this_chunk_bytes<span class="token punctuation">,</span>
              sdio<span class="token operator">-&gt;</span>next_block_for_io<span class="token punctuation">,</span>
              map_bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      sdio<span class="token operator">-&gt;</span>next_block_for_io <span class="token operator">+=</span> this_chunk_blocks<span class="token punctuation">;</span>
      sdio<span class="token operator">-&gt;</span>block_in_file <span class="token operator">+=</span> this_chunk_blocks<span class="token punctuation">;</span>
      from <span class="token operator">+=</span> this_chunk_bytes<span class="token punctuation">;</span>
      dio<span class="token operator">-&gt;</span>result <span class="token operator">+=</span> this_chunk_bytes<span class="token punctuation">;</span>
      sdio<span class="token operator">-&gt;</span>blocks_available <span class="token operator">-=</span> this_chunk_blocks<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sdio<span class="token operator">-&gt;</span>block_in_file <span class="token operator">==</span> sdio<span class="token operator">-&gt;</span>final_block_in_request<span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>submit_page_section 会调用 dio_bio_submit，进而调用 submit_bio 向块设备层提交数据。其中，参数 struct bio 是将数据传给块设备的通用传输对象。定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * submit_bio - submit a bio to the block device layer for I/O
 * @bio: The &amp;struct bio which describes the I/O
 */</span>
<span class="token class-name">blk_qc_t</span> <span class="token function">submit_bio</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token function">generic_make_request</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="缓存-i-o-如何访问块设备" tabindex="-1"><a class="header-anchor" href="#缓存-i-o-如何访问块设备" aria-hidden="true">#</a> 缓存 I/O 如何访问块设备？</h2><p>我们再来看第二种情况，缓存 I/O 调用到 ext4_writepages。这个函数比较长，我们这里只截取最重要的部分来讲解。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ext4_writepages</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">address_space</span> <span class="token operator">*</span>mapping<span class="token punctuation">,</span>
         <span class="token keyword">struct</span> <span class="token class-name">writeback_control</span> <span class="token operator">*</span>wbc<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">mpage_da_data</span> mpd<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode <span class="token operator">=</span> mapping<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext4_sb_info</span> <span class="token operator">*</span>sbi <span class="token operator">=</span> <span class="token function">EXT4_SB</span><span class="token punctuation">(</span>mapping<span class="token operator">-&gt;</span>host<span class="token operator">-&gt;</span>i_sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  mpd<span class="token punctuation">.</span>do_map <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  mpd<span class="token punctuation">.</span>io_submit<span class="token punctuation">.</span>io_end <span class="token operator">=</span> <span class="token function">ext4_init_io_end</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ret <span class="token operator">=</span> <span class="token function">mpage_prepare_extent_to_map</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mpd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* Submit prepared bio */</span>
  <span class="token function">ext4_io_submit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mpd<span class="token punctuation">.</span>io_submit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里比较重要的一个数据结构是 struct mpage_da_data。这里面有文件的 inode、要写入的页的偏移量，还有一个重要的 struct ext4_io_submit，里面有通用传输对象 bio。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">mpage_da_data</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token class-name">pgoff_t</span> first_page<span class="token punctuation">;</span>  <span class="token comment">/* The first page to write */</span>
  <span class="token class-name">pgoff_t</span> next_page<span class="token punctuation">;</span>  <span class="token comment">/* Current page to examine */</span>
  <span class="token class-name">pgoff_t</span> last_page<span class="token punctuation">;</span>  <span class="token comment">/* Last page to examine */</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext4_map_blocks</span> map<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ext4_io_submit</span> io_submit<span class="token punctuation">;</span>  <span class="token comment">/* IO submission data */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> do_map<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">struct</span> <span class="token class-name">ext4_io_submit</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">bio</span>    <span class="token operator">*</span>io_bio<span class="token punctuation">;</span>
  <span class="token class-name">ext4_io_end_t</span>    <span class="token operator">*</span>io_end<span class="token punctuation">;</span>
  <span class="token class-name">sector_t</span>    io_next_block<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ext4_writepages 中，mpage_prepare_extent_to_map 用于初始化这个 struct mpage_da_data 结构。接下来的调用链为：mpage_prepare_extent_to_map-&gt;mpage_process_page_bufs-&gt;mpage_submit_page-&gt;ext4_bio_write_page-&gt;io_submit_add_bh。</p><p>在 io_submit_add_bh 中，此时的 bio 还是空的，因而我们要调用 io_submit_init_bio，初始化 bio。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">io_submit_init_bio</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext4_io_submit</span> <span class="token operator">*</span>io<span class="token punctuation">,</span>
            <span class="token keyword">struct</span> <span class="token class-name">buffer_head</span> <span class="token operator">*</span>bh<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio<span class="token punctuation">;</span>


  bio <span class="token operator">=</span> <span class="token function">bio_alloc</span><span class="token punctuation">(</span>GFP_NOIO<span class="token punctuation">,</span> BIO_MAX_PAGES<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bio<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
  <span class="token function">wbc_init_bio</span><span class="token punctuation">(</span>io<span class="token operator">-&gt;</span>io_wbc<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
  bio<span class="token operator">-&gt;</span>bi_iter<span class="token punctuation">.</span>bi_sector <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_blocknr <span class="token operator">*</span> <span class="token punctuation">(</span>bh<span class="token operator">-&gt;</span>b_size <span class="token operator">&gt;&gt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bio<span class="token operator">-&gt;</span>bi_bdev <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_bdev<span class="token punctuation">;</span>
  bio<span class="token operator">-&gt;</span>bi_end_io <span class="token operator">=</span> ext4_end_bio<span class="token punctuation">;</span>
  bio<span class="token operator">-&gt;</span>bi_private <span class="token operator">=</span> <span class="token function">ext4_get_io_end</span><span class="token punctuation">(</span>io<span class="token operator">-&gt;</span>io_end<span class="token punctuation">)</span><span class="token punctuation">;</span>
  io<span class="token operator">-&gt;</span>io_bio <span class="token operator">=</span> bio<span class="token punctuation">;</span>
  io<span class="token operator">-&gt;</span>io_next_block <span class="token operator">=</span> bh<span class="token operator">-&gt;</span>b_blocknr<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再回到 ext4_writepages 中。在 bio 初始化完之后，我们要调用 ext4_io_submit，提交 I/O。在这里我们又是调用 submit_bio，向块设备层传输数据。ext4_io_submit 的实现如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ext4_io_submit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ext4_io_submit</span> <span class="token operator">*</span>io<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio <span class="token operator">=</span> io<span class="token operator">-&gt;</span>io_bio<span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span>bio<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> io_op_flags <span class="token operator">=</span> io<span class="token operator">-&gt;</span>io_wbc<span class="token operator">-&gt;</span>sync_mode <span class="token operator">==</span> WB_SYNC_ALL <span class="token operator">?</span>
          REQ_SYNC <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    io<span class="token operator">-&gt;</span>io_bio<span class="token operator">-&gt;</span>bi_write_hint <span class="token operator">=</span> io<span class="token operator">-&gt;</span>io_end<span class="token operator">-&gt;</span>inode<span class="token operator">-&gt;</span>i_write_hint<span class="token punctuation">;</span>
    <span class="token function">bio_set_op_attrs</span><span class="token punctuation">(</span>io<span class="token operator">-&gt;</span>io_bio<span class="token punctuation">,</span> REQ_OP_WRITE<span class="token punctuation">,</span> io_op_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">submit_bio</span><span class="token punctuation">(</span>io<span class="token operator">-&gt;</span>io_bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  io<span class="token operator">-&gt;</span>io_bio <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何向块设备层提交请求" tabindex="-1"><a class="header-anchor" href="#如何向块设备层提交请求" aria-hidden="true">#</a> 如何向块设备层提交请求？</h2><p>既然不管是直接 I/O，还是缓存 I/O，最后都到了 submit_bio 里面，那我们就来重点分析一下它。</p><p>submit_bio 会调用 generic_make_request。代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">blk_qc_t</span> <span class="token function">generic_make_request</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">/*
   * bio_list_on_stack[0] contains bios submitted by the current
   * make_request_fn.
   * bio_list_on_stack[1] contains bios that were submitted before
   * the current make_request_fn, but that haven&#39;t been processed
   * yet.
   */</span>
  <span class="token keyword">struct</span> <span class="token class-name">bio_list</span> bio_list_on_stack<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token class-name">blk_qc_t</span> ret <span class="token operator">=</span> BLK_QC_T_NONE<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-&gt;</span>bio_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">bio_list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current<span class="token operator">-&gt;</span>bio_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token function">bio_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bio_list_on_stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  current<span class="token operator">-&gt;</span>bio_list <span class="token operator">=</span> bio_list_on_stack<span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token function">bdev_get_queue</span><span class="token punctuation">(</span>bio<span class="token operator">-&gt;</span>bi_bdev<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span><span class="token function">blk_queue_enter</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> bio<span class="token operator">-&gt;</span>bi_opf <span class="token operator">&amp;</span> REQ_NOWAIT<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">struct</span> <span class="token class-name">bio_list</span> lower<span class="token punctuation">,</span> same<span class="token punctuation">;</span>


      <span class="token comment">/* Create a fresh bio_list for all subordinate requests */</span>
      bio_list_on_stack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> bio_list_on_stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">bio_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bio_list_on_stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ret <span class="token operator">=</span> q<span class="token operator">-&gt;</span><span class="token function">make_request_fn</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>


      <span class="token function">blk_queue_exit</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>


      <span class="token comment">/* sort new bios into those for a lower level
       * and those for the same level
       */</span>
      <span class="token function">bio_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lower<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">bio_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>same<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bio <span class="token operator">=</span> <span class="token function">bio_list_pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bio_list_on_stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token function">bdev_get_queue</span><span class="token punctuation">(</span>bio<span class="token operator">-&gt;</span>bi_bdev<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token function">bio_list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>same<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
          <span class="token function">bio_list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lower<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">/* now assemble so we handle the lowest level first */</span>
      <span class="token function">bio_list_merge</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bio_list_on_stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>lower<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">bio_list_merge</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bio_list_on_stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>same<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">bio_list_merge</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bio_list_on_stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bio_list_on_stack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    bio <span class="token operator">=</span> <span class="token function">bio_list_pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bio_list_on_stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
  current<span class="token operator">-&gt;</span>bio_list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">/* deactivate */</span>
out<span class="token operator">:</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的逻辑有点复杂，我们先来看大的逻辑。在 do-while 中，我们先是获取一个请求队列 request_queue，然后调用这个队列的 make_request_fn 函数。</p><h2 id="块设备队列结构" tabindex="-1"><a class="header-anchor" href="#块设备队列结构" aria-hidden="true">#</a> 块设备队列结构</h2><p>如果再来看 struct block_device 结构和 struct gendisk 结构，我们会发现，每个块设备都有一个请求队列 struct request_queue，用于处理上层发来的请求。</p><p>在每个块设备的驱动程序初始化的时候，会生成一个 request_queue。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token punctuation">{</span>
  <span class="token comment">/*
   * Together with queue_head for cacheline sharing
   */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span>  queue_head<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">request</span>    <span class="token operator">*</span>last_merge<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">elevator_queue</span>  <span class="token operator">*</span>elevator<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  request_fn_proc    <span class="token operator">*</span>request_fn<span class="token punctuation">;</span>
  make_request_fn    <span class="token operator">*</span>make_request_fn<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在请求队列 request_queue 上，首先是有一个链表 list_head，保存请求 request。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> queuelist<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>biotail<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个 request 包括一个链表的 struct bio，有指针指向一头一尾。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">bio</span>    <span class="token operator">*</span>bi_next<span class="token punctuation">;</span>  <span class="token comment">/* request queue link */</span>
  <span class="token keyword">struct</span> <span class="token class-name">block_device</span>  <span class="token operator">*</span>bi_bdev<span class="token punctuation">;</span>
  <span class="token class-name">blk_status_t</span>    bi_status<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">struct</span> <span class="token class-name">bvec_iter</span>  bi_iter<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span>    bi_vcnt<span class="token punctuation">;</span>  <span class="token comment">/* how many bio_vec&#39;s */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">short</span>    bi_max_vecs<span class="token punctuation">;</span>  <span class="token comment">/* max bvl_vecs we can hold */</span>
  <span class="token class-name">atomic_t</span>    __bi_cnt<span class="token punctuation">;</span>  <span class="token comment">/* pin count */</span>
  <span class="token keyword">struct</span> <span class="token class-name">bio_vec</span>    <span class="token operator">*</span>bi_io_vec<span class="token punctuation">;</span>  <span class="token comment">/* the actual vec list */</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">struct</span> <span class="token class-name">bio_vec</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">page</span>  <span class="token operator">*</span>bv_page<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  bv_len<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>  bv_offset<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 bio 中，bi_next 是链表中的下一项，struct bio_vec 指向一组页面。</p><img src="`+p+`" alt="img" style="zoom:25%;"><p>在请求队列 request_queue 上，还有两个重要的函数，一个是 make_request_fn 函数，用于生成 request；另一个是 request_fn 函数，用于处理 request。</p><h2 id="块设备的初始化" tabindex="-1"><a class="header-anchor" href="#块设备的初始化" aria-hidden="true">#</a> 块设备的初始化</h2><p>我们还是以 scsi 驱动为例。在初始化设备驱动的时候，我们会调用 scsi_alloc_queue，把 request_fn 设置为 scsi_request_fn。我们还会调用 blk_init_allocated_queue-&gt;blk_queue_make_request，把 make_request_fn 设置为 blk_queue_bio。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * scsi_alloc_sdev - allocate and setup a scsi_Device
 * @starget: which target to allocate a &amp;scsi_device for
 * @lun: which lun
 * @hostdata: usually NULL and set by -&gt;slave_alloc instead
 *
 * Description:
 *     Allocate, initialize for io, and return a pointer to a scsi_Device.
 *     Stores the @shost, @channel, @id, and @lun in the scsi_Device, and
 *     adds scsi_Device to the appropriate list.
 *
 * Return value:
 *     scsi_Device pointer, or NULL on failure.
 **/</span>
<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">scsi_device</span> <span class="token operator">*</span><span class="token function">scsi_alloc_sdev</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">scsi_target</span> <span class="token operator">*</span>starget<span class="token punctuation">,</span>
             u64 lun<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>hostdata<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">scsi_device</span> <span class="token operator">*</span>sdev<span class="token punctuation">;</span>
  sdev <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>sdev<span class="token punctuation">)</span> <span class="token operator">+</span> shost<span class="token operator">-&gt;</span>transportt<span class="token operator">-&gt;</span>device_size<span class="token punctuation">,</span>
           GFP_ATOMIC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  sdev<span class="token operator">-&gt;</span>request_queue <span class="token operator">=</span> <span class="token function">scsi_alloc_queue</span><span class="token punctuation">(</span>sdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span><span class="token function">scsi_alloc_queue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">scsi_device</span> <span class="token operator">*</span>sdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">Scsi_Host</span> <span class="token operator">*</span>shost <span class="token operator">=</span> sdev<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>q<span class="token punctuation">;</span>


  q <span class="token operator">=</span> <span class="token function">blk_alloc_queue_node</span><span class="token punctuation">(</span>GFP_KERNEL<span class="token punctuation">,</span> NUMA_NO_NODE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  q<span class="token operator">-&gt;</span>cmd_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">scsi_cmnd</span><span class="token punctuation">)</span> <span class="token operator">+</span> shost<span class="token operator">-&gt;</span>hostt<span class="token operator">-&gt;</span>cmd_size<span class="token punctuation">;</span>
  q<span class="token operator">-&gt;</span>rq_alloc_data <span class="token operator">=</span> shost<span class="token punctuation">;</span>
  q<span class="token operator">-&gt;</span>request_fn <span class="token operator">=</span> scsi_request_fn<span class="token punctuation">;</span>
  q<span class="token operator">-&gt;</span>init_rq_fn <span class="token operator">=</span> scsi_init_rq<span class="token punctuation">;</span>
  q<span class="token operator">-&gt;</span>exit_rq_fn <span class="token operator">=</span> scsi_exit_rq<span class="token punctuation">;</span>
  q<span class="token operator">-&gt;</span>initialize_rq_fn <span class="token operator">=</span> scsi_initialize_rq<span class="token punctuation">;</span>


    <span class="token comment">//调用blk_queue_make_request(q, blk_queue_bio);</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">blk_init_allocated_queue</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">blk_cleanup_queue</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token function">__scsi_init_queue</span><span class="token punctuation">(</span>shost<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> q
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 blk_init_allocated_queue 中，除了初始化 make_request_fn 函数，我们还要做一件很重要的事情，就是初始化 I/O 的电梯算法。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">blk_init_allocated_queue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  q<span class="token operator">-&gt;</span>fq <span class="token operator">=</span> <span class="token function">blk_alloc_flush_queue</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> NUMA_NO_NODE<span class="token punctuation">,</span> q<span class="token operator">-&gt;</span>cmd_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">blk_queue_make_request</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> blk_queue_bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/* init elevator */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">elevator_init</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>电梯算法有很多种类型，定义为 elevator_type。下面我来逐一说一下。</p><ul><li><strong><code>struct elevator_type elevator_noop</code></strong></li></ul><p>Noop 调度算法是最简单的 IO 调度算法，它将 IO 请求放入到一个 FIFO 队列中，然后逐个执行这些 IO 请求。</p><ul><li><strong><code>struct elevator_type iosched_deadline</code></strong></li></ul><p>Deadline 算法要保证每个 IO 请求在一定的时间内一定要被服务到，以此来避免某个请求饥饿。为了完成这个目标，算法中引入了两类队列，一类队列用来对请求按起始扇区序号进行排序，通过红黑树来组织，我们称为 sort_list，按照此队列传输性能会比较高；另一类队列对请求按它们的生成时间进行排序，由链表来组织，称为 fifo_list，并且每一个请求都有一个期限值。</p><ul><li><strong><code>struct elevator_type iosched_cfq</code></strong></li></ul><p>又看到了熟悉的 CFQ 完全公平调度算法。所有的请求会在多个队列中排序。同一个进程的请求，总是在同一队列中处理。时间片会分配到每个队列，通过轮询算法，我们保证了 I/O 带宽，以公平的方式，在不同队列之间进行共享。</p><p>elevator_init 中会根据名称来指定电梯算法，如果没有选择，那就默认使用 iosched_cfq。</p><h2 id="请求提交与调度" tabindex="-1"><a class="header-anchor" href="#请求提交与调度" aria-hidden="true">#</a> 请求提交与调度</h2><p>接下来，我们回到 generic_make_request 函数中。调用队列的 make_request_fn 函数，其实就是调用 blk_queue_bio。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">blk_qc_t</span> <span class="token function">blk_queue_bio</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span>req<span class="token punctuation">,</span> <span class="token operator">*</span>free<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> request_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">elv_merge</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> ELEVATOR_BACK_MERGE<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">bio_attempt_back_merge</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token function">elv_bio_merged</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
    free <span class="token operator">=</span> <span class="token function">attempt_back_merge</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>free<span class="token punctuation">)</span>
      <span class="token function">__blk_put_request</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> free<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      <span class="token function">elv_merged_request</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">,</span> ELEVATOR_BACK_MERGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>
  <span class="token keyword">case</span> ELEVATOR_FRONT_MERGE<span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">bio_attempt_front_merge</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token function">elv_bio_merged</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
    free <span class="token operator">=</span> <span class="token function">attempt_front_merge</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>free<span class="token punctuation">)</span>
      <span class="token function">__blk_put_request</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> free<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      <span class="token function">elv_merged_request</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">,</span> ELEVATOR_FRONT_MERGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


get_rq<span class="token operator">:</span>
  req <span class="token operator">=</span> <span class="token function">get_request</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> bio<span class="token operator">-&gt;</span>bi_opf<span class="token punctuation">,</span> bio<span class="token punctuation">,</span> GFP_NOIO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">blk_init_request_from_bio</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">add_acct_request</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">,</span> where<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">__blk_run_queue</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
out_unlock<span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> BLK_QC_T_NONE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>blk_queue_bio 首先做的一件事情是调用 elv_merge 来判断，当前这个 bio 请求是否能够和目前已有的 request 合并起来，成为同一批 I/O 操作，从而提高读取和写入的性能。</p><p>判断标准和 struct bio 的成员 struct bvec_iter 有关，它里面有两个变量，一个是起始磁盘簇 bi_sector，另一个是大小 bi_size。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">elv_merge</span> <span class="token function">elv_merge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span><span class="token operator">*</span>req<span class="token punctuation">,</span>
    <span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">elevator_queue</span> <span class="token operator">*</span>e <span class="token operator">=</span> q<span class="token operator">-&gt;</span>elevator<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span>__rq<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>last_merge <span class="token operator">&amp;&amp;</span> <span class="token function">elv_bio_merge_ok</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>last_merge<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">enum</span> <span class="token class-name">elv_merge</span> ret <span class="token operator">=</span> <span class="token function">blk_try_merge</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>last_merge<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> ELEVATOR_NO_MERGE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">*</span>req <span class="token operator">=</span> q<span class="token operator">-&gt;</span>last_merge<span class="token punctuation">;</span>
      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  __rq <span class="token operator">=</span> <span class="token function">elv_rqhash_find</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> bio<span class="token operator">-&gt;</span>bi_iter<span class="token punctuation">.</span>bi_sector<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__rq <span class="token operator">&amp;&amp;</span> <span class="token function">elv_bio_merge_ok</span><span class="token punctuation">(</span>__rq<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>req <span class="token operator">=</span> __rq<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ELEVATOR_BACK_MERGE<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">-&gt;</span>uses_mq <span class="token operator">&amp;&amp;</span> e<span class="token operator">-&gt;</span>type<span class="token operator">-&gt;</span>ops<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>request_merge<span class="token punctuation">)</span>
    <span class="token keyword">return</span> e<span class="token operator">-&gt;</span>type<span class="token operator">-&gt;</span>ops<span class="token punctuation">.</span>mq<span class="token punctuation">.</span><span class="token function">request_merge</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token operator">-&gt;</span>uses_mq <span class="token operator">&amp;&amp;</span> e<span class="token operator">-&gt;</span>type<span class="token operator">-&gt;</span>ops<span class="token punctuation">.</span>sq<span class="token punctuation">.</span>elevator_merge_fn<span class="token punctuation">)</span>
    <span class="token keyword">return</span> e<span class="token operator">-&gt;</span>type<span class="token operator">-&gt;</span>ops<span class="token punctuation">.</span>sq<span class="token punctuation">.</span><span class="token function">elevator_merge_fn</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token keyword">return</span> ELEVATOR_NO_MERGE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>elv_merge 尝试了三次合并。</p><p>第一次，它先判断和上一次合并的 request 能不能再次合并，看看能不能赶上马上要走的这部电梯。在 blk_try_merge 主要做了这样的判断：如果 blk_rq_pos(rq) + blk_rq_sectors(rq) == bio-&gt;bi_iter.bi_sector，也就是说这个 request 的起始地址加上它的大小（其实是这个 request 的结束地址），如果和 bio 的起始地址能接得上，那就把 bio 放在 request 的最后，我们称为 ELEVATOR_BACK_MERGE。</p><p>如果 blk_rq_pos(rq) - bio_sectors(bio) == bio-&gt;bi_iter.bi_sector，也就是说，这个 request 的起始地址减去 bio 的大小等于 bio 的起始地址，这说明 bio 放在 request 的最前面能够接得上，那就把 bio 放在 request 的最前面，我们称为 ELEVATOR_FRONT_MERGE。否则，那就不合并，我们称为 ELEVATOR_NO_MERGE。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token class-name">elv_merge</span> <span class="token function">blk_try_merge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span>rq<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">blk_rq_pos</span><span class="token punctuation">(</span>rq<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">blk_rq_sectors</span><span class="token punctuation">(</span>rq<span class="token punctuation">)</span> <span class="token operator">==</span> bio<span class="token operator">-&gt;</span>bi_iter<span class="token punctuation">.</span>bi_sector<span class="token punctuation">)</span>
    <span class="token keyword">return</span> ELEVATOR_BACK_MERGE<span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">blk_rq_pos</span><span class="token punctuation">(</span>rq<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">bio_sectors</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span> <span class="token operator">==</span> bio<span class="token operator">-&gt;</span>bi_iter<span class="token punctuation">.</span>bi_sector<span class="token punctuation">)</span>
    <span class="token keyword">return</span> ELEVATOR_FRONT_MERGE<span class="token punctuation">;</span>
  <span class="token keyword">return</span> ELEVATOR_NO_MERGE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二次，如果和上一个合并过的 request 无法合并，那我们就调用 elv_rqhash_find。然后按照 bio 的起始地址查找 request，看有没有能够合并的。如果有的话，因为是按照起始地址找的，应该接在人家的后面，所以是 ELEVATOR_BACK_MERGE。</p><p>第三次，调用 elevator_merge_fn 试图合并。对于 iosched_cfq，调用的是 cfq_merge。在这里面，cfq_find_rq_fmerge 会调用 elv_rb_find 函数，里面的参数是 bio 的结束地址。我们还是要看，能不能找到可以合并的。如果有的话，因为是按照结束地址找的，应该接在人家前面，所以是 ELEVATOR_FRONT_MERGE。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">elv_merge</span> <span class="token function">cfq_merge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span><span class="token operator">*</span>req<span class="token punctuation">,</span>
         <span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">cfq_data</span> <span class="token operator">*</span>cfqd <span class="token operator">=</span> q<span class="token operator">-&gt;</span>elevator<span class="token operator">-&gt;</span>elevator_data<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span>__rq<span class="token punctuation">;</span>


  __rq <span class="token operator">=</span> <span class="token function">cfq_find_rq_fmerge</span><span class="token punctuation">(</span>cfqd<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__rq <span class="token operator">&amp;&amp;</span> <span class="token function">elv_bio_merge_ok</span><span class="token punctuation">(</span>__rq<span class="token punctuation">,</span> bio<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>req <span class="token operator">=</span> __rq<span class="token punctuation">;</span>
    <span class="token keyword">return</span> ELEVATOR_FRONT_MERGE<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">return</span> ELEVATOR_NO_MERGE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span>
<span class="token function">cfq_find_rq_fmerge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cfq_data</span> <span class="token operator">*</span>cfqd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">bio</span> <span class="token operator">*</span>bio<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>tsk <span class="token operator">=</span> current<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cfq_io_cq</span> <span class="token operator">*</span>cic<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cfq_queue</span> <span class="token operator">*</span>cfqq<span class="token punctuation">;</span>


  cic <span class="token operator">=</span> <span class="token function">cfq_cic_lookup</span><span class="token punctuation">(</span>cfqd<span class="token punctuation">,</span> tsk<span class="token operator">-&gt;</span>io_context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cic<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>


  cfqq <span class="token operator">=</span> <span class="token function">cic_to_cfqq</span><span class="token punctuation">(</span>cic<span class="token punctuation">,</span> <span class="token function">op_is_sync</span><span class="token punctuation">(</span>bio<span class="token operator">-&gt;</span>bi_opf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cfqq<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">elv_rb_find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cfqq<span class="token operator">-&gt;</span>sort_list<span class="token punctuation">,</span> <span class="token function">bio_end_sector</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token keyword">return</span> NUL
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等从 elv_merge 返回 blk_queue_bio 的时候，我们就知道，应该做哪种类型的合并，接着就要进行真的合并。如果没有办法合并，那就调用 get_request，创建一个新的 request，调用 blk_init_request_from_bio，将 bio 放到新的 request 里面，然后调用 add_acct_request，把新的 request 加到 request_queue 队列中。</p><p>至此，我们解析完了 generic_make_request 中最重要的两大逻辑：获取一个请求队列 request_queue 和调用这个队列的 make_request_fn 函数。</p><p>其实，generic_make_request 其他部分也很令人困惑。感觉里面有特别多的 struct bio_list，倒腾过来，倒腾过去的。这是因为，很多块设备是有层次的。</p><p>比如，我们用两块硬盘组成 RAID，两个 RAID 盘组成 LVM，然后我们就可以在 LVM 上创建一个块设备给用户用，我们称接近用户的块设备为<strong>高层次的块设备</strong>，接近底层的块设备为<strong>低层次（lower）的块设备</strong>。这样，generic_make_request 把 I/O 请求发送给高层次的块设备的时候，会调用高层块设备的 make_request_fn，高层块设备又要调用 generic_make_request，将请求发送给低层次的块设备。虽然块设备的层次不会太多，但是对于代码 generic_make_request 来讲，这可是递归的调用，一不小心，就会递归过深，无法正常退出，而且内核栈的大小又非常有限，所以要比较小心。</p><p>这里你是否理解了 struct bio_list bio_list_on_stack[2]的名字为什么叫 stack 呢？其实，将栈的操作变成对于队列的操作，队列不在栈里面，会大很多。每次 generic_make_request 被当前任务调用的时候，将 current-&gt;bio_list 设置为 bio_list_on_stack，并在 generic_make_request 的一开始就判断 current-&gt;bio_list 是否为空。如果不为空，说明已经在 generic_make_request 的调用里面了，就不必调用 make_request_fn 进行递归了，直接把请求加入到 bio_list 里面就可以了，这就实现了递归的及时退出。</p><p>如果 current-&gt;bio_list 为空，那我们就将 current-&gt;bio_list 设置为 bio_list_on_stack 后，进入 do-while 循环，做咱们分析过的 generic_make_request 的两大逻辑。但是，当前的队列调用 make_request_fn 的时候，在 make_request_fn 的具体实现中，会生成新的 bio。调用更底层的块设备，也会生成新的 bio，都会放在 bio_list_on_stack 的队列中，是一个边处理还边创建的过程。</p><p>bio_list_on_stack[1] = bio_list_on_stack[0]这一句在 make_request_fn 之前，将之前队列里面遗留没有处理的保存下来，接着 bio_list_init 将 bio_list_on_stack[0]设置为空，然后调用 make_request_fn，在 make_request_fn 里面如果有新的 bio 生成，都会加到 bio_list_on_stack[0]这个队列里面来。</p><p>make_request_fn 执行完毕后，可以想象 bio_list_on_stack[0]可能又多了一些 bio 了，接下来的循环中调用 bio_list_pop 将 bio_list_on_stack[0]积攒的 bio 拿出来，分别放在两个队列 lower 和 same 中，顾名思义，lower 就是更低层次的块设备的 bio，same 是同层次的块设备的 bio。</p><p>接下来我们能将 lower、same 以及 bio_list_on_stack[1] 都取出来，放在 bio_list_on_stack[0]统一进行处理。当然应该 lower 优先了，因为只有底层的块设备的 I/O 做完了，上层的块设备的 I/O 才能做完。</p><p>到这里，generic_make_request 的逻辑才算解析完毕。对于写入的数据来讲，其实仅仅是将 bio 请求放在请求队列上，设备驱动程序还没往设备里面写呢。</p><h2 id="请求的处理" tabindex="-1"><a class="header-anchor" href="#请求的处理" aria-hidden="true">#</a> 请求的处理</h2><p>设备驱动程序往设备里面写，调用的是请求队列 request_queue 的另外一个函数 request_fn。对于 scsi 设备来讲，调用的是 scsi_request_fn。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">scsi_request_fn</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">request_queue</span> <span class="token operator">*</span>q<span class="token punctuation">)</span>
  <span class="token function">__releases</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>queue_lock<span class="token punctuation">)</span>
  <span class="token function">__acquires</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>queue_lock<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">scsi_device</span> <span class="token operator">*</span>sdev <span class="token operator">=</span> q<span class="token operator">-&gt;</span>queuedata<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">Scsi_Host</span> <span class="token operator">*</span>shost<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">scsi_cmnd</span> <span class="token operator">*</span>cmd<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">request</span> <span class="token operator">*</span>req<span class="token punctuation">;</span>


  <span class="token comment">/*
   * To start with, we keep looping until the queue is empty, or until
   * the host is no longer able to accept any more requests.
   */</span>
  shost <span class="token operator">=</span> sdev<span class="token operator">-&gt;</span>host<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> rtn<span class="token punctuation">;</span>
    <span class="token comment">/*
     * get next queueable request.  We do this early to make sure
     * that the request is fully prepared even if we cannot
     * accept it.
     */</span>
    req <span class="token operator">=</span> <span class="token function">blk_peek_request</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/*
     * Remove the request from the request list.
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">blk_queue_tagged</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">blk_queue_start_tag</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">blk_start_request</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    cmd <span class="token operator">=</span> req<span class="token operator">-&gt;</span>special<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/*
     * Dispatch the command to the low-level driver.
     */</span>
    cmd<span class="token operator">-&gt;</span>scsi_done <span class="token operator">=</span> scsi_done<span class="token punctuation">;</span>
    rtn <span class="token operator">=</span> <span class="token function">scsi_dispatch_cmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里面是一个 for 无限循环，从 request_queue 中读取 request，然后封装更加底层的指令，给设备控制器下指令，实施真正的 I/O 操作。</p><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>这一节我们讲了如何将块设备 I/O 请求送达到外部设备。</p><p>对于块设备的 I/O 操作分为两种，一种是直接 I/O，另一种是缓存 I/O。无论是哪种 I/O，最终都会调用 submit_bio 提交块设备 I/O 请求。</p><p>对于每一种块设备，都有一个 gendisk 表示这个设备，它有一个请求队列，这个队列是一系列的 request 对象。每个 request 对象里面包含多个 BIO 对象，指向 page cache。所谓的写入块设备，I/O 就是将 page cache 里面的数据写入硬盘。</p><p>对于请求队列来讲，还有两个函数，一个函数叫 make_request_fn 函数，用于将请求放入队列。submit_bio 会调用 generic_make_request，然后调用这个函数。</p><p>另一个函数往往在设备驱动程序里实现，我们叫 request_fn 函数，它用于从队列里面取出请求来，写入外部设备。</p><img src="`+e+'" alt="img" style="zoom:25%;"><p>至此，整个写入文件的过程才算完全结束。这真是个复杂的过程，涉及系统调用、内存管理、文件系统和输入输出。这足以说明，操作系统真的是一个非常复杂的体系，环环相扣，需要分层次层层展开来学习。</p><p>到这里，专栏已经过半了，你应该能发现，很多我之前说“后面会细讲”的东西，现在正在一点一点解释清楚，而文中越来越多出现“前面我们讲过”的字眼，你是否当时学习前面知识的时候，没有在意，导致学习后面的知识产生困惑了呢？没关系，及时倒回去复习，再回过头去看，当初学过的很多知识会变得清晰很多。</p><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>你知道如何查看磁盘调度算法、修改磁盘调度算法以及 I/O 队列的长度吗？</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>文件系统中的page_cache对应逻辑上的块的概念，将page_cache打包成bio递交给通用块设备层，通用块设备层将多个bio打包成一个请求request, 尽量把bio对应的sector临近的数据合并，提交给块设备调度层，块设备调度层就是把各个request当成段提交给设备驱动程序，因为设备驱动程序只识别段，也就是说通用块设备层捣腾的其实就是把bio对应的页框和在磁盘中对应的sector进行合并的过程，调度层只负责把合并的request放进队列，用调度算法下发给驱动程序处理，其实所有复杂的合并操作以及内存和磁盘扇区的对应关系都是通过块设备层做了，老师，可以这么理解吧<br> 作者回复: 是的</p><p>/sys/block/xvda/queue/scheduler 磁盘的调度算法，临时修改：echo noop &gt; /sys/block/xvda/queue/scheduler，永久修改就需要修改内核参数，然后重启。<br> iostat -d -x 中的avgqu-sz是平均I/O队列长度。<br> 作者回复: 赞</p><p>那个队列，队头和队尾的合并都是为了所谓的顺序写，减少机械硬盘寻址消耗吧，能赶上就上同一辆车，赶不上自己叫一辆车等满了再走，但是也是有超时等待时间的，可以这么理解吧<br> 作者回复: 是的</p><p>查看磁盘调度算法<br> cat /sys/block/sda/queue/scheduler<br> 作者回复: 赞</p><p>往设备里面写的时候调用的是request_fn，这个函数是谁来调用的呢？触发这个调用的时机是什么呢？还是说请求一旦进入队列就会立即写入？<br> 作者回复: 会调用__blk_run_queue，里面调用request_fn</p><p>补充知识点：块设备多队列架构。内核在5.0之后已经完全从单队列架构迁移到了多队列架构，按照老师的思路去了解多队列架构还是挺有意思的。</p><p>老师，是否可以认为直接 IO执行完成后，数据就是下盘的，还是不一定，还有驱动层以及磁盘缓存等因素。<br> 作者回复: 还是需要设备驱动层的</p><p>老师，希望在答疑篇能讲一讲request_fn取出请求之后的具体执行过程，具体的执行是不是和block_device有关，磁盘的最底层的操作是不是都在block_device中？<br> 作者回复: 取出来之后，基本就是面向设备的操作了。</p><p>直接读写裸设备不会走文件系统，那还会走通用块层吗？<br> 作者回复: 不会的</p><p>bio_list_merge(&amp;bio_list_on_stack[0], &amp;lower);<br> bio_list_merge(&amp;bio_list_on_stack[0], &amp;same);<br> bio_list_merge(&amp;bio_list_on_stack[0], &amp;bio_list_on_stack[1]);<br> 请问这些加到bio_list_on_stack[0]上的bio是在什么时候被处理的？<br> 作者回复: 后面会加回去的</p>',106),i=[c];function l(u,r){return s(),a("div",null,i)}const v=n(o,[["render",l],["__file","K35-块设备（下）.html.vue"]]);export{v as default};
