import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,a,b as e,d as r,e as n}from"./app-063765ff.js";const d="/assets/01ca0facac8101fb802d33972627c898-3ff90aee.gif",i="/assets/8070520e113ca0cececc799bf27a6a54-41696644.jpg",l={},u=n('<h1 id="_23-实战项目-上-一个简单的高性能-http-server" tabindex="-1"><a class="header-anchor" href="#_23-实战项目-上-一个简单的高性能-http-server" aria-hidden="true">#</a> 23｜实战项目（上）：一个简单的高性能 HTTP Server</h1><p>你好，我是于航。</p><p>在“C 核心语法实现篇”中，通过观察 <code>C 代码被编译后的产物</code>，我们了解了 C 基本语法<code>在机器指令层面</code>的多种具体实现细节。进入“C 工程实战篇”后，通过探索 <code>C 标准库</code>，我们发现了 C 语言为我们提供的更多优秀能力，并同时深入分析了它们的<code>内部实现原理</code>。在此基础之上，<code>通过探讨 C 项目编码规范、代码优化技巧、自动化测试与结构化编译等话题</code>，我们对 C 语言在实际工程中的应用方式又有了更深刻的理解。</p><p>但“光说不练假把式”，在本模块最后，就让我们通过实现一个完整的 C 语言项目，来整体回顾之前的学习内容，并尝试在实战过程中体会 C 这门语言的独特魅力。</p><h2 id="这是一个怎样的实战项目" tabindex="-1"><a class="header-anchor" href="#这是一个怎样的实战项目" aria-hidden="true">#</a> <strong>这是一个怎样的实战项目？</strong></h2><p>俗话说得好，“有趣是第一生产力”。但似乎是从大学时代第一次接触 C 语言开始，我们就对使用这门语言开发的项目有了刻板印象，感觉它们不是枯燥的用户后台管理系统，就是各类晦涩的、与操作系统或硬件深入“绑定”的底层应用。但现实情况却并非如此。正如我在开篇词中介绍的那样，C 语言可以被广泛使用在应用软件、系统软件、编程语言、嵌入式开发等各类场景中。而今天我们要做的项目，便是应用软件类目下服务器应用中的一种，“HTTP Server”。</p><p>Server 翻译过来即“服务器”，它在整个互联网世界中，主要用于接收由客户端发来的请求，并在处理之后返回相应结果。而 HTTP 服务器则将可处理的请求类型限定为了 “HTTP 请求”。这类服务器的稳定运行，支撑了我们日常生活中需要与互联网打交道的大多数事务。比如，每一次打开网页，都伴随着浏览器发出 HTTP 请求，服务器返回 HTTP 响应的过程。而这些返回的内容在经过浏览器渲染后被呈现在了你的面前。</p><p>当然，考虑到篇幅和实现难度，在本次实战中，我们不会实现一个支持完整 HTTP 协议的服务器应用。我将会带你实现一个名为 “<code>FibServ</code>” 的程序。<strong>在这一讲接下来的内容中，我将从理论的角度，来为你介绍应该如何使用 C 语言在 Linux 环境下实现它的主要功能。而在下一讲，我们将带着这些理论成果进入到实际的编码环节。</strong></p><p>FibServ 在运行时可以接收形式为 <code>“/?num={pos}”</code> 的 GET 请求。其中，参数 num 对应的值 pos 为一个具体的整数。随后，程序会将该值作为一个索引信息，并返回<code>斐波那契（Fibonacci）数列</code>中对应该位置上的值。</p><p>你可以参考下面这张动图，来观察程序的实际运行状态。</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>图片中包含有左右两个命令行窗口。在右侧窗口中，我们首先运行了 FibServ。它会在当前计算机的 8080 端口上监听即将收到的 HTTP 请求。紧接着，在左侧窗口里，我们使用 <code>curl 命令</code>，向当前计算机（127.0.0.1）的 8080 端口发送了一个带有 “num=10” 参数的 GET 请求。经过一段时间，当 FibServ 处理完该请求后，包含有结果值 “55” 的响应被传送回来。</p><p>可以看到，FibServ 的功能十分简单。接下来，我们就从方案设计的角度入手，来看应该如何实现它的主要功能。</p><h2 id="如何使用-posix-接口实现-tcp-server" tabindex="-1"><a class="header-anchor" href="#如何使用-posix-接口实现-tcp-server" aria-hidden="true">#</a> <strong>如何使用 POSIX 接口实现 TCP Server？</strong></h2>',14),h={href:"https://www.rfc-editor.org/rfc/rfc7230.txt",target:"_blank",rel:"noopener noreferrer"},k=n(`<blockquote><p>Although HTTP is independent of the transport protocol, the “http” scheme is specific to TCP-based services because the name delegation process depends on TCP for establishing authority.</p></blockquote><p>在 Linux 系统中，借助套接字（Socket）接口，我们便能够建立这样的一个连接。这套接口属于 <code>POSIX.1 标准</code>的一部分，因此，它也同时被 Unix 与各种类 Unix 操作系统采用。套接字接口的全称一般为“<code>套接字网络进程间通信接口</code>”。从名称上就可以看出，通过这个接口，多个进程之间便可进行在同一网络下，甚至是跨不同网络的通信过程。对应到上面的动图，FibServ 与 curl 之间的交互过程便是如此。</p><p><strong>而通过配合使用名为 socket、bind、listen、accept 以及 close 的五个接口，我们便能够完成 FibServ 最核心的网络请求接收功能。</strong></p><h3 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> socket</h3><p>其中，socket 接口用于创建套接字。套接字是一种用于描述通信端点的抽象实体，你可以这样简单理解：无论是客户端还是服务器，只要是能够参与到网络通信，并且可以进行数据传递的实体，它们都可以被抽象为一种特定类型的 socket 对象。</p><p>相应地，socket 接口暴露出了三个参数，用于指定这些不同对象在多个重要特征（通信域、套接字类型，及所使用的协议）上的不同。该接口的函数原型如下所示，接口在调用后会返回一个整型的文件描述符，以用于在后续代码中指代该 socket 资源。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">socket</span><span class="token punctuation">(</span>
  <span class="token keyword">int</span> domain<span class="token punctuation">,</span> 
  <span class="token keyword">int</span> type<span class="token punctuation">,</span> 
  <span class="token keyword">int</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bind" tabindex="-1"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind</h3><p>接下来，通过名为 bind 的接口，我们可以让套接字与一个具体的地址进行关联。通常来说，bind 被更多地用于为服务器类型端点对应的 socket 对象分配固定地址。这样，客户端便可通过这个地址来连接该服务器程序。</p><p>但需要注意的是，bind 接口使用的地址必须是在程序进程运行所在的计算机上有效的。在 FibServ 的实现中，我们将直接使用本机地址 “127.0.0.1”。bind 接口在调用时共接收两部分信息，一部分为<code>某个具体 socket 对象</code>对应的<mark>文件描述符</mark>；另一部分为与<mark>所关联地址</mark>相关的数据结构。</p><p>它的函数原型如下所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bind</span><span class="token punctuation">(</span>
  <span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> 
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> 
  <span class="token class-name">socklen_t</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="listen" tabindex="-1"><a class="header-anchor" href="#listen" aria-hidden="true">#</a> listen</h3><p>此时，通过名为 listen 的接口，我们可以将一个 socket 对象变为“被动 socket”，也就是说，该 socket 会在某个地址上持续被动地等待从外部发来的连接请求，而不会自己主动发起连接。当该接口调用完毕后，所有 socket 接收到的连接请求都会被暂时存放到一个队列中，以等待下一步处理。</p><p>如下面的函数原型所示，listen 接口共接收两个参数，第一个参数为<code>某个具体 socket 对象</code>对应的<mark>文件描述符</mark>；第二个参数用于控制==“暂存队列”的大小==。当该队列发生溢出时，后续的连接请求将会被直接拒绝（ECONNREFUSED）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="accept" tabindex="-1"><a class="header-anchor" href="#accept" aria-hidden="true">#</a> accept</h3><p>最后，通过 accept 接口，我们可以从被动 socket 对应的暂存队列中依次取出已经到来的连接请求。这里，该接口会为每一个已接受的请求建立一个新的、表示<code>已连接的 socket 对象</code>。而在接下来的程序中，通过使用 read 与 write 等 IO 接口，我们便可直接使用该 socket，来读取出对应请求携带的数据，并同时将适当的结果返回给客户端。而若在调用 accept 接口时，暂存队列中没有待处理的连接请求，则接口调用者将会进入阻塞状态，直到下一个连接请求的到来。</p><p>通过下面的函数原型，你可以看到该接口接收的参数与 bind 接口十分类似。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span>
  <span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> 
  <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span>restrict addr<span class="token punctuation">,</span> 
  <span class="token class-name">socklen_t</span> <span class="token operator">*</span>restrict addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="close" tabindex="-1"><a class="header-anchor" href="#close" aria-hidden="true">#</a> close</h3><p>与 IO 操作类似的是，当这个新创建的、对应于已接受连接的 socket 对象被使用完毕后，我们也需要通过 close 接口来关闭它所对应的<mark>文件描述符</mark>。在这个过程中，<code>与该 socket 相关的系统资源会被清理，并且，对应的 TCP 连接也会被关闭</code>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>至此，通过上面的几个简单步骤，我们便可成功实现一个基本的 TCP Server。这里你可以暂缓脚步，通过下面这张图片，来回顾一下上述实现流程。</p><img src="`+i+`" alt="img" style="zoom:25%;"><p>TCP 协议主要规定了应该如何在通信双方之间，提供可靠和有序的数据流传输能力。因此，它并未对基于该连接传送的具体数据格式做任何要求和假设。而对这些传输字节流的解释，则由 TCP 连接双方根据应用层的具体协议来进行。在此基础上，我们便能够进一步来实现 HTTP 协议。</p><h2 id="tcp-之上-http-协议有何不同" tabindex="-1"><a class="header-anchor" href="#tcp-之上-http-协议有何不同" aria-hidden="true">#</a> <strong>TCP 之上：HTTP 协议有何不同？</strong></h2><p>与 TCP 协议的复杂性比起来，HTTP 协议就相对简单很多。</p><p>在 HTTP 1.1 中，请求与响应的报文均是以纯文本的形式来在客户端与服务器之间传递的。这也就意味着，当 FibServ 在处理一个 HTTP 请求时，实际上就是在处理这个请求对应的，<code>一堆按照特定格式组织的 ASCII 字符</code>。至于这些字符的具体内容，你可以通过 read 接口，从已被接受的连接对应的 socket 对象中读取出来。</p><p>对 FibServ 来说，一个正确的 HTTP 请求报文的格式可能如下所示：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/?num=10</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8080</span></span>
<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">ApacheBench/2.3</span></span>
<span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">*/*</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个报文被分为三部分，即**<code>起始行、首部字段，以及主体</code>**。其中，起始行中包含有与该请求相关的方法（GET）、路径（/?num=10），以及协议与版本（HTTP/1.1）信息。而首部字段中则包含所有的请求头信息，这些信息通常用于控制客户端或服务器应该如何处理该请求。<code>对于某些属于特定方法的请求，报文中通常还可能包含有与请求一同发送过来的必要数据，这部分数据则被整理在了报文“最下方”的主体部分中。</code></p><p>如下所示，相应的 HTTP 响应报文也有着同样的三部分结构，只是起始行中包含的信息发生了变化：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span>
<span class="token header"><span class="token header-name keyword">Content-type</span><span class="token punctuation">:</span> <span class="token header-value">text/plain</span></span>
<span class="token header"><span class="token header-name keyword">Content-length</span><span class="token punctuation">:</span> <span class="token header-value">2</span></span>
<span class="token text-plain">
55
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 “200” 和 “OK” 分别表示了<strong>该<code>响应的状态码</code>与<code>可读状态信息</code></strong>。总的来看，请求报文的起始行描述了这个请求“希望要做的事情”；而响应报文的起始行则描述了“这件事做完后的结果状态”。与之前的请求报文不同，这个响应报文中还包含有主体部分的数据 “55”，而这部分数据便是从服务器返回的请求结果。</p><p>另外还值得一提的是，标准中规定，起始行和首部的每一行都需要以 <code>CRLF</code>，即“<code>回车符</code>”加“<code>换行符</code>”的形式结尾。而在首部字段与主体之间，则需要以 <code>CRLF</code> 结尾的<code>一行空行</code>进行分割。这是我们在代码中构建 HTTP 报文时需要注意的一点。</p><p>HTTP 1.1 除了对报文的具体格式做了详细规定外，它还对 <code>TCP 连接控制、缓存管理、认证机制等</code>其他重要功能的实现要求进行了说明。但考虑到实现成本，在本次实战中，我们仅会对 FibServ 收到的 HTTP 请求报文进行适当解析，并返回相应的响应报文。而在其他部分的实现上，可能并没有遵循 HTTP 协议的相关规定（比如默认情况下应使用长连接）。</p><h2 id="我们会应用哪些优化策略" tabindex="-1"><a class="header-anchor" href="#我们会应用哪些优化策略" aria-hidden="true">#</a> <strong>我们会应用哪些优化策略？</strong></h2><p>为了尽可能提高 FibServ 处理请求时的性能，我们将从几个很容易想到的地方入手，来对程序进行适当的优化。</p><h2 id="简易线程池" tabindex="-1"><a class="header-anchor" href="#简易线程池" aria-hidden="true">#</a> <strong>简易线程池</strong></h2><p>首先来思考下：如何让程序充分利用多核 CPU 的多个处理单元？相信这个问题一定难不倒你。没错，答案就是使用<code>多线程</code>。</p><p>在 FibServ 的实现中，我们将为它构建<code>一个拥有固定 N 个处理线程的简易线程池</code>。其中，N 可以由用户在运行 FibServ 时，通过添加额外的参数 “thread_count” 来指定。每一个线程在运行时，都会通过 accept 接口，独立地从 socket 对应的暂存队列中取出下一个待连接请求，并进行相应处理。通过这种方式，我们可以充分利用多个 CPU 核心，以让它们并行地处理多个请求。</p><h2 id="尾递归调用" tabindex="-1"><a class="header-anchor" href="#尾递归调用" aria-hidden="true">#</a> <strong>尾递归调用</strong></h2><p>另一方面，对于斐波那契数列的计算函数，我将分别提供它的正常递归版本与尾递归版本。通过这种方式，你能够明显地观察到尾递归优化带来的，可观的性能提升。</p><h2 id="避免忙等待" tabindex="-1"><a class="header-anchor" href="#避免忙等待" aria-hidden="true">#</a> <strong>避免忙等待</strong></h2><p>最后一个优化点虽然不会带来直观的性能改变，但对于理解“<code>条件变量</code>”在实际项目中的应用方式，却是十分有帮助的。</p><p>为了确保 FibServ 能够在请求处理线程异常退出时，仍然保证线程池中的线程数量为 N，这里我<code>不会使用忙等待的方式</code>持续判断存活的线程数量。相对地，我会<code>使用条件变量</code>，来让处理线程在退出时，<code>及时通知主线程创建新的处理线程</code>。而主线程也将在处理线程数量满足要求时，再次进入阻塞状态。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h2><p>好了，讲到这里，今天的内容也就基本结束了。最后我来给你总结一下。</p><p>今天我主要为你介绍了与本次实战项目相关的一些理论性知识，以便为下一讲的实际编码打下基础。</p><p>我们要构建的是一个名为 FibServ 的程序，该程序在运行时会扮演 HTTP 服务器的角色，并持续监听来自本地的 HTTP 请求。相应的请求需要为 GET 方法，并携带名为 “num” 的查询参数。FibServ 在收到该类型请求后，会计算斐波那契数列中在对应位置上的项，并将该值返回给客户端。</p><p>在 Unix 与类 Unix 系统中，借助 POSIX.1 标准提供的五个接口，即 socket、bind、listen、accept 与 close，我们可以为程序实现监听并接收 TCP 连接请求的功能。而 HTTP 协议作为一种基于纯文本的应用层协议，我们可以在此基础上，在程序层面完成对请求报文的解析，以及响应报文的构建过程。</p><p>为了进一步提升 FibServ 处理请求时的效率，我们还将为它提供了简易的线程池实现，以通过增加工作线程的方式，来进一步利用多核 CPU 的处理单元。同时，通过适当改写用于求取斐波那契数列的计算函数，编译器可以帮助我们将它的实现方式由递归优化为迭代，进而大幅提升运行性能。最后，借助条件变量，我们可以优化线程池在线程异常退出时的处理方式，让整个处理流程变得更加优雅。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> <strong>思考题</strong></h2><p>针对我们的实战项目 FibServ，你还能想到哪些可以进一步优化的地方呢？欢迎在评论区告诉我你的想法。</p><p>今天的课程到这里就结束了，希望可以帮助到你，也希望你在下方的留言区和我一起讨论。同时，欢迎你把这节课分享给你的朋友或同事，我们一起交流。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><blockquote><p>使用 reactor 模型</p><hr><p>使用epoll？<br> 作者回复: 没错，异步 IO 是一个好主意。</p><hr><p>c语言有尾递归优化吗？<br> 作者回复: C 编译器可以对符合要求的代码进行尾递归优化，可以参考 06 讲的内容。</p><hr><p>使用缓存，把已经计算过的数据缓存起来<br> 作者回复: 很棒，使用 HTTP 缓存是一个好方案。</p></blockquote>`,59);function v(b,m){const s=t("ExternalLinkIcon");return o(),p("div",null,[u,a("p",null,[e("实际上，FibServ 的最核心功能便是对 HTTP 请求的接收与应答。在本次实战中，我们将以 HTTP 1.1 标准作为实现要求。如下所示，根据 "),a("a",h,[e("RFC 7230"),r(s)]),e(" 对该标准的规定，HTTP 作为一种应用层协议，需要基于以传输层 TCP 协议建立的网络连接来实现。")]),k])}const f=c(l,[["render",v],["__file","D23-HTTPServer(上).html.vue"]]);export{f as default};
