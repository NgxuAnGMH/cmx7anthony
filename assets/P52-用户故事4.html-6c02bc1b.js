import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,d as p}from"./app-cdabc73c.js";const o="/assets/90370d43yyb1aa458ef5a0e323f17536-ac1e9be6.png",e="/assets/5607fba7372a2a546fc3550d9830ce8a-ca075f7c.png",t="/assets/de8f78757363850f1920ffcb2922a096-5abb3c95.png",c="/assets/a3364f1907b44a99c198f42e8a11e1fb-94da51bc.png",l="/assets/4c0418816c6f65d09ee4825086482fd8-5ffd353f.png",i="/assets/a58776949362811af4a8d9251fec3b5a-f0b70bc9.png",r="/assets/bfd6156949406c0ayy682753389b4114-020129c1.png",u="/assets/be17d89e3a927ae0e4a4b70252c043f1-f691e33a.png",d="/assets/43dbcfee9357075722330b464125b1bb-6adfff89.png",k={},m=p('<h1 id="用户故事-用好动态调试-助力课程学习" tabindex="-1"><a class="header-anchor" href="#用户故事-用好动态调试-助力课程学习" aria-hidden="true">#</a> 用户故事 | 用好动态调试，助力课程学习</h1><p>你好，我是 leveryd。</p><p>先做个自我介绍，我在网络安全行业从事技术工作，目前在负责安全产品的研发工作，工作六年。</p><p>虽然在研发工作中，我们通常是遇到什么问题就去查，边查边学。虽然这样的学习方式能快速解决问题，但有时候这种方法也不灵，比方说学习语义分析时，就必须要把词法分析、语法分析先学了，一通搜索、查阅、汇总和学习，回头一看，需要花费的时间和精力还是不少的。</p><p>显然，只靠自己在网上搜索，学到的常常是零零散散，效率太低。尤其是和工作的关联程度很高的必修知识，我觉得不太适合边查边学，更需要系统学习。结合自己的工作需要，今年年初的时候，我给自己安排了近期学习计划，定下了相应的学习的优先级。</p><p>其中，补充操作系统的专业知识就是高优先级的一项。近期学习《操作系统实战 45 讲》的过程中，我也跟着课程内容开始动手实践，还在课程群里分享了自己的调试经验。接到 LMOS 老师的邀请，今天我就和你聊聊我是怎样学习这门课程，以及我是如何调试课程代码的。</p><h2 id="我是怎么学习《操作系统实战-45-讲》的" tabindex="-1"><a class="header-anchor" href="#我是怎么学习《操作系统实战-45-讲》的" aria-hidden="true">#</a> 我是怎么学习《操作系统实战 45 讲》的</h2><p>根据我的学习需求，我给自己立下了两个学习目标：</p><ul><li><p>第一，理解第十三课的代码：第十三课之前的内容包括了整个机器初始化过程；</p></li><li><p>第二，理解第二十六课的代码：比第十三课内容多了“内存”和“进程”。</p></li></ul><p>在这个过程中，我会遇到一些问题，我把解决这些问题的实践经验写到<code>公众号</code>（公众号上我记录了这门课的学习实验笔记，以及关于安全业务和技术的一些案例）上，以此加深自己的理解。</p><p>就目前我自己的学习经验来看，“内核实验”比较复杂。这主要是因为内核涉及的知识较多，比如 C 语言、汇编、硬件知识；而且这方面内容比较底层，某些概念我们平时接触得比较少，比如汇编层面的函数调用细节。</p><p>另外，部分算法乍一看确实有点难理解，比如<code>第二十五课中进程的切换是利用“栈上的函数返回地址”</code>，而“返回地址”包括初始化和后面被进程调度器更新这两种场景。我们需要弄清楚这两个场景都是怎么更新的，才能更好理解进程是如何切换运行的。</p><h2 id="cosmos-调试思路" tabindex="-1"><a class="header-anchor" href="#cosmos-调试思路" aria-hidden="true">#</a> Cosmos 调试思路</h2><p>因为刚才说的这些原因，当我们遇到疑问时，往往无法从网络上直接搜到答案。这个时候，就可以通过调试来辅助我们分析问题。</p><p>接下来，我就说一说我是怎么调试课程代码的，后面还会再分享一下我通过动态调试解决疑问的例子。</p><p>虽然我们可以在代码中打印日志，但这种方式效率不高，因为每次都需要编写代码、重新编译运行。我更喜欢用 <code>GDB</code> 和 <code>QEMU</code> 动态调试 Cosmos。</p><p>结合下图中我们可以看到：使用 GDB 在 Cosmos 内核函数下了断点，并且断点生效。如果我想观察 copy_pages_data 的逻辑，就只需要在<strong>单步调试</strong>过程中观察内存的变化，这样就能知道 copy_pages_data 建立的<strong>页表数据</strong>长什么样子。</p><img src="'+o+`" alt="img" style="zoom:50%;"><p>总的来说，想要动态调试，我们首先需要编译<mark>一个带调试符号的 elf 文件</mark>出来，然后更新 hd.img 镜像文件。</p><p>接着我们用 <code>QEMU</code> 启动内核，具体命令如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  ➜  myos qemu<span class="token operator">-</span>system<span class="token operator">-</span>x86_64 <span class="token operator">-</span>drive format<span class="token operator">=</span>raw<span class="token punctuation">,</span>file<span class="token operator">=</span>hd<span class="token punctuation">.</span>img <span class="token operator">-</span>m <span class="token number">512</span>M <span class="token operator">-</span>cpu kvm64<span class="token punctuation">,</span>smep<span class="token punctuation">,</span>smap <span class="token operator">-</span>s    <span class="token comment">// 一定要加-s参数，此参数可以打开调试服务。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后，我们用 <code>GDB</code> 加载调试符号并调试，具体命令如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> symbol<span class="token operator">-</span>file <span class="token punctuation">.</span><span class="token operator">/</span>initldr<span class="token operator">/</span>build<span class="token operator">/</span>initldrkrl<span class="token punctuation">.</span>elf    <span class="token comment">// 加载调试符号，这样才能在显示源码、可以用函数名下断点</span>
  Reading symbols from <span class="token operator">/</span>root<span class="token operator">/</span>cosmos<span class="token operator">/</span>lesson13<span class="token operator">/</span>Cosmos<span class="token operator">/</span>initldr<span class="token operator">/</span>build<span class="token operator">/</span>initldrkrl<span class="token punctuation">.</span>elf<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>done<span class="token punctuation">.</span>
  <span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> target remote <span class="token operator">:</span><span class="token number">1234</span>   <span class="token comment">// 连接qemu-system-x86_64 -s选项打开的1234端口进行调试</span>
  Remote debugging using <span class="token operator">:</span><span class="token number">1234</span>
  <span class="token number">0x000000000000e82e</span> in <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我已经将编译好的带调试符号的 elf 文件，以及对应的 hd.img 镜像文件放在了GitHub上，你可以直接用这些文件和上面的命令来调试。仓库中目前我只放了对应第十三课和第二十六课的调试文件，如果你想要调试其他课的代码，不妨继续往下看。</p><h2 id="制作-带调试符号的-elf-文件-的详细步骤" tabindex="-1"><a class="header-anchor" href="#制作-带调试符号的-elf-文件-的详细步骤" aria-hidden="true">#</a> 制作“带调试符号的 elf 文件&quot;的详细步骤</h2><p>如果你调试过 Linux 内核，应该比较熟悉上面的流程。不过在制作“带调试符号的 elf 文件”时，Cosmos 和 Linux 内核有些不同，下面我就详细说明一下。</p><p>先说说整体思路：通过修改编译选项，即可生成“带调试符号的 elf 文件”。然后再生成 Cosmos.eki 内核文件，最后替换 hd.img 镜像文件中的 Cosmos.eki 文件。这样，我们就可以用“带调试符号的 elf 文件”和 hd.img 来调试代码了。</p><h2 id="修复两个-bug" tabindex="-1"><a class="header-anchor" href="#修复两个-bug" aria-hidden="true">#</a> 修复两个 bug</h2><p>只有先修复后面这两个 bug，才能成功编译，并且运行 Cosmos 内核代码。</p><p>第一个问题是：编译第十三课的代码时遇到一个报错，报错截图如下。</p><img src="`+e+'" alt="img" style="zoom:25%;"><p>解决办法很简单：将 kernel.asm 文件中的“kernel.inc”修改成“/kernel.inc”，你可以对照后面的截图看一下。</p><img src="'+t+'" alt="img" style="zoom:50%;"><p>第二个问题是第二十六课遇到的运行时报错，如下图所示。</p><img src="'+c+'" alt="img" style="zoom:25%;"><p>因为 acpi 是和“电源管理”相关的模块，这里并没有用到，所以我们可以注释掉 initldr/ldrkrl/chkcpmm.c 文件中的 init_acpi 函数调用。</p><p>解决掉这两个问题，就可以成功编译第十三课和第二十六课的代码了。</p><h2 id="修改-编译选项" tabindex="-1"><a class="header-anchor" href="#修改-编译选项" aria-hidden="true">#</a> 修改“编译选项&quot;</h2><p>修复 bug 后，我们虽然能够成功编译运行，但是因为文件没有调试符号，所以我们在 GDB 调试时无法对应到 c 源码，也无法用函数名下断点。因此，我们需要通过<strong>修改编译选项</strong>来生成带调试符号的 elf 文件。</p><p>为了编译出带调试符号的执行文件，需要对编译脚本做两处修改。</p><ol><li><p>第一处修改，GCC 的-O2参数要修改成O0 -g参数：-O0是告诉 GCC 编译器，在编译时不要对代码做优化，这么做的原因是避免在 GDB 调试时源码和实际程序对应不上的情况；-g参数是为了告诉编译器带上<strong>调试符号</strong>。</p></li><li><p>第二处修改，去掉 ld 的-s参数：-s是告诉 ld 程序链接时去掉所有符号信息，其中包括了<strong>调试符号</strong>。</p></li></ol><p>需要替换和修改的文件位置如下图：</p><figure><img src="'+l+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>使用 sed 命令，即可批量将-O2 参数修改成-O0-g ，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp Cosmos<span class="token punctuation">]</span># sed <span class="token operator">-</span>i <span class="token char">&#39;s/-O2/-O0 -g/&#39;</span> <span class="token punctuation">.</span><span class="token operator">/</span>initldr<span class="token operator">/</span>build<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>mh <span class="token punctuation">.</span><span class="token operator">/</span>script<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>S <span class="token punctuation">.</span><span class="token operator">/</span>build<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>mki <span class="token punctuation">.</span><span class="token operator">/</span>build<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>mk
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp Cosmos<span class="token punctuation">]</span># sed <span class="token operator">-</span>i <span class="token char">&#39;s/-Os/-O0 -g/&#39;</span> <span class="token punctuation">.</span><span class="token operator">/</span>initldr<span class="token operator">/</span>build<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>mh <span class="token punctuation">.</span><span class="token operator">/</span>script<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>S <span class="token punctuation">.</span><span class="token operator">/</span>build<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>mki <span class="token punctuation">.</span><span class="token operator">/</span>build<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>mk
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp Cosmos<span class="token punctuation">]</span># grep <span class="token operator">-</span>i <span class="token char">&#39;\\-O2&#39;</span> <span class="token operator">-</span>r <span class="token punctuation">.</span>
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp Cosmos<span class="token punctuation">]</span>#
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 sed 命令批量去掉 ld 的-s参数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp Cosmos<span class="token punctuation">]</span># sed <span class="token operator">-</span>i <span class="token char">&#39;s/-s / /g&#39;</span> <span class="token punctuation">.</span><span class="token operator">/</span>initldr<span class="token operator">/</span>build<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>mh <span class="token punctuation">.</span><span class="token operator">/</span>script<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>S <span class="token punctuation">.</span><span class="token operator">/</span>build<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>mki <span class="token punctuation">.</span><span class="token operator">/</span>build<span class="token operator">/</span>krnlbuidcmd<span class="token punctuation">.</span>mk
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp Cosmos<span class="token punctuation">]</span># grep <span class="token char">&#39;\\-s &#39;</span> <span class="token operator">-</span>r <span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>完成上面的操作以后，编译选项就修改好了。</p><h2 id="编译生成-带调试符号的-elf-文件" tabindex="-1"><a class="header-anchor" href="#编译生成-带调试符号的-elf-文件" aria-hidden="true">#</a> 编译生成“带调试符号的 elf 文件&quot;</h2><p>我们修复 bug 和修改编译选项后，执行make就可以编译出带有调试符号的 elf 文件，如下图：这里的“not stripped”就表示文件带有调试符号。</p><figure><img src="`+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这里有两个要点，我特别说明一下。</p><p>1.Cosmos.elf：当需要调试“内核代码”时，可以在 GDB 中执行symbol-file ./initldr/build/Cosmos.elf加载调试符号。</p><p>2.initldrkrl.elf：当需要调试“二级加载器代码”时，可以在 GDB 中执行symbol-file ./initldr/build/initldrkrl.elf加载调试符号。</p><h2 id="重新制作-hd-img" tabindex="-1"><a class="header-anchor" href="#重新制作-hd-img" aria-hidden="true">#</a> 重新制作 hd.img</h2><p>最后一步，我们需要重新制作 hd.img，这样 VBox 或者 QEMU 就能运行我们重新生成的 Cosmos 内核。</p><p>整个过程很简单，分两步。首先生成 Cosmos.eki，这里需要注意的是，font.fnt 等资源文件要拷贝过来。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp build<span class="token punctuation">]</span># pwd
  <span class="token operator">/</span>root<span class="token operator">/</span>cosmos<span class="token operator">/</span>lesson25<span class="token operator">~</span><span class="token number">26</span><span class="token operator">/</span>Cosmos<span class="token operator">/</span>initldr<span class="token operator">/</span>build
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp build<span class="token punctuation">]</span># cp <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>build<span class="token operator">/</span>Cosmos<span class="token punctuation">.</span>bin <span class="token punctuation">.</span><span class="token operator">/</span>
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp build<span class="token punctuation">]</span># cp <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>release<span class="token operator">/</span>font<span class="token punctuation">.</span>fnt <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>release<span class="token operator">/</span>logo<span class="token punctuation">.</span>bmp <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>release<span class="token operator">/</span>background<span class="token punctuation">.</span>bmp <span class="token punctuation">.</span><span class="token operator">/</span>
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp build<span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>lmoskrlimg <span class="token operator">-</span>m k <span class="token operator">-</span>lhf initldrimh<span class="token punctuation">.</span>bin <span class="token operator">-</span>o Cosmos<span class="token punctuation">.</span>eki <span class="token operator">-</span>f initldrkrl<span class="token punctuation">.</span>bin initldrsve<span class="token punctuation">.</span>bin Cosmos<span class="token punctuation">.</span>bin background<span class="token punctuation">.</span>bmp font<span class="token punctuation">.</span>fnt logo<span class="token punctuation">.</span>bmp
  文件数：<span class="token number">6</span>
  映像文件大小：<span class="token number">5169152</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后更新 hd.img，替换其中的 Cosmos.eki。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp build<span class="token punctuation">]</span># pwd
  <span class="token operator">/</span>root<span class="token operator">/</span>cosmos<span class="token operator">/</span>lesson25<span class="token operator">~</span><span class="token number">26</span><span class="token operator">/</span>Cosmos<span class="token operator">/</span>initldr<span class="token operator">/</span>build
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp build<span class="token punctuation">]</span># mount <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>hd<span class="token punctuation">.</span>img <span class="token operator">/</span>tmp<span class="token operator">/</span>
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp build<span class="token punctuation">]</span># cp Cosmos<span class="token punctuation">.</span>eki <span class="token operator">/</span>tmp<span class="token operator">/</span>boot<span class="token operator">/</span>
  cp：是否覆盖<span class="token string">&quot;/tmp/boot/Cosmos.eki&quot;</span>？ y
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp build<span class="token punctuation">]</span># umount <span class="token operator">/</span>tmp<span class="token operator">/</span>
  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp build<span class="token punctuation">]</span>#
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成上面的操作以后，hd.img 就制作好了。现在我们可以用 hd.img 和之前生成的 elf 文件来调试代码。</p><h2 id="打包传输-hd-img-到-mac" tabindex="-1"><a class="header-anchor" href="#打包传输-hd-img-到-mac" aria-hidden="true">#</a> 打包传输 hd.img 到 mac</h2><p>因为我是在云上购买的 Linux 虚拟机上调试 Mac 上 QEMU 运行的 Cosmos 内核，所以我需要把 Linux 上制作的 hd.img 传输到 Mac。你可以根据自己的实际情况设置传输地址。</p><figure><img src="`+u+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="如何通过动态调试验证-grub-镜像文件的加载过程" tabindex="-1"><a class="header-anchor" href="#如何通过动态调试验证-grub-镜像文件的加载过程" aria-hidden="true">#</a> 如何通过动态调试验证 grub 镜像文件的加载过程</h2><p>动态调试也好，汇编代码也罢，其实都是为我们分析问题和解决问题服务的。对于调试不太熟悉的小伙伴也别有太大心理负担，一回生、二回熟嘛，咱们多试试就有手感了。</p><p>接下来，我就给你分享个比较简单的案例，你只需要看到几行汇编代码，就能解决一些学习中的小疑问。</p><p>在正式讲解这个调试案例之前，我先交代下问题背景。在学习课程中的“初始化”部分时，我有两个疑问：</p><p>\\1. 代码从 grub 到 Cosmos 项目时，第一条指令是什么？这条指令被加载到哪里执行？</p><p>\\2. 此时 CPU 是实模式还是保护模式？</p><p>为了解决这两个疑问，我开始了自己的探索之旅。</p><h2 id="分析过程" tabindex="-1"><a class="header-anchor" href="#分析过程" aria-hidden="true">#</a> 分析过程</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp Cosmos<span class="token punctuation">]</span># od <span class="token operator">-</span>tx4 <span class="token punctuation">.</span><span class="token operator">/</span>initldr<span class="token operator">/</span>build<span class="token operator">/</span>Cosmos<span class="token punctuation">.</span>eki <span class="token operator">|</span> head <span class="token operator">-</span><span class="token number">3</span>
  <span class="token number">0000000</span> <span class="token number">909066</span>eb <span class="token number">1</span>badb002 <span class="token number">00010003</span> e4514ffb
  <span class="token number">0000020</span> <span class="token number">04000004</span> <span class="token number">04000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span>
  <span class="token number">0000040</span> <span class="token number">04000068</span> <span class="token number">90909090</span> e85250d6 <span class="token number">00000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 11 | 设置工作模式与环境（中）：建造二级引导器课程中说的 GRUB 头结构，结合上面的 Cosmos.eki 文件头信息，我们很容易就能知道，<code>_start符号</code>地址是0x04000000, <code>_entry符号</code>地址是0x04000068。</p><p>所以，可以猜测：grub 程序会加载 cosmos.eki 到0x04000000位置，然后跳到0x04000000执行，再从0x04000000 jmp 到0x04000068。</p><p>我们可以使用 GDB 调试验证是否符合这个猜测，调试代码如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token punctuation">[</span>root@instance<span class="token operator">-</span>fj5pftdp Cosmos<span class="token punctuation">]</span># gdb <span class="token operator">-</span><span class="token function">silent</span>
  <span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> target remote <span class="token operator">:</span><span class="token number">1234</span>
  Remote debugging using <span class="token operator">:</span><span class="token number">1234</span>
  <span class="token number">0x0000000000008851</span> in <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token operator">*</span><span class="token number">0x04000000</span>
  Breakpoint <span class="token number">1</span> at <span class="token number">0x4000000</span>
  <span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token operator">*</span><span class="token number">0x04000068</span>
  Breakpoint <span class="token number">2</span> at <span class="token number">0x4000068</span>
  <span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> c
  Continuing<span class="token punctuation">.</span>

  Breakpoint <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x0000000004000068</span> in <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x <span class="token operator">/</span><span class="token number">3</span>i $rip    <span class="token comment">// 和imginithead.asm文件内容可以对应上</span>
  <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">0x4000068</span><span class="token operator">:</span>    cli
     <span class="token number">0x4000069</span><span class="token operator">:</span>    in     al<span class="token punctuation">,</span><span class="token number">0x70</span>
     <span class="token number">0x400006b</span><span class="token operator">:</span>    or     al<span class="token punctuation">,</span><span class="token number">0x80</span>
  <span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x <span class="token operator">/</span><span class="token number">10</span>x <span class="token number">0x4000000</span>  <span class="token comment">// 和cosmos.eki文件头可以对应上</span>
  <span class="token number">0x4000000</span><span class="token operator">:</span>    <span class="token number">0x909066eb</span>  <span class="token number">0x1badb002</span>  <span class="token number">0x00010003</span>  <span class="token number">0xe4514ffb</span>
  <span class="token number">0x4000010</span><span class="token operator">:</span>    <span class="token number">0x04000004</span>  <span class="token number">0x04000000</span>  <span class="token number">0x00000000</span>  <span class="token number">0x00000000</span>
  <span class="token number">0x4000020</span><span class="token operator">:</span>    <span class="token number">0x04000068</span>  <span class="token number">0x90909090</span>  <span class="token number">0xe85250d6</span>  <span class="token number">0x00000000</span>
  <span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info r cr0
  cr0            <span class="token number">0x11</span>    <span class="token punctuation">[</span> PE ET <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+d+'" alt="img" style="zoom:50%;"><p>通过 GDB 可以看到，程序不是在0x04000000断点暂停，而是直接在0x04000068 断点暂停，说明第一条指令不是 _start 符号位置而是 _entry 符号位置。到 _entry 时，cr0 的 pe=1，这表明此时保护模式已经打开了。怎么样？是不是挺方便的？</p><p>经过前面的调试，我得到了最后的结论：第一条指令是 _entry 符号位置，地址是0x04000068。到0x04000068这一条指令时，CPU 已经是保护模式了。</p><p>我的分享到这里就告一段落啦。为了照顾刚入门的同学，我再提供两个参考资料。关于 GDB 的使用，你可以参考 100 个 GDB 小技巧。关于 QEMU、GCC、ld 等命令参数的含义，你可以参考 man 手册。</p><p>希望这篇加餐对你有所启发，如果你有什么好的学习方法，不妨也在留言区多多分享，让我们一起学习进步。</p>',83),b=[m];function g(v,f){return n(),a("div",null,b)}const _=s(k,[["render",g],["__file","P52-用户故事4.html.vue"]]);export{_ as default};
