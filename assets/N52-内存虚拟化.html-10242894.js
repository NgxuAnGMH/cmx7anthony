import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/02e4740398bc3685f366351260ae7230-18e5ee9f.jpg",o="/assets/0186c533b7ef706df880dfd775c2449b-66d89acd.jpg",e={},c=p(`<h1 id="_52-计算虚拟化之内存-如何建立独立的办公室" tabindex="-1"><a class="header-anchor" href="#_52-计算虚拟化之内存-如何建立独立的办公室" aria-hidden="true">#</a> 52 | 计算虚拟化之内存：如何建立独立的办公室？</h1><p>上一节，我们解析了计算虚拟化之 CPU。可以看到，CPU 的虚拟化是用户态的 qemu 和内核态的 KVM 共同配合完成的。它们二者通过 ioctl 进行通信。对于内存管理来讲，也是需要这两者配合完成的。</p><p>咱们在内存管理的时候讲过，操作系统给每个进程分配的内存都是虚拟内存，需要通过页表映射，变成物理内存进行访问。当有了虚拟机之后，情况会变得更加复杂。因为虚拟机对于物理机来讲是一个进程，但是虚拟机里面也有内核，也有虚拟机里面跑的进程。所以有了虚拟机，内存就变成了四类：</p><ul><li><strong>虚拟机里面的虚拟内存</strong>（Guest OS Virtual Memory，GVA），这是虚拟机里面的进程看到的内存空间；</li><li><strong>虚拟机里面的物理内存</strong>（Guest OS Physical Memory，GPA），这是虚拟机里面的操作系统看到的内存，它认为这是物理内存；</li><li><strong>物理机的虚拟内存</strong>（Host Virtual Memory，HVA），这是物理机上的 qemu 进程看到的内存空间；</li><li><strong>物理机的物理内存</strong>（Host Physical Memory，HPA），这是物理机上的操作系统看到的内存。</li></ul><p>咱们内存管理那一章讲的两大内容，一个是内存管理，它变得非常复杂；另一个是内存映射，具体来说就是，从 GVA 到 GPA，到 HVA，再到 HPA，这样几经转手，计算机的性能就会变得很差。当然，虚拟化技术成熟的今天，有了一些优化的手段，具体怎么优化呢？我们这一节就来一一解析。</p><p><strong>内存管理</strong></p><p>我们先来看内存管理的部分。</p><p>由于 CPU 和内存是紧密结合的，因而内存虚拟化的初始化过程，和 CPU 虚拟化的初始化是一起完成的。</p><p>上一节说 CPU 虚拟化初始化的时候，我们会调用 kvm_init 函数，这里面打开了&quot;/dev/kvm&quot;这个字符文件，并且通过 ioctl 调用到内核 kvm 的 KVM_CREATE_VM 操作，除了这些 CPU 相关的调用，接下来还有内存相关的。我们来看看。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kvm_init</span><span class="token punctuation">(</span>MachineState <span class="token operator">*</span>ms<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MachineClass <span class="token operator">*</span>mc <span class="token operator">=</span> <span class="token function">MACHINE_GET_CLASS</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">kvm_memory_listener_register</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token operator">-&gt;</span>memory_listener<span class="token punctuation">,</span>
                                 <span class="token operator">&amp;</span>address_space_memory<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memory_listener_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm_io_listener<span class="token punctuation">,</span>
                             <span class="token operator">&amp;</span>address_space_io<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

AddressSpace address_space_io<span class="token punctuation">;</span>
AddressSpace address_space_memory<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面有两个地址空间 AddressSpace，一个是系统内存的地址空间 address_space_memory，一个用于 I/O 的地址空间 address_space_io。这里我们重点看 address_space_memory。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">AddressSpace</span> <span class="token punctuation">{</span>
    <span class="token comment">/* All fields are private. */</span>
    <span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> rcu<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
    MemoryRegion <span class="token operator">*</span>root<span class="token punctuation">;</span>

    <span class="token comment">/* Accessed via RCU.  */</span>
    <span class="token keyword">struct</span> <span class="token class-name">FlatView</span> <span class="token operator">*</span>current_map<span class="token punctuation">;</span>

    <span class="token keyword">int</span> ioeventfd_nb<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">MemoryRegionIoeventfd</span> <span class="token operator">*</span>ioeventfds<span class="token punctuation">;</span>
    <span class="token function">QTAILQ_HEAD</span><span class="token punctuation">(</span><span class="token punctuation">,</span> MemoryListener<span class="token punctuation">)</span> listeners<span class="token punctuation">;</span>
    <span class="token function">QTAILQ_ENTRY</span><span class="token punctuation">(</span>AddressSpace<span class="token punctuation">)</span> address_spaces_link<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于一个地址空间，会有多个内存区域 MemoryRegion 组成树形结构。这里面，root 是这棵树的根。另外，还有一个 MemoryListener 链表，当内存区域发生变化的时候，需要做一些动作，使得用户态和内核态能够协同，就是由这些 MemoryListener 完成的。</p><p>在 kvm_init 这个时候，还没有内存区域加入进来，root 还是空的，但是我们可以先注册 MemoryListener，这里注册的是 KVMMemoryListener。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">kvm_memory_listener_register</span><span class="token punctuation">(</span>KVMState <span class="token operator">*</span>s<span class="token punctuation">,</span> KVMMemoryListener <span class="token operator">*</span>kml<span class="token punctuation">,</span>
                                  AddressSpace <span class="token operator">*</span>as<span class="token punctuation">,</span> <span class="token keyword">int</span> as_id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>

    kml<span class="token operator">-&gt;</span>slots <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>nr_slots <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>KVMSlot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    kml<span class="token operator">-&gt;</span>as_id <span class="token operator">=</span> as_id<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token operator">-&gt;</span>nr_slots<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        kml<span class="token operator">-&gt;</span>slots<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>slot <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    kml<span class="token operator">-&gt;</span>listener<span class="token punctuation">.</span>region_add <span class="token operator">=</span> kvm_region_add<span class="token punctuation">;</span>
    kml<span class="token operator">-&gt;</span>listener<span class="token punctuation">.</span>region_del <span class="token operator">=</span> kvm_region_del<span class="token punctuation">;</span>
    kml<span class="token operator">-&gt;</span>listener<span class="token punctuation">.</span>priority <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token function">memory_listener_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kml<span class="token operator">-&gt;</span>listener<span class="token punctuation">,</span> as<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个 KVMMemoryListener 中是这样配置的：当添加一个 MemoryRegion 的时候，region_add 会被调用，这个我们后面会用到。</p><p>接下来，在 qemu 启动的 main 函数中，我们会调用 cpu_exec_init_all-&gt;memory_map_init.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">memory_map_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    system_memory <span class="token operator">=</span> <span class="token function">g_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>system_memory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memory_region_init</span><span class="token punctuation">(</span>system_memory<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;system&quot;</span><span class="token punctuation">,</span> UINT64_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">address_space_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address_space_memory<span class="token punctuation">,</span> system_memory<span class="token punctuation">,</span> <span class="token string">&quot;memory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    system_io <span class="token operator">=</span> <span class="token function">g_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>system_io<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memory_region_init_io</span><span class="token punctuation">(</span>system_io<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>unassigned_io_ops<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;io&quot;</span><span class="token punctuation">,</span>
                          <span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">address_space_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address_space_io<span class="token punctuation">,</span> system_io<span class="token punctuation">,</span> <span class="token string">&quot;I/O&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，对于系统内存区域 system_memory 和用于 I/O 的内存区域 system_io，我们都进行了初始化，并且关联到了相应的地址空间 AddressSpace。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">address_space_init</span><span class="token punctuation">(</span>AddressSpace <span class="token operator">*</span>as<span class="token punctuation">,</span> MemoryRegion <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">memory_region_ref</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    as<span class="token operator">-&gt;</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>
    as<span class="token operator">-&gt;</span>current_map <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    as<span class="token operator">-&gt;</span>ioeventfd_nb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    as<span class="token operator">-&gt;</span>ioeventfds <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">QTAILQ_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>as<span class="token operator">-&gt;</span>listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">QTAILQ_INSERT_TAIL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>address_spaces<span class="token punctuation">,</span> as<span class="token punctuation">,</span> address_spaces_link<span class="token punctuation">)</span><span class="token punctuation">;</span>
    as<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token function">g_strdup</span><span class="token punctuation">(</span>name <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token string">&quot;anonymous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">address_space_update_topology</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">address_space_update_ioeventfds</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于系统内存地址空间 address_space_memory，我们需要把它里面内存区域的根 root 设置为 system_memory。</p><p>另外，在这里，我们还调用了 address_space_update_topology。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">address_space_update_topology</span><span class="token punctuation">(</span>AddressSpace <span class="token operator">*</span>as<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MemoryRegion <span class="token operator">*</span>physmr <span class="token operator">=</span> <span class="token function">memory_region_get_flatview_root</span><span class="token punctuation">(</span>as<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">flatviews_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">g_hash_table_lookup</span><span class="token punctuation">(</span>flat_views<span class="token punctuation">,</span> physmr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">generate_memory_topology</span><span class="token punctuation">(</span>physmr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">address_space_set_flatview</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">address_space_set_flatview</span><span class="token punctuation">(</span>AddressSpace <span class="token operator">*</span>as<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FlatView <span class="token operator">*</span>old_view <span class="token operator">=</span> <span class="token function">address_space_to_flatview</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">;</span>
    MemoryRegion <span class="token operator">*</span>physmr <span class="token operator">=</span> <span class="token function">memory_region_get_flatview_root</span><span class="token punctuation">(</span>as<span class="token operator">-&gt;</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FlatView <span class="token operator">*</span>new_view <span class="token operator">=</span> <span class="token function">g_hash_table_lookup</span><span class="token punctuation">(</span>flat_views<span class="token punctuation">,</span> physmr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_view <span class="token operator">==</span> new_view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QTAILQ_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>as<span class="token operator">-&gt;</span>listeners<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        FlatView tmpview <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span>nr <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">*</span>old_view2 <span class="token operator">=</span> old_view<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>old_view2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            old_view2 <span class="token operator">=</span> <span class="token operator">&amp;</span>tmpview<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">address_space_update_topology_pass</span><span class="token punctuation">(</span>as<span class="token punctuation">,</span> old_view2<span class="token punctuation">,</span> new_view<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">address_space_update_topology_pass</span><span class="token punctuation">(</span>as<span class="token punctuation">,</span> old_view2<span class="token punctuation">,</span> new_view<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">/* Writes are protected by the BQL.  */</span>
    <span class="token function">atomic_rcu_set</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>as<span class="token operator">-&gt;</span>current_map<span class="token punctuation">,</span> new_view<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面会生成 AddressSpace 的 flatview。flatview 是什么意思呢？</p><p>我们可以看到，在 AddressSpace 里面，除了树形结构的 MemoryRegion 之外，还有一个 flatview 结构，其实这个结构就是把这样一个树形的内存结构变成平的内存结构。因为树形内存结构比较容易管理，但是平的内存结构，比较方便和内核里面通信，来请求物理内存。虽然操作系统内核里面也是用树形结构来表示内存区域的，但是用户态向内核申请内存的时候，会按照平的、连续的模式进行申请。这里，qemu 在用户态，所以要做这样一个转换。</p><p>在 address_space_set_flatview 中，我们将老的 flatview 和新的 flatview 进行比较。如果不同，说明内存结构发生了变化，会调用 address_space_update_topology_pass-&gt;MEMORY_LISTENER_UPDATE_REGION-&gt;MEMORY_LISTENER_CALL。</p><p>这里面调用所有的 listener。但是，这个逻辑这里不会执行的。这是因为这里内存处于初始化的阶段，全局的 flat_views 里面肯定找不到。因而 generate_memory_topology 第一次生成了 FlatView，然后才调用了 address_space_set_flatview。这里面，老的 flatview 和新的 flatview 一定是一样的。</p><p>但是，请你记住这个逻辑，到这里我们还没解析 qemu 有关内存的参数，所以这里添加的 MemoryRegion 虽然是一个根，但是是空的，是为了管理使用的，后面真的添加内存的时候，这个逻辑还会调用到。</p><p>我们再回到 qemu 启动的 main 函数中。接下来的初始化过程会调用 pc_init1。在这里面，对于 CPU 虚拟化，我们会调用 pc_cpus_init。这个我们在上一节已经讲过了。另外，pc_init1 还会调用 pc_memory_init，进行内存的虚拟化，我们这里解析这一部分。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">pc_memory_init</span><span class="token punctuation">(</span>PCMachineState <span class="token operator">*</span>pcms<span class="token punctuation">,</span>
                    MemoryRegion <span class="token operator">*</span>system_memory<span class="token punctuation">,</span>
                    MemoryRegion <span class="token operator">*</span>rom_memory<span class="token punctuation">,</span>
                    MemoryRegion <span class="token operator">*</span><span class="token operator">*</span>ram_memory<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> linux_boot<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    MemoryRegion <span class="token operator">*</span>ram<span class="token punctuation">,</span> <span class="token operator">*</span>option_rom_mr<span class="token punctuation">;</span>
    MemoryRegion <span class="token operator">*</span>ram_below_4g<span class="token punctuation">,</span> <span class="token operator">*</span>ram_above_4g<span class="token punctuation">;</span>
    FWCfgState <span class="token operator">*</span>fw_cfg<span class="token punctuation">;</span>
    MachineState <span class="token operator">*</span>machine <span class="token operator">=</span> <span class="token function">MACHINE</span><span class="token punctuation">(</span>pcms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    PCMachineClass <span class="token operator">*</span>pcmc <span class="token operator">=</span> <span class="token function">PC_MACHINE_GET_CLASS</span><span class="token punctuation">(</span>pcms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Allocate RAM.  We allocate it as a single memory region and use
     * aliases to address portions of it, mostly for backwards compatibility with older qemus that used qemu_ram_alloc().
     */</span>
    ram <span class="token operator">=</span> <span class="token function">g_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ram<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memory_region_allocate_system_memory</span><span class="token punctuation">(</span>ram<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;pc.ram&quot;</span><span class="token punctuation">,</span>
                                         machine<span class="token operator">-&gt;</span>ram_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>ram_memory <span class="token operator">=</span> ram<span class="token punctuation">;</span>
    ram_below_4g <span class="token operator">=</span> <span class="token function">g_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ram_below_4g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memory_region_init_alias</span><span class="token punctuation">(</span>ram_below_4g<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;ram-below-4g&quot;</span><span class="token punctuation">,</span> ram<span class="token punctuation">,</span>
                             <span class="token number">0</span><span class="token punctuation">,</span> pcms<span class="token operator">-&gt;</span>below_4g_mem_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memory_region_add_subregion</span><span class="token punctuation">(</span>system_memory<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ram_below_4g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">e820_add_entry</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pcms<span class="token operator">-&gt;</span>below_4g_mem_size<span class="token punctuation">,</span> E820_RAM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pcms<span class="token operator">-&gt;</span>above_4g_mem_size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ram_above_4g <span class="token operator">=</span> <span class="token function">g_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ram_above_4g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memory_region_init_alias</span><span class="token punctuation">(</span>ram_above_4g<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;ram-above-4g&quot;</span><span class="token punctuation">,</span> ram<span class="token punctuation">,</span> pcms<span class="token operator">-&gt;</span>below_4g_mem_size<span class="token punctuation">,</span> pcms<span class="token operator">-&gt;</span>above_4g_mem_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memory_region_add_subregion</span><span class="token punctuation">(</span>system_memory<span class="token punctuation">,</span> <span class="token number">0x100000000ULL</span><span class="token punctuation">,</span>
                                    ram_above_4g<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">e820_add_entry</span><span class="token punctuation">(</span><span class="token number">0x100000000ULL</span><span class="token punctuation">,</span> pcms<span class="token operator">-&gt;</span>above_4g_mem_size<span class="token punctuation">,</span> E820_RAM<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 pc_memory_init 中，我们已经知道了虚拟机要申请的内存 ram_size，于是通过 memory_region_allocate_system_memory 来申请内存。</p><p>接下来的调用链为：memory_region_allocate_system_memory-&gt;allocate_system_memory_nonnuma-&gt;memory_region_init_ram_nomigrate-&gt;memory_region_init_ram_shared_nomigrate。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">memory_region_init_ram_shared_nomigrate</span><span class="token punctuation">(</span>MemoryRegion <span class="token operator">*</span>mr<span class="token punctuation">,</span>
                                             Object <span class="token operator">*</span>owner<span class="token punctuation">,</span>
                                             <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
                                             <span class="token class-name">uint64_t</span> size<span class="token punctuation">,</span>
                                             bool share<span class="token punctuation">,</span>
                                             Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Error <span class="token operator">*</span>err <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">memory_region_init</span><span class="token punctuation">(</span>mr<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> name<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mr<span class="token operator">-&gt;</span>ram <span class="token operator">=</span> true<span class="token punctuation">;</span>
    mr<span class="token operator">-&gt;</span>terminates <span class="token operator">=</span> true<span class="token punctuation">;</span>
    mr<span class="token operator">-&gt;</span>destructor <span class="token operator">=</span> memory_region_destructor_ram<span class="token punctuation">;</span>
    mr<span class="token operator">-&gt;</span>ram_block <span class="token operator">=</span> <span class="token function">qemu_ram_alloc</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> share<span class="token punctuation">,</span> mr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span>
RAMBlock <span class="token operator">*</span><span class="token function">qemu_ram_alloc_internal</span><span class="token punctuation">(</span><span class="token class-name">ram_addr_t</span> size<span class="token punctuation">,</span> <span class="token class-name">ram_addr_t</span> max_size<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>resized<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token class-name">uint64_t</span> length<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>host<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>host<span class="token punctuation">,</span> bool resizeable<span class="token punctuation">,</span> bool share<span class="token punctuation">,</span>MemoryRegion <span class="token operator">*</span>mr<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    RAMBlock <span class="token operator">*</span>new_block<span class="token punctuation">;</span>
    size <span class="token operator">=</span> <span class="token function">HOST_PAGE_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    max_size <span class="token operator">=</span> <span class="token function">HOST_PAGE_ALIGN</span><span class="token punctuation">(</span>max_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_block <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>new_block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_block<span class="token operator">-&gt;</span>mr <span class="token operator">=</span> mr<span class="token punctuation">;</span>
    new_block<span class="token operator">-&gt;</span>resized <span class="token operator">=</span> resized<span class="token punctuation">;</span>
    new_block<span class="token operator">-&gt;</span>used_length <span class="token operator">=</span> size<span class="token punctuation">;</span>
    new_block<span class="token operator">-&gt;</span>max_length <span class="token operator">=</span> max_size<span class="token punctuation">;</span>
    new_block<span class="token operator">-&gt;</span>fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    new_block<span class="token operator">-&gt;</span>page_size <span class="token operator">=</span> <span class="token function">getpagesize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_block<span class="token operator">-&gt;</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">ram_block_add</span><span class="token punctuation">(</span>new_block<span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_err<span class="token punctuation">,</span> share<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> new_block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ram_block_add</span><span class="token punctuation">(</span>RAMBlock <span class="token operator">*</span>new_block<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">,</span> bool shared<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    RAMBlock <span class="token operator">*</span>block<span class="token punctuation">;</span>
    RAMBlock <span class="token operator">*</span>last_block <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token class-name">ram_addr_t</span> old_ram_size<span class="token punctuation">,</span> new_ram_size<span class="token punctuation">;</span>
    Error <span class="token operator">*</span>err <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    old_ram_size <span class="token operator">=</span> <span class="token function">last_ram_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_block<span class="token operator">-&gt;</span>offset <span class="token operator">=</span> <span class="token function">find_ram_offset</span><span class="token punctuation">(</span>new_block<span class="token operator">-&gt;</span>max_length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>new_block<span class="token operator">-&gt;</span>host<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        new_block<span class="token operator">-&gt;</span>host <span class="token operator">=</span> <span class="token function">phys_mem_alloc</span><span class="token punctuation">(</span>new_block<span class="token operator">-&gt;</span>max_length<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_block<span class="token operator">-&gt;</span>mr<span class="token operator">-&gt;</span>align<span class="token punctuation">,</span> shared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面，我们会调用 qemu_ram_alloc，创建一个 RAMBlock 用来表示内存块。这里面调用 ram_block_add-&gt;phys_mem_alloc。phys_mem_alloc 是一个函数指针，指向函数 qemu_anon_ram_alloc，这里面调用 qemu_ram_mmap，在 qemu_ram_mmap 中调用 mmap 分配内存。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>phys_mem_alloc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> <span class="token operator">*</span>align<span class="token punctuation">,</span> bool shared<span class="token punctuation">)</span> <span class="token operator">=</span> qemu_anon_ram_alloc<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">qemu_anon_ram_alloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> <span class="token operator">*</span>alignment<span class="token punctuation">,</span> bool shared<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">size_t</span> align <span class="token operator">=</span> QEMU_VMALLOC_ALIGN<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token function">qemu_ram_mmap</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> align<span class="token punctuation">,</span> shared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>alignment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>alignment <span class="token operator">=</span> align<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">qemu_ram_mmap</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> align<span class="token punctuation">,</span> bool shared<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> flags<span class="token punctuation">;</span>
    <span class="token keyword">int</span> guardfd<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> offset<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> pagesize<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> total<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>guardptr<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    total <span class="token operator">=</span> size <span class="token operator">+</span> align<span class="token punctuation">;</span>
    guardfd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    pagesize <span class="token operator">=</span> <span class="token function">getpagesize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    flags <span class="token operator">=</span> MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">;</span>
    guardptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> total<span class="token punctuation">,</span> PROT_NONE<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> guardfd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    flags <span class="token operator">=</span> MAP_FIXED<span class="token punctuation">;</span>
    flags <span class="token operator">|=</span> fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> MAP_ANONYMOUS <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    flags <span class="token operator">|=</span> shared <span class="token operator">?</span> MAP_SHARED <span class="token operator">:</span> MAP_PRIVATE<span class="token punctuation">;</span>
    offset <span class="token operator">=</span> <span class="token function">QEMU_ALIGN_UP</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span>guardptr<span class="token punctuation">,</span> align<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span>guardptr<span class="token punctuation">;</span>
    ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span>guardptr <span class="token operator">+</span> offset<span class="token punctuation">,</span> size<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们回到 pc_memory_init，通过 memory_region_allocate_system_memory 申请到内存以后，为了兼容过去的版本，我们分成两个 MemoryRegion 进行管理，一个是 ram_below_4g，一个是 ram_above_4g。对于这两个 MemoryRegion，我们都会初始化一个 alias，也即别名，意思是说，两个 MemoryRegion 其实都指向 memory_region_allocate_system_memory 分配的内存，只不过分成两个部分，起两个别名指向不同的区域。</p><p>这两部分 MemoryRegion 都会调用 memory_region_add_subregion，将这两部分作为子的内存区域添加到 system_memory 这棵树上。</p><p>接下来的调用链为：memory_region_add_subregion-&gt;memory_region_add_subregion_common-&gt;memory_region_update_container_subregions。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">memory_region_update_container_subregions</span><span class="token punctuation">(</span>MemoryRegion <span class="token operator">*</span>subregion<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MemoryRegion <span class="token operator">*</span>mr <span class="token operator">=</span> subregion<span class="token operator">-&gt;</span>container<span class="token punctuation">;</span>
    MemoryRegion <span class="token operator">*</span>other<span class="token punctuation">;</span>

    <span class="token function">memory_region_transaction_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">memory_region_ref</span><span class="token punctuation">(</span>subregion<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">QTAILQ_FOREACH</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mr<span class="token operator">-&gt;</span>subregions<span class="token punctuation">,</span> subregions_link<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subregion<span class="token operator">-&gt;</span>priority <span class="token operator">&gt;=</span> other<span class="token operator">-&gt;</span>priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">QTAILQ_INSERT_BEFORE</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span> subregion<span class="token punctuation">,</span> subregions_link<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> done<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">QTAILQ_INSERT_TAIL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mr<span class="token operator">-&gt;</span>subregions<span class="token punctuation">,</span> subregion<span class="token punctuation">,</span> subregions_link<span class="token punctuation">)</span><span class="token punctuation">;</span>
done<span class="token operator">:</span>
    memory_region_update_pending <span class="token operator">|=</span> mr<span class="token operator">-&gt;</span>enabled <span class="token operator">&amp;&amp;</span> subregion<span class="token operator">-&gt;</span>enabled<span class="token punctuation">;</span>
    <span class="token function">memory_region_transaction_commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 memory_region_update_container_subregions 中，我们会将子区域放到链表中，然后调用 memory_region_transaction_commit。在这里面，我们会调用 address_space_set_flatview。因为内存区域变了，flatview 也会变，就像上面分析过的一样，listener 会被调用。</p><p>因为添加了一个 MemoryRegion，region_add 也即 kvm_region_add。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">kvm_region_add</span><span class="token punctuation">(</span>MemoryListener <span class="token operator">*</span>listener<span class="token punctuation">,</span>
                           MemoryRegionSection <span class="token operator">*</span>section<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    KVMMemoryListener <span class="token operator">*</span>kml <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> KVMMemoryListener<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kvm_set_phys_mem</span><span class="token punctuation">(</span>kml<span class="token punctuation">,</span> section<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">kvm_set_phys_mem</span><span class="token punctuation">(</span>KVMMemoryListener <span class="token operator">*</span>kml<span class="token punctuation">,</span>
                             MemoryRegionSection <span class="token operator">*</span>section<span class="token punctuation">,</span> bool add<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    KVMSlot <span class="token operator">*</span>mem<span class="token punctuation">;</span>
    <span class="token keyword">int</span> err<span class="token punctuation">;</span>
    MemoryRegion <span class="token operator">*</span>mr <span class="token operator">=</span> section<span class="token operator">-&gt;</span>mr<span class="token punctuation">;</span>
    bool writeable <span class="token operator">=</span> <span class="token operator">!</span>mr<span class="token operator">-&gt;</span>readonly <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mr<span class="token operator">-&gt;</span>rom_device<span class="token punctuation">;</span>
    hwaddr start_addr<span class="token punctuation">,</span> size<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ram<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    size <span class="token operator">=</span> <span class="token function">kvm_align_section</span><span class="token punctuation">(</span>section<span class="token punctuation">,</span> <span class="token operator">&amp;</span>start_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* use aligned delta to align the ram address */</span>
    ram <span class="token operator">=</span> <span class="token function">memory_region_get_ram_ptr</span><span class="token punctuation">(</span>mr<span class="token punctuation">)</span> <span class="token operator">+</span> section<span class="token operator">-&gt;</span>offset_within_region <span class="token operator">+</span> <span class="token punctuation">(</span>start_addr <span class="token operator">-</span> section<span class="token operator">-&gt;</span>offset_within_address_space<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* register the new slot */</span>
    mem <span class="token operator">=</span> <span class="token function">kvm_alloc_slot</span><span class="token punctuation">(</span>kml<span class="token punctuation">)</span><span class="token punctuation">;</span>
    mem<span class="token operator">-&gt;</span>memory_size <span class="token operator">=</span> size<span class="token punctuation">;</span>
    mem<span class="token operator">-&gt;</span>start_addr <span class="token operator">=</span> start_addr<span class="token punctuation">;</span>
    mem<span class="token operator">-&gt;</span>ram <span class="token operator">=</span> ram<span class="token punctuation">;</span>
    mem<span class="token operator">-&gt;</span>flags <span class="token operator">=</span> <span class="token function">kvm_mem_flags</span><span class="token punctuation">(</span>mr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    err <span class="token operator">=</span> <span class="token function">kvm_set_user_memory_region</span><span class="token punctuation">(</span>kml<span class="token punctuation">,</span> mem<span class="token punctuation">,</span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kvm_region_add 调用的是 kvm_set_phys_mem，这里面分配一个用于放这块内存的 KVMSlot 结构，就像一个内存条一样，当然这是在用户态模拟出来的内存条，放在 KVMState 结构里面。这个结构是我们上一节创建虚拟机的时候创建的。</p><p>接下来，kvm_set_user_memory_region 就会将用户态模拟出来的内存条，和内核中的 KVM 模块关联起来。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kvm_set_user_memory_region</span><span class="token punctuation">(</span>KVMMemoryListener <span class="token operator">*</span>kml<span class="token punctuation">,</span> KVMSlot <span class="token operator">*</span>slot<span class="token punctuation">,</span> bool new<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    KVMState <span class="token operator">*</span>s <span class="token operator">=</span> kvm_state<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm_userspace_memory_region</span> mem<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

    mem<span class="token punctuation">.</span>slot <span class="token operator">=</span> slot<span class="token operator">-&gt;</span>slot <span class="token operator">|</span> <span class="token punctuation">(</span>kml<span class="token operator">-&gt;</span>as_id <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    mem<span class="token punctuation">.</span>guest_phys_addr <span class="token operator">=</span> slot<span class="token operator">-&gt;</span>start_addr<span class="token punctuation">;</span>
    mem<span class="token punctuation">.</span>userspace_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>slot<span class="token operator">-&gt;</span>ram<span class="token punctuation">;</span>
    mem<span class="token punctuation">.</span>flags <span class="token operator">=</span> slot<span class="token operator">-&gt;</span>flags<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    mem<span class="token punctuation">.</span>memory_size <span class="token operator">=</span> slot<span class="token operator">-&gt;</span>memory_size<span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">kvm_vm_ioctl</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> KVM_SET_USER_MEMORY_REGION<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    slot<span class="token operator">-&gt;</span>old_flags <span class="token operator">=</span> mem<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>终于，在这里，我们又看到了可以和内核通信的 kvm_vm_ioctl。我们来看内核收到 KVM_SET_USER_MEMORY_REGION 会做哪些事情。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">kvm_vm_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span>
               <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ioctl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token operator">*</span>kvm <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>private_data<span class="token punctuation">;</span>
    <span class="token keyword">void</span> __user <span class="token operator">*</span>argp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ioctl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> KVM_SET_USER_MEMORY_REGION<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">kvm_userspace_memory_region</span> kvm_userspace_mem<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvm_userspace_mem<span class="token punctuation">,</span> argp<span class="token punctuation">,</span>
                        <span class="token keyword">sizeof</span><span class="token punctuation">(</span>kvm_userspace_mem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> out<span class="token punctuation">;</span>   
        r <span class="token operator">=</span> <span class="token function">kvm_vm_ioctl_set_memory_region</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kvm_userspace_mem<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>   
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的调用链为：kvm_vm_ioctl_set_memory_region-&gt;kvm_set_memory_region-&gt;__kvm_set_memory_region。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">__kvm_set_memory_region</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token operator">*</span>kvm<span class="token punctuation">,</span>
          <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">kvm_userspace_memory_region</span> <span class="token operator">*</span>mem<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> r<span class="token punctuation">;</span>
  <span class="token class-name">gfn_t</span> base_gfn<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> npages<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_memory_slot</span> <span class="token operator">*</span>slot<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_memory_slot</span> old<span class="token punctuation">,</span> new<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_memslots</span> <span class="token operator">*</span>slots <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>old_memslots<span class="token punctuation">;</span>
  <span class="token keyword">int</span> as_id<span class="token punctuation">,</span> id<span class="token punctuation">;</span>
  <span class="token keyword">enum</span> <span class="token class-name">kvm_mr_change</span> change<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  as_id <span class="token operator">=</span> mem<span class="token operator">-&gt;</span>slot <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
  id <span class="token operator">=</span> <span class="token punctuation">(</span>u16<span class="token punctuation">)</span>mem<span class="token operator">-&gt;</span>slot<span class="token punctuation">;</span>

  slot <span class="token operator">=</span> <span class="token function">id_to_memslot</span><span class="token punctuation">(</span><span class="token function">__kvm_memslots</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> as_id<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  base_gfn <span class="token operator">=</span> mem<span class="token operator">-&gt;</span>guest_phys_addr <span class="token operator">&gt;&gt;</span> PAGE_SHIFT<span class="token punctuation">;</span>
  npages <span class="token operator">=</span> mem<span class="token operator">-&gt;</span>memory_size <span class="token operator">&gt;&gt;</span> PAGE_SHIFT<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  new <span class="token operator">=</span> old <span class="token operator">=</span> <span class="token operator">*</span>slot<span class="token punctuation">;</span>

  new<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
  new<span class="token punctuation">.</span>base_gfn <span class="token operator">=</span> base_gfn<span class="token punctuation">;</span>
  new<span class="token punctuation">.</span>npages <span class="token operator">=</span> npages<span class="token punctuation">;</span>
  new<span class="token punctuation">.</span>flags <span class="token operator">=</span> mem<span class="token operator">-&gt;</span>flags<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>change <span class="token operator">==</span> KVM_MR_CREATE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    new<span class="token punctuation">.</span>userspace_addr <span class="token operator">=</span> mem<span class="token operator">-&gt;</span>userspace_addr<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kvm_arch_create_memslot</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new<span class="token punctuation">,</span> npages<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> out_free<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  slots <span class="token operator">=</span> <span class="token function">kvzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_memslots</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> <span class="token function">__kvm_memslots</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> as_id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_memslots</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  r <span class="token operator">=</span> <span class="token function">kvm_arch_prepare_memory_region</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new<span class="token punctuation">,</span> mem<span class="token punctuation">,</span> change<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">update_memslots</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new<span class="token punctuation">)</span><span class="token punctuation">;</span>
  old_memslots <span class="token operator">=</span> <span class="token function">install_new_memslots</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> as_id<span class="token punctuation">,</span> slots<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">kvm_arch_commit_memory_region</span><span class="token punctuation">(</span>kvm<span class="token punctuation">,</span> mem<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new<span class="token punctuation">,</span> change<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在用户态每个 KVMState 有多个 KVMSlot，在内核里面，同样每个 struct kvm 也有多个 struct kvm_memory_slot，两者是对应起来的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//用户态</span>
<span class="token keyword">struct</span> <span class="token class-name">KVMState</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">int</span> nr_slots<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    KVMMemoryListener memory_listener<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">KVMMemoryListener</span> <span class="token punctuation">{</span>
    MemoryListener listener<span class="token punctuation">;</span>
    KVMSlot <span class="token operator">*</span>slots<span class="token punctuation">;</span>
    <span class="token keyword">int</span> as_id<span class="token punctuation">;</span>
<span class="token punctuation">}</span> KVMMemoryListener

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">KVMSlot</span>
<span class="token punctuation">{</span>
    hwaddr start_addr<span class="token punctuation">;</span>
    <span class="token class-name">ram_addr_t</span> memory_size<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>ram<span class="token punctuation">;</span>
    <span class="token keyword">int</span> slot<span class="token punctuation">;</span>
    <span class="token keyword">int</span> flags<span class="token punctuation">;</span>
    <span class="token keyword">int</span> old_flags<span class="token punctuation">;</span>
<span class="token punctuation">}</span> KVMSlot<span class="token punctuation">;</span>

<span class="token comment">//内核态</span>
<span class="token keyword">struct</span> <span class="token class-name">kvm</span> <span class="token punctuation">{</span>
  <span class="token class-name">spinlock_t</span> mmu_lock<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mutex</span> slots_lock<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm<span class="token punctuation">;</span> <span class="token comment">/* userspace tied to this vm */</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_memslots</span> __rcu <span class="token operator">*</span>memslots<span class="token punctuation">[</span>KVM_ADDRESS_SPACE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">kvm_memslots</span> <span class="token punctuation">{</span>
  u64 generation<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_memory_slot</span> memslots<span class="token punctuation">[</span>KVM_MEM_SLOTS_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">/* The mapping table from slot id to the index in memslots[]. */</span>
  <span class="token keyword">short</span> id_to_index<span class="token punctuation">[</span>KVM_MEM_SLOTS_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token class-name">atomic_t</span> lru_slot<span class="token punctuation">;</span>
  <span class="token keyword">int</span> used_slots<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">kvm_memory_slot</span> <span class="token punctuation">{</span>
  <span class="token class-name">gfn_t</span> base_gfn<span class="token punctuation">;</span><span class="token comment">//根据guest_phys_addr计算</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> npages<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>dirty_bitmap<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_arch_memory_slot</span> arch<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> userspace_addr<span class="token punctuation">;</span>
  u32 flags<span class="token punctuation">;</span>
  <span class="token keyword">short</span> id<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且，id_to_memslot 函数可以根据用户态的 slot 号得到内核态的 slot 结构。</p><p>如果传进来的参数是 KVM_MR_CREATE，表示要创建一个新的内存条，就会调用 kvm_arch_create_memslot 来创建 kvm_memory_slot 的成员 kvm_arch_memory_slot。</p><p>接下来就是创建 kvm_memslots 结构，填充这个结构，然后通过 install_new_memslots 将这个新的内存条，添加到 struct kvm 结构中。</p><p>至此，用户态的内存结构和内核态的内存结构算是对应了起来。</p><p><strong>页面分配和映射</strong></p><p>上面对于内存的管理，还只是停留在元数据的管理。对于内存的分配与映射，我们还没有涉及，接下来，我们就来看看，页面是如何进行分配和映射的。</p><p>上面咱们说了，内存映射对于虚拟机来讲是一件非常麻烦的事情，从 GVA 到 GPA 到 HVA 到 HPA，性能很差，为了解决这个问题，有两种主要的思路。</p><p><strong>影子页表</strong></p><p>第一种方式就是软件的方式，<strong>影子页表</strong> （Shadow Page Table）。</p><p>按照咱们在内存管理那一节讲的，内存映射要通过页表来管理，页表地址应该放在 cr3 寄存器里面。本来的过程是，客户机要通过 cr3 找到客户机的页表，实现从 GVA 到 GPA 的转换，然后在宿主机上，要通过 cr3 找到宿主机的页表，实现从 HVA 到 HPA 的转换。</p><p>为了实现客户机虚拟地址空间到宿主机物理地址空间的直接映射。客户机中每个进程都有自己的虚拟地址空间，所以 KVM 需要为客户机中的每个进程页表都要维护一套相应的影子页表。</p><p>在客户机访问内存时，使用的不是客户机的原来的页表，而是这个页表对应的影子页表，从而实现了从客户机虚拟地址到宿主机物理地址的直接转换。而且，在 TLB 和 CPU 缓存上缓存的是来自影子页表中客户机虚拟地址和宿主机物理地址之间的映射，也因此提高了缓存的效率。</p><p>但是影子页表的引入也意味着 KVM 需要为每个客户机的每个进程的页表都要维护一套相应的影子页表，内存占用比较大，而且客户机页表和和影子页表也需要进行实时同步。</p><p><strong>扩展页表</strong></p><p>于是就有了第二种方式，就是硬件的方式，Intel 的 EPT（Extent Page Table，扩展页表）技术。</p><p>EPT 在原有客户机页表对客户机虚拟地址到客户机物理地址映射的基础上，又引入了 EPT 页表来实现客户机物理地址到宿主机物理地址的另一次映射。客户机运行时，客户机页表被载入 CR3，而 EPT 页表被载入专门的 EPT 页表指针寄存器 EPTP。</p><p>有了 EPT，在客户机物理地址到宿主机物理地址转换的过程中，缺页会产生 EPT 缺页异常。KVM 首先根据引起异常的客户机物理地址，映射到对应的宿主机虚拟地址，然后为此虚拟地址分配新的物理页，最后 KVM 再更新 EPT 页表，建立起引起异常的客户机物理地址到宿主机物理地址之间的映射。</p><p>KVM 只需为每个客户机维护一套 EPT 页表，也大大减少了内存的开销。</p><p>这里，我们重点看第二种方式。因为使用了 EPT 之后，客户机里面的页表映射，也即从 GVA 到 GPA 的转换，还是用传统的方式，和在内存管理那一章讲的没有什么区别。而 EPT 重点帮我们解决的就是从 GPA 到 HPA 的转换问题。因为要经过两次页表，所以 EPT 又称为 tdp（two dimentional paging）。</p><p>EPT 的页表结构也是分为四层，EPT Pointer （EPTP）指向 PML4 的首地址。</p><figure><img src="`+t+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>管理物理页面的 Page 结构和咱们讲内存管理那一章是一样的。EPT 页表也需要存放在一个页中，这些页要用 kvm_mmu_page 这个结构来管理。</p><p>当一个虚拟机运行，进入客户机模式的时候，我们上一节解析过，它会调用 vcpu_enter_guest 函数，这里面会调用 kvm_mmu_reload-&gt;kvm_mmu_load。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">kvm_mmu_load</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  r <span class="token operator">=</span> <span class="token function">mmu_topup_memory_caches</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  r <span class="token operator">=</span> <span class="token function">mmu_alloc_roots</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">kvm_mmu_sync_roots</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/* set_cr3() should ensure TLB has been flushed */</span>
  vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>mmu<span class="token punctuation">.</span><span class="token function">set_cr3</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>mmu<span class="token punctuation">.</span>root_hpa<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mmu_alloc_roots</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>mmu<span class="token punctuation">.</span>direct_map<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">mmu_alloc_direct_roots</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token function">mmu_alloc_shadow_roots</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mmu_alloc_direct_roots</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_mmu_page</span> <span class="token operator">*</span>sp<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> i<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>mmu<span class="token punctuation">.</span>shadow_root_level <span class="token operator">==</span> PT64_ROOT_LEVEL<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vcpu<span class="token operator">-&gt;</span>kvm<span class="token operator">-&gt;</span>mmu_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">make_mmu_pages_available</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sp <span class="token operator">=</span> <span class="token function">kvm_mmu_get_page</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> PT64_ROOT_LEVEL<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> ACC_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">++</span>sp<span class="token operator">-&gt;</span>root_count<span class="token punctuation">;</span>
    <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vcpu<span class="token operator">-&gt;</span>kvm<span class="token operator">-&gt;</span>mmu_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>mmu<span class="token punctuation">.</span>root_hpa <span class="token operator">=</span> <span class="token function">__pa</span><span class="token punctuation">(</span>sp<span class="token operator">-&gt;</span>spt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里构建的是页表的根部，也即顶级页表，并且设置 cr3 来刷新 TLB。mmu_alloc_roots 会调用 mmu_alloc_direct_roots，因为我们用的是 EPT 模式，而非影子表。在 mmu_alloc_direct_roots 中，kvm_mmu_get_page 会分配一个 kvm_mmu_page，来存放顶级页表项。</p><p>接下来，当虚拟机真的要访问内存的时候，会发现有的页表没有建立，有的物理页没有分配，这都会触发缺页异常，在 KVM 里面会发送 VM-Exit，从客户机模式转换为宿主机模式，来修复这个缺失的页表或者物理页。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">const</span> kvm_vmx_exit_handlers<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>EXIT_REASON_EXCEPTION_NMI<span class="token punctuation">]</span>           <span class="token operator">=</span> handle_exception<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>EXIT_REASON_EXTERNAL_INTERRUPT<span class="token punctuation">]</span>      <span class="token operator">=</span> handle_external_interrupt<span class="token punctuation">,</span>
    <span class="token punctuation">[</span>EXIT_REASON_IO_INSTRUCTION<span class="token punctuation">]</span>          <span class="token operator">=</span> handle_io<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">[</span>EXIT_REASON_EPT_VIOLATION<span class="token punctuation">]</span>       <span class="token operator">=</span> handle_ept_violation<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>咱们前面讲过，虚拟机退出客户机模式有很多种原因，例如接收到中断、接收到 I/O 等，EPT 的缺页异常也是一种类型，我们称为 EXIT_REASON_EPT_VIOLATION，对应的处理函数是 handle_ept_violation。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">handle_ept_violation</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">gpa_t</span> gpa<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  gpa <span class="token operator">=</span> <span class="token function">vmcs_read64</span><span class="token punctuation">(</span>GUEST_PHYSICAL_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>gpa_available <span class="token operator">=</span> true<span class="token punctuation">;</span>
  vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>exit_qualification <span class="token operator">=</span> exit_qualification<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token function">kvm_mmu_page_fault</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> gpa<span class="token punctuation">,</span> error_code<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">kvm_mmu_page_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">,</span> <span class="token class-name">gva_t</span> cr2<span class="token punctuation">,</span> u64 error_code<span class="token punctuation">,</span>
           <span class="token keyword">void</span> <span class="token operator">*</span>insn<span class="token punctuation">,</span> <span class="token keyword">int</span> insn_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  r <span class="token operator">=</span> vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>mmu<span class="token punctuation">.</span><span class="token function">page_fault</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> cr2<span class="token punctuation">,</span> <span class="token function">lower_32_bits</span><span class="token punctuation">(</span>error_code<span class="token punctuation">)</span><span class="token punctuation">,</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 handle_ept_violation 里面，我们从 VMCS 中得到没有解析成功的 GPA，也即客户机的物理地址，然后调用 kvm_mmu_page_fault，看为什么解析不成功。kvm_mmu_page_fault 会调用 page_fault 函数，其实是 tdp_page_fault 函数。tdp 的意思就是 EPT，前面我们解释过了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">tdp_page_fault</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">,</span> <span class="token class-name">gva_t</span> gpa<span class="token punctuation">,</span> u32 error_code<span class="token punctuation">,</span> bool prefault<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">kvm_pfn_t</span> pfn<span class="token punctuation">;</span>
  <span class="token keyword">int</span> r<span class="token punctuation">;</span>
  <span class="token keyword">int</span> level<span class="token punctuation">;</span>
  bool force_pt_level<span class="token punctuation">;</span>
  <span class="token class-name">gfn_t</span> gfn <span class="token operator">=</span> gpa <span class="token operator">&gt;&gt;</span> PAGE_SHIFT<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> mmu_seq<span class="token punctuation">;</span>
  <span class="token keyword">int</span> write <span class="token operator">=</span> error_code <span class="token operator">&amp;</span> PFERR_WRITE_MASK<span class="token punctuation">;</span>
  bool map_writable<span class="token punctuation">;</span>

  r <span class="token operator">=</span> <span class="token function">mmu_topup_memory_caches</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  level <span class="token operator">=</span> <span class="token function">mapping_level</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> gfn<span class="token punctuation">,</span> <span class="token operator">&amp;</span>force_pt_level<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">try_async_pf</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> prefault<span class="token punctuation">,</span> gfn<span class="token punctuation">,</span> gpa<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pfn<span class="token punctuation">,</span> write<span class="token punctuation">,</span> <span class="token operator">&amp;</span>map_writable<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">handle_abnormal_pfn</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> gfn<span class="token punctuation">,</span> pfn<span class="token punctuation">,</span> ACC_ALL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> r<span class="token punctuation">;</span>

  <span class="token function">make_mmu_pages_available</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
  r <span class="token operator">=</span> <span class="token function">__direct_map</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> write<span class="token punctuation">,</span> map_writable<span class="token punctuation">,</span> level<span class="token punctuation">,</span> gfn<span class="token punctuation">,</span> pfn<span class="token punctuation">,</span> prefault<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然没有映射，就应该加上映射，tdp_page_fault 就是干这个事情的。</p><p>在 tdp_page_fault 这个函数开头，我们通过 gpa，也即客户机的物理地址得到客户机的页号 gfn。接下来，我们要通过调用 try_async_pf 得到宿主机的物理地址对应的页号，也即真正的物理页的页号，然后通过 __direct_map 将两者关联起来。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> bool <span class="token function">try_async_pf</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">,</span> bool prefault<span class="token punctuation">,</span> <span class="token class-name">gfn_t</span> gfn<span class="token punctuation">,</span> <span class="token class-name">gva_t</span> gva<span class="token punctuation">,</span> <span class="token class-name">kvm_pfn_t</span> <span class="token operator">*</span>pfn<span class="token punctuation">,</span> bool write<span class="token punctuation">,</span> bool <span class="token operator">*</span>writable<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_memory_slot</span> <span class="token operator">*</span>slot<span class="token punctuation">;</span>
  bool async<span class="token punctuation">;</span>

  slot <span class="token operator">=</span> <span class="token function">kvm_vcpu_gfn_to_memslot</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> gfn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  async <span class="token operator">=</span> false<span class="token punctuation">;</span>
  <span class="token operator">*</span>pfn <span class="token operator">=</span> <span class="token function">__gfn_to_pfn_memslot</span><span class="token punctuation">(</span>slot<span class="token punctuation">,</span> gfn<span class="token punctuation">,</span> false<span class="token punctuation">,</span> <span class="token operator">&amp;</span>async<span class="token punctuation">,</span> write<span class="token punctuation">,</span> writable<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>async<span class="token punctuation">)</span>
    <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">/* *pfn has correct page already */</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prefault <span class="token operator">&amp;&amp;</span> <span class="token function">kvm_can_do_async_pf</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kvm_find_async_pf_gfn</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> gfn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">kvm_make_request</span><span class="token punctuation">(</span>KVM_REQ_APF_HALT<span class="token punctuation">,</span> vcpu<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> true<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">kvm_arch_setup_async_pf</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> gva<span class="token punctuation">,</span> gfn<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> true<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token operator">*</span>pfn <span class="token operator">=</span> <span class="token function">__gfn_to_pfn_memslot</span><span class="token punctuation">(</span>slot<span class="token punctuation">,</span> gfn<span class="token punctuation">,</span> false<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> write<span class="token punctuation">,</span> writable<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 try_async_pf 中，要想得到 pfn，也即物理页的页号，会先通过 kvm_vcpu_gfn_to_memslot，根据客户机的物理地址对应的页号找到内存条，然后调用 __gfn_to_pfn_memslot，根据内存条找到 pfn。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">kvm_pfn_t</span> <span class="token function">__gfn_to_pfn_memslot</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_memory_slot</span> <span class="token operator">*</span>slot<span class="token punctuation">,</span> <span class="token class-name">gfn_t</span> gfn<span class="token punctuation">,</span>bool atomic<span class="token punctuation">,</span> bool <span class="token operator">*</span>async<span class="token punctuation">,</span> bool write_fault<span class="token punctuation">,</span>bool <span class="token operator">*</span>writable<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> addr <span class="token operator">=</span> <span class="token function">__gfn_to_hva_many</span><span class="token punctuation">(</span>slot<span class="token punctuation">,</span> gfn<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> write_fault<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token function">hva_to_pfn</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> atomic<span class="token punctuation">,</span> async<span class="token punctuation">,</span> write_fault<span class="token punctuation">,</span>
        writable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>__gfn_to_pfn_memslot</code> 中，我们会调用 <code>__gfn_to_hva_many</code>，从客户机物理地址对应的页号，得到宿主机虚拟地址 hva，然后从宿主机虚拟地址到宿主机物理地址，调用的是 hva_to_pfn。</p><p>hva_to_pfn 会调用 hva_to_pfn_slow。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hva_to_pfn_slow</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> addr<span class="token punctuation">,</span> bool <span class="token operator">*</span>async<span class="token punctuation">,</span> bool write_fault<span class="token punctuation">,</span>
         bool <span class="token operator">*</span>writable<span class="token punctuation">,</span> <span class="token class-name">kvm_pfn_t</span> <span class="token operator">*</span>pfn<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> npages <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>async<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    npages <span class="token operator">=</span> <span class="token function">get_user_page_nowait</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> write_fault<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    npages <span class="token operator">=</span> <span class="token function">get_user_pages_unlocked</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> page<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token operator">*</span>pfn <span class="token operator">=</span> <span class="token function">page_to_pfn</span><span class="token punctuation">(</span>page<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> npages<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 hva_to_pfn_slow 中，我们要先调用 get_user_page_nowait，得到一个物理页面，然后再调用 page_to_pfn 将物理页面转换成为物理页号。</p><p>无论是哪一种 get_user_pages_XXX，最终都会调用 __get_user_pages 函数。这里面会调用 faultin_page，在 faultin_page 中我们会调用 handle_mm_fault。看到这个是不是很熟悉？这就是咱们内存管理那一章讲的缺页异常的逻辑，分配一个物理内存。</p><p>至此，try_async_pf 得到了物理页面，并且转换为对应的物理页号。</p><p>接下来，__direct_map 会关联客户机物理页号和宿主机物理页号。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">__direct_map</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_vcpu</span> <span class="token operator">*</span>vcpu<span class="token punctuation">,</span> <span class="token keyword">int</span> write<span class="token punctuation">,</span> <span class="token keyword">int</span> map_writable<span class="token punctuation">,</span>
      <span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token class-name">gfn_t</span> gfn<span class="token punctuation">,</span> <span class="token class-name">kvm_pfn_t</span> pfn<span class="token punctuation">,</span> bool prefault<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_shadow_walk_iterator</span> iterator<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kvm_mmu_page</span> <span class="token operator">*</span>sp<span class="token punctuation">;</span>
  <span class="token keyword">int</span> emulate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">gfn_t</span> pseudo_gfn<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">VALID_PAGE</span><span class="token punctuation">(</span>vcpu<span class="token operator">-&gt;</span>arch<span class="token punctuation">.</span>mmu<span class="token punctuation">.</span>root_hpa<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">for_each_shadow_entry</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> <span class="token punctuation">(</span>u64<span class="token punctuation">)</span>gfn <span class="token operator">&lt;&lt;</span> PAGE_SHIFT<span class="token punctuation">,</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span>level <span class="token operator">==</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      emulate <span class="token operator">=</span> <span class="token function">mmu_set_spte</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> iterator<span class="token punctuation">.</span>sptep<span class="token punctuation">,</span> ACC_ALL<span class="token punctuation">,</span>
                 write<span class="token punctuation">,</span> level<span class="token punctuation">,</span> gfn<span class="token punctuation">,</span> pfn<span class="token punctuation">,</span> prefault<span class="token punctuation">,</span>
                 map_writable<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">direct_pte_prefetch</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> iterator<span class="token punctuation">.</span>sptep<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">++</span>vcpu<span class="token operator">-&gt;</span>stat<span class="token punctuation">.</span>pf_fixed<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">drop_large_spte</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> iterator<span class="token punctuation">.</span>sptep<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_shadow_present_pte</span><span class="token punctuation">(</span><span class="token operator">*</span>iterator<span class="token punctuation">.</span>sptep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      u64 base_addr <span class="token operator">=</span> iterator<span class="token punctuation">.</span>addr<span class="token punctuation">;</span>

      base_addr <span class="token operator">&amp;=</span> <span class="token function">PT64_LVL_ADDR_MASK</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
      pseudo_gfn <span class="token operator">=</span> base_addr <span class="token operator">&gt;&gt;</span> PAGE_SHIFT<span class="token punctuation">;</span>
      sp <span class="token operator">=</span> <span class="token function">kvm_mmu_get_page</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> pseudo_gfn<span class="token punctuation">,</span> iterator<span class="token punctuation">.</span>addr<span class="token punctuation">,</span>
                iterator<span class="token punctuation">.</span>level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> ACC_ALL<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">link_shadow_page</span><span class="token punctuation">(</span>vcpu<span class="token punctuation">,</span> iterator<span class="token punctuation">.</span>sptep<span class="token punctuation">,</span> sp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> emulate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>__direct_map 首先判断页表的根是否存在，当然存在，我们刚才初始化了。</p><p>接下来是 for_each_shadow_entry 一个循环。每一个循环中，先是会判断需要映射的 level，是否正是当前循环的这个 iterator.level。如果是，则说明是叶子节点，直接映射真正的物理页面 pfn，然后退出。接着是非叶子节点的情形，判断如果这一项指向的页表项不存在，就要建立页表项，通过 kvm_mmu_get_page 得到保存页表项的页面，然后将这一项指向下一级的页表页面。</p><p>至此，内存映射就结束了。</p><p><strong>总结时刻</strong></p><p>我们这里来总结一下，虚拟机的内存管理也是需要用户态的 qemu 和内核态的 KVM 共同完成。为了加速内存映射，需要借助硬件的 EPT 技术。</p><p>在用户态 qemu 中，有一个结构 AddressSpace address_space_memory 来表示虚拟机的系统内存，这个内存可能包含多个内存区域 struct MemoryRegion，组成树形结构，指向由 mmap 分配的虚拟内存。</p><p>在 AddressSpace 结构中，有一个 struct KVMMemoryListener，当有新的内存区域添加的时候，会被通知调用 kvm_region_add 来通知内核。</p><p>在用户态 qemu 中，对于虚拟机有一个结构 struct KVMState 表示这个虚拟机，这个结构会指向一个数组的 struct KVMSlot 表示这个虚拟机的多个内存条，KVMSlot 中有一个 void *ram 指针指向 mmap 分配的那块虚拟内存。</p><p>kvm_region_add 是通过 ioctl 来通知内核 KVM 的，会给内核 KVM 发送一个 KVM_SET_USER_MEMORY_REGION 消息，表示用户态 qemu 添加了一个内存区域，内核 KVM 也应该添加一个相应的内存区域。</p><p>和用户态 qemu 对应的内核 KVM，对于虚拟机有一个结构 struct kvm 表示这个虚拟机，这个结构会指向一个数组的 struct kvm_memory_slot 表示这个虚拟机的多个内存条，kvm_memory_slot 中有起始页号，页面数目，表示这个虚拟机的物理内存空间。</p><p>虚拟机的物理内存空间里面的页面当然不是一开始就映射到物理页面的，只有当虚拟机的内存被访问的时候，也即 mmap 分配的虚拟内存空间被访问的时候，先查看 EPT 页表，是否已经映射过，如果已经映射过，则经过四级页表映射，就能访问到物理页面。</p><p>如果没有映射过，则虚拟机会通过 VM-Exit 指令回到宿主机模式，通过 handle_ept_violation 补充页表映射。先是通过 handle_mm_fault 为虚拟机的物理内存空间分配真正的物理页面，然后通过 __direct_map 添加 EPT 页表映射。</p><figure><img src="`+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>课堂练习</strong></p><p>这一节，影子页表我们没有深入去讲，你能自己研究一下，它是如何实现的吗？</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p>',111),l=[c];function i(u,r){return s(),a("div",null,l)}const m=n(e,[["render",i],["__file","N52-内存虚拟化.html.vue"]]);export{m as default};
