import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as s,c as r,a as t,b as e,e as n,d as p}from"./app-cdabc73c.js";const g="/assets/640-1691476783080-27-377c3fa3.png",c="/assets/640-1691476783081-28-cbc53b3a.png",d="/assets/640-1691476783081-29-a22addd6.png",l="/assets/640-1691476783081-30-127c1edb.png",u="/assets/640-1691476783081-31-77252313.png",_="/assets/640-1691476783081-32-ff33a23a.png",m="/assets/640-1691476783081-33-a1b24520.png",f="/assets/640-1691476783081-34-08225600.png",h={},b=t("h1",{id:"_31-白泽带你读论文丨fuse-finding-file-upload-bugs-via-penetration-testing",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_31-白泽带你读论文丨fuse-finding-file-upload-bugs-via-penetration-testing","aria-hidden":"true"},"#"),e(" 31-白泽带你读论文丨FUSE: Finding File Upload Bugs via Penetration Testing")],-1),U=t("p",null,[t("strong",null,"FUSE: Finding File Upload Bugs via Penetration Testing")],-1),F=t("p",null,"论文链接：",-1),E={href:"https://www.ndss-symposium.org/wp-content/uploads/2020/02/23126.pdf",target:"_blank",rel:"noopener noreferrer"},S=t("p",null,"开源项目地址：",-1),w={href:"https://github.com/WSP-LAB/FUSE",target:"_blank",rel:"noopener noreferrer"},x=p('<p>本文发表在The Network and Distributed System Security Symposium(NDSS 2020)，两个共同一作分别是来自The Affiliated Institute of ETRI的Taekjin Lee和来自School of Computing, KAIST的Seongil Wi。</p><h2 id="_1-主要内容" tabindex="-1"><a class="header-anchor" href="#_1-主要内容" aria-hidden="true">#</a> <strong>1.主要内容</strong></h2><p>共享用户上传的内容已经成为现代web应用事实上的标准特性。Facebook、ins以及Twitter越来越多地吸引用户上传他们的照片、影像以及文字。与此同时，文件上传功能也带来了安全风险，攻击者可以将任意文件上传到目标服务器，并利用它作为进一步破坏目标系统的跳板。因此，web应用程序开发人员必须防止攻击者滥用上传功能。一种泛用的缓解方法是使用上传文件过滤检查。无限制文件上传(UFU)漏洞利用了服务器端web应用程序中上传文件过滤检查的漏洞来达到上传文件的目的。攻击者可以通过UFU漏洞上传一个恶意文件。而一旦该上传文件可以通过访问URL远程执行，该漏洞就被称为<em>无限制可执行文件上传漏洞（UEFU）</em>，文件上传漏洞具有极大的危害。</p><p>因此在本文中，作者设计了基于模糊测试思想的渗透测试工具FUSE。FUSE使用了13个用于对原始文件进行特定修改的mutation，生成大量的测试用例，对web应用提供的上传功能点进行模糊测试。并根据最后的访问返回结果判断是否能正常执行该上传文件，进而判断上传功能点是否存在U（E）FU漏洞。通过精心设计mutation，相比于现有的UploadScanner和Fuxploider工具，FUSE找到了更多的文件上传漏洞。</p><p>最后作者在本地搭建了web服务器，从NAVEX所使用的数据集、W3Techs以及GitHub上获取了33个web应用进行了测试，从中发现了30个UEFU漏洞和55个UFU漏洞，其中有15个获得了厂商的CVE编号。</p><h2 id="_2-设计与实现" tabindex="-1"><a class="header-anchor" href="#_2-设计与实现" aria-hidden="true">#</a> <strong>2.设计与实现</strong></h2><figure><img src="'+g+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>FUSE基于FUZZ思想进行设计，其工作流程如上图所示。该系统接收两个输入，分别是四个seed上传文件和对应web应用的配置文件，输出的是对应的文件上传漏洞的payload。整个系统可以分为以下三个模块：</p><p><strong>a)CHAIN COORDINATOR</strong>:链协调器组件根据输入的种子文件的不同，给出能够对种子文件施加的预定义的mutation操作列表。本文所使用的mutation以及它们针对的种子文件类型如下表：</p><figure><img src="'+c+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>M1-M13即为作者选择的mutation，每个mutation会对种子文件的上传请求进行修改，如M1会在上传请求的content处添加预定义的文件头；M3改变了上传请求中的content-type类型；M5将PHP文件的长标签&lt;?php修改为&lt;?。</p><p>下面是mutation操作列表的生成过程，如当种子文件为HTML文件，且需要对该文件实施m1到m3这三个mutation操作时，此时的mutation列表就是一个包含m1-m3的全排列以及空集。</p><figure><img src="'+d+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在这一过程中，链协调器删除所有包含已经成功绕过文件上传过滤的mutation的组合元素，从而提升FUSE的工作效率。</p><figure><img src="'+l+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>b)UPLOAD AGENT</strong>:这一部分是整个系统的核心，上传代理组件接收链协调器组件传递的mutation列表以及种子文件，同时根据对应的web应用配置文件完成身份认证等先期工作。之后该组件对所接收的种子文件施加列表中指示的mutation操作，并向目标web应用发送上传请求。最后将返回结果发送给上传验证器进行验证。如下图所示，6、7两行代码完成了核心操作，对上传请求循环执行mutation列表中的修改操作并向目标web应用发出上传请求。</p><figure><img src="'+u+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p><strong>c)UPLOAD VALIDATOR</strong>:上传验证器用于验证文件是否上传成功以及是否成功执行。该组件首先利用定义在配置文件中的正则表达式（success_re，该参数用于指示响应中的上传成功模式）检查在默认情况下，上传请求的响应是否不包含任何错误消息。在确定文件成功上传后，上传验证器针对不同的web应用，采用三种策略获取上传文件的URL并进行访问：文件保存路径为公共URL+文件名、文件保存路径在response中返回以及在目标web服务器上部署文件监视器，返回创建文件的路径。上传验证器访问获取的URL并与原种子文件的执行行为进行比较。如果行为一致，则认为发现一个任意可执行文件上传漏洞。</p><h2 id="_3-实验评估" tabindex="-1"><a class="header-anchor" href="#_3-实验评估" aria-hidden="true">#</a> <strong>3.实验评估</strong></h2><p>作者从NAVEX所使用的数据集、W3Techs以及GitHub上获取了33个web应用进行了测试。总体实验结果如下：</p><figure><img src="'+_+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>FUSE在23个应用程序中发现了30个可利用的UEFU漏洞，获得了176个不同的上传请求payload。这23个易受攻击的应用程序包括流行的PHP应用程序，如WordPress、Concrete5、OsCommerce2和ZenCart。据估计，部署这五种应用程序的网站数量从5600个到300万个不等。在30个应用程序中发现了55个UFU漏洞，其中630个不同的上传请求有效payload，根据实验结果发现有91%的应用至少存在一个文件上传漏洞。作者向这些厂商报告了30个文件上传漏洞，获得了15个cve编号。</p><p>作者还针对每一个mutation以及多个mutation组合的有效性进行了评估。下图中的结果显示，每个单独的mutation操作都至少成功实现了5次以上的文件上传，这说明单个的mutation设计是合理的。</p><figure><img src="'+m+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>超过400个有效的文件上传payload是通过组合2个及以上的mutation操作得到，因此作者认为mutation组合的选取也是合理的。</p><figure><img src="'+f+'" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>在时间开销上，最长的测试时间为325min，而最短的仅为1s，FUSE的时间开销也在可以忍受的范围之内。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> <strong>4.总结</strong></h2><p>FUSE是一款采用fuzz思想设计的渗透测试工具，作者在研究历年文件上传的漏洞报告以及CVE后设计了13个mutation操作，通过对种子文件的修改，在绕过web应用后端对上传文件的检查的同时，保留了上传文件的执行语义。在33个流行的web应用中发现了大量的文件上传漏洞。</p><p>本文的设计思路是易于理解的，作为一个fuzz工具，核心的问题就是如何生成大量高质量的测试用例。因此用于修改种子文件的mutation操作的设计至关重要，本文的亮点也集中在mutation的设计和利用上。但是对上传文件URL的获取存在缺陷，文件监视器依赖于对被测试服务器的权限，在渗透测试中过于鸡肋。同时未来可以通过分析网络流量中的from表单发掘更多文件上传点，扩展FUSE的使用范围。</p><p>总体来说，该方法相比于静态分析速度更快，效率更高。</p>',31);function y(T,L){const i=o("ExternalLinkIcon");return s(),r("div",null,[b,U,F,t("p",null,[t("a",E,[e("https://www.ndss-symposium.org/wp-content/uploads/2020/02/23126.pdf"),n(i)])]),S,t("p",null,[t("a",w,[e("https://github.com/WSP-LAB/FUSE"),n(i)])]),x])}const z=a(h,[["render",y],["__file","31-白泽带你读论文丨FUSE Finding File Upload Bugs via Penetration Testing.html.vue"]]);export{z as default};
