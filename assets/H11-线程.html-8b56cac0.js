import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,b as s,e as t,d as a}from"./app-cdabc73c.js";const l="/assets/485ce8195d241c2a6930803286302e9e-59688550.jpg",r="/assets/e38c28b0972581d009ef16f1ebdee2bd-2e80b7f8.jpg",u="/assets/e7b06dcf431f388170ab0a79677ee43f-94cbed84.jpg",d="/assets/0ccf37aafa2b287363399e130b2726be-d01bd919.jpg",k="/assets/1d4e17fdb1860f7ca7f23bbe682d93f7-010ae59f.jpeg",m="/assets/02a774d7c0f83bb69fec4662622d6d58-62366d3f.png",v={},b=a('<h1 id="_11-线程-如何让复杂的项目并行执行" tabindex="-1"><a class="header-anchor" href="#_11-线程-如何让复杂的项目并行执行" aria-hidden="true">#</a> 11 | 线程：如何让复杂的项目并行执行？</h1><p>上一节我们讲了如何创建进程，这一节我们来看如何创建线程。</p><h2 id="为什么要有线程" tabindex="-1"><a class="header-anchor" href="#为什么要有线程" aria-hidden="true">#</a> 为什么要有线程？</h2><p>其实，对于任何一个进程来讲，即便我们没有主动去创建线程，进程也是默认有一个主线程的。线程是负责执行二进制指令的，它会根据项目执行计划书，一行一行执行下去。<strong>进程要比<code>线程</code>管的宽多了，除了<code>执行指令</code>之外，内存、文件系统等等都要它来管</strong>。</p><p>所以，<strong>进程相当于一个项目，而线程就是为了完成项目需求，而建立的一个个开发任务</strong>。默认情况下，你可以建一个大的任务，就是完成某某功能，然后交给一个人让它从头做到尾，这就是主线程。但是有时候，你发现任务是可以拆解的，如果相关性没有非常大前后关联关系，就可以并行执行。</p><p>例如，你接到了一个开发任务，要开发 200 个页面，最后组成一个网站。这时候你就可以拆分成 20 个任务，每个任务 10 个页面，并行开发。都开发完了，再做一次整合，这肯定比依次开发 200 个页面快多了。</p><img src="'+l+`" alt="img" style="zoom:25%;"><p>那我们能不能成立多个项目组实现并行开发呢？当然可以了，只不过这样做有两个比较麻烦的地方。</p><p>第一个麻烦是，立项。涉及的部门比较多，总是劳师动众。你本来想的是，只要能并行执行任务就可以，不需要把会议室都搞成独立的。另一个麻烦是，项目组是独立的，会议室是独立的，很多事情就不受你控制了，例如一旦有了两个项目组，就会有沟通问题。</p><p>所以，使用<strong>进程实现并行执行</strong>的问题也有两个。</p><ol><li>第一，创建进程<strong>占用资源太多</strong>；</li><li>第二，<strong>进程之间的通信</strong>需要数据在不同的内存空间传来传去，<strong>无法共享</strong>。</li></ol><p>除了希望任务能够并行执行，有的时候，你作为项目管理人员，肯定要管控风险，因此还会预留一部分人作为应急小分队，来处理紧急的事情。</p><p>例如，主线程正在一行一行执行二进制命令，突然收到一个通知，要做一点小事情，应该停下主线程来做么？太耽误事情了，应该创建一个单独的线程，单独处理这些事件。</p><p>另外，咱们希望自己的公司越来越有竞争力。要想实现远大的目标，我们不能把所有人力都用在接项目上，应该预留一些人力来做技术积累，比如开发一些各个项目都能用到的共享库、框架等等。</p><p>在 Linux 中，有时候我们希望将前台的任务和后台的任务分开。因为有些任务是需要马上返回结果的，例如你输入了一个字符，不可能五分钟再显示出来；而有些任务是可以默默执行的，例如将本机的数据同步到服务器上去，这个就没刚才那么着急。因此这样两个任务就应该在不同的线程处理，以保证互不耽误。</p><h2 id="如何创建线程" tabindex="-1"><a class="header-anchor" href="#如何创建线程" aria-hidden="true">#</a> 如何创建线程？</h2><p>看来多线程还是有很多好处的。接下来我们来看一下，如何使用线程来干一件大事。</p><p>假如说，现在我们有 N 个非常大的视频需要下载，一个个下载需要的时间太长了。按照刚才的思路，我们可以拆分成 N 个任务，分给 N 个线程各自去下载。</p><p>我们知道，进程的执行是需要项目执行计划书的，那线程是一个项目小组，这个小组也应该有自己的项目执行计划书，也就是一个函数。我们将要执行的子任务放在这个函数里面，比如上面的下载任务。</p><p>这个函数参数是 void 类型的指针，用于接收任何类型的参数。我们就可以将要下载的文件的文件名通过这个指针传给它。</p><p>为了方便，我将代码整段都贴在这里，这样你把下面的代码放在一个文件里面就能成功编译。</p><p>当然，这里我们不是真的下载这个文件，而仅仅打印日志，并生成一个一百以内的随机数，作为下载时间返回。这样，每个子任务干活的同时在喊：“我正在下载，终于下载完了，用了多少时间。”</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_OF_TASKS</span> <span class="token expression"><span class="token number">5</span></span></span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">downloadfile</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>filename<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am downloading the file %s!\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">long</span> downloadtime <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I finish downloading the file within %d minutes!\\n&quot;</span><span class="token punctuation">,</span> downloadtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>downloadtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token keyword">char</span> files<span class="token punctuation">[</span>NUM_OF_TASKS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;file1.avi&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;file2.rmvb&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;file3.mp4&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;file4.wmv&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;file5.flv&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token class-name">pthread_t</span> threads<span class="token punctuation">[</span>NUM_OF_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span> rc<span class="token punctuation">;</span>
   <span class="token keyword">int</span> t<span class="token punctuation">;</span>
   <span class="token keyword">int</span> downloadtime<span class="token punctuation">;</span>

   <span class="token class-name">pthread_attr_t</span> thread_attr<span class="token punctuation">;</span>
   <span class="token function">pthread_attr_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread_attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">pthread_attr_setdetachstate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread_attr<span class="token punctuation">,</span>PTHREAD_CREATE_JOINABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>NUM_OF_TASKS<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;creating thread %d, please help me to download %s\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> files<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     rc <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threads<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>thread_attr<span class="token punctuation">,</span> downloadfile<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>files<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR; return code from pthread_create() is %d\\n&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>

   <span class="token function">pthread_attr_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread_attr<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>NUM_OF_TASKS<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token function">pthread_join</span><span class="token punctuation">(</span>threads<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>downloadtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Thread %d downloads the file %s in %d minutes.\\n&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">,</span>files<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span>downloadtime<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个运行中的线程可以调用 pthread_exit 退出线程。这个函数可以传入一个参数转换为 (void *) 类型。这是线程退出的返回值。</p><ul><li><p>接下来，我们来看主线程。在这里面，我列了五个文件名。</p></li><li><p>接下来声明了一个数组，里面有五个 <code>pthread_t</code> 类型的<mark>线程对象</mark>。</p></li><li><p>接下来，声明一个<mark>线程属性</mark> <code>pthread_attr_t</code>。</p></li><li><p>我们通过 <code>pthread_attr_init</code> <mark>初始化这个属性</mark>，</p><ul><li>并且设置属性 <code>PTHREAD_CREATE_JOINABLE</code>。这表示<strong>将来主线程程等待这个线程的结束，并获取退出时的状态</strong>。</li></ul></li><li><p>接下来是一个循环。对于每一个文件和每一个线程，可以调用 <code>pthread_create</code> <mark>创建线程</mark>。一共有四个参数，</p><ol><li>第一个参数是<mark>线程对象</mark>，</li><li>第二个参数是<mark>线程的属性</mark>，</li><li>第三个参数是<mark>线程运行函数</mark>，</li><li>第四个参数是<mark>线程运行函数的参数</mark>。 <ul><li>主线程就是通过第四个参数，将自己的任务派给子线程。</li></ul></li></ol></li></ul><p>任务分配完毕，每个线程下载一个文件，接下来主线程要做的事情就是等待这些子任务完成。<strong>当一个线程退出的时候，就会发送信号给其他所有同进程的线程</strong>。有一个线程使用 pthread_join 获取这个线程退出的返回值。线程的返回值通过 pthread_join 传给主线程，这样子线程就将自己下载文件所耗费的时间，告诉给主线程。</p><p>好了，程序写完了，开始编译。多线程程序要依赖于 <mark>libpthread.so</mark>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc download.c <span class="token parameter variable">-lpthread</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译好了，执行一下，就能得到下面的结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ./a.out</span>
creating thread <span class="token number">0</span>, please <span class="token builtin class-name">help</span> me to download file1.avi
creating thread <span class="token number">1</span>, please <span class="token builtin class-name">help</span> me to download file2.rmvb
I am downloading the <span class="token function">file</span> file1.avi<span class="token operator">!</span>
creating thread <span class="token number">2</span>, please <span class="token builtin class-name">help</span> me to download file3.mp4
I am downloading the <span class="token function">file</span> file2.rmvb<span class="token operator">!</span>
creating thread <span class="token number">3</span>, please <span class="token builtin class-name">help</span> me to download file4.wmv
I am downloading the <span class="token function">file</span> file3.mp4<span class="token operator">!</span>
creating thread <span class="token number">4</span>, please <span class="token builtin class-name">help</span> me to download file5.flv
I am downloading the <span class="token function">file</span> file4.wmv<span class="token operator">!</span>
I am downloading the <span class="token function">file</span> file5.flv<span class="token operator">!</span>
I finish downloading the <span class="token function">file</span> within <span class="token number">83</span> minutes<span class="token operator">!</span>
I finish downloading the <span class="token function">file</span> within <span class="token number">77</span> minutes<span class="token operator">!</span>
I finish downloading the <span class="token function">file</span> within <span class="token number">86</span> minutes<span class="token operator">!</span>
I finish downloading the <span class="token function">file</span> within <span class="token number">15</span> minutes<span class="token operator">!</span>
I finish downloading the <span class="token function">file</span> within <span class="token number">93</span> minutes<span class="token operator">!</span>
Thread <span class="token number">0</span> downloads the <span class="token function">file</span> file1.avi <span class="token keyword">in</span> <span class="token number">83</span> minutes.
Thread <span class="token number">1</span> downloads the <span class="token function">file</span> file2.rmvb <span class="token keyword">in</span> <span class="token number">86</span> minutes.
Thread <span class="token number">2</span> downloads the <span class="token function">file</span> file3.mp4 <span class="token keyword">in</span> <span class="token number">77</span> minutes.
Thread <span class="token number">3</span> downloads the <span class="token function">file</span> file4.wmv <span class="token keyword">in</span> <span class="token number">93</span> minutes.
Thread <span class="token number">4</span> downloads the <span class="token function">file</span> file5.flv <span class="token keyword">in</span> <span class="token number">15</span> minutes.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一张图总结" tabindex="-1"><a class="header-anchor" href="#一张图总结" aria-hidden="true">#</a> 一张图总结</h2><p>这里我们画一张图总结一下，一个普通线程的创建和运行过程。</p><img src="`+r+'" alt="img" style="zoom:25%;"><h2 id="线程的数据" tabindex="-1"><a class="header-anchor" href="#线程的数据" aria-hidden="true">#</a> 线程的数据</h2><p>线程可以将项目并行起来，加快进度，但是也带来的负面影响，过程并行起来了，那数据呢？</p><p>我们把线程访问的数据细分成三类。下面我们一一来看。</p><img src="'+u+`" alt="img" style="zoom:25%;"><h3 id="_1-线程栈上的本地数据-局部变量" tabindex="-1"><a class="header-anchor" href="#_1-线程栈上的本地数据-局部变量" aria-hidden="true">#</a> 1. 线程栈上的本地数据(局部变量)</h3><p>第一类是**<code>线程栈上的本地数据</code>**，比如函数执行过程中的<mark>局部变量</mark>。前面我们说过，函数的调用会使用栈的模型，这在线程里面是一样的。只不过<mark>每个线程</mark>都有<mark>自己的栈空间</mark>。</p><p>栈的大小可以通过命令 <code>ulimit -a</code> 查看，默认情况下线程栈大小为 8192（8MB）。我们可以使用命令 <code>ulimit -s</code> 修改。</p><p>对于线程栈，可以通过下面这个函数 <code>pthread_attr_t</code>，修改线程栈的大小。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_attr_setstacksize</span><span class="token punctuation">(</span><span class="token class-name">pthread_attr_t</span> <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> stacksize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>主线程在内存中有一个栈空间，其他线程栈也拥有<strong>独立的栈空间</strong>。</li><li>为了避免线程之间的栈空间踩踏，线程栈之间还会有<strong>小块区域，用来隔离保护</strong>各自的栈空间。一旦另一个线程踏入到这个隔离区，就会引发段错误。</li></ol><h3 id="_2-在整个进程里共享的全局数据" tabindex="-1"><a class="header-anchor" href="#_2-在整个进程里共享的全局数据" aria-hidden="true">#</a> 2. 在整个进程里共享的全局数据</h3><p>第二类数据就是**<code>在整个进程里共享的全局数据</code>**。例如<mark>全局变量</mark>，虽然在不同进程中是隔离的，但是在一个进程中是共享的。如果同一个全局变量，两个线程一起修改，那肯定会有问题，有可能把数据改的面目全非。这就需要有一种机制来保护他们，比如你先用我再用。这一节的最后，我们专门来谈这个问题。</p><h3 id="_3-线程私有数据" tabindex="-1"><a class="header-anchor" href="#_3-线程私有数据" aria-hidden="true">#</a> 3. 线程私有数据</h3><p>那线程能不能像进程一样，也有自己的私有数据呢？如果想声明一个线程级别，而非进程级别的全局变量，有没有什么办法呢？虽然咱们都是一个大组，分成小组，也应该有点隐私。这就是第三类数据，<strong><code>线程私有数据</code></strong>（Thread Specific Data），可以通过以下函数创建：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_key_create</span><span class="token punctuation">(</span><span class="token class-name">pthread_key_t</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>destructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到，创建一个 key，伴随着一个析构函数。</p><p>key 一旦被创建，所有线程都可以访问它，但各线程可根据自己的需要往 key 中填入不同的值，这就相当于提供了一个同名而不同值的全局变量。</p><p>我们可以通过下面的函数设置 key 对应的 value。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">pthread_setspecific</span><span class="token punctuation">(</span><span class="token class-name">pthread_key_t</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们还可以通过下面的函数获取 key 对应的 value。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">pthread_getspecific</span><span class="token punctuation">(</span><span class="token class-name">pthread_key_t</span> key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而等到线程退出的时候，就会调用析构函数释放 value。</p><h2 id="数据的保护" tabindex="-1"><a class="header-anchor" href="#数据的保护" aria-hidden="true">#</a> 数据的保护</h2><p>接下来，我们来看共享的数据保护问题。</p><h3 id="互斥-锁-mutex" tabindex="-1"><a class="header-anchor" href="#互斥-锁-mutex" aria-hidden="true">#</a> 互斥/锁/Mutex</h3><p>我们先来看一种方式，<strong>Mutex</strong>，全称 Mutual Exclusion，中文叫<strong>互斥</strong>。顾名思义，有你没我，有我没你。它的模式就是在共享数据访问的时候，去申请加把锁，谁先拿到锁，谁就拿到了访问权限，其他人就只好在门外等着，等这个人访问结束，把锁打开，其他人再去争夺，还是遵循谁先拿到谁访问。</p><p>我这里构建了一个“转账”的场景。相关的代码我放到这里，你可以看看。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_OF_TASKS</span> <span class="token expression"><span class="token number">5</span></span></span>

<span class="token keyword">int</span> money_of_tom <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> money_of_jerry <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">//第一次运行去掉下面这行</span>
<span class="token class-name">pthread_mutex_t</span> g_money_lock<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>notused<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">pthread_t</span> tid <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Thread %u is transfering money!\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//第一次运行去掉下面这行</span>
  <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_money_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  money_of_tom<span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  money_of_jerry<span class="token operator">-=</span><span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token comment">//第一次运行去掉下面这行</span>
  <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_money_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Thread %u finish transfering money!\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">pthread_t</span> threads<span class="token punctuation">[</span>NUM_OF_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> rc<span class="token punctuation">;</span>
  <span class="token keyword">int</span> t<span class="token punctuation">;</span>
  <span class="token comment">//第一次运行去掉下面这行</span>
  <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_money_lock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>NUM_OF_TASKS<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    rc <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threads<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> transfer<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR; return code from pthread_create() is %d\\n&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//第一次运行去掉下面这行</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_money_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;money_of_tom + money_of_jerry = %d\\n&quot;</span><span class="token punctuation">,</span> money_of_tom <span class="token operator">+</span> money_of_jerry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//第一次运行去掉下面这行</span>
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_money_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//第一次运行去掉下面这行</span>
  <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_money_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里说，有两个员工 Tom 和 Jerry，公司食堂的饭卡里面各自有 100 元，并行启动 5 个线程，都是 Jerry 转 10 元给 Tom，主线程不断打印 Tom 和 Jerry 的资金之和。按说，这样的话，总和应该永远是 200 元。</p><p>在上面的程序中，我们先去掉 mutex 相关的行，就像注释里面写的那样。在没有锁的保护下，在 Tom 的账户里面加上 10 元，在 Jerry 的账户里面减去 10 元，这不是一个原子操作。</p><p>我们来编译一下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>gcc mutex.c <span class="token parameter variable">-lpthread</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后运行一下，就看到了下面这样的结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@deployer createthread<span class="token punctuation">]</span><span class="token comment"># ./a.out</span>
Thread <span class="token number">508479232</span> is transfering money<span class="token operator">!</span>
Thread <span class="token number">491693824</span> is transfering money<span class="token operator">!</span>
Thread <span class="token number">500086528</span> is transfering money<span class="token operator">!</span>
Thread <span class="token number">483301120</span> is transfering money<span class="token operator">!</span>
Thread <span class="token number">516871936</span> is transfering money<span class="token operator">!</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">220</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">220</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">230</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">240</span>
Thread <span class="token number">483301120</span> finish transfering money<span class="token operator">!</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">240</span>
Thread <span class="token number">508479232</span> finish transfering money<span class="token operator">!</span>
Thread <span class="token number">500086528</span> finish transfering money<span class="token operator">!</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">220</span>
Thread <span class="token number">516871936</span> finish transfering money<span class="token operator">!</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">210</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">210</span>
Thread <span class="token number">491693824</span> finish transfering money<span class="token operator">!</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，中间有很多状态不正确，比如两个人的账户之和出现了超过 200 的情况，也就是 Tom 转入了，Jerry 还没转出。</p><p>接下来我们在上面的代码里面，加上 mutex，然后编译、运行，就得到了下面的结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@deployer createthread<span class="token punctuation">]</span><span class="token comment"># ./a.out</span>
Thread <span class="token number">568162048</span> is transfering money<span class="token operator">!</span>
Thread <span class="token number">576554752</span> is transfering money<span class="token operator">!</span>
Thread <span class="token number">551376640</span> is transfering money<span class="token operator">!</span>
Thread <span class="token number">542983936</span> is transfering money<span class="token operator">!</span>
Thread <span class="token number">559769344</span> is transfering money<span class="token operator">!</span>
Thread <span class="token number">568162048</span> finish transfering money<span class="token operator">!</span>
Thread <span class="token number">576554752</span> finish transfering money<span class="token operator">!</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
Thread <span class="token number">542983936</span> finish transfering money<span class="token operator">!</span>
Thread <span class="token number">559769344</span> finish transfering money<span class="token operator">!</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
Thread <span class="token number">551376640</span> finish transfering money<span class="token operator">!</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
money_of_tom + money_of_jerry <span class="token operator">=</span> <span class="token number">200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个结果就正常了。两个账号之和永远是 200。这下你看到锁的作用了吧？</p><p>使用 Mutex，首先要使用 pthread_mutex_init 函数初始化这个 mutex，初始化后，就可以用它来保护共享变量了。</p><p>pthread_mutex_lock() 就是去抢那把锁的函数，如果抢到了，就可以执行下一行程序，对共享变量进行访问；如果没抢到，就被阻塞在那里等待。</p><p>如果不想被阻塞，可以使用 pthread_mutex_trylock 去抢那把锁，如果抢到了，就可以执行下一行程序，对共享变量进行访问；如果没抢到，不会被阻塞，而是返回一个错误码。</p><p>当共享数据访问结束了，别忘了使用 pthread_mutex_unlock 释放锁，让给其他人使用，最终调用 pthread_mutex_destroy 销毁掉这把锁。</p><h3 id="mutex的使用流程" tabindex="-1"><a class="header-anchor" href="#mutex的使用流程" aria-hidden="true">#</a> # Mutex的使用流程</h3><p>这里我画个图，总结一下 Mutex 的使用流程。</p><img src="`+d+`" alt="img" style="zoom:25%;"><h3 id="搭配条件变量-通知" tabindex="-1"><a class="header-anchor" href="#搭配条件变量-通知" aria-hidden="true">#</a> 搭配条件变量(通知)</h3><p>在使用 Mutex 的时候，</p><ul><li>有个问题是如果使用 <code>pthread_mutex_lock()</code>，那就需要一直在那里等着。</li><li>如果是 <code>pthread_mutex_trylock()</code>，就可以不用等着，去干点儿别的，</li><li>但是我怎么知道什么时候回来再试一下，是不是轮到我了呢？能不能在轮到我的时候，通知我一下呢？</li></ul><p>这其实就是<mark>条件变量</mark>，也就是说如果没事儿，就让大家歇着，有事儿了就去通知，别让人家没事儿就来问问，浪费大家的时间。</p><p>但是当它接到了通知，来操作共享资源的时候，还是需要抢互斥锁，因为可能很多人都受到了通知，都来访问了，所以**<code>条件变量</code>和<code>互斥锁</code>是配合使用的**。</p><p>我这里还是用一个场景给你解释。</p><p>你这个老板，招聘了三个员工，但是你不是有了活才去招聘员工，而是先把员工招来，没有活的时候员工需要在那里等着，一旦有了活，你要去通知他们，他们要去抢活干（为啥要抢活？因为有绩效呀！），干完了再等待，你再有活，再通知他们。</p><p>具体的样例代码我也放在这里。你可以直接编译运行。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_OF_TASKS</span> <span class="token expression"><span class="token number">3</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_TASK_QUEUE</span> <span class="token expression"><span class="token number">11</span></span></span>

<span class="token keyword">char</span> tasklist<span class="token punctuation">[</span>MAX_TASK_QUEUE<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&quot;ABCDEFGHIJ&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> quit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token class-name">pthread_mutex_t</span> g_task_lock<span class="token punctuation">;</span>
<span class="token class-name">pthread_cond_t</span> g_task_cv<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">coder</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>notused<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">pthread_t</span> tid <span class="token operator">=</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>quit<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>tail <span class="token operator">==</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>quit<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;No task now! Thread %u is waiting!\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_cv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_task_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Have task now! Thread %u is grabing the task !\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">char</span> task <span class="token operator">=</span> tasklist<span class="token punctuation">[</span>head<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Thread %u has a task %c now!\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Thread %u finish the task %c!\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>tid<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">pthread_t</span> threads<span class="token punctuation">[</span>NUM_OF_TASKS<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> rc<span class="token punctuation">;</span>
  <span class="token keyword">int</span> t<span class="token punctuation">;</span>

  <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_lock<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_cv<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">&lt;</span>NUM_OF_TASKS<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    rc <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>threads<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> coder<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rc<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR; return code from pthread_create() is %d\\n&quot;</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tail<span class="token operator">+=</span>t<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I am Boss, I assigned %d tasks, I notify all coders!\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_cv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  quit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_cv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_task_cv<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，我们创建了 10 个任务，每个任务一个字符，放在一个数组里面，另外有两个变量 head 和 tail，表示当前分配的工作从哪里开始，到哪里结束。如果 head 等于 tail，则当前的工作分配完毕；如果 tail 加 N，就是新分配了 N 个工作。</p><h3 id="使用流程-通知和抢任务" tabindex="-1"><a class="header-anchor" href="#使用流程-通知和抢任务" aria-hidden="true">#</a> # 使用流程: 通知和抢任务</h3><p>接下来声明的 pthread_mutex_t g_task_lock 和 pthread_cond_t g_task_cv，是用于<mark>通知和抢任务</mark>的，工作模式如下图所示：</p><img src="`+k+`" alt="img" style="zoom:25%;"><p>图中左边的就是员工的工作模式，对于每一个员工 coder，先要获取锁 pthread_mutex_lock，这样才能保证一个任务只分配给一个员工。</p><p>然后，我们要判断有没有任务，也就是说，head 和 tail 是否相等。如果不相等的话，就是有任务，则取出 head 位置代表的任务 task，然后将 head 加一，这样整个任务就给了这个员工，下个员工来抢活的时候，也需要获取锁，获取之后抢到的就是下一个任务了。当这个员工抢到任务后，pthread_mutex_unlock 解锁，让其他员工可以进来抢任务。抢到任务后就开始干活了，这里没有真正开始干活，而是 sleep，也就是摸鱼了 5 秒。</p><p>如果发现 head 和 tail 相当，也就是没有任务，则需要调用 pthread_cond_wait 进行等待，这个函数会把锁也作为变量传进去。这是因为等待的过程中需要解锁，要不然，你不干活，等待睡大觉，还把门给锁了，别人也干不了活，而且老板也没办法获取锁来分配任务。</p><p>一开始三个员工都是在等待的状态，因为初始化的时候，head 和 tail 相等都为零。</p><p>现在我们把目光聚焦到老板这里，也就是主线程上。它初始化了条件变量和锁，然后创建三个线程，也就是我们说的招聘了三个员工。</p><p>接下来要开始分配任务了，总共 10 个任务。老板分四批分配，第一批一个任务三个人抢，第二批两个任务，第三批三个任务，正好每人抢到一个，第四批四个任务，可能有一个员工抢到两个任务。这样三个员工，四批工作，经典的场景差不多都覆盖到了。</p><p>老板分配工作的时候，也是要先获取锁 pthread_mutex_lock，然后通过 tail 加一来分配任务，这个时候 head 和 tail 已经不一样了，但是这个时候三个员工还在 pthread_cond_wait 那里睡着呢，接下来老板要调用 pthread_cond_broadcast 通知所有的员工，“来活了，醒醒，起来干活”。</p><p>这个时候三个员工醒来后，先抢锁，生怕老板只分配了一个任务，让别人抢去。当然抢锁这个动作是 pthread_cond_wait 在收到通知的时候，自动做的，不需要我们另外写代码。</p><p>抢到锁的员工就通过 while 再次判断 head 和 tail 是否相同。这次因为有了任务，不相同了，所以就抢到了任务。而没有抢到任务的员工，由于抢锁失败，只好等待抢到任务的员工释放锁，抢到任务的员工在 tasklist 里面拿到任务后，将 head 加一，然后就释放锁。这个时候，另外两个员工才能从 pthread_cond_wait 中返回，然后也会再次通过 while 判断 head 和 tail 是否相同。不过已经晚了，任务都让人家抢走了，head 和 tail 又一样了，所以只好再次进入 pthread_cond_wait，接着等任务。</p><p>这里，我们只解析了第一批一个任务的工作的过程。如果运行上面的程序，可以得到下面的结果。我将整个过程在里面写了注释，你看起来就比较容易理解了。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">[</span>root@deployer createthread<span class="token punctuation">]</span># <span class="token punctuation">.</span><span class="token operator">/</span>a<span class="token punctuation">.</span>out
<span class="token comment">//招聘三个员工，一开始没有任务，大家睡大觉</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3491833600</span> is waiting<span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3483440896</span> is waiting<span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3475048192</span> is waiting<span class="token operator">!</span>
<span class="token comment">//老板开始分配任务了，第一批任务就一个，告诉三个员工醒来抢任务</span>
I am Boss<span class="token punctuation">,</span> I assigned <span class="token number">1</span> tasks<span class="token punctuation">,</span> I notify all coders<span class="token operator">!</span>
<span class="token comment">//员工一先发现有任务了，开始抢任务</span>
Have task now<span class="token operator">!</span> Thread <span class="token number">3491833600</span> is grabing the task <span class="token operator">!</span>
<span class="token comment">//员工一抢到了任务A，开始干活</span>
Thread <span class="token number">3491833600</span> has a task A now<span class="token operator">!</span> 
<span class="token comment">//员工二也发现有任务了，开始抢任务，不好意思，就一个任务，让人家抢走了，接着等吧</span>
Have task now<span class="token operator">!</span> Thread <span class="token number">3483440896</span> is grabing the task <span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3483440896</span> is waiting<span class="token operator">!</span>
<span class="token comment">//员工三也发现有任务了，开始抢任务，你比员工二还慢，接着等吧</span>
Have task now<span class="token operator">!</span> Thread <span class="token number">3475048192</span> is grabing the task <span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3475048192</span> is waiting<span class="token operator">!</span>
<span class="token comment">//员工一把任务做完了，又没有任务了，接着等待</span>
Thread <span class="token number">3491833600</span> finish the task A <span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3491833600</span> is waiting<span class="token operator">!</span>
<span class="token comment">//老板又有新任务了，这次是两个任务，叫醒他们</span>
I am Boss<span class="token punctuation">,</span> I assigned <span class="token number">2</span> tasks<span class="token punctuation">,</span> I notify all coders<span class="token operator">!</span>
<span class="token comment">//这次员工二比较积极，先开始抢，并且抢到了任务B</span>
Have task now<span class="token operator">!</span> Thread <span class="token number">3483440896</span> is grabing the task <span class="token operator">!</span>
Thread <span class="token number">3483440896</span> has a task B now<span class="token operator">!</span> 
<span class="token comment">//这次员工三也聪明了，赶紧抢，要不然没有年终奖了，终于抢到了任务C</span>
Have task now<span class="token operator">!</span> Thread <span class="token number">3475048192</span> is grabing the task <span class="token operator">!</span>
Thread <span class="token number">3475048192</span> has a task C now<span class="token operator">!</span> 
<span class="token comment">//员工一上次抢到了，这次抢的慢了，没有抢到，是不是飘了</span>
Have task now<span class="token operator">!</span> Thread <span class="token number">3491833600</span> is grabing the task <span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3491833600</span> is waiting<span class="token operator">!</span>
<span class="token comment">//员工二做完了任务B，没有任务了，接着等待</span>
Thread <span class="token number">3483440896</span> finish the task B <span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3483440896</span> is waiting<span class="token operator">!</span>
<span class="token comment">//员工三做完了任务C，没有任务了，接着等待</span>
Thread <span class="token number">3475048192</span> finish the task C <span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3475048192</span> is waiting<span class="token operator">!</span>
<span class="token comment">//又来任务了，这次是三个任务，人人有份</span>
I am Boss<span class="token punctuation">,</span> I assigned <span class="token number">3</span> tasks<span class="token punctuation">,</span> I notify all coders<span class="token operator">!</span>
<span class="token comment">//员工一抢到了任务D，员工二抢到了任务E，员工三抢到了任务F</span>
Have task now<span class="token operator">!</span> Thread <span class="token number">3491833600</span> is grabing the task <span class="token operator">!</span>
Thread <span class="token number">3491833600</span> has a task D now<span class="token operator">!</span> 
Have task now<span class="token operator">!</span> Thread <span class="token number">3483440896</span> is grabing the task <span class="token operator">!</span>
Thread <span class="token number">3483440896</span> has a task E now<span class="token operator">!</span> 
Have task now<span class="token operator">!</span> Thread <span class="token number">3475048192</span> is grabing the task <span class="token operator">!</span>
Thread <span class="token number">3475048192</span> has a task F now<span class="token operator">!</span> 
<span class="token comment">//三个员工都完成了，然后都又开始等待</span>
Thread <span class="token number">3491833600</span> finish the task D <span class="token operator">!</span>
Thread <span class="token number">3483440896</span> finish the task E <span class="token operator">!</span>
Thread <span class="token number">3475048192</span> finish the task F <span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3491833600</span> is waiting<span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3483440896</span> is waiting<span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3475048192</span> is waiting<span class="token operator">!</span>
<span class="token comment">//公司活越来越多了，来了四个任务，赶紧干呀</span>
I am Boss<span class="token punctuation">,</span> I assigned <span class="token number">4</span> tasks<span class="token punctuation">,</span> I notify all coders<span class="token operator">!</span>
<span class="token comment">//员工一抢到了任务G，员工二抢到了任务H，员工三抢到了任务I</span>
Have task now<span class="token operator">!</span> Thread <span class="token number">3491833600</span> is grabing the task <span class="token operator">!</span>
Thread <span class="token number">3491833600</span> has a task G now<span class="token operator">!</span> 
Have task now<span class="token operator">!</span> Thread <span class="token number">3483440896</span> is grabing the task <span class="token operator">!</span>
Thread <span class="token number">3483440896</span> has a task H now<span class="token operator">!</span> 
Have task now<span class="token operator">!</span> Thread <span class="token number">3475048192</span> is grabing the task <span class="token operator">!</span>
Thread <span class="token number">3475048192</span> has a task I now<span class="token operator">!</span> 
<span class="token comment">//员工一和员工三先做完了，发现还有一个任务开始抢</span>
Thread <span class="token number">3491833600</span> finish the task G <span class="token operator">!</span>
Thread <span class="token number">3475048192</span> finish the task I <span class="token operator">!</span>
<span class="token comment">//员工三没抢到，接着等</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3475048192</span> is waiting<span class="token operator">!</span>
<span class="token comment">//员工一抢到了任务J，多做了一个任务</span>
Thread <span class="token number">3491833600</span> has a task J now<span class="token operator">!</span> 
<span class="token comment">//员工二这才把任务H做完，黄花菜都凉了，接着等待吧</span>
Thread <span class="token number">3483440896</span> finish the task H <span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3483440896</span> is waiting<span class="token operator">!</span>
<span class="token comment">//员工一做完了任务J，接着等待</span>
Thread <span class="token number">3491833600</span> finish the task J <span class="token operator">!</span>
No task now<span class="token operator">!</span> Thread <span class="token number">3491833600</span> is waiting<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>这一节，我们讲了如何创建线程，线程都有哪些数据，如何对线程数据进行保护。</p><p>写多线程的程序是有套路的，我这里用一张图进行总结。你需要记住的是，创建线程的套路、mutex 使用的套路、条件变量使用的套路。</p>`,105),h=n("li",null,"线程复制执行二进制指令",-1),_=n("li",null,"多进程缺点: 创建进程占用资源多; 进程间通信需拷贝内存, 不能共享",-1),f=n("li",null,"线程相关操作",-1),g=n("li",null,"pthread_attr_t 线程属性, 用辅助函数初始化并设置值; 用完需要销毁",-1),y=n("li",null,"pthread_create 创建线程, 四个参数(线程对象, 属性, 运行函数, 运行参数)",-1),w={href:"http://libpthread.so",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,"一个线程退出, 会发送信号给 其他所有同进程的线程",-1),T=a("<li>线程中有三类数据</li><li>线程栈本地数据, 栈大小默认 8MB; 线程栈之间有保护间隔, 若误入会引发段错误 <ul><li>进程共享的全局数据</li><li>线程级别的全局变量(线程私有数据, pthread_key_create(key, destructer)); key 所有线程都可以访问, 可填入各自的值(同名不同值的全局变量)</li></ul></li><li>数据保护</li><li>Mutex(互斥), 初始化; lock(没抢到则阻塞)/trylock(没抢到则返回错误码); unlock; destroy <ul><li>条件变量(通知), 收到通知, 还是要抢锁(由 wait 函数执行); 因此条件变量与互斥锁配合使用</li><li>互斥锁所谓条件变量的参数, wait 函数会自动解锁/加锁</li><li>broadcast(通知); destroy</li></ul></li>",4),q=a('<figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="醍醐灌顶" tabindex="-1"><a class="header-anchor" href="#醍醐灌顶" aria-hidden="true">#</a> 醍醐灌顶</h2><blockquote><p>两个线程操作同一临界区时，通过互斥锁保护，若A线程已经加锁，B线程再加锁时候会被阻塞，直到A释放锁，B再获得锁运行，<mark><strong>进程B必须不停的</strong><mark>主动获得锁、检查条件、释放锁、再获得锁、再检查、再释放，一直到满足运行的条件的时候才可以（而此过程中其他线程一直在等待该线程的结束），这种方式是比较消耗系统的资源的。<code>而条件变量同样是阻塞，还需要通知才能唤醒</code>，线程被唤醒后，它将重新检查判断条件是否满足，如果还不满足，该线程就休眠了，应该仍阻塞在这里，等待条件满足后被唤醒，</mark><strong>节省了线程不断运行浪费的资源</strong></mark>。这个过程一般用while语句实现。当线程B发现被锁定的变量不满足条件时会自动的释放锁并把自身置于等待状态，让出CPU的控制权给其它线程。其它线程此时就有机会去进行操作，当修改完成后再通知那些由于条件不满足而陷入等待状态的线程。<code>这是一种通知模型的同步方式，大大的节省了CPU的计算资源，减少了线程之间的竞争，而且提高了线程之间的系统工作的效率。</code>这种同步方式就是条件变量。</p><p>这是网上的一段话。我觉得说的很清楚了。</p><p>如果学过java的话，其实就是线程之间的互斥和协作，<code>条件变量就是用来协作的</code>，对应java里的wait()和notify()函数。</p><p>我个人觉得读这个专栏必须有一定的基础理论，具体的说起码看过相关的书籍，了解个大概。如果只有一些语言的基础，没有看过相关计算机体系或者操作系统方面的书籍，看起来会很费劲，不知所云。就我自己来说，我看过于渊写的<code>《一个操作系统的实现》，《linux内核设计与实现》《现代操作系统》《intel汇编程序》《深入理解计算机系统》《unix高级环境编程》</code>等，尤其是于渊写的这本书，从计算机加电开始，一直到多进程，进程间通信，从汇编到c语言，都有完整的代码，都是作者自己亲手写的，可操作性极强。还有csapp（深入理解计算机系统）这本书，所有人公认的学计算机必须看的。还有很多，总之我想说的是自己必须去看书学习，仅仅想靠一个专栏的学习来了解一个东西是远远不够的。</p><p>话又说回来，你可能会问你看了这么多书，早应该精通了吧，还到这儿来干嘛？其实这就是我最大的问题，书看的太多，理论知道的不少，但是动手实践太少，就是所谓的眼高手低。而且不实践，看的多，忘的多。</p><ul><li>一方面是工作原因，除非去大公司，哪有机会让你实践底层的技术。</li><li>二是自己太懒，没有耐性，任何可用的东西都是一行行代码经过千锤百炼形成的。</li><li><strong><code>书看了不少仅仅满足了自己的求知欲，却没有弄出任何有用的东西。</code></strong></li></ul><p>来这儿也是想看看理论是如何通过一行行代码落地的，也学学作者的实践经验，加深一些概念的理解。</p><p>多看书没错，但效率比较低，从实践中不断总结，思考才是快速成长的正确方法。</p><p>道理知道很多，但还是过不好这一生。理论掌握不少，还是写不出有用的代码。悲催！</p></blockquote><blockquote><p>很多同学不理解这个BOSS给员工分任务的场景为什么要用条件变量，因为用互斥量也可以实现。员工等在互斥量上一样会进入睡眠，等BOSS释放互斥锁时也会唤醒这些员工。这样看来根本没有用条件变量的必要。</p><p>我们可以换一个思路，<code>如果不使用条件变量</code>，而且BOSS也不是一直生产任务，那么这时互斥量就会空闲出来，总会有一个员工能拿到锁，<code>员工线程这时候就会在while循环中不停的</code>获得锁，判断状态，释放锁，这样的话就会十分消耗cpu资源了。</p><ul><li>这时候我们可能会想到，<code>在while循环中加个睡眠，例如5秒</code>，<br> 也就是员工线程每隔5秒来执行一次获得锁，判断状态，释放锁的操作，这样就会减轻cpu资源的消耗。</li><li><code>但是实际应用场景中</code>，我们无法判断到底间隔几秒来执行一次这个获得锁，判断状态，释放锁的流程，<br> 时间长了可能影响吞吐量，时间短了会造成cpu利用率过高，</li><li><code>所以这时候引入了条件变量</code>，将主动查询方式改成了被动通知方式，效率也就上去了。</li></ul><p>文中的例子很容易让新手迷惑，我也不保证上述理解是对的，希望老师能够指点一二。</p></blockquote><blockquote><p>线程同步，什么时候只需要互斥，什么时候需要互斥 + 条件变量。其实这是两种场景。</p><p>第一种，只需要==<strong>互斥</strong>==的场景。<code>多个线程都知道自己要干什么，也就是说线程处理的逻辑不依赖其他线程，线程只需要启动，得到了锁，就可以开始干活</code>。举个例子，比如上厕所，一堆人等一个坑位，只要你抢到了坑位，就可以去上厕所，这个时候只需要一把锁就行。</p><p>第二种情况，需要==<strong>互斥 + 条件变量</strong>==。<code>线程启动以后，任务不是线程代码写死的，而是其他线程分发的</code>，就是 <mark>生产者和消费者模型</mark>，这个时候要加一个条件变量，有任务，我就干活，没任务我就睡觉。</p><p>那有人说，我只用互斥锁不行嘛？没事干的时候我直接释放锁不好嘛？当然可以，但是效率低，因为你释放了锁，其他人抢了锁，没任务的时候还是没任务，<code>白白浪费申请锁和释放锁的资源</code>。</p><p>总结一下，线程同步有两种。</p><ul><li>第一种只要互斥，线程只要抢到锁，有锁直接干活。</li><li>第二种互斥 + 条件变量，线程拿到锁，也不知道要干什么，等待其他线程分配任务，等待的条件就是条件变量。</li></ul></blockquote><blockquote><p>条件变量的使用应该也是有场景的，它主要是为了避免线程一直竞争锁而导致cpu占用高，但是它也是有代价的，线程被唤醒也是要消耗cpu资源的。<code>其实如果老板一直发任务，不会间隔很长时间才发新任务的话</code>，只用互斥锁就可以了</p></blockquote><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>这一节讲了多线程编程的套路，但是我没有对于每一个函数进行详细的讲解，相关的还有很多其他的函数可以调用，这需要你自己去学习。这里我给你推荐一本书 <code>《Programming with POSIX Threads》</code>，你可以系统地学习一下。另外，上面的代码，建议你一定要上手编译运行一下。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>线程栈上的本地数据和线程私有数据有什么本质区别，能否举例说明？谢谢<br> 作者回复: 相当于全局变量，可以在多个函数间共享，比如线程里面有多个函数</p>',11),N={href:"https://garlicspace.com/2019/06/20/posix-threads-api-%E6%95%B4%E7%90%86/",target:"_blank",rel:"noopener noreferrer"},j=a("<p>请问什么是用户级线程？内核级线程？在linux中都是用task_struct实现的吗？操作系统教材上说的“多个用户级线程运行在一个内核级线程上”指的是什么意思？ 困扰好久了，希望大家不吝赐教，谢谢<br> 作者回复: 用户线程对应<strong>内核的task_struct</strong>，有几种模式，linux是一个线程对应<strong>内核一个task_struct</strong>，操作系统原理也有多个线程对应<strong>内核一个task_struct</strong>的，只不过linux没有采取这种模式</p><p>其实看看Java里面JUC的源码，再来看这个并发组件，大概都能明白。因为Java底层也是依赖linux系统库</p><p>再说第二个例子, 不加锁情况下, 我这边在 main 函数的 for 里面加了 sleep 才会出现错误值, 如果不加, 则不会出现<br> 作者回复: 不加sleep就太快了，看不出来</p><p>最近也正好在看java的线程。看了这章才真正知道了什么是知识是相通的。<strong>java实现的机制和linux多线程简直如出一辙</strong>。受教了<br> 作者回复: <strong>java底层就是操作系统呀</strong></p><p>再次复习这篇文章，看懂这篇需要知道一件事：线程共享同一地址空间；另外推荐apue，里面的示例代码也很好</p><p><strong>pthread_cond_wait在等待的同时还会释放锁，这才给了主线程分派任务的机会</strong>。</p><p>为什么多线程都需要加一个sleep(10);<br> 作者回复: <strong>为了构建一个特殊的场景</strong></p><p>老师，请叫个问题的，子进程 和 线程 有什么的本质的区别呢？<br> 作者回复: <strong>不共享资源，尤其是内存空间，比如定义了一个全局变量a，同一个进程的线程能访问，另一个进程就访问不了</strong></p><blockquote><p>子进程已经是另外一个进程了</p></blockquote><p>老师我想问个问题 处理器 4核8线程 这个8是指的内核级线程的数量么?<br> 作者回复: <strong>不是，硬件的线程和软件不是一回事</strong></p>",10);function I(S,A){const e=o("ExternalLinkIcon");return c(),i("div",null,[b,n("blockquote",null,[n("ul",null,[h,_,f,n("li",null,[s("pthread_exit(A), A 是线程退出的返回值 "),n("ul",null,[g,y,n("li",null,[s("pthread_join 获取线程退出返回值, 多线程依赖 "),n("a",w,[s("libpthread.so"),t(e)])]),x])]),T])]),q,n("p",null,[s("看了下老师推荐的书，网上有找些资料，整理了下相关API example "),n("a",N,[s("https://garlicspace.com/2019/06/20/posix-threads-api-整理/"),t(e)])]),j])}const E=p(v,[["render",I],["__file","H11-线程.html.vue"]]);export{E as default};
