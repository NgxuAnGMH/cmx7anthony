import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as s,b as n,e as l,d as a}from"./app-cdabc73c.js";const u="/assets/9ce732cb22c49a8a26e870dddde66b69-f2f28f0a.jpeg",i="/assets/b64487a7b6b45393fdfa7e2d63e176ec-17046ac0.jpeg",r={},k=a('<h1 id="_55-理解disruptor-下-不需要换挡和踩刹车的cpu-有多快" tabindex="-1"><a class="header-anchor" href="#_55-理解disruptor-下-不需要换挡和踩刹车的cpu-有多快" aria-hidden="true">#</a> 55 | 理解Disruptor（下）：不需要换挡和踩刹车的CPU，有多快？</h1><p>上一讲，我们学习了一个精妙的想法，Disruptor 通过缓存行填充，来利用好 CPU 的高速缓存。不知道你做完课后思考题之后，有没有体会到高速缓存在实践中带来的速度提升呢？</p><p>不过，利用 CPU 高速缓存，只是 Disruptor“快”的一个因素，那今天我们就来看一看 Disruptor 快的另一个因素，也就是“<code>无锁</code>”，而尽可能发挥 CPU 本身的高速处理性能。</p><h2 id="缓慢的锁" tabindex="-1"><a class="header-anchor" href="#缓慢的锁" aria-hidden="true">#</a> 缓慢的锁</h2><p>Disruptor 作为一个高性能的生产者 - 消费者队列系统，一个核心的设计就是通过 RingBuffer 实现<code>一个无锁队列</code>。</p><p>上一讲里我们讲过，Java 里面的基础库里，就有像 LinkedBlockingQueue 这样的队列库。但是，这个队列库比起 Disruptor 里用的 RingBuffer 要慢上很多。慢的第一个原因我们说过，因为链表的数据在内存里面的布局对于高速缓存并不友好，而 RingBuffer 所使用的数组则不然。</p><img src="'+u+`" alt="img" style="zoom:25%;"><p>LinkedBlockingQueue 慢，有另外一个重要的因素，<em>那就是它对于锁的依赖</em>。在生产者 - 消费者模式里，我们可能有多个消费者，同样也可能有多个生产者。多个生产者都要往队列的尾指针里面添加新的任务，就会产生多个线程的竞争。于是，在做这个事情的时候，<em>生产者就需要拿到对于队列尾部的锁</em>。同样地，在多个消费者去消费队列头的时候，也就产生竞争。<em>同样消费者也要拿到锁</em>。</p><p>那只有一个生产者，或者一个消费者，我们是不是就没有这个锁竞争的问题了呢？很遗憾，答案还是否定的。一般来说，在生产者 - 消费者模式下，消费者要比生产者快。不然的话，队列会产生积压，队列里面的任务会越堆越多。</p><p>一方面，你会发现越来越多的任务没有能够及时完成；另一方面，我们的内存也会放不下。虽然生产者 - 消费者模型下，我们都有一个队列来作为缓冲区，但是大部分情况下，这个缓冲区里面是空的。也就是说，即使只有一个生产者和一个消费者者，这个生产者指向的队列尾和消费者指向的队列头是同一个节点。于是，这两个生产者和消费者之间一样会产生锁竞争。</p><p>在 LinkedBlockingQueue 上，<em>这个锁机制是通过 ReentrantLock 这个 Java 基础库来实现的</em>。这个锁是一个用 Java 在 JVM 上直接实现的加锁机制，<em>这个锁机制需要由 JVM 来进行裁决</em>。这个锁的争夺，会把没有拿到锁的线程挂起等待，<em>也就需要经过一次上下文切换</em>（Context Switch）。</p><p>不知道你还记不记得，我们在第 28 讲讲过的异常和中断，这里的上下文切换要做的和异常和中断里的是一样的。上下文切换的过程，需要把当前执行线程的寄存器等等的信息，<em>保存到线程栈里面</em>。而这个过程也必然意味着，<em>已经加载到高速缓存里面的指令或者数据</em>，又回到了主内存里面，会进一步拖慢我们的性能。</p><blockquote><p>ReentrantLock内部不也是CAS实现的吗<br> 作者回复: 并不是，ReentrantLock内部只是有CAS方法的调用而已，而这个调用是为了做状态检查和获取锁。<br> ReetrantLock最终会调用AbstractQueuedSynchronizer，并且会在拿不到锁的时候会有让当前节点sleep的过程。这个可以深入读一下ReetrantLock的源码。 本质上，ReentrantLock等于是在Java层面实现了一个跨平台的锁机制，它的底层调用用到了CAS方法而已。而不是直接基于CAS来设计队列。</p><p>ReentrantLock内部也有CAS的操作，只不过也会有Lock的操作。Disruptor直接使用CAS，是简化了操作。<br> 作者回复: 👍 ReetrantLock里面的CAS是作为调用方式，最终来实现一个JVM上跨平台的锁的</p></blockquote><h2 id="_1-测试验证" tabindex="-1"><a class="header-anchor" href="#_1-测试验证" aria-hidden="true">#</a> 1 测试验证</h2><p>我们可以按照 Disruptor 介绍资料里提到的 Benchmark，写一段代码来看看，是不是真是这样的。这里我放了一段 Java 代码，代码的逻辑很简单，就是把一个 long 类型的 counter，从 0 自增到 5 亿。一种方式是没有任何锁，另外一个方式是每次自增的时候都要去取一个锁。</p><p>你可以在自己的电脑上试试跑一下这个程序。在我这里，两个方式执行所需要的时间分别是 207 毫秒和 9603 毫秒，性能差出了将近 50 倍。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuwenhao<span class="token punctuation">.</span>perf<span class="token punctuation">.</span>jmm</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockBenchmark</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">long</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> max <span class="token operator">=</span> <span class="token number">500000000L</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>counter <span class="token operator">&lt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            counter<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Time spent is &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms without lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runIncrementWithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> max <span class="token operator">=</span> <span class="token number">500000000L</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>counter <span class="token operator">&lt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                counter<span class="token operator">++</span><span class="token punctuation">;</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Time spent is &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms with lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">runIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">runIncrementWithLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加锁和不加锁自增 counter</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Time spent is <span class="token number">207</span>ms without lock
Time spent is <span class="token number">9603</span>ms with lock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>性能差出将近 10 倍</p><h2 id="无锁的-ringbuffer" tabindex="-1"><a class="header-anchor" href="#无锁的-ringbuffer" aria-hidden="true">#</a> 无锁的 RingBuffer</h2><p>加锁很慢，所以 Disruptor 的解决方案就是“<code>无锁</code>”。这个“无锁”指的是<code>没有操作系统层面的锁</code>。实际上，Disruptor 还是利用了<code>一个 CPU 硬件支持的指令</code>，称之为 <code>CAS</code>（Compare And Swap，比较和交换）。在 Intel CPU 里面，这个对应的指令就是 <code>cmpxchg</code>。那么下面，我们就一起从 Disruptor 的源码，到具体的硬件指令来看看这是怎么一回事儿。</p><p>Disruptor 的 RingBuffer 是这么设计的，它和直接在链表的头和尾加锁不同。Disruptor 的 RingBuffer 创建了<mark>一个 Sequence 对象</mark>，用来指向当前的 RingBuffer 的头和尾。这个头和尾的标识呢，不是通过一个指针来实现的，而是通过一个<strong>序号</strong>。这也是为什么对应源码里面的类名叫 <strong>Sequence</strong>。</p><img src="`+i+`" alt="img" style="zoom:25%;"><p>在这个 RingBuffer 当中，进行生产者和消费者之间的资源协调，<strong>采用的是对比序号的方式</strong>。当生产者想要往队列里加入新数据的时候，它会把当前的生产者的 Sequence 的序号，加上需要加入的新数据的数量，然后和实际的消费者所在的位置进行对比，看看队列里是不是有足够的空间加入这些数据，而不会覆盖掉消费者还没有处理完的数据。</p><p>在 Sequence 的代码里面，就是通过 compareAndSet 这个方法，并且最终调用到了 <code>UNSAFE.compareAndSwapLong</code>，也就是直接使用了 <mark>CAS 指令</mark>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> expectedValue<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> newValue<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token constant">UNSAFE</span><span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">VALUE_OFFSET</span><span class="token punctuation">,</span> expectedValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">long</span> increment<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">long</span> currentValue<span class="token punctuation">;</span>
        <span class="token keyword">long</span> newValue<span class="token punctuation">;</span>
        <span class="token keyword">do</span>
        <span class="token punctuation">{</span>
            currentValue <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            newValue <span class="token operator">=</span> currentValue <span class="token operator">+</span> increment<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> newValue<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sequence 源码中的 addAndGet，如果 <mark>CAS</mark> 的操作没有成功，它会不断忙等待地重试</p><p>这个 CAS 指令，也就是比较和交换的操作，并不是基础库里的一个函数。它也不是操作系统里面实现的一个系统调用，而是<strong>一个 CPU 硬件支持的机器指令</strong>。在我们服务器所使用的 Intel CPU 上，就是 <mark>cmpxchg 这个指令</mark>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>compxchg <span class="token punctuation">[</span>ax<span class="token punctuation">]</span> <span class="token punctuation">(</span>隐式参数，EAX累加器<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span> <span class="token punctuation">(</span>源操作数地址<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>cx<span class="token punctuation">]</span> <span class="token punctuation">(</span>目标操作数地址<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>cmpxchg 指令，一共有三个操作数，**<code>第一个操作数</code><strong>不在指令里面出现，是一个隐式的操作数，也就是 EAX 累加寄存器里面的值。</strong><code>第二个操作数</code>**就是源操作数，并且指令会对比这个操作数和上面的累加寄存器里面的值。</p><p>如果值是相同的，那一方面，CPU 会把 ZF（也就是条件码寄存器里面零标志位的值）设置为 1，然后再把**<code>第三个操作数</code>**（也就是目标操作数），设置到源操作数的地址上。如果不相等的话，就会把源操作数里面的值，设置到累加器寄存器里面。</p><p>我在这里放了这个逻辑对应的伪代码，你可以看一下。如果你对汇编指令、条件码寄存器这些知识点有点儿模糊了，可以回头去看看第 5讲、第 6 讲关于汇编指令的部分。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>IF <span class="token punctuation">[</span>ax<span class="token punctuation">]</span><span class="token operator">&lt;</span> <span class="token operator">==</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span> THEN <span class="token punctuation">[</span>ZF<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>cx<span class="token punctuation">]</span>
                 ELSE <span class="token punctuation">[</span>ZF<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ax<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>单个指令是原子的，这也就意味着在使用 <mark>CAS</mark> 操作的时候，<strong>我们不再需要单独进行加锁，直接调用就可以了</strong>。</p><p>没有了锁，CPU 这部高速跑车就像在赛道上行驶，<em><strong>不会遇到需要上下文切换这样的红灯而停下来</strong></em>。虽然会遇到像 CAS 这样复杂的机器指令，就好像赛道上会有 U 型弯一样，不过不用完全停下来等待，我们 CPU 运行起来仍然会快很多。</p><h2 id="_2-测试验证" tabindex="-1"><a class="header-anchor" href="#_2-测试验证" aria-hidden="true">#</a> 2 测试验证</h2><p>那么，CAS 操作到底会有多快呢？我们还是用一段 Java 代码来看一下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xuwenhao<span class="token punctuation">.</span>perf<span class="token punctuation">.</span>jmm</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockBenchmark</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runIncrementAtomic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">AtomicLong</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> max <span class="token operator">=</span> <span class="token number">500000000L</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Time spent is &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;ms with cas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">runIncrementAtomic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>Time spent is <span class="token number">3867</span>ms with cas
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和上面的 counter 自增一样，只不过这一次，自增我们采用了 <code>AtomicLong</code> 这个 Java 类。里面的 incrementAndGet 最终到了 <code>CPU 指令层面</code>，在实现的时候用的就是 <mark>CAS</mark> 操作。可以看到，它所花费的时间，虽然要比没有任何锁的操作慢上一个数量级，但是比起使用 ReentrantLock 这样的操作系统锁的机制，还是减少了一半以上的时间。</p><h2 id="总结延伸" tabindex="-1"><a class="header-anchor" href="#总结延伸" aria-hidden="true">#</a> 总结延伸</h2><p>好了，咱们专栏的正文内容到今天就要结束了。今天最后一讲，我带着你一起看了 Disruptor 代码的一个核心设计，<code>也就是它的 RingBuffer 是怎么做到无锁的</code>。</p><p>Java 基础库里面的 <em>BlockingQueue，都需要通过显示地加锁来保障</em>生产者之间、消费者之间，乃至生产者和消费者之间，不会发生锁冲突的问题。</p><p>但是，<em>加锁会大大拖慢我们的性能</em>。在获取锁过程中，CPU 没有去执行计算的相关指令，而要等待操作系统或者 JVM 来进行锁竞争的裁决。而那些没有拿到锁而被挂起等待的线程，<em>则需要进行上下文切换</em>。这个上下文切换，会把挂起线程的寄存器里的数据放到线程的程序栈里面去。这也意味着，<em>加载到高速缓存里面的数据也失效了</em>，程序就变得更慢了。</p><p>Disruptor 里的 RingBuffer 采用了一个无锁的解决方案，<code>通过 CAS 这样的操作，去进行序号的自增和对比</code>，使得 CPU 不需要获取操作系统的锁。<code>而是能够继续顺序地执行 CPU 指令</code>。没有上下文切换、没有操作系统锁，自然程序就跑得快了。不过因为采用了 CAS 这样的忙等待（Busy-Wait）的方式，会使得我们的 CPU 始终满负荷运转，消耗更多的电，算是一个小小的缺点。</p><p>程序里面的 CAS 调用，映射到我们的 CPU 硬件层面，<code>就是一个机器指令</code>，这个指令就是 <code>cmpxchg</code>。可以看到，当想要追求最极致的性能的时候，我们会从应用层、贯穿到操作系统，乃至最后的 CPU 硬件，搞清楚从高级语言到系统调用，乃至最后的汇编指令，这整个过程是怎么执行代码的。而这个，<code>也是学习组成原理这门专栏的意义所在</code>。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读" aria-hidden="true">#</a> 推荐阅读</h2><p>不知道上一讲说的 Disruptor 相关材料，你有没有读完呢？如果没有读完的话，我建议你还是先去研读一下。</p>`,49),d={href:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.8674&rep=rep1&type=pdf",target:"_blank",rel:"noopener noreferrer"},m=a('<h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考" aria-hidden="true">#</a> 课后思考</h2><p>最后，给你留一道思考题。这道题目有点儿难，不过也很有意思。</p><p>请你阅读一下 Disruptor 开源库里面的 Sequence 这个类的代码，看看它和一个普通的 AtomicLong 到底有什么区别，以及为什么它要这样实现。</p><p>欢迎在留言区写下你的思考和答案，和大家一起探讨应用层和硬件层之间的关联性。如果有收获，你也可以把这篇文章分享给你的朋友。</p><blockquote><p>文章中加锁和不加锁性能比较的case老师的数据是差了50倍，我在intel E5 v4和鲲鹏920下跑出来都是查了80倍。<br> 不过其中的原因不是因为加锁，而是lock.lock() 函数自身包含了几十条指令，而++只有简单的几个指令，也就是两者指令数就差了1个数量级。<br> 例子中不加锁性能好的另外一个原因是 ++指令 对流水线十分友好，基本能跑满流水线（IPC 跑到4)；而lock()那堆指令只能把IPC跑到0.5-0.8之间。</p><p>在只有一个线程的情况下加锁中的&quot;锁&quot;对性能是没有任何影响的，比如假设你的业务逻辑几万个指令，加上lock()多出来的几十个指令基本，基本是没有啥影响的。只有一个线程不会真正发生切换、等锁的糟心操作。只需要考虑实际指令量和对pipeline的友好程度</p><p>其他网友：棒棒棒！使用的是偏向锁，不存在锁竞争。主要还是隐藏在方法下面的指令数及指令对于流水线的友好程度</p><hr><p>看了下jdk 1.8的 AtomicLong 和disruptor的sequence， 个人认为有两点不同：<br> 1、disruptor 加了上一讲里面的padding, 以进一步利用缓存。<br> 2、Atomiclong 里面提供了更多的方法，并且判断cpu是否支持无锁cas<br> 相同点，底层都是调用unsafe类实现硬件层面的操作，以跳过jdk的限制。<br> 作者回复: 👍理解准确到位</p><hr><p>学习中一步步跟进：越来越明白其实真正弄明白为何学习的中间层其实是操作系统和计算机原理；就像老师的课程中不少就和操作系统相关，而在此基础上可以衍生出一系列相关的知识。<br> 就像老师的2个TOP：存储与IO系统，应用篇分别就是一个向下一个向上；代码题对于不做纯代码超过5年的来说有点难，跟课再去学Java有点难且时间实在不够-毕竟运维的coding能力都偏差，不过大致能明白原理，从原理层去解释一些问题的根源原因，以及某些场合下那些可能更加适用。</p><hr><p>其实通过操作系统和组成原理会衍生出很多知识：选择合适的方向专攻确实不错。向老师提个小的要求：希望在最后一堂课可以分享老师在做这个专栏所查阅的主要书籍，毕竟没人可以学完一遍就基本掌握的；老师所看的核心资料是我们后续再看课程提升自己的一个辅助手段吧。<br> 作者回复: 从运维的角度，其实还有一个重要的主题是网络，也值得仔细关注一下。在专栏的每篇文章后面列了推荐阅读，也在一开始的学习方法的那一讲里面列了一些参考资料。可以先从这些看起。另外一个去处是去看Wikipedia对应的条目以及相关引用。</p><hr><p>Cas仍然会涉及到内存读取，老师能否介绍下rcu锁？<br> 作者回复: 是的，CAS仍然会涉及到内存读取。<br> 我之前没有仔细了解过RCU，今天简单看了一下资料，如果我的理解没有错的话。作为读写锁替代的话，是OK的。不过在Disruptor的场景下，Consumer需要的并不是一个读写锁，Producer和Consumer因为都需要更新自己的位置，其实是两个写锁。我直觉上觉得并没有办法依靠RCU的方式来解决。<br> 不过这个值得仔细想一下。</p></blockquote>',5);function v(b,g){const p=e("ExternalLinkIcon");return o(),c("div",null,[k,s("p",null,[n("如果你已经读完了，这里再给你推荐一些额外的阅读材料，那就是著名的"),s("a",d,[n("Implement Lock-Free Queues"),l(p)]),n("这篇论文。你可以更深入地学习一下，怎么实现一个无锁队列。")]),m])}const f=t(r,[["render",v],["__file","H55-理解Disruptor（下）.html.vue"]]);export{f as default};
