import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as p}from"./app-cdabc73c.js";const t="/assets/2e29767e84b299324ea7fc524a3dcee6-68f9627b.jpeg",e="/assets/9bd3cd8a8705dbf69f889ba3b2b5c2e2-ac7a9655.jpeg",o="/assets/c3498dad4f15712529354e0fa123c31d-dc2ae235.jpeg",c="/assets/fba61fe95e0d2746235b1070eb4c18cd-8b3016e9.jpeg",i={},l=p(`<h1 id="_32-字符设备-上-如何建立直销模式" tabindex="-1"><a class="header-anchor" href="#_32-字符设备-上-如何建立直销模式" aria-hidden="true">#</a> 32 | 字符设备（上）：如何建立直销模式？</h1><p>上一节，我们讲了输入输出设备的层次模型，还是比较复杂的，块设备尤其复杂。这一节为了让你更清晰地了解设备驱动程序的架构，我们先来讲稍微简单一点的字符设备驱动。</p><p>这一节，我找了两个比较简单的字符设备驱动来解析一下。一个是输入字符设备，鼠标。代码在 drivers/input/mouse/<code>logibm.c</code> 这里。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * Logitech Bus Mouse Driver for Linux
 */</span>
<span class="token function">module_init</span><span class="token punctuation">(</span>logibm_init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">module_exit</span><span class="token punctuation">(</span>logibm_exit<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外一个是输出字符设备，打印机，代码 drivers/char/lp.c 这里。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * Generic parallel printer driver
 */</span>
<span class="token function">module_init</span><span class="token punctuation">(</span>lp_init_module<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">module_exit</span><span class="token punctuation">(</span>lp_cleanup_module<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内核模块" tabindex="-1"><a class="header-anchor" href="#内核模块" aria-hidden="true">#</a> 内核模块</h2><p>上一节，我们讲过，设备驱动程序是一个内核模块，以 ko 的文件形式存在，可以通过 insmod 加载到内核中。那我们首先来看一下，怎么样才能构建一个内核模块呢？</p><p>一个内核模块应该由以下几部分组成。</p><p><strong>第一部分，头文件部分</strong>。一般的内核模块，都需要 include 下面两个头文件：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/init.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你去看上面两个驱动程序，都能找到这两个头文件。当然如果需要的话，我们还可以引入更多的头文件。</p><p><strong>第二部分，定义一些函数，用于处理内核模块的主要逻辑</strong>。例如打开、关闭、读取、写入设备的函数或者响应中断的函数。</p><p>例如，logibm.c 里面就定义了 logibm_open。logibm_close 就是处理打开和关闭的，定义了 logibm_interrupt 就是用来响应中断的。再如，lp.c 里面就定义了 lp_read，lp_write 就是处理读写的。</p><p><strong>第三部分，定义一个 file_operations 结构</strong>。前面我们讲过，设备是可以通过文件系统的接口进行访问的。咱们讲文件系统的时候说过，对于某种文件系统的操作，都是放在 file_operations 里面的。例如 ext4 就定义了这么一个结构，里面都是 ext4_xxx 之类的函数。设备要想被文件系统的接口操作，也需要定义这样一个结构。</p><p>例如，lp.c 里面就定义了这样一个结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> lp_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>owner    <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write    <span class="token operator">=</span> lp_write<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>unlocked_ioctl  <span class="token operator">=</span> lp_ioctl<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_COMPAT</span></span>
  <span class="token punctuation">.</span>compat_ioctl  <span class="token operator">=</span> lp_compat_ioctl<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token punctuation">.</span>open    <span class="token operator">=</span> lp_open<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>release  <span class="token operator">=</span> lp_release<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_PARPORT_1284</span></span>
  <span class="token punctuation">.</span>read    <span class="token operator">=</span> lp_read<span class="token punctuation">,</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token punctuation">.</span>llseek    <span class="token operator">=</span> noop_llseek<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 logibm.c 里面，我们找不到这样的结构，是因为它属于众多输入设备的一种，而输入设备的操作被统一定义在 drivers/input/input.c 里面，logibm.c 只是定义了一些自己独有的操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> input_devices_fileops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>owner    <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>open    <span class="token operator">=</span> input_proc_devices_open<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>poll    <span class="token operator">=</span> input_proc_devices_poll<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>read    <span class="token operator">=</span> seq_read<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>llseek    <span class="token operator">=</span> seq_lseek<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>release  <span class="token operator">=</span> seq_release<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第四部分，定义整个模块的初始化函数和退出函数</strong>，用于加载和卸载这个 ko 的时候调用。</p><p>例如 lp.c 就定义了 lp_init_module 和 lp_cleanup_module，logibm.c 就定义了 logibm_init 和 logibm_exit。</p><p><strong>第五部分，调用 module_init 和 module_exit</strong>，分别指向上面两个初始化函数和退出函数。就像本节最开头展示的一样。</p><p><strong>第六部分，声明一下 lisense，调用 MODULE_LICENSE</strong>。</p><p>有了这六部分，一个内核模块就基本合格了，可以工作了。</p><h2 id="打开字符设备" tabindex="-1"><a class="header-anchor" href="#打开字符设备" aria-hidden="true">#</a> 打开字符设备</h2><p>字符设备可不是一个普通的内核模块，它有自己独特的行为。接下来，我们就沿着打开一个字符设备的过程，看看字符设备这个内核模块做了哪些特殊的事情。</p><img src="`+t+`" alt="img" style="zoom:25%;"><p>要使用一个字符设备，我们首先要把写好的内核模块，通过 insmod 加载进内核。这个时候，先调用的就是 module_init 调用的初始化函数。</p><p>例如，在 <code>lp.c</code> 的初始化函数 lp_init 对应的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">lp_init</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">register_chrdev</span> <span class="token punctuation">(</span>LP_MAJOR<span class="token punctuation">,</span> <span class="token string">&quot;lp&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>lp_fops<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printk</span> <span class="token punctuation">(</span>KERN_ERR <span class="token string">&quot;lp: unable to get major %d\\n&quot;</span><span class="token punctuation">,</span> LP_MAJOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EIO<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">__register_chrdev</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> major<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> baseminor<span class="token punctuation">,</span>
          <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
          <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token operator">*</span>fops<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">char_device_struct</span> <span class="token operator">*</span>cd<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>cdev<span class="token punctuation">;</span>
  <span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  cd <span class="token operator">=</span> <span class="token function">__register_chrdev_region</span><span class="token punctuation">(</span>major<span class="token punctuation">,</span> baseminor<span class="token punctuation">,</span> count<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cdev <span class="token operator">=</span> <span class="token function">cdev_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  cdev<span class="token operator">-&gt;</span>owner <span class="token operator">=</span> fops<span class="token operator">-&gt;</span>owner<span class="token punctuation">;</span>
  cdev<span class="token operator">-&gt;</span>ops <span class="token operator">=</span> fops<span class="token punctuation">;</span>
  <span class="token function">kobject_set_name</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cdev<span class="token operator">-&gt;</span>kobj<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  err <span class="token operator">=</span> <span class="token function">cdev_add</span><span class="token punctuation">(</span>cdev<span class="token punctuation">,</span> <span class="token function">MKDEV</span><span class="token punctuation">(</span>cd<span class="token operator">-&gt;</span>major<span class="token punctuation">,</span> baseminor<span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cd<span class="token operator">-&gt;</span>cdev <span class="token operator">=</span> cdev<span class="token punctuation">;</span>
  <span class="token keyword">return</span> major <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> cd<span class="token operator">-&gt;</span>major<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在字符设备驱动的内核模块加载的时候，最重要的一件事情就是，注册这个字符设备。注册的方式是调用 __register_chrdev_region，注册字符设备的主次设备号和名称，然后分配一个 struct cdev 结构，将 cdev 的 ops 成员变量指向这个模块声明的 file_operations。然后，cdev_add 会将这个字符设备添加到内核中一个叫作 struct kobj_map *cdev_map 的结构，来统一管理所有字符设备。</p><p>其中，MKDEV(cd-&gt;major, baseminor) 表示将主设备号和次设备号生成一个 dev_t 的整数，然后将这个整数 <code>dev_t</code> 和 <code>cdev</code> 关联起来。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * cdev_add() - add a char device to the system
 * @p: the cdev structure for the device
 * @dev: the first device number for which this device is responsible
 * @count: the number of consecutive minor numbers corresponding to this
 *         device
 *
 * cdev_add() adds the device represented by @p to the system, making it
 * live immediately.  A negative error code is returned on failure.
 */</span>
<span class="token keyword">int</span> <span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token class-name">dev_t</span> dev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> count<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> error<span class="token punctuation">;</span>


  p<span class="token operator">-&gt;</span>dev <span class="token operator">=</span> dev<span class="token punctuation">;</span>
  p<span class="token operator">-&gt;</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>


  error <span class="token operator">=</span> <span class="token function">kobj_map</span><span class="token punctuation">(</span>cdev_map<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
       exact_match<span class="token punctuation">,</span> exact_lock<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">kobject_get</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>kobj<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>logibm.c</code> 中，我们在 logibm_init 找不到注册字符设备，这是因为 input.c 里面的初始化函数 input_init 会调用 register_chrdev_region，注册输入的字符设备，会在 logibm_init 中调用 input_register_device，将 logibm.c 这个字符设备注册到 input.c 里面去，这就相当于 input.c 对多个输入字符设备进行统一的管理。</p><p>内核模块加载完毕后，接下来要通过 mknod 在 /dev 下面创建一个设备文件，只有有了这个设备文件，我们才能通过文件系统的接口，对这个设备文件进行操作。</p><p>mknod 也是一个系统调用，定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>mknod<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token class-name">umode_t</span><span class="token punctuation">,</span> mode<span class="token punctuation">,</span> <span class="token keyword">unsigned</span><span class="token punctuation">,</span> dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">sys_mknodat</span><span class="token punctuation">(</span>AT_FDCWD<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token function">SYSCALL_DEFINE4</span><span class="token punctuation">(</span>mknodat<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> dfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token class-name">umode_t</span><span class="token punctuation">,</span> mode<span class="token punctuation">,</span>
    <span class="token keyword">unsigned</span><span class="token punctuation">,</span> dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span>dentry<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">path</span> path<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  dentry <span class="token operator">=</span> <span class="token function">user_path_create</span><span class="token punctuation">(</span>dfd<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">,</span> lookup_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;</span> S_IFMT<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">case</span> S_IFCHR<span class="token operator">:</span> <span class="token keyword">case</span> S_IFBLK<span class="token operator">:</span>
      error <span class="token operator">=</span> <span class="token function">vfs_mknod</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>dentry<span class="token operator">-&gt;</span>d_inode<span class="token punctuation">,</span>dentry<span class="token punctuation">,</span>mode<span class="token punctuation">,</span>
          <span class="token function">new_decode_dev</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在这个系统调用里看到，在文件系统上，顺着路径找到 /dev/xxx 所在的文件夹，然后为这个新创建的设备文件创建一个 dentry。这是维护文件和 inode 之间的关联关系的结构。</p><p>接下来，如果是字符文件 S_IFCHR 或者设备文件 S_IFBLK，我们就调用 vfs_mknod。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">vfs_mknod</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>dir<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span>dentry<span class="token punctuation">,</span> <span class="token class-name">umode_t</span> mode<span class="token punctuation">,</span> <span class="token class-name">dev_t</span> dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  error <span class="token operator">=</span> dir<span class="token operator">-&gt;</span>i_op<span class="token operator">-&gt;</span><span class="token function">mknod</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> dentry<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要调用对应的文件系统的 inode_operations。应该调用哪个文件系统呢？</p><p>如果我们在 linux 下面执行 mount 命令，能看到下面这一行：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>devtmpfs on <span class="token operator">/</span>dev type <span class="token function">devtmpfs</span> <span class="token punctuation">(</span>rw<span class="token punctuation">,</span>nosuid<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">3989584</span>k<span class="token punctuation">,</span>nr_inodes<span class="token operator">=</span><span class="token number">997396</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token number">755</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也就是说，/dev 下面的文件系统的名称为 devtmpfs，我们可以在内核中找到它。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span><span class="token function">dev_mount</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> <span class="token operator">*</span>fs_type<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span>
          <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dev_name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_TMPFS</span></span>
  <span class="token keyword">return</span> <span class="token function">mount_single</span><span class="token punctuation">(</span>fs_type<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> data<span class="token punctuation">,</span> shmem_fill_super<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
  <span class="token keyword">return</span> <span class="token function">mount_single</span><span class="token punctuation">(</span>fs_type<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> data<span class="token punctuation">,</span> ramfs_fill_super<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> dev_fs_type <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;devtmpfs&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>mount <span class="token operator">=</span> dev_mount<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>kill_sb <span class="token operator">=</span> kill_litter_super<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这里可以看出，devtmpfs 在挂载的时候，有两种模式，一种是 ramfs，一种是 shmem 都是基于内存的文件系统。这里你先不用管，基于内存的文件系统具体是怎么回事儿。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">inode_operations</span> ramfs_dir_inode_operations <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span>mknod    <span class="token operator">=</span> ramfs_mknod<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">inode_operations</span> shmem_dir_inode_operations <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_TMPFS</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span>mknod    <span class="token operator">=</span> shmem_mknod<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个 mknod 虽然实现不同，但是都会调用到同一个函数 init_special_inode。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init_special_inode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token class-name">umode_t</span> mode<span class="token punctuation">,</span> <span class="token class-name">dev_t</span> rdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  inode<span class="token operator">-&gt;</span>i_mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISCHR</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inode<span class="token operator">-&gt;</span>i_fop <span class="token operator">=</span> <span class="token operator">&amp;</span>def_chr_fops<span class="token punctuation">;</span>
    inode<span class="token operator">-&gt;</span>i_rdev <span class="token operator">=</span> rdev<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISBLK</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    inode<span class="token operator">-&gt;</span>i_fop <span class="token operator">=</span> <span class="token operator">&amp;</span>def_blk_fops<span class="token punctuation">;</span>
    inode<span class="token operator">-&gt;</span>i_rdev <span class="token operator">=</span> rdev<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISFIFO</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    inode<span class="token operator">-&gt;</span>i_fop <span class="token operator">=</span> <span class="token operator">&amp;</span>pipefifo_fops<span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISSOCK</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">;</span>  <span class="token comment">/* leave it no_open_fops */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然这个文件是个特殊文件，inode 也是特殊的。这里这个 inode 可以关联字符设备、块设备、FIFO 文件、Socket 等。我们这里只看字符设备。</p><p>这里的 inode 的 file_operations 指向一个 def_chr_fops，这里面只有一个 open，就等着你打开它。</p><p>另外，inode 的 i_rdev 指向这个设备的 dev_t。还记得 cdev_map 吗？通过这个 dev_t，可以找到我们刚在加载的字符设备 cdev。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> def_chr_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>open <span class="token operator">=</span> chrdev_open<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，我们只是创建了 /dev 下面的一个文件，并且和相应的设备号关联起来。但是，我们还没有打开这个 /dev 下面的设备文件。</p><p>现在我们来打开它。打开一个文件的流程，我们在文件系统那一节讲过了，这里不再重复。最终就像打开字符设备的图中一样，打开文件的进程的 task_struct 里，有一个数组代表它打开的文件，下标就是文件描述符 fd，每一个打开的文件都有一个 struct file 结构，会指向一个 dentry 项。dentry 可以用来关联 inode。这个 dentry 就是咱们上面 mknod 的时候创建的。</p><p>在进程里面调用 open 函数，最终会调用到这个特殊的 inode 的 open 函数，也就是 chrdev_open。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">chrdev_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token operator">*</span>fops<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>new <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


  p <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_cdev<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">kobject</span> <span class="token operator">*</span>kobj<span class="token punctuation">;</span>
    <span class="token keyword">int</span> idx<span class="token punctuation">;</span>
    kobj <span class="token operator">=</span> <span class="token function">kobj_lookup</span><span class="token punctuation">(</span>cdev_map<span class="token punctuation">,</span> inode<span class="token operator">-&gt;</span>i_rdev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    new <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span>kobj<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">cdev</span><span class="token punctuation">,</span> kobj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_cdev<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      inode<span class="token operator">-&gt;</span>i_cdev <span class="token operator">=</span> p <span class="token operator">=</span> new<span class="token punctuation">;</span>
      <span class="token function">list_add</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>inode<span class="token operator">-&gt;</span>i_devices<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token operator">-&gt;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
      new <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  fops <span class="token operator">=</span> <span class="token function">fops_get</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>ops<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">replace_fops</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> fops<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>filp<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>open<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ret <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> filp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个函数里面，我们首先看这个 inode 的 i_cdev，是否已经关联到 cdev。如果第一次打开，当然没有。没有没关系，inode 里面有 i_rdev 呀，也就是有 dev_t。我们可以通过它在 cdev_map 中找 cdev。咱们上面注册过了，所以肯定能够找到。找到后我们就将 inode 的 i_cdev，关联到找到的 cdev new。</p><p>找到 cdev 就好办了。cdev 里面有 file_operations，这是设备驱动程序自己定义的。我们可以通过它来操作设备驱动程序，把它付给 struct file 里面的 file_operations。这样以后操作文件描述符，就是直接操作设备了。</p><p>最后，我们需要调用设备驱动程序的 file_operations 的 open 函数，真正打开设备。对于打印机，调用的是 lp_open。对于鼠标调用的是 input_proc_devices_open，最终会调用到 logibm_open。这些多和设备相关，你不必看懂它们。</p><h2 id="写入字符设备" tabindex="-1"><a class="header-anchor" href="#写入字符设备" aria-hidden="true">#</a> 写入字符设备</h2><p>当我们像打开一个文件一样打开一个字符设备之后，接下来就是对这个设备的读写。对于文件的读写咱们在文件系统那一章详细讲述过，读写的过程是类似的，所以这里我们只解析打印机驱动写入的过程。</p><img src="`+e+`" alt="img" style="zoom:25%;"><p>写入一个字符设备，就是用文件系统的标准接口 write，参数文件描述符 fd，在内核里面调用的 sys_write，在 sys_write 里面根据文件描述符 fd 得到 struct file 结构。接下来再调用 vfs_write。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token function">__vfs_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>pos<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>write<span class="token punctuation">)</span>
    <span class="token keyword">return</span> file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> p<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>write_iter<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">new_sync_write</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> p<span class="token punctuation">,</span> count<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，在 __vfs_write 里面，我们会调用 struct file 结构里的 file_operations 的 write 函数。上面我们打开字符设备的时候，已经将 struct file 结构里面的 file_operations 指向了设备驱动程序的 file_operations 结构，所以这里的 write 函数最终会调用到 lp_write。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">lp_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span> buf<span class="token punctuation">,</span>
            <span class="token class-name">size_t</span> count<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>ppos<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> minor <span class="token operator">=</span> <span class="token function">iminor</span><span class="token punctuation">(</span><span class="token function">file_inode</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">parport</span> <span class="token operator">*</span>port <span class="token operator">=</span> lp_table<span class="token punctuation">[</span>minor<span class="token punctuation">]</span><span class="token punctuation">.</span>dev<span class="token operator">-&gt;</span>port<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>kbuf <span class="token operator">=</span> lp_table<span class="token punctuation">[</span>minor<span class="token punctuation">]</span><span class="token punctuation">.</span>lp_buffer<span class="token punctuation">;</span>
  <span class="token class-name">ssize_t</span> retv <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">ssize_t</span> written<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> copy_size <span class="token operator">=</span> count<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/* Need to copy the data from user-space. */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>copy_size <span class="token operator">&gt;</span> LP_BUFFER_SIZE<span class="token punctuation">)</span>
    copy_size <span class="token operator">=</span> LP_BUFFER_SIZE<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span> <span class="token punctuation">(</span>kbuf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> copy_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    retv <span class="token operator">=</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
    <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment">/* Write the data. */</span>
    written <span class="token operator">=</span> <span class="token function">parport_write</span> <span class="token punctuation">(</span>port<span class="token punctuation">,</span> kbuf<span class="token punctuation">,</span> copy_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>written <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      copy_size <span class="token operator">-=</span> written<span class="token punctuation">;</span>
      count <span class="token operator">-=</span> written<span class="token punctuation">;</span>
      buf  <span class="token operator">+=</span> written<span class="token punctuation">;</span>
      retv <span class="token operator">+=</span> written<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">need_resched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">schedule</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      copy_size <span class="token operator">=</span> count<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>copy_size <span class="token operator">&gt;</span> LP_BUFFER_SIZE<span class="token punctuation">)</span>
        copy_size <span class="token operator">=</span> LP_BUFFER_SIZE<span class="token punctuation">;</span>


      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>kbuf<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> copy_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>retv <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
          retv <span class="token operator">=</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>  
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个设备驱动程序的写入函数的实现还是比较典型的。先是调用 copy_from_user 将数据从用户态拷贝到内核态的缓存中，然后调用 parport_write 写入外部设备。这里还有一个 schedule 函数，也即写入的过程中，给其他线程抢占 CPU 的机会。然后，如果 count 还是大于 0，也就是数据还没有写完，那我们就接着 copy_from_user，接着 parport_write，直到写完为止。</p><h2 id="使用-ioctl-控制设备" tabindex="-1"><a class="header-anchor" href="#使用-ioctl-控制设备" aria-hidden="true">#</a> 使用 IOCTL 控制设备</h2><p>对于 I/O 设备来讲，我们前面也说过，除了读写设备，还会调用 ioctl，做一些特殊的 I/O 操作。</p><img src="`+o+`" alt="img" style="zoom:25%;"><p>ioctl 也是一个<mark>系统调用</mark>，它在内核里面的定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>ioctl<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> error<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">fd</span> f <span class="token operator">=</span> <span class="token function">fdget</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  error <span class="token operator">=</span> <span class="token function">do_vfs_ioctl</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>file<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fdput</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> error<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，fd 是这个设备的文件描述符，cmd 是传给这个设备的命令，arg 是命令的参数。其中，对于命令和命令的参数，使用 ioctl 系统调用的用户和驱动程序的开发人员约定好行为即可。</p><p>其实 cmd 看起来是一个 int，其实他的组成比较复杂，它由几部分组成：</p><ul><li>最低八位为 NR，是命令号；</li><li>然后八位是 TYPE，是类型；</li><li>然后十四位是参数的大小；</li><li>最高两位是 DIR，是方向，表示写入、读出，还是读写。</li></ul><p>由于组成比较复杂，有一些宏是专门用于组成这个 cmd 值的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
 * Used to create numbers.
 */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_IO</span><span class="token expression"><span class="token punctuation">(</span>type<span class="token punctuation">,</span>nr<span class="token punctuation">)</span>    <span class="token function">_IOC</span><span class="token punctuation">(</span>_IOC_NONE<span class="token punctuation">,</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_IOR</span><span class="token expression"><span class="token punctuation">(</span>type<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>size<span class="token punctuation">)</span>  <span class="token function">_IOC</span><span class="token punctuation">(</span>_IOC_READ<span class="token punctuation">,</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">_IOC_TYPECHECK</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_IOW</span><span class="token expression"><span class="token punctuation">(</span>type<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>size<span class="token punctuation">)</span>  <span class="token function">_IOC</span><span class="token punctuation">(</span>_IOC_WRITE<span class="token punctuation">,</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">_IOC_TYPECHECK</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_IOWR</span><span class="token expression"><span class="token punctuation">(</span>type<span class="token punctuation">,</span>nr<span class="token punctuation">,</span>size<span class="token punctuation">)</span>  <span class="token function">_IOC</span><span class="token punctuation">(</span>_IOC_READ<span class="token operator">|</span>_IOC_WRITE<span class="token punctuation">,</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token function">_IOC_TYPECHECK</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>


<span class="token comment">/* used to decode ioctl numbers.. */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_IOC_DIR</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> _IOC_DIRSHIFT<span class="token punctuation">)</span> <span class="token operator">&amp;</span> _IOC_DIRMASK<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_IOC_TYPE</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> _IOC_TYPESHIFT<span class="token punctuation">)</span> <span class="token operator">&amp;</span> _IOC_TYPEMASK<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_IOC_NR</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> _IOC_NRSHIFT<span class="token punctuation">)</span> <span class="token operator">&amp;</span> _IOC_NRMASK<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_IOC_SIZE</span><span class="token expression"><span class="token punctuation">(</span>nr<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> _IOC_SIZESHIFT<span class="token punctuation">)</span> <span class="token operator">&amp;</span> _IOC_SIZEMASK<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在用户程序中，可以通过上面的“Used to create numbers”这些宏，根据参数生成 cmd，在驱动程序中，可以通过下面的“used to decode ioctl numbers”这些宏，解析 cmd 后，执行指令。</p><p>ioctl 中会调用 do_vfs_ioctl，这里面对于已经定义好的 cmd，进行相应的处理。如果不是默认定义好的 cmd，则执行默认操作。对于普通文件，调用 file_ioctl；对于其他文件调用 vfs_ioctl。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">do_vfs_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span>
       <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> __user <span class="token operator">*</span>argp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode <span class="token operator">=</span> <span class="token function">file_inode</span><span class="token punctuation">(</span>filp<span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">case</span> FIONBIO<span class="token operator">:</span>
    error <span class="token operator">=</span> <span class="token function">ioctl_fionbio</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> argp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>


  <span class="token keyword">case</span> FIOASYNC<span class="token operator">:</span>
    error <span class="token operator">=</span> <span class="token function">ioctl_fioasync</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> filp<span class="token punctuation">,</span> argp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">case</span> FICLONE<span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token function">ioctl_file_clone</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISREG</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
      error <span class="token operator">=</span> <span class="token function">file_ioctl</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
      error <span class="token operator">=</span> <span class="token function">vfs_ioctl</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> error<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于咱们这里是设备驱动程序，所以调用的是 vfs_ioctl。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/**
 * vfs_ioctl - call filesystem specific ioctl methods
 * @filp:  open file to invoke ioctl method on
 * @cmd:  ioctl command to execute
 * @arg:  command-specific argument for ioctl
 *
 * Invokes filesystem specific -&gt;unlocked_ioctl, if one exists; otherwise
 * returns -ENOTTY.
 *
 * Returns 0 on success, -errno on error.
 */</span>
<span class="token keyword">long</span> <span class="token function">vfs_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>filp<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> error <span class="token operator">=</span> <span class="token operator">-</span>ENOTTY<span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filp<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>unlocked_ioctl<span class="token punctuation">)</span>
    <span class="token keyword">goto</span> out<span class="token punctuation">;</span>


  error <span class="token operator">=</span> filp<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span><span class="token function">unlocked_ioctl</span><span class="token punctuation">(</span>filp<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token operator">-</span>ENOIOCTLCMD<span class="token punctuation">)</span>
    error <span class="token operator">=</span> <span class="token operator">-</span>ENOTTY<span class="token punctuation">;</span>
 out<span class="token operator">:</span>
  <span class="token keyword">return</span> error<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面调用的是 struct file 里 file_operations 的 unlocked_ioctl 函数。我们前面初始化设备驱动的时候，已经将 file_operations 指向设备驱动的 file_operations 了。这里调用的是设备驱动的 unlocked_ioctl。对于打印机程序来讲，调用的是 lp_ioctl。可以看出来，这里面就是 switch 语句，它会根据不同的 cmd，做不同的操作。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">lp_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span>
      <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> minor<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">timeval</span> par_timeout<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">;</span>


  minor <span class="token operator">=</span> <span class="token function">iminor</span><span class="token punctuation">(</span><span class="token function">file_inode</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lp_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">default</span><span class="token operator">:</span>
    ret <span class="token operator">=</span> <span class="token function">lp_do_ioctl</span><span class="token punctuation">(</span>minor<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> __user <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lp_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lp_do_ioctl</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> minor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">,</span> <span class="token keyword">void</span> __user <span class="token operator">*</span>argp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> status<span class="token punctuation">;</span>
  <span class="token keyword">int</span> retval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


  <span class="token keyword">switch</span> <span class="token punctuation">(</span> cmd <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> LPTIME<span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">&gt;</span> UINT_MAX <span class="token operator">/</span> HZ<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
      <span class="token function">LP_TIME</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token operator">=</span> arg <span class="token operator">*</span> HZ<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LPCHAR<span class="token operator">:</span>
      <span class="token function">LP_CHAR</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token operator">=</span> arg<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LPABORT<span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
        <span class="token function">LP_F</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token operator">|=</span> LP_ABORT<span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        <span class="token function">LP_F</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>LP_ABORT<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LPABORTOPEN<span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
        <span class="token function">LP_F</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token operator">|=</span> LP_ABORTOPEN<span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        <span class="token function">LP_F</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>LP_ABORTOPEN<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LPCAREFUL<span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
        <span class="token function">LP_F</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token operator">|=</span> LP_CAREFUL<span class="token punctuation">;</span>
      <span class="token keyword">else</span>
        <span class="token function">LP_F</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span>LP_CAREFUL<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LPWAIT<span class="token operator">:</span>
      <span class="token function">LP_WAIT</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span> <span class="token operator">=</span> arg<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LPSETIRQ<span class="token operator">:</span> 
      <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LPGETIRQ<span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>argp<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token function">LP_IRQ</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LPGETSTATUS<span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mutex_lock_interruptible</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lp_table<span class="token punctuation">[</span>minor<span class="token punctuation">]</span><span class="token punctuation">.</span>port_mutex<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EINTR<span class="token punctuation">;</span>
      <span class="token function">lp_claim_parport_or_block</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>lp_table<span class="token punctuation">[</span>minor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      status <span class="token operator">=</span> <span class="token function">r_str</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">lp_release_parport</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>lp_table<span class="token punctuation">[</span>minor<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lp_table<span class="token punctuation">[</span>minor<span class="token punctuation">]</span><span class="token punctuation">.</span>port_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>


      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>argp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> LPRESET<span class="token operator">:</span>
      <span class="token function">lp_reset</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
     <span class="token keyword">case</span> LPGETFLAGS<span class="token operator">:</span>
       status <span class="token operator">=</span> <span class="token function">LP_F</span><span class="token punctuation">(</span>minor<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>argp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      retval <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> retval
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>这一节我们讲了字符设备的打开、写入和 ioctl 等最常见的操作。一个字符设备要能够工作，需要三部分配合。</p><ol><li><strong>第一，有一个设备驱动程序的 ko 模块，里面有模块初始化函数、中断处理函数、设备操作函数</strong>。这里面封装了对于外部设备的操作。加载设备驱动程序模块的时候，模块初始化函数会被调用。在内核维护所有字符设备驱动的数据结构 cdev_map 里面注册，我们就可以很容易根据设备号，找到相应的设备驱动程序。</li><li><strong>第二，在 /dev 目录下有一个文件表示这个设备，这个文件在特殊的 devtmpfs 文件系统上，因而也有相应的 dentry 和 inode</strong>。这里的 inode 是一个特殊的 inode，里面有设备号。通过它，我们可以在 cdev_map 中找到设备驱动程序，里面还有针对字符设备文件的默认操作 def_chr_fops。</li><li><strong>第三，打开一个字符设备文件和打开一个普通的文件有类似的数据结构，有文件描述符、有 struct file、指向字符设备文件的 dentry 和 inode</strong>。字符设备文件的相关操作 file_operations 一开始指向 def_chr_fops，在调用 def_chr_fops 里面的 chrdev_open 函数的时候，修改为指向设备操作函数，从而读写一个字符设备文件就会直接变成读写外部设备了。</li></ol><img src="`+c+'" alt="img" style="zoom:25%;"><blockquote><p>课代表不在了，我来当课代表。</p><p>+++++++++++++++++++++++++++ 字符设备 +++++++++++++++++++++++++++</p><p><strong><code>##(1)内核模块</code></strong></p><ul><li>驱动程序的内核模块，以 ko 的文件形式存在，可以通过 insmod 加载到内核中</li><li>一个内核模块应该由以下几部分组成</li><li>头文件部分:include &lt;linux/module.h&gt; 及 &lt;linux/init.h&gt; <ul><li>定义以内科模块处理逻辑的函数，如开、关、读写及响应中断。</li><li>定义一个 file_operations 接口，使得对上层接口统一</li><li>定义整个模块的初始化和退出函数</li><li>调用 module_init 和 module_exit，分别指向上面两个初始化函数和退出函数</li><li>声明一下 lisense，调用 MODULE_LICENSE</li></ul></li></ul><p><strong><code>##(2)打开字符设备</code></strong></p><ul><li>打开字符设备</li><li>注册字符设备:通过 insmod 加载进内核<br> - 调用 __register_chrdev_region<br> - 注册设备的主次设备号和名称<br> - 初始化 cdev 结构体，将其 ops 成员指向设备定义的 file_operations<br> - 调用 cdev_add 将设备添加到内核中的 cdev_map，统一管理字符设备 <ul><li>创建设备文件:通过 mknod 在 /dev 下面创建一个设备文件</li><li>找到设备文件所在的文件夹，然后为这个新创建的设备文件创建一个 dentry，用于关联文件和 inode <ul><li>创建特殊 inode，用于关联设备（还可关联FIFO文件、socket等）</li></ul></li><li>打开设备文件:调用 inode 的 open 函数</li><li>如果 cdev 还没有关联，从 cdev_map 中找到 cdev 并关联 <ul><li>找到 cdev 的 file_operations，将其设置给文件描述符</li><li>调用设备驱动程序的 file_operations 的 open 函数，真正打开设备</li></ul></li></ul></li></ul><p><strong><code>##(3)写入字符设备</code></strong></p><ul><li>写入字符设备</li><li>调用文件系统标准接口 write，参数为设备的文件描述符 <ul><li>由于已经将 file_operations 替换成了设备的，所以会直接调用设备定义的 write（多态）</li></ul></li></ul><p><strong><code>##(4)IOCTL控制设备</code></strong></p><ul><li>发送 IOCTL 信令控制设备</li><li>cmd 组成(32位):<br> - 最低 8 位为 NR，是命令号；<br> - 然后 8 位是 TYPE，是类型；<br> - 然后 14 位是参数的大小；<br> - 最高 2 位是 DIR，是方向，表示写入、读出，还是读写。<br> - 有对应的宏方便操作 cmd <ul><li>调用 do_vfs_ioctl，分支判断 cmd 执行对应操作，分为以下几种</li><li>默认定义好的 cmd，执行系统默认操作 <ul><li>普通文件，调用 file_ioctl</li><li>其他文件调用 vfs_ioctl</li><li>vfs_ioctl 内部还是会直接调用设备定义的 cmd 对应的接收函数，里面对不同 cmd 执行不同操作</li></ul></li></ul></li></ul></blockquote><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>这节我用打印机驱动程序作为例子来给你讲解字符设备，请你仔细看一下它的代码，设想一下，如果让你自己写一个字符设备驱动程序，应该实现哪些函数呢？</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>字符设备驱动程序没有了解过，但是在github上面找到过实现自定义文件系统的hellofs，这个可以核心关键还是自定义的file operations和注册这些，大同小异的</p><p>虚拟文件系统，统一所有设备操作。而这个设计，看起来只是使用多态，但是实际上这是抽象出来的统一操作层。有这个想法，要实现对各种各样的设备，繁杂的功能而言，并不简单！而抽象本身，就很复杂了，值得继续深入！！！</p><p>程序设计的面向对象的思想，之前开发一个音视频推流服务器，一个音视频类型的操作编码解码都是类中完成，现在看来可以把操作单独设计成一个基类，各种类型的音视频操作都可以继承这个类，代码可以设计的更为优雅<br> 作者回复: 是的</p><p>另外贴上一个字符设备或者块设备都有一个主设备号和次设备号。主设备号和次设备号统称为设备号。主设备号用来表示一个特定的驱动程序。次设备号用来表示使用该驱动程序的各设备。<br> 作者回复: 赞</p>',98),u=[l];function r(k,d){return s(),a("div",null,u)}const b=n(i,[["render",r],["__file","K32-字符设备（上）.html.vue"]]);export{b as default};
