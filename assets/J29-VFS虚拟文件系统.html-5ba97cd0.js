import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as s,e as l,d as a}from"./app-cdabc73c.js";const i="/assets/3c506edf93b15341da3db658e9970773-13981667.jpg",u="/assets/663b3c5903d15fd9ba52f6d049e0dc27-0185f2af.jpeg",r="/assets/82dd76e1e84915206eefb8fc88385859-8e0bce78.jpeg",k="/assets/8070294bacd74e0ac5ccc5ac88be1bb9-7e21c5ed.png",d={},m=a('<h1 id="_29-虚拟文件系统-文件多了就需要档案管理系统" tabindex="-1"><a class="header-anchor" href="#_29-虚拟文件系统-文件多了就需要档案管理系统" aria-hidden="true">#</a> 29 | 虚拟文件系统：文件多了就需要档案管理系统</h1><p>上一节，咱们的图书馆书架，也就是<mark>硬盘上的文件系统格式</mark>都搭建好了，现在我们还需要一个图书管理与借阅系统，也就是<mark>文件管理模块</mark>，不然我们怎么知道书都借给谁了呢？</p><p>进程要想往文件系统里面读写数据，需要很多层的组件一起合作。具体是怎么合作的呢？我们一起来看一看。</p><h2 id="vfs-总览" tabindex="-1"><a class="header-anchor" href="#vfs-总览" aria-hidden="true">#</a> VFS 总览</h2><ul><li><p><strong>在应用层</strong>，进程在进行文件读写操作时，可通过<mark>系统调用</mark>(中断陷入内核态)如 sys_open、sys_read、sys_write 等。</p></li><li><p>在内核，<strong>每个进程</strong>都需要为打开的文件，维护一定的数据结构。<mark>文件描述符</mark></p></li><li><p>在内核，<strong>整个系统</strong>打开的文件，也需要维护一定的数据结构。<mark>文件子系统</mark></p></li><li><p>Linux 可以支持多达数十种不同的文件系统。它们的实现各不相同，<br> 因此 Linux 内核向用户空间提供了<mark>虚拟文件系统</mark>这个统一的接口，来对文件系统进行操作。</p><ul><li>它提供了常见的文件系统对象模型，例如 inode、directory entry、mount 等，<br> 以及操作这些对象的方法，例如 inode operations、directory operations、file operations 等。</li></ul></li><li><p>然后就是对接的是真正的<mark>硬盘文件系统(ext4/ext3/ntfs各种)</mark>，例如我们上节讲的 ext4 文件系统。</p><ul><li><strong>缓存</strong>: Page Cache. 为了加快块设备的读写效率，我们还有一个缓存层。</li><li><strong>通用块设备层</strong></li></ul></li><li><p>为了读写 ext4 文件系统，要通过**<mark>块设备 I/O 调度层</mark>**，也即 <mark>BIO 层</mark>。这是 <strong>硬盘文件系统层/通用块设备层</strong> 和 <strong>块设备驱动</strong> 的 <mark>接口</mark>。</p><ul><li>最下层是<strong>块设备驱动程序</strong>。</li></ul></li></ul><img src="'+i+`" alt="img" style="zoom:25%;"><p>接下来我们逐层解析。</p><p>在这之前，有一点你需要注意。解析系统调用是了解内核架构最有力的一把钥匙，这里我们只要重点关注这几个最重要的系统调用就可以了：</p><ul><li><code>mount</code> 系统调用用于挂载文件系统；</li><li><code>open</code> 系统调用用于打开或者创建文件，创建要在 flags 中设置 O_CREAT，对于读写要设置 flags 为 O_RDWR；</li><li><code>read</code> 系统调用用于读取文件内容；</li><li><code>write</code> 系统调用用于写入文件内容。</li></ul><h2 id="挂载文件系统" tabindex="-1"><a class="header-anchor" href="#挂载文件系统" aria-hidden="true">#</a> 挂载文件系统</h2><p>想要操作文件系统，第一件事情就是挂载文件系统。</p><p>内核是不是支持某种类型的文件系统，需要我们进行注册才能知道。例如，咱们上一节解析的 ext4 文件系统，就需要通过 register_filesystem 进行注册，传入的参数是 ext4_fs_type，表示注册的是 ext4 类型的文件系统。这里面最重要的一个成员变量就是 ext4_mount。记住它，这个我们后面还会用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">register_filesystem</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ext4_fs_type<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> ext4_fs_type <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>owner    <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>name    <span class="token operator">=</span> <span class="token string">&quot;ext4&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>mount    <span class="token operator">=</span> ext4_mount<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>kill_sb  <span class="token operator">=</span> kill_block_super<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fs_flags  <span class="token operator">=</span> FS_REQUIRES_DEV<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一种文件系统的类型曾经在内核注册过，这就说明允许你挂载并且使用这个文件系统。</p><p>刚才我说了几个需要重点关注的系统调用，那我们就从第一个 mount 系统调用开始解析。mount 系统调用的定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE5</span><span class="token punctuation">(</span>mount<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> dev_name<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> dir_name<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token keyword">void</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ret <span class="token operator">=</span> <span class="token function">do_mount</span><span class="token punctuation">(</span>kernel_dev<span class="token punctuation">,</span> dir_name<span class="token punctuation">,</span> kernel_type<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的调用链为：do_mount-&gt;do_new_mount-&gt;vfs_kern_mount。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">vfsmount</span> <span class="token operator">*</span>
<span class="token function">vfs_kern_mount</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> <span class="token operator">*</span>type<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  mnt <span class="token operator">=</span> <span class="token function">alloc_vfsmnt</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  root <span class="token operator">=</span> <span class="token function">mount_fs</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> name<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  mnt<span class="token operator">-&gt;</span>mnt<span class="token punctuation">.</span>mnt_root <span class="token operator">=</span> root<span class="token punctuation">;</span>
  mnt<span class="token operator">-&gt;</span>mnt<span class="token punctuation">.</span>mnt_sb <span class="token operator">=</span> root<span class="token operator">-&gt;</span>d_sb<span class="token punctuation">;</span>
  mnt<span class="token operator">-&gt;</span>mnt_mountpoint <span class="token operator">=</span> mnt<span class="token operator">-&gt;</span>mnt<span class="token punctuation">.</span>mnt_root<span class="token punctuation">;</span>
  mnt<span class="token operator">-&gt;</span>mnt_parent <span class="token operator">=</span> mnt<span class="token punctuation">;</span>
  <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mnt<span class="token operator">-&gt;</span>mnt_instance<span class="token punctuation">,</span> <span class="token operator">&amp;</span>root<span class="token operator">-&gt;</span>d_sb<span class="token operator">-&gt;</span>s_mounts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>mnt<span class="token operator">-&gt;</span>mnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vfs_kern_mount 先是创建 struct mount 结构，每个挂载的文件系统都对应于这样一个结构。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">mount</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">hlist_node</span> mnt_hash<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mount</span> <span class="token operator">*</span>mnt_parent<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span>mnt_mountpoint<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">vfsmount</span> mnt<span class="token punctuation">;</span>
  <span class="token keyword">union</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> mnt_rcu<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">llist_node</span> mnt_llist<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> mnt_mounts<span class="token punctuation">;</span>  <span class="token comment">/* list of children, anchored here */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> mnt_child<span class="token punctuation">;</span>  <span class="token comment">/* and going through their mnt_child */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> mnt_instance<span class="token punctuation">;</span>  <span class="token comment">/* mount instance on sb-&gt;s_mounts */</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>mnt_devname<span class="token punctuation">;</span>  <span class="token comment">/* Name of device e.g. /dev/dsk/hda1 */</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> mnt_list<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> __randomize_layout<span class="token punctuation">;</span>


<span class="token keyword">struct</span> <span class="token class-name">vfsmount</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span>mnt_root<span class="token punctuation">;</span>  <span class="token comment">/* root of the mounted tree */</span>
  <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span>mnt_sb<span class="token punctuation">;</span>  <span class="token comment">/* pointer to superblock */</span>
  <span class="token keyword">int</span> mnt_flags<span class="token punctuation">;</span>
<span class="token punctuation">}</span> __randomize_layout<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，mnt_parent 是装载点所在的父文件系统，mnt_mountpoint 是装载点在父文件系统中的 dentry；struct dentry 表示目录，并和目录的 inode 关联；mnt_root 是当前文件系统根目录的 dentry，mnt_sb 是指向超级块的指针。</p><p>接下来，我们来看调用 mount_fs 挂载文件系统。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span>
<span class="token function">mount_fs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file_system_type</span> <span class="token operator">*</span>type<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span>root<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">super_block</span> <span class="token operator">*</span>sb<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  root <span class="token operator">=</span> type<span class="token operator">-&gt;</span><span class="token function">mount</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> name<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  sb <span class="token operator">=</span> root<span class="token operator">-&gt;</span>d_sb<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里调用的是 ext4_fs_type 的 mount 函数，也就是咱们上面提到的 ext4_mount，从文件系统里面读取超级块。在文件系统的实现中，每个在硬盘上的结构，在内存中也对应相同格式的结构。当所有的数据结构都读到内存里面，内核就可以通过操作这些数据结构，来操作文件系统了。</p><p>可以看出来，理解各个数据结构在这里的关系，非常重要。我这里举一个例子，来解析经过 mount 之后，刚刚那些数据结构之间的关系。</p><p>我们假设根文件系统下面有一个目录 home，有另外一个文件系统 A 挂载在这个目录 home 下面。在文件系统 A 的根目录下面有另外一个文件夹 hello。由于文件系统 A 已经挂载到了目录 home 下面，所以我们就有了目录 /home/hello，然后有另外一个文件系统 B 挂载在 /home/hello 下面。在文件系统 B 的根目录下面有另外一个文件夹 world，在 world 下面有个文件夹 data。由于文件系统 B 已经挂载到了 /home/hello 下面，所以我们就有了目录 /home/hello/world/data。</p><h2 id="维护关系而创建的数据结构" tabindex="-1"><a class="header-anchor" href="#维护关系而创建的数据结构" aria-hidden="true">#</a> 维护关系而创建的数据结构</h2><p>为了维护这些关系，操作系统创建了这一系列数据结构。具体你可以看下面的图。</p><img src="`+u+`" alt="img" style="zoom:25%;"><p>文件系统是树形关系。如果所有的文件夹都是几代单传，那就变成了一条线。你注意看图中的三条斜线。</p><p>第一条线是最左边的向左斜的 <strong>dentry 斜线</strong>。每一个文件和文件夹都有 dentry，用于和 inode 关联。第二条线是最右面的向右斜的 <strong>mount 斜线</strong>，因为这个例子涉及两次文件系统的挂载，再加上启动的时候挂载的根文件系统，一共三个 mount。第三条线是中间的向右斜的 <strong>file 斜线</strong>，每个打开的文件都有一个 file 结构，它里面有两个变量，一个指向相应的 mount，一个指向相应的 dentry。</p><p>我们从最上面往下看。</p><h3 id="_1" tabindex="-1"><a class="header-anchor" href="#_1" aria-hidden="true">#</a> 1)</h3><p><strong>1 先看第一层</strong>。根目录 / 对应一个 dentry，根目录是在根文件系统上的，根文件系统是系统启动的时候挂载的，因而有一个 mount 结构。这个 mount 结构的 mount point 指针和 mount root 指针都是指向根目录的 dentry。根目录对应的 file 的两个指针，一个指向根目录的 dentry，一个指向根目录的挂载结构 mount。</p><h3 id="_2" tabindex="-1"><a class="header-anchor" href="#_2" aria-hidden="true">#</a> 2)</h3><p><strong>2 我们再来看第二层</strong>。下一层目录 home 对应了两个 dentry，而且它们的 parent 都指向第一层的 dentry。这是为什么呢？这是因为文件系统 A 挂载到了这个目录下。这使得这个目录有两个用处。一方面，home 是根文件系统的一个挂载点；另一方面，home 是文件系统 A 的根目录。</p><p>因为还有一次挂载，因而又有了一个 mount 结构。这个 mount 结构的 mount point 指针指向作为挂载点的那个 dentry。mount root 指针指向作为根目录的那个 dentry，同时 parent 指针指向第一层的 mount 结构。home 对应的 file 的两个指针，一个指向文件系统 A 根目录的 dentry，一个指向文件系统 A 的挂载结构 mount。</p><h3 id="_3" tabindex="-1"><a class="header-anchor" href="#_3" aria-hidden="true">#</a> 3)</h3><p><strong>3 我们再来看第三层</strong>。目录 hello 又挂载了一个文件系统 B，所以第三层的结构和第二层几乎一样。</p><h3 id="_4" tabindex="-1"><a class="header-anchor" href="#_4" aria-hidden="true">#</a> 4)</h3><p><strong>4 接下来是第四层</strong>。目录 world 就是一个普通的目录。只要它的 dentry 的 parent 指针指向上一层就可以了。我们来看 world 对应的 file 结构。由于挂载点不变，还是指向第三层的 mount 结构。</p><h3 id="_5" tabindex="-1"><a class="header-anchor" href="#_5" aria-hidden="true">#</a> 5)</h3><p><strong>5 接下来是第五层</strong>。对于文件 data，是一个普通的文件，它的 dentry 的 parent 指向第四层的 dentry。对于 data 对应的 file 结构，由于挂载点不变，还是指向第三层的 mount 结构。</p><h2 id="打开文件" tabindex="-1"><a class="header-anchor" href="#打开文件" aria-hidden="true">#</a> 打开文件</h2><p>接下来，我们从分析 Open 系统调用说起。</p><p>在系统调用的那一节，我们知道，在进程里面通过 open 系统调用打开文件，最终对调用到内核的系统调用实现 sys_open。当时我们仅仅解析了系统调用的原理，没有接着分析下去，现在我们接着分析这个过程。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>open<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token class-name">umode_t</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token function">do_sys_open</span><span class="token punctuation">(</span>AT_FDCWD<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">long</span> <span class="token function">do_sys_open</span><span class="token punctuation">(</span><span class="token keyword">int</span> dfd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">umode_t</span> mode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  fd <span class="token operator">=</span> <span class="token function">get_unused_fd_flags</span><span class="token punctuation">(</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f <span class="token operator">=</span> <span class="token function">do_filp_open</span><span class="token punctuation">(</span>dfd<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ERR</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">put_unused_fd</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      fd <span class="token operator">=</span> <span class="token function">PTR_ERR</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">fsnotify_open</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">fd_install</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">putname</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要打开一个文件，首先要通过 get_unused_fd_flags 得到一个没有用的文件描述符。如何获取这个文件描述符呢？</p><p>在每一个进程的 task_struct 中，有一个指针 files，类型是 files_struct。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">files_struct</span>    <span class="token operator">*</span>files<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>files_struct 里面最重要的是一个文件描述符列表，每打开一个文件，就会在这个列表中分配一项，下标就是文件描述符。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">files_struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> __rcu <span class="token operator">*</span> fd_array<span class="token punctuation">[</span>NR_OPEN_DEFAULT<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于任何一个进程，默认情况下，文件描述符 0 表示 stdin 标准输入，文件描述符 1 表示 stdout 标准输出，文件描述符 2 表示 stderr 标准错误输出。另外，再打开的文件，都会从这个列表中找一个空闲位置分配给它。</p><p>文件描述符列表的每一项都是一个指向 struct file 的指针，也就是说，每打开一个文件，都会有一个 struct file 对应。</p><p>do_sys_open 中调用 do_filp_open，就是创建这个 struct file 结构，然后 fd_install(fd, f) 是将文件描述符和这个结构关联起来。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token function">do_filp_open</span><span class="token punctuation">(</span><span class="token keyword">int</span> dfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">filename</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">open_flags</span> <span class="token operator">*</span>op<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">set_nameidata</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nd<span class="token punctuation">,</span> dfd<span class="token punctuation">,</span> pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>
  filp <span class="token operator">=</span> <span class="token function">path_openat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nd<span class="token punctuation">,</span> op<span class="token punctuation">,</span> flags <span class="token operator">|</span> LOOKUP_RCU<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">restore_nameidata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> filp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>do_filp_open 里面首先初始化了 struct nameidata 这个结构。我们知道，文件都是一串的路径名称，需要逐个解析。这个结构在解析和查找路径的时候提供辅助作用。</p><p>在 struct nameidata 里面有一个关键的成员变量 struct path。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">path</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">vfsmount</span> <span class="token operator">*</span>mnt<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span>dentry<span class="token punctuation">;</span>
<span class="token punctuation">}</span> __randomize_layout<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，struct vfsmount 和文件系统的挂载有关。另一个 struct dentry，除了上面说的用于标识目录之外，还可以表示文件名，还会建立文件名及其 inode 之间的关联。</p><p>接下来就调用 path_openat，主要做了以下几件事情：</p><ul><li>get_empty_filp 生成一个 struct file 结构；</li><li>path_init 初始化 nameidata，准备开始节点路径查找；</li><li>link_path_walk 对于路径名逐层进行节点路径查找，这里面有一个大的循环，用“/”分隔逐层处理；</li><li>do_last 获取文件对应的 inode 对象，并且初始化 file 对象。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token function">path_openat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">nameidata</span> <span class="token operator">*</span>nd<span class="token punctuation">,</span>
      <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">open_flags</span> <span class="token operator">*</span>op<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  file <span class="token operator">=</span> <span class="token function">get_empty_filp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  s <span class="token operator">=</span> <span class="token function">path_init</span><span class="token punctuation">(</span>nd<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>error <span class="token operator">=</span> <span class="token function">link_path_walk</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> nd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>error <span class="token operator">=</span> <span class="token function">do_last</span><span class="token punctuation">(</span>nd<span class="token punctuation">,</span> file<span class="token punctuation">,</span> op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opened<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
  <span class="token function">terminate_walk</span><span class="token punctuation">(</span>nd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> file<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，文件“/root/hello/world/data”，link_path_walk 会解析前面的路径部分“/root/hello/world”，解析完毕的时候 nameidata 的 dentry 为路径名的最后一部分的父目录“/root/hello/world”，而 nameidata 的 filename 为路径名的最后一部分“data”。</p><p>最后一部分的解析和处理，我们交给 do_last。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">do_last</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">nameidata</span> <span class="token operator">*</span>nd<span class="token punctuation">,</span>
       <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">open_flags</span> <span class="token operator">*</span>op<span class="token punctuation">,</span>
       <span class="token keyword">int</span> <span class="token operator">*</span>opened<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  error <span class="token operator">=</span> <span class="token function">lookup_fast</span><span class="token punctuation">(</span>nd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">,</span> <span class="token operator">&amp;</span>inode<span class="token punctuation">,</span> <span class="token operator">&amp;</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    error <span class="token operator">=</span> <span class="token function">lookup_open</span><span class="token punctuation">(</span>nd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">,</span> file<span class="token punctuation">,</span> op<span class="token punctuation">,</span> got_write<span class="token punctuation">,</span> opened<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  error <span class="token operator">=</span> <span class="token function">vfs_open</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nd<span class="token operator">-&gt;</span>path<span class="token punctuation">,</span> file<span class="token punctuation">,</span> <span class="token function">current_cred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里面，我们需要先查找文件路径最后一部分对应的 dentry。如何查找呢？</p><h2 id="目录项高速缓存-dentry-cache" tabindex="-1"><a class="header-anchor" href="#目录项高速缓存-dentry-cache" aria-hidden="true">#</a> 目录项高速缓存 dentry cache</h2><p>Linux 为了提高目录项对象的处理效率，设计与实现了<strong>目录项高速缓存 dentry cache</strong>，简称 dcache。它主要由两个数据结构组成：</p><ul><li>哈希表 dentry_hashtable：dcache 中的所有 dentry 对象都通过 d_hash 指针链到相应的 dentry 哈希链表中；</li><li>未使用的 dentry 对象链表 s_dentry_lru：dentry 对象通过其 d_lru 指针链入 LRU 链表中。LRU 的意思是最近最少使用，我们已经好几次看到它了。只要有它，就说明长时间不使用，就应该释放了。</li></ul><img src="`+r+`" alt="img" style="zoom:25%;"><p>这两个列表之间会产生复杂的关系：</p><ul><li>引用为 0：一个在散列表中的 dentry 变成没有人引用了，就会被加到 LRU 表中去；</li><li>再次被引用：一个在 LRU 表中的 dentry 再次被引用了，则从 LRU 表中移除；</li><li>分配：当 dentry 在散列表中没有找到，则从 Slub 分配器中分配一个；</li><li>过期归还：当 LRU 表中最长时间没有使用的 dentry 应该释放回 Slub 分配器；</li><li>文件删除：文件被删除了，相应的 dentry 应该释放回 Slub 分配器；</li><li>结构复用：当需要分配一个 dentry，但是无法分配新的，就从 LRU 表中取出一个来复用。</li></ul><p>所以，do_last() 在查找 dentry 的时候，当然先从缓存中查找，调用的是 lookup_fast。</p><p>如果缓存中没有找到，就需要真的到文件系统里面去找了，lookup_open 会创建一个新的 dentry，并且调用上一级目录的 Inode 的 inode_operations 的 lookup 函数，对于 ext4 来讲，调用的是 ext4_lookup，会到咱们上一节讲的文件系统里面去找 inode。最终找到后将新生成的 dentry 赋给 path 变量。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lookup_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">nameidata</span> <span class="token operator">*</span>nd<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">path</span> <span class="token operator">*</span>path<span class="token punctuation">,</span>
      <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>
      <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">open_flags</span> <span class="token operator">*</span>op<span class="token punctuation">,</span>
      bool got_write<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>opened<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    dentry <span class="token operator">=</span> <span class="token function">d_alloc_parallel</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token operator">&amp;</span>nd<span class="token operator">-&gt;</span>last<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span>res <span class="token operator">=</span> dir_inode<span class="token operator">-&gt;</span>i_op<span class="token operator">-&gt;</span><span class="token function">lookup</span><span class="token punctuation">(</span>dir_inode<span class="token punctuation">,</span> dentry<span class="token punctuation">,</span>
                   nd<span class="token operator">-&gt;</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    path<span class="token operator">-&gt;</span>dentry <span class="token operator">=</span> dentry<span class="token punctuation">;</span>
  path<span class="token operator">-&gt;</span>mnt <span class="token operator">=</span> nd<span class="token operator">-&gt;</span>path<span class="token punctuation">.</span>mnt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>




<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">inode_operations</span> ext4_dir_inode_operations <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>create    <span class="token operator">=</span> ext4_create<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>lookup    <span class="token operator">=</span> ext4_lookup<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>do_last() 的最后一步是调用 vfs_open 真正打开文件。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">vfs_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">path</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span>
       <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>cred<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span>dentry <span class="token operator">=</span> <span class="token function">d_real</span><span class="token punctuation">(</span>path<span class="token operator">-&gt;</span>dentry<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> file<span class="token operator">-&gt;</span>f_flags<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  file<span class="token operator">-&gt;</span>f_path <span class="token operator">=</span> <span class="token operator">*</span>path<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">do_dentry_open</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token function">d_backing_inode</span><span class="token punctuation">(</span>dentry<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> cred<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">do_dentry_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">,</span>
        <span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span>
        <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token operator">*</span>cred<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  f<span class="token operator">-&gt;</span>f_mode <span class="token operator">=</span> <span class="token function">OPEN_FMODE</span><span class="token punctuation">(</span>f<span class="token operator">-&gt;</span>f_flags<span class="token punctuation">)</span> <span class="token operator">|</span> FMODE_LSEEK <span class="token operator">|</span>
        FMODE_PREAD <span class="token operator">|</span> FMODE_PWRITE<span class="token punctuation">;</span>
  <span class="token function">path_get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token operator">-&gt;</span>f_path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  f<span class="token operator">-&gt;</span>f_inode <span class="token operator">=</span> inode<span class="token punctuation">;</span>
  f<span class="token operator">-&gt;</span>f_mapping <span class="token operator">=</span> inode<span class="token operator">-&gt;</span>i_mapping<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  f<span class="token operator">-&gt;</span>f_op <span class="token operator">=</span> <span class="token function">fops_get</span><span class="token punctuation">(</span>inode<span class="token operator">-&gt;</span>i_fop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  open <span class="token operator">=</span> f<span class="token operator">-&gt;</span>f_op<span class="token operator">-&gt;</span>open<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  error <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>inode<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  f<span class="token operator">-&gt;</span>f_flags <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>O_CREAT <span class="token operator">|</span> O_EXCL <span class="token operator">|</span> O_NOCTTY <span class="token operator">|</span> O_TRUNC<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">file_ra_state_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token operator">-&gt;</span>f_ra<span class="token punctuation">,</span> f<span class="token operator">-&gt;</span>f_mapping<span class="token operator">-&gt;</span>host<span class="token operator">-&gt;</span>i_mapping<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>


<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> ext4_file_operations <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">.</span>open    <span class="token operator">=</span> ext4_file_open<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vfs_open 里面最终要做的一件事情是，调用 f_op-&gt;open，也就是调用 ext4_file_open。另外一件重要的事情是将打开文件的所有信息，填写到 struct file 这个结构里面。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token punctuation">{</span>
  <span class="token keyword">union</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">llist_node</span>  fu_llist<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">rcu_head</span>   fu_rcuhead<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> f_u<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">path</span>    f_path<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">inode</span>    <span class="token operator">*</span>f_inode<span class="token punctuation">;</span>  <span class="token comment">/* cached value */</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span>  <span class="token operator">*</span>f_op<span class="token punctuation">;</span>
  <span class="token class-name">spinlock_t</span>    f_lock<span class="token punctuation">;</span>
  <span class="token keyword">enum</span> <span class="token class-name">rw_hint</span>    f_write_hint<span class="token punctuation">;</span>
  <span class="token class-name">atomic_long_t</span>    f_count<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>     f_flags<span class="token punctuation">;</span>
  <span class="token class-name">fmode_t</span>      f_mode<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">mutex</span>    f_pos_lock<span class="token punctuation">;</span>
  <span class="token class-name">loff_t</span>      f_pos<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">fown_struct</span>  f_owner<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span>  <span class="token operator">*</span>f_cred<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">struct</span> <span class="token class-name">address_space</span>  <span class="token operator">*</span>f_mapping<span class="token punctuation">;</span>
  <span class="token class-name">errseq_t</span>    f_wb_err<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结时刻" tabindex="-1"><a class="header-anchor" href="#总结时刻" aria-hidden="true">#</a> 总结时刻</h2><p>对于虚拟文件系统的解析就到这里了，我们可以看出，有关文件的数据结构层次多，而且很复杂，就得到了下面这张图，这张图在这个专栏最开始的时候，已经展示过一遍，到这里，你应该能明白它们之间的关系了。</p><figure><img src="`+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这张图十分重要，一定要掌握。因为我们后面的字符设备、块设备、管道、进程间通信、网络等等，全部都要用到这里面的知识。希望当你再次遇到它的时候，能够马上说出各个数据结构之间的关系。</p><p>这里我带你简单做一个梳理，帮助你理解记忆它。</p><p>对于每一个进程，打开的文件都有一个文件描述符，在 files_struct 里面会有文件描述符数组。每个一个文件描述符是这个数组的下标，里面的内容指向一个 file 结构，表示打开的文件。这个结构里面有这个文件对应的 inode，最重要的是这个文件对应的操作 file_operation。如果操作这个文件，就看这个 file_operation 里面的定义了。</p><p>对于每一个打开的文件，都有一个 dentry 对应，虽然叫作 directory entry，但是不仅仅表示文件夹，也表示文件。它最重要的作用就是指向这个文件对应的 inode。</p><p>如果说 file 结构是一个文件打开以后才创建的，dentry 是放在一个 dentry cache 里面的，文件关闭了，他依然存在，因而他可以更长期地维护内存中的文件的表示和硬盘上文件的表示之间的关系。</p><p>inode 结构就表示硬盘上的 inode，包括块设备号等。</p><p>几乎每一种结构都有自己对应的 operation 结构，里面都是一些方法，因而当后面遇到对于某种结构进行处理的时候，如果不容易找到相应的处理函数，就先找这个 operation 结构，就清楚了。</p><h2 id="课堂练习" tabindex="-1"><a class="header-anchor" href="#课堂练习" aria-hidden="true">#</a> 课堂练习</h2><p>上一节的总结中，我们说，同一个文件系统中，文件夹和文件的对应关系。如果跨的是文件系统，你知道如何维护这种映射关系吗？</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><h2 id="课后讨论" tabindex="-1"><a class="header-anchor" href="#课后讨论" aria-hidden="true">#</a> 课后讨论</h2><p>文章的核心就是把磁盘文件数据映射到进程中，可以把在磁盘的文件组织看成一种协议，内存中进程中的文件组织形式看成另外一种协议，内核就是这两个协议的中转proxy,带着这个主线看文章思路要明朗一些<br> inode和dentry在一个文件系统挂载的时候怎么初始化和做好映射关系，这个是难点，我一开始也看懵逼了，后来一想，根文件系统不是挂载了各种磁盘分区的文件系统么，这个老师如果结合centos的xfs根文件系统下，可以挂载ext4的文件系统，并且用一个磁盘分区演示挂载，然后分析，可能大家更好理解，毕竟平时大家都是一个文件系统格式走到黑，个人建议这种复杂逻辑关系比如那个挂载图可以拍个动态图和视频，发个链接让大家去看看，<br> 第一 文章讲的是格式化一个磁盘并且mount到系统根目录<br> 第二 进程创建过程中跟文件的交互过程，包括打开，创建，当然修改删除老师没讲<br> 作者回复: 赞，这个思路好啊</p><p>结合《Linux内核设计与实现》这本书 进入状态更快<br> 作者回复: 赞</p><ul><li>多层组件统一完成进行读写文件的任务</li><li>系统调用 sys_open, sys_read 等 <ul><li>进程维护打开的文件数据结构, 系统维护所有打开的文件数据结构</li><li>Linux 提供统一的虚拟文件系统接口; 例如 inode, directory entry, mount, 以及对应操作 inode operations等, 因此可以同时支持数十种不同的文件系统</li><li>vfs 通过设备 I/O 层在通过块设备驱动程序访问硬盘文件系统</li><li>通过缓存层加快块设备读写</li></ul></li><li>通过解析系统调用了解内核架构</li><li>挂载文件系统 mount</li><li>注册文件系统 register_filesystem 后才能挂载 <ul><li>调用链 mount-&gt;do_mount-&gt;do_new_mount→vfs_kern_mount</li><li>首先创建 struct mount</li><li>其中 mnt_parent 指向父 fs 的 mount; mnt_parentpoint 指向父 fs 的 dentry <ul><li>用 dentry 表示目录, 并和目录的 inode 关联</li><li>mnt_root 指向当前 fs 根目录的 dentry; 还有 vfsmount 指向挂载树 root 和超级块</li></ul></li><li>调用 mount_fs 进行挂载</li><li>调用 ext4_fs_type→mount(ext4_mount), 读取超级块到内存 <ul><li>文件和文件夹都有一个 dentry, 用于与 inode 关联, 每个挂载的文件系统都由一个 mount 描述; 每个打开的文件都由 file 结构描述, 其指向 dentry 和 mount.</li><li>二层文件系统根目录有两个 dentry, 一个表示挂载点, 另一个是上层 fs 的目录.</li></ul></li></ul></li><li>打开文件 sys_open</li><li>先获取一个未使用的 fd, 其中 task_struct.files.fd_array[] 中每一项指向打开文件的 struct file, 其中 fd 作为下标. 默认 0→stdin, 1→stdout, 2→stderr <ul><li>调用 do_sys_open-&gt;do_flip_open</li><li>先初始化 nameidata, 解析文件路径名; 接着调用 path_openat<br> - 生成 struct file 结构; 初始化 nameidata, 准备查找<br> - link_path_walk 根据路径名逐层查找<br> - do_last 获取文件 inode, 初始化 file <ul><li>查找路径最后一部分对应的 dentry</li><li>Linux 通过目录项高速缓存 dentry cache(dentry) 提高效率. 由两个数据结构组成<br> - 哈希表: dentry_hashtable; 引用变为 0 后加入 lru 链表; dentry 没找到则从 slub 分配; 无法分配则从 lru 中获取; 文件删除释放 dentry;<br> - 未使用的 dentry lru 链表; 再次被引用返回哈希表; dentry 过期返回给 slub 分配器 <ul><li>do_last 先从缓存查找 dentry, 若没找到在从文件系统中找并创建 dentry, 再赋给 nameidata 的 path.dentry; 最后调用 vfs_open 真正打开文件</li><li>vfs_open 会调用 f_op-&gt;open 即 ext4_file_open, 还将文件信息存入 struct file 中.</li></ul></li><li>许多结构体中都有自己对应的 operation 结构, 方便调用对应的函数进行处理</li></ul></li></ul></li></ul><p>老师，你说dentry最重要的作用是指向inode，但是 struct file不是已经指向inode了么<br> 网友回复：只是为了方便路径查找和复用而已，dentry有缓存。<br> 网友回复：我理解应该是作用不一样，struct file是VFS的接口层，是给每个进程用，屏蔽不同文件系统的细节。但是dentry是真实inode和内存的映射关系，属于VFS的实现层。struct fille指向inode，不代表dentry就没用了。</p><p>inode跟dentry属于文件系统范畴，struct file属于进程上下文，fd属于用户态空间概念。</p><p>对于总结中的那副图，进程A和进程B都打开了stderr文件，但是，图中表示的是两个stderr文件描述符指向了同一个struct file结构。理论上，这个进程的stderr应该对应不同的struct file才对，应为struct file依附于进程的，进程每打开文件，内核就会相应的创建一个struct file与之对应。</p><p><code>inode 结构就表示硬盘上的 inode，包括块设备号等。</code> 这个说法不太准确。inode结构体是磁盘文件inode的内存表示，磁盘文件的inode不包含引用计数之类的东西，被读取至内存，使用inode结构体表示。<br> 作者回复: inode结构就是用来“表示”硬盘上的inode。inode结构体是磁盘文件inode的内存表示，我也是这个意思的</p>',101),v={href:"https://garlicspace.com/2021/03/06/linux%e8%b7%a8%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e7%9a%84%e6%96%87%e4%bb%b6%e5%a4%b9%e5%92%8c%e6%96%87%e4%bb%b6%e6%98%a0%e5%b0%84%e5%85%b3%e7%b3%bb/",target:"_blank",rel:"noopener noreferrer"},_=a("<p>如何维护跨文件系统的文件夹和文件的关系：通过dentry在操作系统层面来维护，dentry和inode关联，而且dentry里有parent、child、subdirs这些成员，正好对应文件夹和文件之间的关系<br> 作者回复: 在内存里面，也有superblock的，会关联dentry</p><p>老师您好，请教一个问题：lookup_open创建新的dentry后，会把新的dentry加到dentry cache里吗？<br> 作者回复: 会的</p><p>从文章可以看出，父文件系统的挂载点其实就是子文件系统挂载的地方，比如文章中的A文件系统挂载在根文件系统的home目录下，那home是根文件系统的一个挂载点。<br> 另外，我有一个疑问：data是一个文件，而dentry是一个目录，为什么data文件struct file的dentry指向一个叫data的dentry呢？明明没有data目录呀？<br> 作者回复: dentry不仅仅表示目录，也可以表示文件</p><p>老师，实在是不理解home目录为什么是根文件系统的挂载点，难道不是那个“/”吗？我一直理解的挂载点就是挂载文件系统的那个目录，希望老师抽个时间，指点一下挂载目录和挂载点的区别，看了一天了，谢谢。<br> 作者回复: home是在根文件系统上的一个挂载点</p><p>老师的挂载文件系统个人感觉没有错, 我的理解如下</p><ul><li>第一层</li><li>mount: 根文件系统描述 <ul><li>dentry: 根文件系统路径</li><li>file: 根文件系统对应的文件</li><li>vfsmount: 指向该文件的文件系统 <ul><li>dentry: 指向该文件的路径</li></ul></li></ul></li><li>第二层</li><li>mount: 文件系统 A 的描述 <ul><li>dentry: 文件系统 A 的根路径</li><li>file: 文件系统 A 的目录文件</li></ul></li><li>第三层</li><li>mount: 文件系统 B 的描述 <ul><li>dentry: 文件系统 B 的根路径</li><li>file: 文件系统 B 的目录文件</li></ul></li><li>第四层</li><li>dentry: 文件系统 B 中 world 文件夹路径 <ul><li>file: 文件系统 B 中的文件</li></ul></li><li>第五层</li><li>dentry: 文件系统 B 中 world 文件夹下的文件路径 <ul><li>file: 文件系统 B 中 world 文件夹下的文件</li></ul></li></ul>",6);function b(f,y){const t=e("ExternalLinkIcon");return o(),c("div",null,[m,n("p",null,[s("跨越了文件系统目录和文件就没啥关系了， 查找文件可以通过dentry cache进行查找， 未找到时，通过文件系统mount point信息，读取中间的目录， 查找生成新dentry， 其父dentry也是指向其所在文件系统，不会跨越文件系统， "),n("a",v,[s("学习笔记"),l(t)])]),_])}const w=p(d,[["render",b],["__file","J29-VFS虚拟文件系统.html.vue"]]);export{w as default};
