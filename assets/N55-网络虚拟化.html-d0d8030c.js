import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,d as t}from"./app-cdabc73c.js";const p="/assets/243e93913b18c3ab00be5676bef334d3-debf924b.png",e="/assets/9826223c7375bec19bd13588f3875ffd-7c011367.png",o="/assets/e329505cfcd367612f8ae47054ec8e44-cdf21065.jpg",c={},i=t(`<h1 id="_55-网络虚拟化-如何成立独立的合作部" tabindex="-1"><a class="header-anchor" href="#_55-网络虚拟化-如何成立独立的合作部" aria-hidden="true">#</a> 55 | 网络虚拟化：如何成立独立的合作部？</h1><p>上一节，我们讲了存储虚拟化，这一节我们来讲网络虚拟化。</p><p>网络虚拟化有和存储虚拟化类似的地方，例如，它们都是基于 virtio 的，因而我们在看网络虚拟化的过程中，会看到和存储虚拟化很像的数据结构和原理。但是，网络虚拟化也有自己的特殊性。例如，存储虚拟化是将宿主机上的文件作为客户机上的硬盘，而网络虚拟化需要依赖于内核协议栈进行网络包的封装与解封装。那怎么实现客户机和宿主机之间的互通呢？我们就一起来看一看。</p><p><strong>解析初始化过程</strong></p><p>我们还是从 Virtio Network Device 这个设备的初始化讲起。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo device_type_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> TYPE_DEVICE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parent <span class="token operator">=</span> TYPE_OBJECT<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DeviceState<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_init <span class="token operator">=</span> device_initfn<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_post_init <span class="token operator">=</span> device_post_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_finalize <span class="token operator">=</span> device_finalize<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_base_init <span class="token operator">=</span> device_class_base_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_init <span class="token operator">=</span> device_class_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>abstract <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DeviceClass<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo virtio_device_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> TYPE_VIRTIO_DEVICE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parent <span class="token operator">=</span> TYPE_DEVICE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VirtIODevice<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_init <span class="token operator">=</span> virtio_device_class_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_finalize <span class="token operator">=</span> virtio_device_instance_finalize<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>abstract <span class="token operator">=</span> true<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VirtioDeviceClass<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> TypeInfo virtio_net_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> TYPE_VIRTIO_NET<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>parent <span class="token operator">=</span> TYPE_VIRTIO_DEVICE<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VirtIONet<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>instance_init <span class="token operator">=</span> virtio_net_instance_init<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>class_init <span class="token operator">=</span> virtio_net_class_init<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">virtio_register_types</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">type_register_static</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>virtio_net_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">type_init</span><span class="token punctuation">(</span>virtio_register_types<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Virtio Network Device 这种类的定义是有多层继承关系的，TYPE_VIRTIO_NET 的父类是 TYPE_VIRTIO_DEVICE，TYPE_VIRTIO_DEVICE 的父类是 TYPE_DEVICE，TYPE_DEVICE 的父类是 TYPE_OBJECT，继承关系到头了。</p><p>type_init 用于注册这种类。这里面每一层都有 class_init，用于从 TypeImpl 生成 xxxClass，也有 instance_init，会将 xxxClass 初始化为实例。</p><p>TYPE_VIRTIO_NET 层的 class_init 函数 virtio_net_class_init，定义了 DeviceClass 的 realize 函数为 virtio_net_device_realize，这一点和存储块设备是一样的。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">virtio_net_device_realize</span><span class="token punctuation">(</span>DeviceState <span class="token operator">*</span>dev<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    VirtIODevice <span class="token operator">*</span>vdev <span class="token operator">=</span> <span class="token function">VIRTIO_DEVICE</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    VirtIONet <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token function">VIRTIO_NET</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    NetClientState <span class="token operator">*</span>nc<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">virtio_init</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> <span class="token string">&quot;virtio-net&quot;</span><span class="token punctuation">,</span> VIRTIO_ID_NET<span class="token punctuation">,</span> n<span class="token operator">-&gt;</span>config_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     * We set a lower limit on RX queue size to what it always was.
     * Guests that want a smaller ring can always resize it without
     * help from us (using virtio 1 and up).
     */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>net_conf<span class="token punctuation">.</span>rx_queue_size <span class="token operator">&lt;</span> VIRTIO_NET_RX_QUEUE_MIN_SIZE <span class="token operator">||</span>
        n<span class="token operator">-&gt;</span>net_conf<span class="token punctuation">.</span>rx_queue_size <span class="token operator">&gt;</span> VIRTQUEUE_MAX_SIZE <span class="token operator">||</span>
        <span class="token operator">!</span><span class="token function">is_power_of_2</span><span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>net_conf<span class="token punctuation">.</span>rx_queue_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>net_conf<span class="token punctuation">.</span>tx_queue_size <span class="token operator">&lt;</span> VIRTIO_NET_TX_QUEUE_MIN_SIZE <span class="token operator">||</span>
        n<span class="token operator">-&gt;</span>net_conf<span class="token punctuation">.</span>tx_queue_size <span class="token operator">&gt;</span> VIRTQUEUE_MAX_SIZE <span class="token operator">||</span>
        <span class="token operator">!</span><span class="token function">is_power_of_2</span><span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>net_conf<span class="token punctuation">.</span>tx_queue_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    n<span class="token operator">-&gt;</span>max_queues <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>nic_conf<span class="token punctuation">.</span>peers<span class="token punctuation">.</span>queues<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>max_queues <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> VIRTIO_QUEUE_MAX<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    n<span class="token operator">-&gt;</span>vqs <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>VirtIONetQueue<span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token operator">-&gt;</span>max_queues<span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">-&gt;</span>curr_queues <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    n<span class="token operator">-&gt;</span>net_conf<span class="token punctuation">.</span>tx_queue_size <span class="token operator">=</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token function">virtio_net_max_tx_queue_size</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    n<span class="token operator">-&gt;</span>net_conf<span class="token punctuation">.</span>tx_queue_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-&gt;</span>max_queues<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">virtio_net_add_queue</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    n<span class="token operator">-&gt;</span>ctrl_vq <span class="token operator">=</span> <span class="token function">virtio_add_queue</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> virtio_net_handle_ctrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_macaddr_default_if_unset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>nic_conf<span class="token punctuation">.</span>macaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>mac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>nic_conf<span class="token punctuation">.</span>macaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>mac<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">-&gt;</span>status <span class="token operator">=</span> VIRTIO_NET_S_LINK_UP<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>netclient_type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        n<span class="token operator">-&gt;</span>nic <span class="token operator">=</span> <span class="token function">qemu_new_nic</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net_virtio_info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>nic_conf<span class="token punctuation">,</span>
                              n<span class="token operator">-&gt;</span>netclient_type<span class="token punctuation">,</span> n<span class="token operator">-&gt;</span>netclient_name<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        n<span class="token operator">-&gt;</span>nic <span class="token operator">=</span> <span class="token function">qemu_new_nic</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net_virtio_info<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>nic_conf<span class="token punctuation">,</span>
                              <span class="token function">object_get_typename</span><span class="token punctuation">(</span><span class="token function">OBJECT</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dev<span class="token operator">-&gt;</span>id<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面创建了一个 VirtIODevice，这一点和存储虚拟化也是一样的。virtio_init 用来初始化这个设备。VirtIODevice 结构里面有一个 VirtQueue 数组，这就是 virtio 前端和后端互相传数据的队列，最多有 VIRTIO_QUEUE_MAX 个。</p><p>刚才我们说的都是一样的地方，其实也有不一样的地方，我们下面来看。</p><p>你会发现，这里面有这样的语句 n-&gt;max_queues * 2 + 1 &gt; VIRTIO_QUEUE_MAX。为什么要乘以 2 呢？这是因为，对于网络设备来讲，应该分发送队列和接收队列两个方向，所以乘以 2。</p><p>接下来，我们调用 virtio_net_add_queue 来初始化队列，可以看出来，这里面就有发送 tx_vq 和接收 rx_vq 两个队列。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VirtIONetQueue</span> <span class="token punctuation">{</span>
    VirtQueue <span class="token operator">*</span>rx_vq<span class="token punctuation">;</span>
    VirtQueue <span class="token operator">*</span>tx_vq<span class="token punctuation">;</span>
    QEMUTimer <span class="token operator">*</span>tx_timer<span class="token punctuation">;</span>
    QEMUBH <span class="token operator">*</span>tx_bh<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> tx_waiting<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        VirtQueueElement <span class="token operator">*</span>elem<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> async_tx<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">VirtIONet</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>
<span class="token punctuation">}</span> VirtIONetQueue<span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">virtio_net_add_queue</span><span class="token punctuation">(</span>VirtIONet <span class="token operator">*</span>n<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    VirtIODevice <span class="token operator">*</span>vdev <span class="token operator">=</span> <span class="token function">VIRTIO_DEVICE</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    n<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>rx_vq <span class="token operator">=</span> <span class="token function">virtio_add_queue</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> n<span class="token operator">-&gt;</span>net_conf<span class="token punctuation">.</span>rx_queue_size<span class="token punctuation">,</span> virtio_net_handle_rx<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    n<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>tx_vq <span class="token operator">=</span> <span class="token function">virtio_add_queue</span><span class="token punctuation">(</span>vdev<span class="token punctuation">,</span> n<span class="token operator">-&gt;</span>net_conf<span class="token punctuation">.</span>tx_queue_size<span class="token punctuation">,</span> virtio_net_handle_tx_bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>tx_bh <span class="token operator">=</span> <span class="token function">qemu_bh_new</span><span class="token punctuation">(</span>virtio_net_tx_bh<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个 VirtQueue 中，都有一个 vring 用来维护这个队列里面的数据；另外还有函数 virtio_net_handle_rx 用于处理网络包的接收；函数 virtio_net_handle_tx_bh 用于网络包的发送，这个函数我们后面会用到。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>NICState <span class="token operator">*</span><span class="token function">qemu_new_nic</span><span class="token punctuation">(</span>NetClientInfo <span class="token operator">*</span>info<span class="token punctuation">,</span>
                       NICConf <span class="token operator">*</span>conf<span class="token punctuation">,</span>
                       <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>model<span class="token punctuation">,</span>
                       <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
                       <span class="token keyword">void</span> <span class="token operator">*</span>opaque<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    NetClientState <span class="token operator">*</span><span class="token operator">*</span>peers <span class="token operator">=</span> conf<span class="token operator">-&gt;</span>peers<span class="token punctuation">.</span>ncs<span class="token punctuation">;</span>
    NICState <span class="token operator">*</span>nic<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">,</span> queues <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> conf<span class="token operator">-&gt;</span>peers<span class="token punctuation">.</span>queues<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    nic <span class="token operator">=</span> <span class="token function">g_malloc0</span><span class="token punctuation">(</span>info<span class="token operator">-&gt;</span>size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>NetClientState<span class="token punctuation">)</span> <span class="token operator">*</span> queues<span class="token punctuation">)</span><span class="token punctuation">;</span>
    nic<span class="token operator">-&gt;</span>ncs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>nic <span class="token operator">+</span> info<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span>
    nic<span class="token operator">-&gt;</span>conf <span class="token operator">=</span> conf<span class="token punctuation">;</span>
    nic<span class="token operator">-&gt;</span>opaque <span class="token operator">=</span> opaque<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queues<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">qemu_net_client_setup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nic<span class="token operator">-&gt;</span>ncs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">,</span> peers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> model<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nic<span class="token operator">-&gt;</span>ncs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>queue_index <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> nic<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">qemu_net_client_setup</span><span class="token punctuation">(</span>NetClientState <span class="token operator">*</span>nc<span class="token punctuation">,</span>
                                  NetClientInfo <span class="token operator">*</span>info<span class="token punctuation">,</span>
                                  NetClientState <span class="token operator">*</span>peer<span class="token punctuation">,</span>
                                  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>model<span class="token punctuation">,</span>
                                  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
                                  NetClientDestructor <span class="token operator">*</span>destructor<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    nc<span class="token operator">-&gt;</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>
    nc<span class="token operator">-&gt;</span>model <span class="token operator">=</span> <span class="token function">g_strdup</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nc<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token function">g_strdup</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        nc<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token function">assign_name</span><span class="token punctuation">(</span>nc<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">QTAILQ_INSERT_TAIL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net_clients<span class="token punctuation">,</span> nc<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>

    nc<span class="token operator">-&gt;</span>incoming_queue <span class="token operator">=</span> <span class="token function">qemu_new_net_queue</span><span class="token punctuation">(</span>qemu_deliver_packet_iov<span class="token punctuation">,</span> nc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    nc<span class="token operator">-&gt;</span>destructor <span class="token operator">=</span> destructor<span class="token punctuation">;</span>
    <span class="token function">QTAILQ_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nc<span class="token operator">-&gt;</span>filters<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，qemu_new_nic 会创建一个虚拟机里面的网卡。</p><p><strong>qemu 的启动过程中的网络虚拟化</strong></p><p>初始化过程解析完毕以后，我们接下来从 qemu 的启动过程看起。</p><p>对于网卡的虚拟化，qemu 的启动参数里面有关的是下面两行：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">-</span>netdev tap<span class="token punctuation">,</span>fd<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>id<span class="token operator">=</span>hostnet0<span class="token punctuation">,</span>vhost<span class="token operator">=</span>on<span class="token punctuation">,</span>vhostfd<span class="token operator">=</span><span class="token number">37</span>
<span class="token operator">-</span>device virtio<span class="token operator">-</span>net<span class="token operator">-</span>pci<span class="token punctuation">,</span>netdev<span class="token operator">=</span>hostnet0<span class="token punctuation">,</span>id<span class="token operator">=</span>net0<span class="token punctuation">,</span>mac<span class="token operator">=</span>fa<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">3</span>e<span class="token operator">:</span>d1<span class="token operator">:</span><span class="token number">2</span>d<span class="token operator">:</span><span class="token number">99</span><span class="token punctuation">,</span>bus<span class="token operator">=</span>pci<span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token number">0x3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>qemu 的 main 函数会调用 net_init_clients 进行网络设备的初始化，可以解析 net 参数，也可以在 net_init_clients 中解析 netdev 参数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">net_init_clients</span><span class="token punctuation">(</span>Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">QTAILQ_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>net_clients<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qemu_opts_foreach</span><span class="token punctuation">(</span><span class="token function">qemu_find_opts</span><span class="token punctuation">(</span><span class="token string">&quot;netdev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                          net_init_netdev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> errp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qemu_opts_foreach</span><span class="token punctuation">(</span><span class="token function">qemu_find_opts</span><span class="token punctuation">(</span><span class="token string">&quot;nic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> net_param_nic<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> errp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qemu_opts_foreach</span><span class="token punctuation">(</span><span class="token function">qemu_find_opts</span><span class="token punctuation">(</span><span class="token string">&quot;net&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> net_init_client<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> errp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>net_init_clients 会解析参数。上面的参数 netdev 会调用 net_init_netdev-&gt;net_client_init-&gt;net_client_init1。</p><p>net_client_init1 会根据不同的 driver 类型，调用不同的初始化函数。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span> <span class="token keyword">const</span> net_client_init_fun<span class="token punctuation">[</span>NET_CLIENT_DRIVER__MAX<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
    <span class="token keyword">const</span> Netdev <span class="token operator">*</span>netdev<span class="token punctuation">,</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>
    NetClientState <span class="token operator">*</span>peer<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>NET_CLIENT_DRIVER_NIC<span class="token punctuation">]</span>       <span class="token operator">=</span> net_init_nic<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>NET_CLIENT_DRIVER_TAP<span class="token punctuation">]</span>       <span class="token operator">=</span> net_init_tap<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>NET_CLIENT_DRIVER_SOCKET<span class="token punctuation">]</span>    <span class="token operator">=</span> net_init_socket<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>NET_CLIENT_DRIVER_HUBPORT<span class="token punctuation">]</span>   <span class="token operator">=</span> net_init_hubport<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于我们配置的 driver 的类型是 tap，因而这里会调用 net_init_tap-&gt;net_tap_init-&gt;tap_open。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PATH_NET_TUN</span> <span class="token string">&quot;/dev/net/tun&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">tap_open</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ifname<span class="token punctuation">,</span> <span class="token keyword">int</span> ifname_size<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>vnet_hdr<span class="token punctuation">,</span>
             <span class="token keyword">int</span> vnet_hdr_required<span class="token punctuation">,</span> <span class="token keyword">int</span> mq_required<span class="token punctuation">,</span> Error <span class="token operator">*</span><span class="token operator">*</span>errp<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">ifreq</span> ifr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">,</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_net_hdr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> features<span class="token punctuation">;</span>

    <span class="token function">TFR</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>PATH_NET_TUN<span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ifr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ifr<span class="token punctuation">.</span>ifr_flags <span class="token operator">=</span> IFF_TAP <span class="token operator">|</span> IFF_NO_PI<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> TUNGETFEATURES<span class="token punctuation">,</span> <span class="token operator">&amp;</span>features<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        features <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>features <span class="token operator">&amp;</span> IFF_ONE_QUEUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ifr<span class="token punctuation">.</span>ifr_flags <span class="token operator">|=</span> IFF_ONE_QUEUE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>vnet_hdr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>features <span class="token operator">&amp;</span> IFF_VNET_HDR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token operator">*</span>vnet_hdr <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            ifr<span class="token punctuation">.</span>ifr_flags <span class="token operator">|=</span> IFF_VNET_HDR<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token operator">*</span>vnet_hdr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> TUNSETVNETHDRSZ<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    ret <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> TUNSETIFF<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>ifr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 tap_open 中，我们打开一个文件&quot;/dev/net/tun&quot;，然后通过 ioctl 操作这个文件。这是 Linux 内核的一项机制，和 KVM 机制很像。其实这就是一种通过打开这个字符设备文件，然后通过 ioctl 操作这个文件和内核打交道，来使用内核的能力。</p><figure><img src="`+p+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>为什么需要使用内核的机制呢？因为网络包需要从虚拟机里面发送到虚拟机外面，发送到宿主机上的时候，必须是一个正常的网络包才能被转发。要形成一个网络包，我们那就需要经过复杂的协议栈，协议栈的复杂咱们在发送网络包那一节讲过了。</p><p>客户机会将网络包发送给 qemu。qemu 自己没有网络协议栈，现去实现一个也不可能，太复杂了。于是，它就要借助内核的力量。</p><p>qemu 会将客户机发送给它的网络包，然后转换成为文件流，写入&quot;/dev/net/tun&quot;字符设备。就像写一个文件一样。内核中 TUN/TAP 字符设备驱动会收到这个写入的文件流，然后交给 TUN/TAP 的虚拟网卡驱动。这个驱动会将文件流再次转成网络包，交给 TCP/IP 栈，最终从虚拟 TAP 网卡 tap0 发出来，成为标准的网络包。后面我们会看到这个过程。</p><p>现在我们到内核里面，看一看打开&quot;/dev/net/tun&quot;字符设备后，内核会发生什么事情。内核的实现在 drivers/net/tun.c 文件中。这是一个字符设备驱动程序，应该符合字符设备的格式。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">module_init</span><span class="token punctuation">(</span>tun_init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">module_exit</span><span class="token punctuation">(</span>tun_cleanup<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span>DRV_DESCRIPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span>DRV_COPYRIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">&quot;GPL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_ALIAS_MISCDEV</span><span class="token punctuation">(</span>TUN_MINOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_ALIAS</span><span class="token punctuation">(</span><span class="token string">&quot;devname:net/tun&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> __init <span class="token function">tun_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ret <span class="token operator">=</span> <span class="token function">rtnl_link_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tun_link_ops<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ret <span class="token operator">=</span> <span class="token function">misc_register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tun_miscdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  ret <span class="token operator">=</span> <span class="token function">register_netdevice_notifier</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tun_notifier_block<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面注册了一个 tun_miscdev 字符设备，从它的定义可以看出，这就是&quot;/dev/net/tun&quot;字符设备。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">miscdevice</span> tun_miscdev <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>minor <span class="token operator">=</span> TUN_MINOR<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;tun&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>nodename <span class="token operator">=</span> <span class="token string">&quot;net/tun&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fops <span class="token operator">=</span> <span class="token operator">&amp;</span>tun_fops<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> tun_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>owner  <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>llseek <span class="token operator">=</span> no_llseek<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>read_iter  <span class="token operator">=</span> tun_chr_read_iter<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write_iter <span class="token operator">=</span> tun_chr_write_iter<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>poll  <span class="token operator">=</span> tun_chr_poll<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>unlocked_ioctl  <span class="token operator">=</span> tun_chr_ioctl<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>open  <span class="token operator">=</span> tun_chr_open<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>release <span class="token operator">=</span> tun_chr_close<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>fasync <span class="token operator">=</span> tun_chr_fasync<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>qemu 的 tap_open 函数会打开这个字符设备 PATH_NET_TUN。打开字符设备的过程我们不再重复。我就说一下，到了驱动这一层，调用的是 tun_chr_open。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">tun_chr_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span> file<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_file</span> <span class="token operator">*</span>tfile<span class="token punctuation">;</span>
  tfile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tun_file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sk_alloc</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> AF_UNSPEC<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">,</span>
              <span class="token operator">&amp;</span>tun_proto<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">RCU_INIT_POINTER</span><span class="token punctuation">(</span>tfile<span class="token operator">-&gt;</span>tun<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  tfile<span class="token operator">-&gt;</span>flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  tfile<span class="token operator">-&gt;</span>ifindex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">init_waitqueue_head</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tfile<span class="token operator">-&gt;</span>wq<span class="token punctuation">.</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">RCU_INIT_POINTER</span><span class="token punctuation">(</span>tfile<span class="token operator">-&gt;</span>socket<span class="token punctuation">.</span>wq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tfile<span class="token operator">-&gt;</span>wq<span class="token punctuation">)</span><span class="token punctuation">;</span>

  tfile<span class="token operator">-&gt;</span>socket<span class="token punctuation">.</span>file <span class="token operator">=</span> file<span class="token punctuation">;</span>
  tfile<span class="token operator">-&gt;</span>socket<span class="token punctuation">.</span>ops <span class="token operator">=</span> <span class="token operator">&amp;</span>tun_socket_ops<span class="token punctuation">;</span>

  <span class="token function">sock_init_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tfile<span class="token operator">-&gt;</span>socket<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tfile<span class="token operator">-&gt;</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>

  tfile<span class="token operator">-&gt;</span>sk<span class="token punctuation">.</span>sk_write_space <span class="token operator">=</span> tun_sock_write_space<span class="token punctuation">;</span>
  tfile<span class="token operator">-&gt;</span>sk<span class="token punctuation">.</span>sk_sndbuf <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>

  file<span class="token operator">-&gt;</span>private_data <span class="token operator">=</span> tfile<span class="token punctuation">;</span>
  <span class="token function">INIT_LIST_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tfile<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">sock_set_flag</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tfile<span class="token operator">-&gt;</span>sk<span class="token punctuation">,</span> SOCK_ZEROCOPY<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 tun_chr_open 的参数里面，有一个 struct file，这是代表什么文件呢？它代表的就是打开的字符设备文件&quot;/dev/net/tun&quot;，因而往这个字符设备文件中写数据，就会通过这个 struct file 写入。这个 struct file 里面的 file_operations，按照字符设备打开的规则，指向的就是 tun_fops。</p><p>另外，我们还需要在 tun_chr_open 创建了一个结构 struct tun_file，并且将 struct file 的 private_data 指向它。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* A tun_file connects an open character device to a tuntap netdevice. It
 * also contains all socket related structures 
 * to serve as one transmit queue for tuntap device. 
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">tun_file</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">sock</span> sk<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">socket</span> socket<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">socket_wq</span> wq<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_struct</span> __rcu <span class="token operator">*</span>tun<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">fasync_struct</span> <span class="token operator">*</span>fasync<span class="token punctuation">;</span>
  <span class="token comment">/* only used for fasnyc */</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">;</span>
  <span class="token keyword">union</span> <span class="token punctuation">{</span>
    u16 queue_index<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ifindex<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> next<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_struct</span> <span class="token operator">*</span>detached<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">skb_array</span> tx_array<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">tun_struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_file</span> __rcu  <span class="token operator">*</span>tfiles<span class="token punctuation">[</span>MAX_TAP_QUEUES<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>            numqueues<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span>     flags<span class="token punctuation">;</span>
  <span class="token class-name">kuid_t</span>      owner<span class="token punctuation">;</span>
  <span class="token class-name">kgid_t</span>      group<span class="token punctuation">;</span>

  <span class="token keyword">struct</span> <span class="token class-name">net_device</span>  <span class="token operator">*</span>dev<span class="token punctuation">;</span>
  <span class="token class-name">netdev_features_t</span>  set_features<span class="token punctuation">;</span>
  <span class="token keyword">int</span>      align<span class="token punctuation">;</span>
  <span class="token keyword">int</span>      vnet_hdr_sz<span class="token punctuation">;</span>
  <span class="token keyword">int</span>      sndbuf<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">tap_filter</span>  txflt<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sock_fprog</span>  fprog<span class="token punctuation">;</span>
  <span class="token comment">/* protected by rtnl lock */</span>
  bool      filter_attached<span class="token punctuation">;</span>
  <span class="token class-name">spinlock_t</span> lock<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">hlist_head</span> flows<span class="token punctuation">[</span>TUN_NUM_FLOW_ENTRIES<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">timer_list</span> flow_gc_timer<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ageing_time<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> numdisabled<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> disabled<span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>security<span class="token punctuation">;</span>
  u32 flow_count<span class="token punctuation">;</span>
  u32 rx_batched<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_pcpu_stats</span> __percpu <span class="token operator">*</span>pcpu_stats<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">proto_ops</span> tun_socket_ops <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>peek_len <span class="token operator">=</span> tun_peek_len<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>sendmsg <span class="token operator">=</span> tun_sendmsg<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>recvmsg <span class="token operator">=</span> tun_recvmsg<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 struct tun_file 中，有一个成员 struct tun_struct，它里面有一个 struct net_device，这个用来表示宿主机上的 tuntap 网络设备。在 struct tun_file 中，还有 struct socket 和 struct sock，因为要用到内核的网络协议栈，所以就需要这两个结构，这在网络协议那一节已经分析过了。</p><p>所以，按照 struct tun_file 的注释说的，这是一个很重要的数据结构。&quot;/dev/net/tun&quot;对应的 struct file 的 private_data 指向它，因而可以接收 qemu 发过来的数据。除此之外，它还可以通过 struct sock 来操作内核协议栈，然后将网络包从宿主机上的 tuntap 网络设备发出去，宿主机上的 tuntap 网络设备对应的 struct net_device 也归它管。</p><p>在 qemu 的 tap_open 函数中，打开这个字符设备文件之后，接下来要做的事情是，通过 ioctl 来设置宿主机的网卡 TUNSETIFF。</p><p>接下来，ioctl 到了内核里面，会调用 tun_chr_ioctl。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">__tun_chr_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span>
          <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">,</span> <span class="token keyword">int</span> ifreq_len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_file</span> <span class="token operator">*</span>tfile <span class="token operator">=</span> file<span class="token operator">-&gt;</span>private_data<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_struct</span> <span class="token operator">*</span>tun<span class="token punctuation">;</span>
  <span class="token keyword">void</span> __user<span class="token operator">*</span> argp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> __user<span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ifreq</span> ifr<span class="token punctuation">;</span>
  <span class="token class-name">kuid_t</span> owner<span class="token punctuation">;</span>
  <span class="token class-name">kgid_t</span> group<span class="token punctuation">;</span>
  <span class="token keyword">int</span> sndbuf<span class="token punctuation">;</span>
  <span class="token keyword">int</span> vnet_hdr_sz<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> ifindex<span class="token punctuation">;</span>
  <span class="token keyword">int</span> le<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">==</span> TUNSETIFF <span class="token operator">||</span> cmd <span class="token operator">==</span> TUNSETQUEUE <span class="token operator">||</span> <span class="token function">_IOC_TYPE</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token operator">==</span> SOCK_IOC_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifr<span class="token punctuation">,</span> argp<span class="token punctuation">,</span> ifreq_len<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  tun <span class="token operator">=</span> <span class="token function">__tun_get</span><span class="token punctuation">(</span>tfile<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">==</span> TUNSETIFF<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ifr<span class="token punctuation">.</span>ifr_name<span class="token punctuation">[</span>IFNAMSIZ<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">tun_set_iff</span><span class="token punctuation">(</span><span class="token function">sock_net</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tfile<span class="token operator">-&gt;</span>sk<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>argp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifr<span class="token punctuation">,</span> ifreq_len<span class="token punctuation">)</span><span class="token punctuation">)</span>
      ret <span class="token operator">=</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 __tun_chr_ioctl 中，我们首先通过 copy_from_user 把配置从用户态拷贝到内核态，调用 tun_set_iff 设置 tuntap 网络设备，然后调用 copy_to_user 将配置结果返回。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">tun_set_iff</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">net</span> <span class="token operator">*</span>net<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ifreq</span> <span class="token operator">*</span>ifr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_struct</span> <span class="token operator">*</span>tun<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_file</span> <span class="token operator">*</span>tfile <span class="token operator">=</span> file<span class="token operator">-&gt;</span>private_data<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> queues <span class="token operator">=</span> ifr<span class="token operator">-&gt;</span>ifr_flags <span class="token operator">&amp;</span> IFF_MULTI_QUEUE <span class="token operator">?</span>
           MAX_TAP_QUEUES <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>ifr<span class="token operator">-&gt;</span>ifr_flags <span class="token operator">&amp;</span> IFF_TUN<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* TUN device */</span>
    flags <span class="token operator">|=</span> IFF_TUN<span class="token punctuation">;</span>
    name <span class="token operator">=</span> <span class="token string">&quot;tun%d&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ifr<span class="token operator">-&gt;</span>ifr_flags <span class="token operator">&amp;</span> IFF_TAP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* TAP device */</span>
    flags <span class="token operator">|=</span> IFF_TAP<span class="token punctuation">;</span>
    name <span class="token operator">=</span> <span class="token string">&quot;tap%d&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>ifr<span class="token operator">-&gt;</span>ifr_name<span class="token punctuation">)</span>
    name <span class="token operator">=</span> ifr<span class="token operator">-&gt;</span>ifr_name<span class="token punctuation">;</span>

  dev <span class="token operator">=</span> <span class="token function">alloc_netdev_mqs</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tun_struct</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span>
               NET_NAME_UNKNOWN<span class="token punctuation">,</span> tun_setup<span class="token punctuation">,</span> queues<span class="token punctuation">,</span>
               queues<span class="token punctuation">)</span><span class="token punctuation">;</span>

  err <span class="token operator">=</span> <span class="token function">dev_get_valid_name</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">dev_net_set</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> net<span class="token punctuation">)</span><span class="token punctuation">;</span>
  dev<span class="token operator">-&gt;</span>rtnl_link_ops <span class="token operator">=</span> <span class="token operator">&amp;</span>tun_link_ops<span class="token punctuation">;</span>
  dev<span class="token operator">-&gt;</span>ifindex <span class="token operator">=</span> tfile<span class="token operator">-&gt;</span>ifindex<span class="token punctuation">;</span>
  dev<span class="token operator">-&gt;</span>sysfs_groups<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>tun_attr_group<span class="token punctuation">;</span>

  tun <span class="token operator">=</span> <span class="token function">netdev_priv</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  tun<span class="token operator">-&gt;</span>dev <span class="token operator">=</span> dev<span class="token punctuation">;</span>
  tun<span class="token operator">-&gt;</span>flags <span class="token operator">=</span> flags<span class="token punctuation">;</span>
  tun<span class="token operator">-&gt;</span>txflt<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  tun<span class="token operator">-&gt;</span>vnet_hdr_sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_net_hdr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  tun<span class="token operator">-&gt;</span>align <span class="token operator">=</span> NET_SKB_PAD<span class="token punctuation">;</span>
  tun<span class="token operator">-&gt;</span>filter_attached <span class="token operator">=</span> false<span class="token punctuation">;</span>
  tun<span class="token operator">-&gt;</span>sndbuf <span class="token operator">=</span> tfile<span class="token operator">-&gt;</span>socket<span class="token punctuation">.</span>sk<span class="token operator">-&gt;</span>sk_sndbuf<span class="token punctuation">;</span>
  tun<span class="token operator">-&gt;</span>rx_batched <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">tun_net_init</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">tun_flow_init</span><span class="token punctuation">(</span>tun<span class="token punctuation">)</span><span class="token punctuation">;</span>

  err <span class="token operator">=</span> <span class="token function">tun_attach</span><span class="token punctuation">(</span>tun<span class="token punctuation">,</span> file<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>
  err <span class="token operator">=</span> <span class="token function">register_netdevice</span><span class="token punctuation">(</span>tun<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">netif_carrier_on</span><span class="token punctuation">(</span>tun<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">netif_running</span><span class="token punctuation">(</span>tun<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">netif_tx_wake_all_queues</span><span class="token punctuation">(</span>tun<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">strcpy</span><span class="token punctuation">(</span>ifr<span class="token operator">-&gt;</span>ifr_name<span class="token punctuation">,</span> tun<span class="token operator">-&gt;</span>dev<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tun_set_iff 创建了 struct tun_struct 和 struct net_device，并且将这个 tuntap 网络设备通过 register_netdevice 注册到内核中。这样，我们就能在宿主机上通过 ip addr 看到这个网卡了。</p><figure><img src="`+e+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>至此宿主机上的内核的数据结构也完成了。</p><p><strong>关联前端设备驱动和后端设备驱动</strong></p><p>下面，我们来解析在客户机中发送一个网络包的时候，会发生哪些事情。</p><p>虚拟机里面的进程发送一个网络包，通过文件系统和 Socket 调用网络协议栈，到达网络设备层。只不过这个不是普通的网络设备，而是 virtio_net 的驱动。</p><p>virtio_net 的驱动程序代码在 Linux 操作系统的源代码里面，文件名为 drivers/net/virtio_net.c。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> __init <span class="token keyword">int</span> <span class="token function">virtio_net_driver_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    ret <span class="token operator">=</span> <span class="token function">register_virtio_driver</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>virtio_net_driver<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
<span class="token function">module_init</span><span class="token punctuation">(</span>virtio_net_driver_init<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">module_exit</span><span class="token punctuation">(</span>virtio_net_driver_exit<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">MODULE_DEVICE_TABLE</span><span class="token punctuation">(</span>virtio<span class="token punctuation">,</span> id_table<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span><span class="token string">&quot;Virtio network driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span><span class="token string">&quot;GPL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">virtio_driver</span> virtio_net_driver <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>driver<span class="token punctuation">.</span>name <span class="token operator">=</span>  KBUILD_MODNAME<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>driver<span class="token punctuation">.</span>owner <span class="token operator">=</span>  THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>id_table <span class="token operator">=</span>  id_table<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>validate <span class="token operator">=</span>  virtnet_validate<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>probe <span class="token operator">=</span>  virtnet_probe<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>remove <span class="token operator">=</span>  virtnet_remove<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>config_changed <span class="token operator">=</span> virtnet_config_changed<span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 virtio_net 的驱动程序的初始化代码中，我们需要注册一个驱动函数 virtio_net_driver。</p><p>当一个设备驱动作为一个内核模块被初始化的时候，probe 函数会被调用，因而我们来看一下 virtnet_probe。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">virtnet_probe</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtio_device</span> <span class="token operator">*</span>vdev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> err<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtnet_info</span> <span class="token operator">*</span>vi<span class="token punctuation">;</span>
  u16 max_queue_pairs<span class="token punctuation">;</span>
  <span class="token keyword">int</span> mtu<span class="token punctuation">;</span>

  <span class="token comment">/* Allocate ourselves a network device with room for our info */</span>
  dev <span class="token operator">=</span> <span class="token function">alloc_etherdev_mq</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtnet_info</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_queue_pairs<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Set up network device as normal. */</span>
  dev<span class="token operator">-&gt;</span>priv_flags <span class="token operator">|=</span> IFF_UNICAST_FLT <span class="token operator">|</span> IFF_LIVE_ADDR_CHANGE<span class="token punctuation">;</span>
  dev<span class="token operator">-&gt;</span>netdev_ops <span class="token operator">=</span> <span class="token operator">&amp;</span>virtnet_netdev<span class="token punctuation">;</span>
  dev<span class="token operator">-&gt;</span>features <span class="token operator">=</span> NETIF_F_HIGHDMA<span class="token punctuation">;</span>

  dev<span class="token operator">-&gt;</span>ethtool_ops <span class="token operator">=</span> <span class="token operator">&amp;</span>virtnet_ethtool_ops<span class="token punctuation">;</span>
  <span class="token function">SET_NETDEV_DEV</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vdev<span class="token operator">-&gt;</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/* MTU range: 68 - 65535 */</span>
  dev<span class="token operator">-&gt;</span>min_mtu <span class="token operator">=</span> MIN_MTU<span class="token punctuation">;</span>
  dev<span class="token operator">-&gt;</span>max_mtu <span class="token operator">=</span> MAX_MTU<span class="token punctuation">;</span>

  <span class="token comment">/* Set up our device-specific information */</span>
  vi <span class="token operator">=</span> <span class="token function">netdev_priv</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vi<span class="token operator">-&gt;</span>dev <span class="token operator">=</span> dev<span class="token punctuation">;</span>
  vi<span class="token operator">-&gt;</span>vdev <span class="token operator">=</span> vdev<span class="token punctuation">;</span>
  vdev<span class="token operator">-&gt;</span>priv <span class="token operator">=</span> vi<span class="token punctuation">;</span>
  vi<span class="token operator">-&gt;</span>stats <span class="token operator">=</span> <span class="token function">alloc_percpu</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtnet_stats</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">INIT_WORK</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vi<span class="token operator">-&gt;</span>config_work<span class="token punctuation">,</span> virtnet_config_changed_work<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  vi<span class="token operator">-&gt;</span>max_queue_pairs <span class="token operator">=</span> max_queue_pairs<span class="token punctuation">;</span>

  <span class="token comment">/* Allocate/initialize the rx/tx queues, and invoke find_vqs */</span>
  err <span class="token operator">=</span> <span class="token function">init_vqs</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">netif_set_real_num_tx_queues</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> vi<span class="token operator">-&gt;</span>curr_queue_pairs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">netif_set_real_num_rx_queues</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> vi<span class="token operator">-&gt;</span>curr_queue_pairs<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">virtnet_init_settings</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>

  err <span class="token operator">=</span> <span class="token function">register_netdev</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">virtio_device_ready</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">virtnet_set_queues</span><span class="token punctuation">(</span>vi<span class="token punctuation">,</span> vi<span class="token operator">-&gt;</span>curr_queue_pairs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 virtnet_probe 中，会创建 struct net_device，并且通过 register_netdev 注册这个网络设备，这样在客户机里面，就能看到这个网卡了。</p><p>在 virtnet_probe 中，还有一件重要的事情就是，init_vqs 会初始化发送和接收的 virtqueue。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">init_vqs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtnet_info</span> <span class="token operator">*</span>vi<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> ret<span class="token punctuation">;</span>

  <span class="token comment">/* Allocate send &amp; receive queues */</span>
  ret <span class="token operator">=</span> <span class="token function">virtnet_alloc_queues</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ret <span class="token operator">=</span> <span class="token function">virtnet_find_vqs</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token function">get_online_cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">virtnet_set_affinity</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">put_online_cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">virtnet_alloc_queues</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtnet_info</span> <span class="token operator">*</span>vi<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>

  vi<span class="token operator">-&gt;</span>sq <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>vi<span class="token operator">-&gt;</span>sq<span class="token punctuation">)</span> <span class="token operator">*</span> vi<span class="token operator">-&gt;</span>max_queue_pairs<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  vi<span class="token operator">-&gt;</span>rq <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>vi<span class="token operator">-&gt;</span>rq<span class="token punctuation">)</span> <span class="token operator">*</span> vi<span class="token operator">-&gt;</span>max_queue_pairs<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">INIT_DELAYED_WORK</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vi<span class="token operator">-&gt;</span>refill<span class="token punctuation">,</span> refill_work<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vi<span class="token operator">-&gt;</span>max_queue_pairs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vi<span class="token operator">-&gt;</span>rq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pages <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">netif_napi_add</span><span class="token punctuation">(</span>vi<span class="token operator">-&gt;</span>dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vi<span class="token operator">-&gt;</span>rq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>napi<span class="token punctuation">,</span> virtnet_poll<span class="token punctuation">,</span>
             napi_weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">netif_tx_napi_add</span><span class="token punctuation">(</span>vi<span class="token operator">-&gt;</span>dev<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vi<span class="token operator">-&gt;</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>napi<span class="token punctuation">,</span> virtnet_poll_tx<span class="token punctuation">,</span>
          napi_tx <span class="token operator">?</span> napi_weight <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">sg_init_table</span><span class="token punctuation">(</span>vi<span class="token operator">-&gt;</span>rq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sg<span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>vi<span class="token operator">-&gt;</span>rq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ewma_pkt_len_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vi<span class="token operator">-&gt;</span>rq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mrg_avg_pkt_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sg_init_table</span><span class="token punctuation">(</span>vi<span class="token operator">-&gt;</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sg<span class="token punctuation">,</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>vi<span class="token operator">-&gt;</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按照上一节的 virtio 原理，virtqueue 是一个介于客户机前端和 qemu 后端的一个结构，用于在这两端之间传递数据，对于网络设备来讲有发送和接收两个方向的队列。这里建立的 struct virtqueue 是客户机前端对于队列的管理的数据结构。</p><p>队列的实体需要通过函数 virtnet_find_vqs 查找或者生成，这里还会指定接收队列的 callback 函数为 skb_recv_done，发送队列的 callback 函数为 skb_xmit_done。那当 buffer 使用发生变化的时候，我们可以调用这个 callback 函数进行通知。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">virtnet_find_vqs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtnet_info</span> <span class="token operator">*</span>vi<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token class-name">vq_callback_t</span> <span class="token operator">*</span><span class="token operator">*</span>callbacks<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span><span class="token operator">*</span>vqs<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> total_vqs<span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>names<span class="token punctuation">;</span>

  <span class="token comment">/* Allocate space for find_vqs parameters */</span>
  vqs <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span>total_vqs <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>vqs<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  callbacks <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>total_vqs <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>callbacks<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  names <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>total_vqs <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>names<span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* Allocate/initialize parameters for send/receive virtqueues */</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vi<span class="token operator">-&gt;</span>max_queue_pairs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    callbacks<span class="token punctuation">[</span><span class="token function">rxq2vq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> skb_recv_done<span class="token punctuation">;</span>
    callbacks<span class="token punctuation">[</span><span class="token function">txq2vq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> skb_xmit_done<span class="token punctuation">;</span>
    names<span class="token punctuation">[</span><span class="token function">rxq2vq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> vi<span class="token operator">-&gt;</span>rq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    names<span class="token punctuation">[</span><span class="token function">txq2vq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> vi<span class="token operator">-&gt;</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  ret <span class="token operator">=</span> vi<span class="token operator">-&gt;</span>vdev<span class="token operator">-&gt;</span>config<span class="token operator">-&gt;</span><span class="token function">find_vqs</span><span class="token punctuation">(</span>vi<span class="token operator">-&gt;</span>vdev<span class="token punctuation">,</span> total_vqs<span class="token punctuation">,</span> vqs<span class="token punctuation">,</span> callbacks<span class="token punctuation">,</span> names<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vi<span class="token operator">-&gt;</span>max_queue_pairs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vi<span class="token operator">-&gt;</span>rq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vq <span class="token operator">=</span> vqs<span class="token punctuation">[</span><span class="token function">rxq2vq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    vi<span class="token operator">-&gt;</span>rq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>min_buf_len <span class="token operator">=</span> <span class="token function">mergeable_min_buf_len</span><span class="token punctuation">(</span>vi<span class="token punctuation">,</span> vi<span class="token operator">-&gt;</span>rq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vq<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vi<span class="token operator">-&gt;</span>sq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vq <span class="token operator">=</span> vqs<span class="token punctuation">[</span><span class="token function">txq2vq</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 find_vqs 是在 struct virtnet_info 里的 struct virtio_device 里的 struct virtio_config_ops *config 里面定义的。</p><p>根据 virtio_config_ops 的定义，find_vqs 会调用 vp_modern_find_vqs，到这一步和块设备是一样的了。</p><p>在 vp_modern_find_vqs 中，vp_find_vqs 会调用 vp_find_vqs_intx。在 vp_find_vqs_intx 中，通过 request_irq 注册一个中断处理函数 vp_interrupt。当设备向队列中写入信息时，会产生一个中断，也就是 vq 中断。中断处理函数需要调用相应的队列的回调函数，然后根据队列的数目，依次调用 vp_setup_vq 完成 virtqueue、vring 的分配和初始化。</p><p>同样，这些数据结构会和 virtio 后端的 VirtIODevice、VirtQueue、vring 对应起来，都应该指向刚才创建的那一段内存。</p><p>客户机同样会通过调用专门给外部设备发送指令的函数 iowrite 告诉外部的 pci 设备，这些共享内存的地址。</p><p>至此前端设备驱动和后端设备驱动之间的两个收发队列就关联好了，这两个队列的格式和块设备是一样的。</p><p><strong>发送网络包过程</strong></p><p>接下来，我们来看当真的发送一个网络包的时候，会发生什么。</p><p>当网络包经过客户机的协议栈到达 virtio_net 驱动的时候，按照 net_device_ops 的定义，start_xmit 会被调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">net_device_ops</span> virtnet_netdev <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span>ndo_open            <span class="token operator">=</span> virtnet_open<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ndo_stop          <span class="token operator">=</span> virtnet_close<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ndo_start_xmit      <span class="token operator">=</span> start_xmit<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ndo_validate_addr   <span class="token operator">=</span> eth_validate_addr<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ndo_set_mac_address <span class="token operator">=</span> virtnet_set_mac_address<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ndo_set_rx_mode     <span class="token operator">=</span> virtnet_set_rx_mode<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ndo_get_stats64     <span class="token operator">=</span> virtnet_stats<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ndo_vlan_rx_add_vid <span class="token operator">=</span> virtnet_vlan_rx_add_vid<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ndo_vlan_rx_kill_vid <span class="token operator">=</span> virtnet_vlan_rx_kill_vid<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ndo_xdp    <span class="token operator">=</span> virtnet_xdp<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>ndo_features_check  <span class="token operator">=</span> passthru_features_check<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来的调用链为：start_xmit-&gt;xmit_skb-&gt; virtqueue_add_outbuf-&gt;virtqueue_add，将网络包放入队列中，并调用 virtqueue_notify 通知接收方。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">netdev_tx_t</span> <span class="token function">start_xmit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token operator">*</span>skb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">net_device</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">virtnet_info</span> <span class="token operator">*</span>vi <span class="token operator">=</span> <span class="token function">netdev_priv</span><span class="token punctuation">(</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> qnum <span class="token operator">=</span> <span class="token function">skb_get_queue_mapping</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">send_queue</span> <span class="token operator">*</span>sq <span class="token operator">=</span> <span class="token operator">&amp;</span>vi<span class="token operator">-&gt;</span>sq<span class="token punctuation">[</span>qnum<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> err<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">netdev_queue</span> <span class="token operator">*</span>txq <span class="token operator">=</span> <span class="token function">netdev_get_tx_queue</span><span class="token punctuation">(</span>dev<span class="token punctuation">,</span> qnum<span class="token punctuation">)</span><span class="token punctuation">;</span>
  bool kick <span class="token operator">=</span> <span class="token operator">!</span>skb<span class="token operator">-&gt;</span>xmit_more<span class="token punctuation">;</span>
  bool use_napi <span class="token operator">=</span> sq<span class="token operator">-&gt;</span>napi<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">/* Try to transmit */</span>
  err <span class="token operator">=</span> <span class="token function">xmit_skb</span><span class="token punctuation">(</span>sq<span class="token punctuation">,</span> skb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>kick <span class="token operator">||</span> <span class="token function">netif_xmit_stopped</span><span class="token punctuation">(</span>txq<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">virtqueue_kick</span><span class="token punctuation">(</span>sq<span class="token operator">-&gt;</span>vq<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> NETDEV_TX_OK<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bool <span class="token function">virtqueue_kick</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">virtqueue</span> <span class="token operator">*</span>vq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">virtqueue_kick_prepare</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">virtqueue_notify</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写入一个 I/O 会使得 qemu 触发 VM exit，这个逻辑我们在解析 CPU 的时候看到过。</p><p>接下来，我们那会调用 VirtQueue 的 handle_output 函数。前面我们已经设置过这个函数了，其实就是 virtio_net_handle_tx_bh。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">virtio_net_handle_tx_bh</span><span class="token punctuation">(</span>VirtIODevice <span class="token operator">*</span>vdev<span class="token punctuation">,</span> VirtQueue <span class="token operator">*</span>vq<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    VirtIONet <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token function">VIRTIO_NET</span><span class="token punctuation">(</span>vdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
    VirtIONetQueue <span class="token operator">*</span>q <span class="token operator">=</span> <span class="token operator">&amp;</span>n<span class="token operator">-&gt;</span>vqs<span class="token punctuation">[</span><span class="token function">vq2q</span><span class="token punctuation">(</span><span class="token function">virtio_get_queue_index</span><span class="token punctuation">(</span>vq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    q<span class="token operator">-&gt;</span>tx_waiting <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">virtio_queue_set_notification</span><span class="token punctuation">(</span>vq<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">qemu_bh_schedule</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>tx_bh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>virtio_net_handle_tx_bh 调用了 qemu_bh_schedule，而在 virtio_net_add_queue 中调用 qemu_bh_new，并把函数设置为 virtio_net_tx_bh。</p><p>virtio_net_tx_bh 函数调用发送函数 virtio_net_flush_tx。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">int32_t</span> <span class="token function">virtio_net_flush_tx</span><span class="token punctuation">(</span>VirtIONetQueue <span class="token operator">*</span>q<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    VirtIONet <span class="token operator">*</span>n <span class="token operator">=</span> q<span class="token operator">-&gt;</span>n<span class="token punctuation">;</span>
    VirtIODevice <span class="token operator">*</span>vdev <span class="token operator">=</span> <span class="token function">VIRTIO_DEVICE</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    VirtQueueElement <span class="token operator">*</span>elem<span class="token punctuation">;</span>
    <span class="token class-name">int32_t</span> num_packets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> queue_index <span class="token operator">=</span> <span class="token function">vq2q</span><span class="token punctuation">(</span><span class="token function">virtio_get_queue_index</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>tx_vq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ssize_t</span> ret<span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> out_num<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">iovec</span> sg<span class="token punctuation">[</span>VIRTQUEUE_MAX_SIZE<span class="token punctuation">]</span><span class="token punctuation">,</span> sg2<span class="token punctuation">[</span>VIRTQUEUE_MAX_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>out_sg<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">virtio_net_hdr_mrg_rxbuf</span> mhdr<span class="token punctuation">;</span>

        elem <span class="token operator">=</span> <span class="token function">virtqueue_pop</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>tx_vq<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VirtQueueElement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out_num <span class="token operator">=</span> elem<span class="token operator">-&gt;</span>out_num<span class="token punctuation">;</span>
        out_sg <span class="token operator">=</span> elem<span class="token operator">-&gt;</span>out_sg<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        ret <span class="token operator">=</span> <span class="token function">qemu_sendv_packet_async</span><span class="token punctuation">(</span><span class="token function">qemu_get_subqueue</span><span class="token punctuation">(</span>n<span class="token operator">-&gt;</span>nic<span class="token punctuation">,</span> queue_index<span class="token punctuation">)</span><span class="token punctuation">,</span>out_sg<span class="token punctuation">,</span> out_num<span class="token punctuation">,</span> virtio_net_tx_complete<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> num_packets<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>virtio_net_flush_tx 会调用 virtqueue_pop。这里面，我们能看到对于 vring 的操作，也即从这里面将客户机里面写入的数据读取出来。</p><p>然后，我们调用 qemu_sendv_packet_async 发送网络包。接下来的调用链为：qemu_sendv_packet_async-&gt;qemu_net_queue_send_iov-&gt;qemu_net_queue_flush-&gt;qemu_net_queue_deliver。</p><p>在 qemu_net_queue_deliver 中，我们会调用 NetQueue 的 deliver 函数。前面 qemu_new_net_queue 会把 deliver 函数设置为 qemu_deliver_packet_iov。它会调用 nc-&gt;info-&gt;receive_iov。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> NetClientInfo net_tap_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>type <span class="token operator">=</span> NET_CLIENT_DRIVER_TAP<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TAPState<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>receive <span class="token operator">=</span> tap_receive<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>receive_raw <span class="token operator">=</span> tap_receive_raw<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>receive_iov <span class="token operator">=</span> tap_receive_iov<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>poll <span class="token operator">=</span> tap_poll<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>cleanup <span class="token operator">=</span> tap_cleanup<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>has_ufo <span class="token operator">=</span> tap_has_ufo<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>has_vnet_hdr <span class="token operator">=</span> tap_has_vnet_hdr<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>has_vnet_hdr_len <span class="token operator">=</span> tap_has_vnet_hdr_len<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>using_vnet_hdr <span class="token operator">=</span> tap_using_vnet_hdr<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>set_offload <span class="token operator">=</span> tap_set_offload<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>set_vnet_hdr_len <span class="token operator">=</span> tap_set_vnet_hdr_len<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>set_vnet_le <span class="token operator">=</span> tap_set_vnet_le<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>set_vnet_be <span class="token operator">=</span> tap_set_vnet_be<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 net_tap_info 的定义调用的是 tap_receive_iov。他会调用 tap_write_packet-&gt;writev 写入这个字符设备。</p><p>在内核的字符设备驱动中，tun_chr_write_iter 会被调用。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">tun_chr_write_iter</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span>iocb<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">iov_iter</span> <span class="token operator">*</span>from<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file <span class="token operator">=</span> iocb<span class="token operator">-&gt;</span>ki_filp<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_struct</span> <span class="token operator">*</span>tun <span class="token operator">=</span> <span class="token function">tun_get</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">tun_file</span> <span class="token operator">*</span>tfile <span class="token operator">=</span> file<span class="token operator">-&gt;</span>private_data<span class="token punctuation">;</span>
  <span class="token class-name">ssize_t</span> result<span class="token punctuation">;</span>

  result <span class="token operator">=</span> <span class="token function">tun_get_user</span><span class="token punctuation">(</span>tun<span class="token punctuation">,</span> tfile<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span>
            file<span class="token operator">-&gt;</span>f_flags <span class="token operator">&amp;</span> O_NONBLOCK<span class="token punctuation">,</span> false<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">tun_put</span><span class="token punctuation">(</span>tun<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用 writev() 系统调用向 tun/tap 设备的字符设备文件写入数据时，tun_chr_write 函数将被调用。它会使用 tun_get_user，从用户区接收数据，将数据存入 skb 中，然后调用关键的函数 netif_rx_ni(skb) ，将 skb 送给 tcp/ip 协议栈处理，最终完成虚拟网卡的数据接收。</p><p>至此，从虚拟机内部到宿主机的网络传输过程才算结束。</p><p><strong>总结时刻</strong></p><p>最后，我们把网络虚拟化场景下网络包的发送过程总结一下。</p><ul><li>在虚拟机里面的用户态，应用程序通过 write 系统调用写入 socket。</li><li>写入的内容经过 VFS 层，内核协议栈，到达虚拟机里面的内核的网络设备驱动，也即 virtio_net。</li><li>virtio_net 网络设备有一个操作结构 struct net_device_ops，里面定义了发送一个网络包调用的函数为 start_xmit。</li><li>在 virtio_net 的前端驱动和 qemu 中的后端驱动之间，有两个队列 virtqueue，一个用于发送，一个用于接收。然后，我们需要在 start_xmit 中调用 virtqueue_add，将网络包放入发送队列，然后调用 virtqueue_notify 通知 qemu。</li><li>qemu 本来处于 KVM_RUN 的状态，收到通知后，通过 VM exit 指令退出客户机模式，进入宿主机模式。发送网络包的时候，virtio_net_handle_tx_bh 函数会被调用。</li><li>接下来是一个 for 循环，我们需要在循环中调用 virtqueue_pop，从传输队列中获取要发送的数据，然后调用 qemu_sendv_packet_async 进行发送。</li><li>qemu 会调用 writev 向字符设备文件写入，进入宿主机的内核。</li><li>在宿主机内核中字符设备文件的 file_operations 里面的 write_iter 会被调用，也即会调用 tun_chr_write_iter。</li><li>在 tun_chr_write_iter 函数中，tun_get_user 将要发送的网络包从 qemu 拷贝到宿主机内核里面来，然后调用 netif_rx_ni 开始调用宿主机内核协议栈进行处理。</li><li>宿主机内核协议栈处理完毕之后，会发送给 tap 虚拟网卡，完成从虚拟机里面到宿主机的整个发送过程。</li></ul><figure><img src="`+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>课堂练习</strong></p><p>这一节我们解析的是发送过程，请你根据类似的思路，解析一下接收过程。</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p>',101),l=[i];function u(r,k){return s(),a("div",null,l)}const _=n(c,[["render",u],["__file","N55-网络虚拟化.html.vue"]]);export{_ as default};
